{
    "empty": {
        "description": "Return a new matrix of given shape and type, without initializing entries.",
        "params": [
            {
                "shapeint or tuple of int": "Shape of the empty matrix."
            },
            {
                "dtypedata-type, optional": "Desired output data-type."
            },
            {
                "order{‘C’, ‘F’}, optional": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory."
            }
        ],
        "return": "",
        "notes": "",
        "examples": ""
    },
    "zeros": {
        "description": "Return a matrix of given shape and type, filled with zeros.",
        "params": [
            {
                "shapeint or sequence of ints": "Shape of the matrix"
            },
            {
                "dtypedata-type, optional": "The desired data-type for the matrix, default is float."
            },
            {
                "order{‘C’, ‘F’}, optional": "Whether to store the result in C- or Fortran-contiguous order,\ndefault is ‘C’."
            }
        ],
        "return": "outmatrixZero matrix of given shape, dtype, and order.",
        "notes": "",
        "examples": ""
    },
    "ones": {
        "description": "Matrix of ones.",
        "params": [
            {
                "shape{sequence of ints, int}": "Shape of the matrix"
            },
            {
                "dtypedata-type, optional": "The desired data-type for the matrix, default is np.float64."
            },
            {
                "order{‘C’, ‘F’}, optional": "Whether to store matrix in C- or Fortran-contiguous order,\ndefault is ‘C’."
            }
        ],
        "return": "outmatrixMatrix of ones of given shape, dtype, and order.",
        "notes": "",
        "examples": ""
    },
    "eye": {
        "description": "Return a matrix with ones on the diagonal and zeros elsewhere.",
        "params": [
            {
                "nint": "Number of rows in the output."
            },
            {
                "Mint, optional": "Number of columns in the output, defaults ton."
            },
            {
                "kint, optional": "Index of the diagonal: 0 refers to the main diagonal,\na positive value refers to an upper diagonal,\nand a negative value to a lower diagonal."
            },
            {
                "dtypedtype, optional": "Data-type of the returned matrix."
            },
            {
                "order{‘C’, ‘F’}, optional": "Whether the output should be stored in row-major (C-style) or\ncolumn-major (Fortran-style) order in memory."
            }
        ],
        "return": "ImatrixAnxMmatrix where all elements are equal to zero,\nexcept for thek-th diagonal, whose values are equal to one.",
        "notes": "",
        "examples": ""
    },
    "identity": {
        "description": "Returns the square identity matrix of given size.",
        "params": [
            {
                "nint": "Size of the returned identity matrix."
            },
            {
                "dtypedata-type, optional": "Data-type of the output. Defaults tofloat."
            }
        ],
        "return": "outmatrixnxnmatrix with its main diagonal set to one,\nand all other elements zero.",
        "notes": "",
        "examples": ""
    },
    "repmat": {
        "description": "Repeat a 0-D to 2-D array or matrix MxN times.",
        "params": [
            {
                "aarray_like": "The array or matrix to be repeated."
            },
            {
                "m, nint": "The number of timesais repeated along the first and second axes."
            }
        ],
        "return": "outndarrayThe result of repeatinga.",
        "notes": "",
        "examples": ""
    },
    "rand": {
        "description": "Return a matrix of random values with given shape.",
        "params": [
            {
                "*argsArguments": "Shape of the output.\nIf given as N integers, each integer specifies the size of one\ndimension.\nIf given as a tuple, this tuple gives the complete shape."
            }
        ],
        "return": "outndarrayThe matrix of random values with shape given by*args.",
        "notes": "",
        "examples": ""
    },
    "randn": {
        "description": "Return a random matrix with data from the “standard normal” distribution.",
        "params": [
            {
                "*argsArguments": "Shape of the output.\nIf given as N integers, each integer specifies the size of one\ndimension. If given as a tuple, this tuple gives the complete shape."
            }
        ],
        "return": "Zmatrix of floatsA matrix of floating-point samples drawn from the standard normal\ndistribution.",
        "notes": "",
        "examples": "sigma * np.matlib.randn(...) + mu"
    }
}