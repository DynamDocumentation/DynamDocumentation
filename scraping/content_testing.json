{
    "assert_allclose": {
        "description": "Raises an AssertionError if two objects are not equal up to desired\ntolerance.",
        "params": [
            {
                "actualarray_like": "Array obtained."
            },
            {
                "desiredarray_like": "Array desired."
            },
            {
                "rtolfloat, optional": "Relative tolerance."
            },
            {
                "atolfloat, optional": "Absolute tolerance."
            },
            {
                "equal_nanbool, optional.": "If True, NaNs will compare equal."
            },
            {
                "err_msgstr, optional": "The error message to be printed in case of failure."
            },
            {
                "verbosebool, optional": "If True, the conflicting values are appended to the error message."
            },
            {
                "strictbool, optional": "If True, raise anAssertionErrorwhen either the shape or the data\ntype of the arguments does not match. The special handling of scalars\nmentioned in the Notes section is disabled.New in version 2.0.0."
            }
        ],
        "return": "",
        "notes": "",
        "examples": ""
    },
    "assert_array_almost_equal_nulp": {
        "description": "Compare two arrays relatively to their spacing.",
        "params": [
            {
                "x, yarray_like": "Input arrays."
            },
            {
                "nulpint, optional": "The maximum number of unit in the last place for tolerance (see Notes).\nDefault is 1."
            }
        ],
        "return": "None",
        "notes": "",
        "examples": "abs(x - y) <= nulp * spacing(maximum(abs(x), abs(y)))"
    },
    "assert_array_max_ulp": {
        "description": "Check that all items of arrays differ in at most N Units in the Last Place.",
        "params": [
            {
                "a, barray_like": "Input arrays to be compared."
            },
            {
                "maxulpint, optional": "The maximum number of units in the last place that elements ofaandbcan differ. Default is 1."
            },
            {
                "dtypedtype, optional": "Data-type to convertaandbto if given. Default is None."
            }
        ],
        "return": "retndarrayArray containing number of representable floating point numbers between\nitems inaandb.",
        "notes": "",
        "examples": ""
    },
    "assert_array_equal": {
        "description": "Raises an AssertionError if two array_like objects are not equal.",
        "params": [
            {
                "actualarray_like": "The actual object to check."
            },
            {
                "desiredarray_like": "The desired, expected object."
            },
            {
                "err_msgstr, optional": "The error message to be printed in case of failure."
            },
            {
                "verbosebool, optional": "If True, the conflicting values are appended to the error message."
            },
            {
                "strictbool, optional": "If True, raise an AssertionError when either the shape or the data\ntype of the array_like objects does not match. The special\nhandling for scalars mentioned in the Notes section is disabled.New in version 1.24.0."
            }
        ],
        "return": "",
        "notes": "",
        "examples": ""
    },
    "assert_array_less": {
        "description": "Raises an AssertionError if two array_like objects are not ordered by less\nthan.",
        "params": [
            {
                "xarray_like": "The smaller object to check."
            },
            {
                "yarray_like": "The larger object to compare."
            },
            {
                "err_msgstring": "The error message to be printed in case of failure."
            },
            {
                "verbosebool": "If True, the conflicting values are appended to the error message."
            },
            {
                "strictbool, optional": "If True, raise an AssertionError when either the shape or the data\ntype of the array_like objects does not match. The special\nhandling for scalars mentioned in the Notes section is disabled.New in version 2.0.0."
            }
        ],
        "return": "",
        "notes": "",
        "examples": ""
    },
    "assert_equal": {
        "description": "Raises an AssertionError if two objects are not equal.",
        "params": [
            {
                "actualarray_like": "The object to check."
            },
            {
                "desiredarray_like": "The expected object."
            },
            {
                "err_msgstr, optional": "The error message to be printed in case of failure."
            },
            {
                "verbosebool, optional": "If True, the conflicting values are appended to the error message."
            },
            {
                "strictbool, optional": "If True and either of theactualanddesiredarguments is an array,\nraise anAssertionErrorwhen either the shape or the data type of\nthe arguments does not match. If neither argument is an array, this\nparameter has no effect.New in version 2.0.0."
            }
        ],
        "return": "",
        "notes": "",
        "examples": ""
    },
    "assert_raises": {
        "description": "Fail unless an exception of class exception_class is thrown\nby callable when invoked with arguments args and keyword\narguments kwargs. If a different type of exception is\nthrown, it will not be caught, and the test case will be\ndeemed to have suffered an error, exactly as for an\nunexpected exception.",
        "params": [],
        "return": "",
        "notes": "",
        "examples": ""
    },
    "assert_raises_regex": {
        "description": "Fail unless an exception of class exception_class and with message that\nmatches expected_regexp is thrown by callable when invoked with arguments\nargs and keyword arguments kwargs.",
        "params": [],
        "return": "",
        "notes": "",
        "examples": ""
    },
    "assert_warns": {
        "description": "Fail unless the given callable throws the specified warning.",
        "params": [
            {
                "warning_classclass": "The class defining the warning thatfuncis expected to throw."
            },
            {
                "funccallable, optional": "Callable to test"
            },
            {
                "*argsArguments": "Arguments forfunc."
            },
            {
                "**kwargsKwargs": "Keyword arguments forfunc."
            }
        ],
        "return": "",
        "notes": "",
        "examples": "with assert_warns(SomeWarning):\n    do_something()"
    },
    "assert_no_warnings": {
        "description": "Fail if the given callable produces any warnings.",
        "params": [
            {
                "funccallable": "The callable to test."
            },
            {
                "*argsArguments": "Arguments passed tofunc."
            },
            {
                "**kwargsKwargs": "Keyword arguments passed tofunc."
            }
        ],
        "return": "",
        "notes": "",
        "examples": "with assert_no_warnings():\n    do_something()"
    },
    "assert_no_gc_cycles": {
        "description": "Fail if the given callable produces any reference cycles.",
        "params": [
            {
                "funccallable": "The callable to test."
            },
            {
                "*argsArguments": "Arguments passed tofunc."
            },
            {
                "**kwargsKwargs": "Keyword arguments passed tofunc."
            }
        ],
        "return": "Nothing. The result is deliberately discarded to ensure that all cyclesare found.",
        "notes": "",
        "examples": "with assert_no_gc_cycles():\n    do_something()"
    },
    "assert_string_equal": {
        "description": "Test if two strings are equal.",
        "params": [
            {
                "actualstr": "The string to test for equality against the expected string."
            },
            {
                "desiredstr": "The expected string."
            }
        ],
        "return": "",
        "notes": "",
        "examples": ""
    },
    "assert_": null,
    "assert_almost_equal": {
        "description": "Raises an AssertionError if two items are not equal up to desired\nprecision.",
        "params": [
            {
                "actualarray_like": "The object to check."
            },
            {
                "desiredarray_like": "The expected object."
            },
            {
                "decimalint, optional": "Desired precision, default is 7."
            },
            {
                "err_msgstr, optional": "The error message to be printed in case of failure."
            },
            {
                "verbosebool, optional": "If True, the conflicting values are appended to the error message."
            }
        ],
        "return": "",
        "notes": "",
        "examples": "abs(desired-actual) < float64(1.5 * 10**(-decimal))"
    },
    "assert_approx_equal": {
        "description": "Raises an AssertionError if two items are not equal up to significant\ndigits.",
        "params": [
            {
                "actualscalar": "The object to check."
            },
            {
                "desiredscalar": "The expected object."
            },
            {
                "significantint, optional": "Desired precision, default is 7."
            },
            {
                "err_msgstr, optional": "The error message to be printed in case of failure."
            },
            {
                "verbosebool, optional": "If True, the conflicting values are appended to the error message."
            }
        ],
        "return": "",
        "notes": "",
        "examples": ""
    },
    "assert_array_almost_equal": {
        "description": "Raises an AssertionError if two objects are not equal up to desired\nprecision.",
        "params": [
            {
                "actualarray_like": "The actual object to check."
            },
            {
                "desiredarray_like": "The desired, expected object."
            },
            {
                "decimalint, optional": "Desired precision, default is 6."
            },
            {
                "err_msgstr, optional": "The error message to be printed in case of failure."
            },
            {
                "verbosebool, optional": "If True, the conflicting values are appended to the error message."
            }
        ],
        "return": "",
        "notes": "",
        "examples": "abs(desired-actual) < 1.5 * 10**(-decimal)"
    },
    "print_assert_equal": {
        "description": "Test if two objects are equal, and print an error message if test fails.",
        "params": [
            {
                "test_stringstr": "The message supplied to AssertionError."
            },
            {
                "actualobject": "The object to test for equality againstdesired."
            },
            {
                "desiredobject": "The expected result."
            }
        ],
        "return": "",
        "notes": "",
        "examples": ""
    },
    "decorate_methods": {
        "description": "Apply a decorator to all methods in a class matching a regular expression.",
        "params": [
            {
                "clsclass": "Class whose methods to decorate."
            },
            {
                "decoratorfunction": "Decorator to apply to methods"
            },
            {
                "testmatchcompiled regexp or str, optional": "The regular expression. Default value is None, in which case the\nnose default (re.compile(r'(?:^|[\\b_\\.%s-])[Tt]est'%os.sep))\nis used.\nIftestmatchis a string, it is compiled to a regular expression\nfirst."
            }
        ],
        "return": "",
        "notes": "",
        "examples": ""
    },
    "clear_and_catch_warnings": {
        "description": "Context manager that resets warning registry for catching warnings",
        "params": [
            {
                "recordbool, optional": "Specifies whether warnings should be captured by a custom\nimplementation ofwarnings.showwarning()and be appended to a list\nreturned by the context manager. Otherwise None is returned by the\ncontext manager. The objects appended to the list are arguments whose\nattributes mirror the arguments toshowwarning()."
            },
            {
                "modulessequence, optional": "Sequence of modules for which to reset warnings registry on entry and\nrestore on exit. To work correctly, all ‘ignore’ filters should\nfilter by one of these modules."
            }
        ],
        "return": "",
        "notes": "",
        "examples": ""
    },
    "measure": {
        "description": "Return elapsed time for executing code in the namespace of the caller.",
        "params": [
            {
                "code_strstr": "The code to be timed."
            },
            {
                "timesint, optional": "The number of times the code is executed. Default is 1. The code is\nonly compiled once."
            },
            {
                "labelstr, optional": "A label to identifycode_strwith. This is passed intocompileas the second argument (for run-time error messages)."
            }
        ],
        "return": "elapsedfloatTotal elapsed time in seconds for executingcode_strtimestimes.",
        "notes": "",
        "examples": ""
    },
    "rundocs": {
        "description": "Run doctests found in the given file.",
        "params": [
            {
                "filenamestr": "The path to the file for which the doctests are run."
            },
            {
                "raise_on_errorbool": "Whether to raise an AssertionError when a doctest fails. Default is\nTrue."
            }
        ],
        "return": "",
        "notes": "",
        "examples": ""
    },
    "suppress_warnings": {
        "description": "Context manager and decorator doing much the same aswarnings.catch_warnings.",
        "params": [
            {
                "forwarding_rulestr, optional": "One of “always”, “once”, “module”, or “location”. Analogous to\nthe usual warnings module filter mode, it is useful to reduce\nnoise mostly on the outmost level. Unsuppressed and unrecorded\nwarnings will be forwarded based on this rule. Defaults to “always”.\n“location” is equivalent to the warnings “default”, match by exact\nlocation the warning warning originated from."
            }
        ],
        "return": "",
        "notes": "",
        "examples": "with np.testing.suppress_warnings() as sup:\n    sup.filter(DeprecationWarning, \"Some text\")\n    sup.filter(module=np.ma.core)\n    log = sup.record(FutureWarning, \"Does this occur?\")\n    command_giving_warnings()\n    # The FutureWarning was given once, the filtered warnings were\n    # ignored. All other warnings abide outside settings (may be\n    # printed/error)\n    assert_(len(log) == 1)\n    assert_(len(sup.log) == 1)  # also stored in log attribute\n\n\n\nsup = np.testing.suppress_warnings()\nsup.filter(module=np.ma.core)  # module must match exactly\n@sup\ndef some_function():\n    # do something which causes a warning in np.ma.core\n    pass"
    },
    "allows_array_function_override": {
        "description": "Determine if a Numpy function can be overridden via__array_function__",
        "params": [
            {
                "funccallable": "Function that may be overridable via__array_function__"
            }
        ],
        "return": "boolTrueiffuncis a function in the Numpy API that is\noverridable via__array_function__andFalseotherwise.",
        "notes": "",
        "examples": ""
    },
    "allows_array_ufunc_override": {
        "description": "Determine if a function can be overridden via__array_ufunc__",
        "params": [
            {
                "funccallable": "Function that may be overridable via__array_ufunc__"
            }
        ],
        "return": "boolTrueiffuncis overridable via__array_ufunc__andFalseotherwise.",
        "notes": "",
        "examples": ""
    },
    "get_overridable_numpy_ufuncs": {
        "description": "List all numpy ufuncs overridable via__array_ufunc__",
        "params": [
            {
                "None": ""
            }
        ],
        "return": "setA set containing all overridable ufuncs in the public numpy API.",
        "notes": "",
        "examples": ""
    },
    "get_overridable_numpy_array_functions": {
        "description": "List all numpy functions overridable via__array_function__",
        "params": [
            {
                "None": ""
            }
        ],
        "return": "setA set containing all functions in the public numpy API that are\noverridable via__array_function__.",
        "notes": "",
        "examples": ""
    }
}