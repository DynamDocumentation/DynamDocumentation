{
    "exceptions": {
        "params": "sim",
        "notes": "não encontrado",
        "description": "General exceptions used by NumPy.  Note that some exceptions may be module\nspecific, such as linear algebra errors.",
        "atributes": "sim",
        "metodos": [
            "ComplexWarning",
            "VisibleDeprecationWarning",
            "RankWarning",
            "AxisError",
            "DTypePromotionError",
            "TooHardError"
        ]
    },
    "fft": {
        "params": "sim",
        "notes": "não encontrado",
        "description": "The SciPy modulescipy.fftis a more comprehensive superset\nofnumpy.fft, which includes only a basic set of routines.",
        "atributes": "sim",
        "metodos": [
            "fft",
            "ifft",
            "fft2",
            "ifft2",
            "fftn",
            "ifftn",
            "rfft",
            "irfft",
            "rfft2",
            "irfft2",
            "rfftn",
            "irfftn",
            "hfft",
            "ihfft",
            "fftfreq",
            "rfftfreq",
            "fftshift",
            "ifftshift"
        ]
    },
    "linalg": {
        "params": "sim",
        "notes": "The termmatrixas it is used on this page indicates a 2dnumpy.arrayobject, andnotanumpy.matrixobject. The latter is no longer\nrecommended, even for linear algebra. Seethe matrix object documentationfor\nmore information.",
        "description": "The NumPy linear algebra functions rely on BLAS and LAPACK to provide efficient\nlow level implementations of standard linear algebra algorithms. Those\nlibraries may be provided by NumPy itself using C versions of a subset of their\nreference implementations but, when possible, highly optimized libraries that\ntake advantage of specialized processor functionality are preferred. Examples\nof such libraries areOpenBLAS, MKL (TM), and ATLAS. Because those libraries\nare multithreaded and processor dependent, environmental variables and external\npackages such asthreadpoolctlmay be needed to control the number of threads\nor specify the processor architecture.\nThe SciPy library also contains alinalgsubmodule, and there is\noverlap in the functionality provided by the SciPy and NumPy submodules.  SciPy\ncontains functions not found innumpy.linalg, such as functions related to\nLU decomposition and the Schur decomposition, multiple ways of calculating the\npseudoinverse, and matrix transcendentals such as the matrix logarithm.  Some\nfunctions that exist in both have augmented functionality inscipy.linalg.\nFor example,scipy.linalg.eigcan take a second matrix argument for solving\ngeneralized eigenvalue problems.  Some functions in NumPy, however, have more\nflexible broadcasting options.  For example,numpy.linalg.solvecan handle\n“stacked” arrays, whilescipy.linalg.solveaccepts only a single square\narray as its first argument.",
        "atributes": "sim",
        "metodos": [
            "dot",
            "multi_dot",
            "vdot",
            "vecdot",
            "vecdot",
            "inner",
            "outer",
            "matmul",
            "matmul",
            "matvec",
            "vecmat",
            "tensordot",
            "tensordot",
            "einsum",
            "einsum_path",
            "matrix_power",
            "kron",
            "cross",
            "cholesky",
            "outer",
            "qr",
            "svd",
            "svdvals",
            "eig",
            "eigh",
            "eigvals",
            "eigvalsh",
            "norm",
            "matrix_norm",
            "vector_norm",
            "cond",
            "det",
            "matrix_rank",
            "slogdet",
            "trace",
            "trace",
            "solve",
            "tensorsolve",
            "lstsq",
            "inv",
            "pinv",
            "tensorinv",
            "diagonal",
            "diagonal",
            "matrix_transpose",
            "LinAlgError"
        ]
    },
    "polynomials": {
        "params": "sim",
        "notes": "não encontrado",
        "description": "A sub-package for efficiently dealing with polynomials.\nWithin the documentation for this sub-package, a “finite power series,”\ni.e., a polynomial (also referred to simply as a “series”) is represented\nby a 1-D numpy array of the polynomial’s coefficients, ordered from lowest\norder term to highest.  For example, array([1,2,3]) representsP_0+2*P_1+3*P_2, where P_n is the n-th order basis polynomial\napplicable to the specific module in question, e.g.,polynomial(which\n“wraps” the “standard” basis) orchebyshev.  For optimal performance,\nall operations on polynomials, including evaluation at an argument, are\nimplemented as operations on the coefficients.  Additional (module-specific)\ninformation can be found in the docstring for the module of interest.\nThis package providesconvenience classesfor each of six different kinds\nof polynomials:\nTheseconvenience classesprovide a consistent interface for creating,\nmanipulating, and fitting data with polynomials of different bases.\nThe convenience classes are the preferred interface for thepolynomialpackage, and are available from thenumpy.polynomialnamespace.\nThis eliminates the need to navigate to the corresponding submodules, e.g.np.polynomial.Polynomialornp.polynomial.Chebyshevinstead ofnp.polynomial.polynomial.Polynomialornp.polynomial.chebyshev.Chebyshev, respectively.\nThe classes provide a more consistent and concise interface than the\ntype-specific functions defined in the submodules for each type of polynomial.\nFor example, to fit a Chebyshev polynomial with degree1to data given\nby arraysxdataandydata, thefitclass method:\nis preferred over thechebyshev.chebfitfunction from thenp.polynomial.chebyshevmodule:\nSeeUsing the convenience classesfor more details.",
        "atributes": "sim",
        "metodos": [
            "set_default_printstyle"
        ]
    },
    "strings": {
        "params": "sim",
        "notes": "Prior to NumPy 2.0, all string functionality was innumpy.char, which\nonly operated on fixed-width strings. That module will not be getting\nupdates and will be deprecated at some point in the future.",
        "description": "Thenumpy.stringsmodule provides a set of universal functions operating\non arrays of typenumpy.str_ornumpy.bytes_.\nFor example\nThese universal functions are also used innumpy.char, which provides\nthenumpy.char.chararrayarray subclass, in order for those routines\nto get the performance benefits as well.",
        "atributes": "sim",
        "metodos": [
            "add",
            "center",
            "capitalize",
            "decode",
            "encode",
            "expandtabs",
            "ljust",
            "lower",
            "lstrip",
            "mod",
            "multiply",
            "partition",
            "replace",
            "rjust",
            "rpartition",
            "rstrip",
            "strip",
            "swapcase",
            "title",
            "translate",
            "upper",
            "zfill",
            "equal",
            "not_equal",
            "greater_equal",
            "less_equal",
            "greater",
            "less",
            "count",
            "endswith",
            "find",
            "index",
            "isalnum",
            "isalpha",
            "isdecimal",
            "isdigit",
            "islower",
            "isnumeric",
            "isspace",
            "istitle",
            "isupper",
            "rfind",
            "rindex",
            "startswith",
            "str_len"
        ]
    },
    "testing": {
        "params": "sim",
        "notes": "não encontrado",
        "description": "Common test support for all numpy test scripts.\nThis single module should provide all the common functionality for numpy\ntests in a single location, so thattest scriptscan just import it and work right away. For\nbackground, see theTesting guidelines",
        "atributes": "sim",
        "metodos": [
            "assert_allclose",
            "assert_array_almost_equal_nulp",
            "assert_array_max_ulp",
            "assert_array_equal",
            "assert_array_less",
            "assert_equal",
            "assert_raises",
            "assert_raises_regex",
            "assert_warns",
            "assert_no_warnings",
            "assert_no_gc_cycles",
            "assert_string_equal",
            "assert_",
            "assert_almost_equal",
            "assert_approx_equal",
            "assert_array_almost_equal",
            "print_assert_equal",
            "decorate_methods",
            "clear_and_catch_warnings",
            "measure",
            "rundocs",
            "suppress_warnings",
            "allows_array_function_override",
            "allows_array_ufunc_override",
            "get_overridable_numpy_ufuncs",
            "get_overridable_numpy_array_functions"
        ]
    },
    "typing": {
        "params": "sim",
        "notes": "não encontrado",
        "description": "Large parts of the NumPy API havePEP 484-style type annotations. In\naddition a number of type aliases are available to users, most prominently\nthe two below:",
        "atributes": "sim",
        "metodos": [
            "format_parser"
        ]
    },
    "ctypeslib": {
        "params": "sim",
        "notes": "não encontrado",
        "description": "não encontrado",
        "atributes": "sim",
        "metodos": []
    },
    "dtypes": {
        "params": "sim",
        "notes": "não encontrado",
        "description": "This module is home to specific dtypes related functionality and their classes.\nFor more general information about dtypes, also seenumpy.dtypeandData type objects (dtype).\nSimilar to the builtintypesmodule, this submodule defines types (classes)\nthat are not widely used directly.",
        "atributes": "sim",
        "metodos": []
    },
    "emath": {
        "params": "sim",
        "notes": "numpy.emathis a preferred alias fornumpy.lib.scimath,\navailable afternumpyis imported.",
        "description": "Wrapper functions to more user-friendly calling of certain math functions\nwhose output data-type is different than the input data-type in certain\ndomains of the input.\nFor example, for functions likelogwith branch cuts, the versions in this\nmodule provide the mathematically valid answers in the complex plane:\nSimilarly,sqrt, other base logarithms,powerand trig functions\nare correctly handled.  See their respective docstrings for specific examples.",
        "atributes": "sim",
        "metodos": [
            "arccos",
            "arcsin",
            "arctanh",
            "log",
            "log2",
            "logn",
            "log10",
            "power",
            "sqrt"
        ]
    },
    "lib": {
        "params": "sim",
        "notes": "não encontrado",
        "description": "não encontrado",
        "atributes": "sim",
        "metodos": [
            "add_docstring",
            "add_newdoc",
            "Arrayterator",
            "NumpyVersion",
            "array_utils",
            "format",
            "introspect",
            "mixins",
            "npyio",
            "scimath",
            "stride_tricks"
        ]
    },
    "rec": {
        "params": "sim",
        "notes": "não encontrado",
        "description": "Record arrays expose the fields of structured arrays as properties.\nMost commonly, ndarrays contain elements of a single type, e.g. floats,\nintegers, bools etc.  However, it is possible for elements to be combinations\nof these using structured types, such as:",
        "atributes": "sim",
        "metodos": [
            "array",
            "find_duplicate",
            "format_parser",
            "fromarrays",
            "fromfile",
            "fromrecords",
            "fromstring"
        ]
    },
    "version": {
        "params": "sim",
        "notes": "não encontrado",
        "description": "Thenumpy.versionsubmodule includes several constants that expose more\ndetailed information about the exact version of the installednumpypackage:",
        "atributes": "sim",
        "metodos": []
    },
    "char": {
        "params": "sim",
        "notes": "não encontrado",
        "description": "Thenumpy.charmodule provides a set of vectorized string\noperations for arrays of typenumpy.str_ornumpy.bytes_. For example\nThe methods in this module are based on the methods instring",
        "atributes": "sim",
        "metodos": [
            "add",
            "multiply",
            "mod",
            "capitalize",
            "center",
            "decode",
            "encode",
            "expandtabs",
            "join",
            "ljust",
            "lower",
            "lstrip",
            "partition",
            "replace",
            "rjust",
            "rpartition",
            "rsplit",
            "rstrip",
            "split",
            "splitlines",
            "strip",
            "swapcase",
            "title",
            "translate",
            "upper",
            "zfill",
            "equal",
            "not_equal",
            "greater_equal",
            "less_equal",
            "greater",
            "less",
            "compare_chararrays",
            "count",
            "endswith",
            "find",
            "index",
            "isalpha",
            "isalnum",
            "isdecimal",
            "isdigit",
            "islower",
            "isnumeric",
            "isspace",
            "istitle",
            "isupper",
            "rfind",
            "rindex",
            "startswith",
            "str_len",
            "array",
            "asarray",
            "chararray"
        ]
    },
    "distutils": {
        "params": "sim",
        "notes": "não encontrado",
        "description": "NumPy provides enhanced distutils functionality to make it easier to\nbuild and install sub-packages, auto-generate code, and extension\nmodules that use Fortran-compiled libraries. A usefulConfigurationclass is also provided innumpy.distutils.misc_utilthat can make it easier to construct\nkeyword arguments to pass to the setup function (by passing the\ndictionary obtained from the todict() method of the class). More\ninformation is available in thenumpy.distutils user guide.\nThe choice and location of linked libraries such as BLAS and LAPACK as well as\ninclude paths and other such build options can be specified in asite.cfgfile located in the NumPy root repository or a.numpy-site.cfgfile in your\nhome directory. See thesite.cfg.exampleexample file included in the NumPy\nrepository or sdist for documentation.",
        "atributes": "sim",
        "metodos": [
            "ccompiler",
            "ccompiler_opt",
            "cpu",
            "Extension",
            "exec_command",
            "set_verbosity",
            "get_info",
            "get_standard_file",
            "ccompiler",
            "ccompiler_opt",
            "cpu",
            "Extension",
            "exec_command",
            "set_verbosity",
            "get_info",
            "get_standard_file"
        ]
    },
    "ma": {
        "params": "sim",
        "notes": "não encontrado",
        "description": "não encontrado",
        "atributes": "sim",
        "metodos": [
            "MaskType",
            "masked_array",
            "array",
            "copy",
            "frombuffer",
            "fromfunction",
            "copy",
            "diagflat",
            "empty",
            "empty_like",
            "masked_all",
            "masked_all_like",
            "ones",
            "ones_like",
            "zeros",
            "zeros_like",
            "all",
            "any",
            "count",
            "count_masked",
            "getmask",
            "getmaskarray",
            "getdata",
            "nonzero",
            "shape",
            "size",
            "is_masked",
            "is_mask",
            "isMaskedArray",
            "isMA",
            "isarray",
            "isin",
            "in1d",
            "unique",
            "all",
            "any",
            "count",
            "nonzero",
            "shape",
            "size",
            "ravel",
            "reshape",
            "resize",
            "flatten",
            "ravel",
            "reshape",
            "resize",
            "swapaxes",
            "transpose",
            "swapaxes",
            "transpose",
            "atleast_1d",
            "atleast_2d",
            "atleast_3d",
            "expand_dims",
            "squeeze",
            "squeeze",
            "stack",
            "column_stack",
            "concatenate",
            "dstack",
            "hstack",
            "hsplit",
            "mr_",
            "vstack",
            "concatenate",
            "stack",
            "vstack",
            "hstack",
            "dstack",
            "column_stack",
            "append",
            "make_mask",
            "make_mask_none",
            "mask_or",
            "make_mask_descr",
            "getmask",
            "getmaskarray",
            "mask",
            "ndenumerate",
            "flatnotmasked_contiguous",
            "flatnotmasked_edges",
            "notmasked_contiguous",
            "notmasked_edges",
            "clump_masked",
            "clump_unmasked",
            "mask_cols",
            "mask_or",
            "mask_rowcols",
            "mask_rows",
            "harden_mask",
            "soften_mask",
            "harden_mask",
            "soften_mask",
            "shrink_mask",
            "unshare_mask",
            "asarray",
            "asanyarray",
            "fix_invalid",
            "masked_equal",
            "masked_greater",
            "masked_greater_equal",
            "masked_inside",
            "masked_invalid",
            "masked_less",
            "masked_less_equal",
            "masked_not_equal",
            "masked_object",
            "masked_outside",
            "masked_values",
            "masked_where",
            "compress_cols",
            "compress_rowcols",
            "compress_rows",
            "compressed",
            "filled",
            "compressed",
            "filled",
            "tofile",
            "tolist",
            "torecords",
            "tobytes",
            "common_fill_value",
            "default_fill_value",
            "maximum_fill_value",
            "minimum_fill_value",
            "set_fill_value",
            "get_fill_value",
            "set_fill_value",
            "anom",
            "anomalies",
            "average",
            "conjugate",
            "corrcoef",
            "cov",
            "cumsum",
            "cumprod",
            "mean",
            "median",
            "power",
            "prod",
            "std",
            "sum",
            "var",
            "anom",
            "cumprod",
            "cumsum",
            "mean",
            "prod",
            "std",
            "sum",
            "var",
            "argmax",
            "argmin",
            "max",
            "min",
            "ptp",
            "diff",
            "argmax",
            "argmin",
            "max",
            "min",
            "ptp",
            "argsort",
            "sort",
            "argsort",
            "sort",
            "diag",
            "dot",
            "identity",
            "inner",
            "innerproduct",
            "outer",
            "outerproduct",
            "trace",
            "transpose",
            "trace",
            "transpose",
            "vander",
            "polyfit",
            "around",
            "clip",
            "round",
            "clip",
            "round",
            "intersect1d",
            "setdiff1d",
            "setxor1d",
            "union1d",
            "allequal",
            "allclose",
            "amax",
            "amin",
            "apply_along_axis",
            "apply_over_axes",
            "arange",
            "choose",
            "compress_nd",
            "convolve",
            "correlate",
            "ediff1d",
            "flatten_mask",
            "flatten_structured_array",
            "fromflex",
            "indices",
            "left_shift",
            "ndim",
            "put",
            "putmask",
            "right_shift",
            "round_",
            "take",
            "where"
        ]
    },
    "matlib": {
        "params": "sim",
        "notes": "não encontrado",
        "description": "This module contains all functions in thenumpynamespace, with\nthe following replacement functions that returnmatricesinstead ofndarrays.\nFunctions that are also in the numpy namespace and return matrices\nReplacement functions inmatlib",
        "atributes": "sim",
        "metodos": [
            "empty",
            "zeros",
            "ones",
            "eye",
            "identity",
            "repmat",
            "rand",
            "randn"
        ]
    }
}