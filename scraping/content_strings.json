{
    "add": {
        "description": "Add arguments element-wise.",
        "params": [
            {
                "x1, x2array_like": "The arrays to be added.\nIfx1.shape!=x2.shape, they must be broadcastable to a common\nshape (which becomes the shape of the output)."
            },
            {
                "outndarray, None, or tuple of ndarray and None, optional": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs."
            },
            {
                "wherearray_like, optional": "This condition is broadcast over the input. At locations where the\ncondition is True, theoutarray will be set to the ufunc result.\nElsewhere, theoutarray will retain its original value.\nNote that if an uninitializedoutarray is created via the defaultout=None, locations within it where the condition is False will\nremain uninitialized."
            },
            {
                "**kwargs": "For other keyword-only arguments, see theufunc docs."
            }
        ],
        "return": "addndarray or scalarThe sum ofx1andx2, element-wise.\nThis is a scalar if bothx1andx2are scalars.",
        "notes": "",
        "examples": ""
    },
    "center": {
        "description": "Return a copy ofawith its elements centered in a string of\nlengthwidth.",
        "params": [
            {
                "aarray-like, withStringDType,bytes_, orstr_dtype": ""
            },
            {
                "widtharray_like, with any integer dtype": "The length of the resulting strings, unlesswidth<str_len(a)."
            },
            {
                "fillchararray-like, withStringDType,bytes_, orstr_dtype": "Optional padding character to use (default is space)."
            }
        ],
        "return": "outndarrayOutput array ofStringDType,bytes_orstr_dtype,\ndepending on input types",
        "notes": "",
        "examples": ""
    },
    "capitalize": {
        "description": "Return a copy ofawith only the first character of each element\ncapitalized.",
        "params": [
            {
                "aarray-like, withStringDType,bytes_, orstr_dtype": "Input array of strings to capitalize."
            }
        ],
        "return": "outndarrayOutput array ofStringDType,bytes_orstr_dtype,\ndepending on input types",
        "notes": "",
        "examples": ""
    },
    "decode": {
        "description": "Callsbytes.decodeelement-wise.",
        "params": [
            {
                "aarray_like, withbytes_dtype": ""
            },
            {
                "encodingstr, optional": "The name of an encoding"
            },
            {
                "errorsstr, optional": "Specifies how to handle encoding errors"
            }
        ],
        "return": "outndarray",
        "notes": "",
        "examples": ""
    },
    "encode": {
        "description": "Callsstr.encodeelement-wise.",
        "params": [
            {
                "aarray_like, withStringDTypeorstr_dtype": ""
            },
            {
                "encodingstr, optional": "The name of an encoding"
            },
            {
                "errorsstr, optional": "Specifies how to handle encoding errors"
            }
        ],
        "return": "outndarray",
        "notes": "",
        "examples": ""
    },
    "expandtabs": {
        "description": "Return a copy of each string element where all tab characters are\nreplaced by one or more spaces.",
        "params": [
            {
                "aarray-like, withStringDType,bytes_, orstr_dtype": "Input array"
            },
            {
                "tabsizeint, optional": "Replace tabs withtabsizenumber of spaces.  If not given defaults\nto 8 spaces."
            }
        ],
        "return": "outndarrayOutput array ofStringDType,bytes_orstr_dtype,\ndepending on input type",
        "notes": "",
        "examples": ""
    },
    "ljust": {
        "description": "Return an array with the elements ofaleft-justified in a\nstring of lengthwidth.",
        "params": [
            {
                "aarray-like, withStringDType,bytes_, orstr_dtype": ""
            },
            {
                "widtharray_like, with any integer dtype": "The length of the resulting strings, unlesswidth<str_len(a)."
            },
            {
                "fillchararray-like, withStringDType,bytes_, orstr_dtype": "Optional character to use for padding (default is space)."
            }
        ],
        "return": "outndarrayOutput array ofStringDType,bytes_orstr_dtype,\ndepending on input types",
        "notes": "",
        "examples": ""
    },
    "lower": {
        "description": "Return an array with the elements converted to lowercase.",
        "params": [
            {
                "aarray-like, withStringDType,bytes_, orstr_dtype": "Input array."
            }
        ],
        "return": "outndarrayOutput array ofStringDType,bytes_orstr_dtype,\ndepending on input types",
        "notes": "",
        "examples": ""
    },
    "lstrip": {
        "description": "For each element ina, return a copy with the leading characters\nremoved.",
        "params": [
            {
                "aarray-like, withStringDType,bytes_, orstr_dtype": ""
            },
            {
                "charsscalar with the same dtype asa, optional": "Thecharsargument is a string specifying the set of\ncharacters to be removed. IfNone, thecharsargument defaults to removing whitespace. Thecharsargument\nis not a prefix or suffix; rather, all combinations of its\nvalues are stripped."
            }
        ],
        "return": "outndarrayOutput array ofStringDType,bytes_orstr_dtype,\ndepending on input types",
        "notes": "",
        "examples": ""
    },
    "mod": {
        "description": "Return (a % i), that is pre-Python 2.6 string formatting\n(interpolation), element-wise for a pair of array_likes of str\nor unicode.",
        "params": [
            {
                "aarray_like, withnp.bytes_ornp.str_dtype": ""
            },
            {
                "valuesarray_like of values": "These values will be element-wise interpolated into the string."
            }
        ],
        "return": "outndarrayOutput array ofStringDType,bytes_orstr_dtype,\ndepending on input types",
        "notes": "",
        "examples": ""
    },
    "multiply": {
        "description": "Return (a * i), that is string multiple concatenation,\nelement-wise.",
        "params": [
            {
                "aarray_like, withStringDType,bytes_orstr_dtype": ""
            },
            {
                "iarray_like, with any integer dtype": ""
            }
        ],
        "return": "outndarrayOutput array ofStringDType,bytes_orstr_dtype,\ndepending on input types",
        "notes": "",
        "examples": ""
    },
    "partition": {
        "description": "Partition each element inaaroundsep.",
        "params": [
            {
                "aarray-like, withStringDType,bytes_, orstr_dtype": "Input array"
            },
            {
                "separray-like, withStringDType,bytes_, orstr_dtype": "Separator to split each string element ina."
            }
        ],
        "return": "out3-tuple:array withStringDType,bytes_orstr_dtype with the\npart before the separatorarray withStringDType,bytes_orstr_dtype with the\nseparatorarray withStringDType,bytes_orstr_dtype with the\npart after the separator",
        "notes": "",
        "examples": ""
    },
    "replace": {
        "description": "For each element ina, return a copy of the string with\noccurrences of substringoldreplaced bynew.",
        "params": [
            {
                "aarray_like, withbytes_orstr_dtype": ""
            },
            {
                "old, newarray_like, withbytes_orstr_dtype": ""
            },
            {
                "countarray_like, withint_dtype": "If the optional argumentcountis given, only the firstcountoccurrences are replaced."
            }
        ],
        "return": "outndarrayOutput array ofStringDType,bytes_orstr_dtype,\ndepending on input types",
        "notes": "",
        "examples": ""
    },
    "rjust": {
        "description": "Return an array with the elements ofaright-justified in a\nstring of lengthwidth.",
        "params": [
            {
                "aarray-like, withStringDType,bytes_, orstr_dtype": ""
            },
            {
                "widtharray_like, with any integer dtype": "The length of the resulting strings, unlesswidth<str_len(a)."
            },
            {
                "fillchararray-like, withStringDType,bytes_, orstr_dtype": "Optional padding character to use (default is space)."
            }
        ],
        "return": "outndarrayOutput array ofStringDType,bytes_orstr_dtype,\ndepending on input types",
        "notes": "",
        "examples": ""
    },
    "rpartition": {
        "description": "Partition (split) each element around the right-most separator.",
        "params": [
            {
                "aarray-like, withStringDType,bytes_, orstr_dtype": "Input array"
            },
            {
                "separray-like, withStringDType,bytes_, orstr_dtype": "Separator to split each string element ina."
            }
        ],
        "return": "out3-tuple:array withStringDType,bytes_orstr_dtype with the\npart before the separatorarray withStringDType,bytes_orstr_dtype with the\nseparatorarray withStringDType,bytes_orstr_dtype with the\npart after the separator",
        "notes": "",
        "examples": ""
    },
    "rstrip": {
        "description": "For each element ina, return a copy with the trailing characters\nremoved.",
        "params": [
            {
                "aarray-like, withStringDType,bytes_, orstr_dtype": ""
            },
            {
                "charsscalar with the same dtype asa, optional": "Thecharsargument is a string specifying the set of\ncharacters to be removed. IfNone, thecharsargument defaults to removing whitespace. Thecharsargument\nis not a prefix or suffix; rather, all combinations of its\nvalues are stripped."
            }
        ],
        "return": "outndarrayOutput array ofStringDType,bytes_orstr_dtype,\ndepending on input types",
        "notes": "",
        "examples": ""
    },
    "strip": {
        "description": "For each element ina, return a copy with the leading and\ntrailing characters removed.",
        "params": [
            {
                "aarray-like, withStringDType,bytes_, orstr_dtype": ""
            },
            {
                "charsscalar with the same dtype asa, optional": "Thecharsargument is a string specifying the set of\ncharacters to be removed. IfNone, thecharsargument defaults to removing whitespace. Thecharsargument\nis not a prefix or suffix; rather, all combinations of its\nvalues are stripped."
            }
        ],
        "return": "outndarrayOutput array ofStringDType,bytes_orstr_dtype,\ndepending on input types",
        "notes": "",
        "examples": ""
    },
    "swapcase": {
        "description": "Return element-wise a copy of the string with\nuppercase characters converted to lowercase and vice versa.",
        "params": [
            {
                "aarray-like, withStringDType,bytes_, orstr_dtype": "Input array."
            }
        ],
        "return": "outndarrayOutput array ofStringDType,bytes_orstr_dtype,\ndepending on input types",
        "notes": "",
        "examples": ""
    },
    "title": {
        "description": "Return element-wise title cased version of string or unicode.",
        "params": [
            {
                "aarray-like, withStringDType,bytes_, orstr_dtype": "Input array."
            }
        ],
        "return": "outndarrayOutput array ofStringDType,bytes_orstr_dtype,\ndepending on input types",
        "notes": "",
        "examples": ""
    },
    "translate": {
        "description": "For each element ina, return a copy of the string where all\ncharacters occurring in the optional argumentdeletecharsare\nremoved, and the remaining characters have been mapped through the\ngiven translation table.",
        "params": [
            {
                "aarray-like, withnp.bytes_ornp.str_dtype": ""
            },
            {
                "tablestr of length 256": ""
            },
            {
                "deletecharsstr": ""
            }
        ],
        "return": "outndarrayOutput array of str or unicode, depending on input type",
        "notes": "",
        "examples": ""
    },
    "upper": {
        "description": "Return an array with the elements converted to uppercase.",
        "params": [
            {
                "aarray-like, withStringDType,bytes_, orstr_dtype": "Input array."
            }
        ],
        "return": "outndarrayOutput array ofStringDType,bytes_orstr_dtype,\ndepending on input types",
        "notes": "",
        "examples": ""
    },
    "zfill": {
        "description": "Return the numeric string left-filled with zeros. A leading\nsign prefix (+/-) is handled by inserting the padding\nafter the sign character rather than before.",
        "params": [
            {
                "aarray-like, withStringDType,bytes_, orstr_dtype": ""
            },
            {
                "widtharray_like, with any integer dtype": "Width of string to left-fill elements ina."
            }
        ],
        "return": "outndarrayOutput array ofStringDType,bytes_orstr_dtype,\ndepending on input type",
        "notes": "",
        "examples": ""
    },
    "equal": {
        "description": "Return (x1 == x2) element-wise.",
        "params": [
            {
                "x1, x2array_like": "Input arrays.\nIfx1.shape!=x2.shape, they must be broadcastable to a common\nshape (which becomes the shape of the output)."
            },
            {
                "outndarray, None, or tuple of ndarray and None, optional": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs."
            },
            {
                "wherearray_like, optional": "This condition is broadcast over the input. At locations where the\ncondition is True, theoutarray will be set to the ufunc result.\nElsewhere, theoutarray will retain its original value.\nNote that if an uninitializedoutarray is created via the defaultout=None, locations within it where the condition is False will\nremain uninitialized."
            },
            {
                "**kwargs": "For other keyword-only arguments, see theufunc docs."
            }
        ],
        "return": "outndarray or scalarOutput array, element-wise comparison ofx1andx2.\nTypically of type bool, unlessdtype=objectis passed.\nThis is a scalar if bothx1andx2are scalars.",
        "notes": "",
        "examples": ""
    },
    "not_equal": {
        "description": "Return (x1 != x2) element-wise.",
        "params": [
            {
                "x1, x2array_like": "Input arrays.\nIfx1.shape!=x2.shape, they must be broadcastable to a common\nshape (which becomes the shape of the output)."
            },
            {
                "outndarray, None, or tuple of ndarray and None, optional": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs."
            },
            {
                "wherearray_like, optional": "This condition is broadcast over the input. At locations where the\ncondition is True, theoutarray will be set to the ufunc result.\nElsewhere, theoutarray will retain its original value.\nNote that if an uninitializedoutarray is created via the defaultout=None, locations within it where the condition is False will\nremain uninitialized."
            },
            {
                "**kwargs": "For other keyword-only arguments, see theufunc docs."
            }
        ],
        "return": "outndarray or scalarOutput array, element-wise comparison ofx1andx2.\nTypically of type bool, unlessdtype=objectis passed.\nThis is a scalar if bothx1andx2are scalars.",
        "notes": "",
        "examples": ""
    },
    "greater_equal": {
        "description": "Return the truth value of (x1 >= x2) element-wise.",
        "params": [
            {
                "x1, x2array_like": "Input arrays.\nIfx1.shape!=x2.shape, they must be broadcastable to a common\nshape (which becomes the shape of the output)."
            },
            {
                "outndarray, None, or tuple of ndarray and None, optional": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs."
            },
            {
                "wherearray_like, optional": "This condition is broadcast over the input. At locations where the\ncondition is True, theoutarray will be set to the ufunc result.\nElsewhere, theoutarray will retain its original value.\nNote that if an uninitializedoutarray is created via the defaultout=None, locations within it where the condition is False will\nremain uninitialized."
            },
            {
                "**kwargs": "For other keyword-only arguments, see theufunc docs."
            }
        ],
        "return": "outbool or ndarray of boolOutput array, element-wise comparison ofx1andx2.\nTypically of type bool, unlessdtype=objectis passed.\nThis is a scalar if bothx1andx2are scalars.",
        "notes": "",
        "examples": ""
    },
    "less_equal": {
        "description": "Return the truth value of (x1 <= x2) element-wise.",
        "params": [
            {
                "x1, x2array_like": "Input arrays.\nIfx1.shape!=x2.shape, they must be broadcastable to a common\nshape (which becomes the shape of the output)."
            },
            {
                "outndarray, None, or tuple of ndarray and None, optional": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs."
            },
            {
                "wherearray_like, optional": "This condition is broadcast over the input. At locations where the\ncondition is True, theoutarray will be set to the ufunc result.\nElsewhere, theoutarray will retain its original value.\nNote that if an uninitializedoutarray is created via the defaultout=None, locations within it where the condition is False will\nremain uninitialized."
            },
            {
                "**kwargs": "For other keyword-only arguments, see theufunc docs."
            }
        ],
        "return": "outndarray or scalarOutput array, element-wise comparison ofx1andx2.\nTypically of type bool, unlessdtype=objectis passed.\nThis is a scalar if bothx1andx2are scalars.",
        "notes": "",
        "examples": ""
    },
    "greater": {
        "description": "Return the truth value of (x1 > x2) element-wise.",
        "params": [
            {
                "x1, x2array_like": "Input arrays.\nIfx1.shape!=x2.shape, they must be broadcastable to a common\nshape (which becomes the shape of the output)."
            },
            {
                "outndarray, None, or tuple of ndarray and None, optional": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs."
            },
            {
                "wherearray_like, optional": "This condition is broadcast over the input. At locations where the\ncondition is True, theoutarray will be set to the ufunc result.\nElsewhere, theoutarray will retain its original value.\nNote that if an uninitializedoutarray is created via the defaultout=None, locations within it where the condition is False will\nremain uninitialized."
            },
            {
                "**kwargs": "For other keyword-only arguments, see theufunc docs."
            }
        ],
        "return": "outndarray or scalarOutput array, element-wise comparison ofx1andx2.\nTypically of type bool, unlessdtype=objectis passed.\nThis is a scalar if bothx1andx2are scalars.",
        "notes": "",
        "examples": ""
    },
    "less": {
        "description": "Return the truth value of (x1 < x2) element-wise.",
        "params": [
            {
                "x1, x2array_like": "Input arrays.\nIfx1.shape!=x2.shape, they must be broadcastable to a common\nshape (which becomes the shape of the output)."
            },
            {
                "outndarray, None, or tuple of ndarray and None, optional": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs."
            },
            {
                "wherearray_like, optional": "This condition is broadcast over the input. At locations where the\ncondition is True, theoutarray will be set to the ufunc result.\nElsewhere, theoutarray will retain its original value.\nNote that if an uninitializedoutarray is created via the defaultout=None, locations within it where the condition is False will\nremain uninitialized."
            },
            {
                "**kwargs": "For other keyword-only arguments, see theufunc docs."
            }
        ],
        "return": "outndarray or scalarOutput array, element-wise comparison ofx1andx2.\nTypically of type bool, unlessdtype=objectis passed.\nThis is a scalar if bothx1andx2are scalars.",
        "notes": "",
        "examples": ""
    },
    "count": {
        "description": "Returns an array with the number of non-overlapping occurrences of\nsubstringsubin the range [start,end).",
        "params": [
            {
                "aarray-like, withStringDType,bytes_, orstr_dtype": ""
            },
            {
                "subarray-like, withStringDType,bytes_, orstr_dtype": "The substring to search for."
            },
            {
                "start, endarray_like, with any integer dtype": "The range to look in, interpreted as in slice notation."
            }
        ],
        "return": "yndarrayOutput array of ints",
        "notes": "",
        "examples": ""
    },
    "endswith": {
        "description": "Returns a boolean array which isTruewhere the string element\ninaends withsuffix, otherwiseFalse.",
        "params": [
            {
                "aarray-like, withStringDType,bytes_, orstr_dtype": ""
            },
            {
                "suffixarray-like, withStringDType,bytes_, orstr_dtype": ""
            },
            {
                "start, endarray_like, with any integer dtype": "Withstart, test beginning at that position. Withend,\nstop comparing at that position."
            }
        ],
        "return": "outndarrayOutput array of bools",
        "notes": "",
        "examples": ""
    },
    "find": {
        "description": "For each element, return the lowest index in the string where\nsubstringsubis found, such thatsubis contained in the\nrange [start,end).",
        "params": [
            {
                "aarray_like, withStringDType,bytes_orstr_dtype": ""
            },
            {
                "subarray_like, withnp.bytes_ornp.str_dtype": "The substring to search for."
            },
            {
                "start, endarray_like, with any integer dtype": "The range to look in, interpreted as in slice notation."
            }
        ],
        "return": "yndarrayOutput array of ints",
        "notes": "",
        "examples": ""
    },
    "index": {
        "description": "Likefind, but raisesValueErrorwhen the substring is not found.",
        "params": [
            {
                "aarray-like, withStringDType,bytes_, orstr_dtype": ""
            },
            {
                "subarray-like, withStringDType,bytes_, orstr_dtype": ""
            },
            {
                "start, endarray_like, with any integer dtype, optional": ""
            }
        ],
        "return": "outndarrayOutput array of ints.",
        "notes": "",
        "examples": ""
    },
    "isalnum": {
        "description": "Returns true for each element if all characters in the string are\nalphanumeric and there is at least one character, false otherwise.",
        "params": [
            {
                "xarray_like, withStringDType,bytes_orstr_dtype": ""
            },
            {
                "outndarray, None, or tuple of ndarray and None, optional": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs."
            },
            {
                "wherearray_like, optional": "This condition is broadcast over the input. At locations where the\ncondition is True, theoutarray will be set to the ufunc result.\nElsewhere, theoutarray will retain its original value.\nNote that if an uninitializedoutarray is created via the defaultout=None, locations within it where the condition is False will\nremain uninitialized."
            },
            {
                "**kwargs": "For other keyword-only arguments, see theufunc docs."
            }
        ],
        "return": "outndarrayOutput array of bool\nThis is a scalar ifxis a scalar.",
        "notes": "",
        "examples": ""
    },
    "isalpha": {
        "description": "Returns true for each element if all characters in the data\ninterpreted as a string are alphabetic and there is at least\none character, false otherwise.",
        "params": [
            {
                "xarray_like, withStringDType,bytes_, orstr_dtype": ""
            },
            {
                "outndarray, None, or tuple of ndarray and None, optional": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs."
            },
            {
                "wherearray_like, optional": "This condition is broadcast over the input. At locations where the\ncondition is True, theoutarray will be set to the ufunc result.\nElsewhere, theoutarray will retain its original value.\nNote that if an uninitializedoutarray is created via the defaultout=None, locations within it where the condition is False will\nremain uninitialized."
            },
            {
                "**kwargs": "For other keyword-only arguments, see theufunc docs."
            }
        ],
        "return": "yndarrayOutput array of bools\nThis is a scalar ifxis a scalar.",
        "notes": "",
        "examples": ""
    },
    "isdecimal": {
        "description": "For each element, return True if there are only decimal\ncharacters in the element.",
        "params": [
            {
                "xarray_like, withStringDTypeorstr_dtype": ""
            },
            {
                "outndarray, None, or tuple of ndarray and None, optional": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs."
            },
            {
                "wherearray_like, optional": "This condition is broadcast over the input. At locations where the\ncondition is True, theoutarray will be set to the ufunc result.\nElsewhere, theoutarray will retain its original value.\nNote that if an uninitializedoutarray is created via the defaultout=None, locations within it where the condition is False will\nremain uninitialized."
            },
            {
                "**kwargs": "For other keyword-only arguments, see theufunc docs."
            }
        ],
        "return": "yndarrayOutput array of bools\nThis is a scalar ifxis a scalar.",
        "notes": "",
        "examples": ""
    },
    "isdigit": {
        "description": "Returns true for each element if all characters in the string are\ndigits and there is at least one character, false otherwise.",
        "params": [
            {
                "xarray_like, withStringDType,bytes_, orstr_dtype": ""
            },
            {
                "outndarray, None, or tuple of ndarray and None, optional": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs."
            },
            {
                "wherearray_like, optional": "This condition is broadcast over the input. At locations where the\ncondition is True, theoutarray will be set to the ufunc result.\nElsewhere, theoutarray will retain its original value.\nNote that if an uninitializedoutarray is created via the defaultout=None, locations within it where the condition is False will\nremain uninitialized."
            },
            {
                "**kwargs": "For other keyword-only arguments, see theufunc docs."
            }
        ],
        "return": "yndarrayOutput array of bools\nThis is a scalar ifxis a scalar.",
        "notes": "",
        "examples": ""
    },
    "islower": {
        "description": "Returns true for each element if all cased characters in the\nstring are lowercase and there is at least one cased character,\nfalse otherwise.",
        "params": [
            {
                "xarray_like, withStringDType,bytes_orstr_dtype": ""
            },
            {
                "outndarray, None, or tuple of ndarray and None, optional": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs."
            },
            {
                "wherearray_like, optional": "This condition is broadcast over the input. At locations where the\ncondition is True, theoutarray will be set to the ufunc result.\nElsewhere, theoutarray will retain its original value.\nNote that if an uninitializedoutarray is created via the defaultout=None, locations within it where the condition is False will\nremain uninitialized."
            },
            {
                "**kwargs": "For other keyword-only arguments, see theufunc docs."
            }
        ],
        "return": "outndarrayOutput array of bools\nThis is a scalar ifxis a scalar.",
        "notes": "",
        "examples": ""
    },
    "isnumeric": {
        "description": "For each element, return True if there are only numeric\ncharacters in the element.",
        "params": [
            {
                "xarray_like, withStringDTypeorstr_dtype": ""
            },
            {
                "outndarray, None, or tuple of ndarray and None, optional": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs."
            },
            {
                "wherearray_like, optional": "This condition is broadcast over the input. At locations where the\ncondition is True, theoutarray will be set to the ufunc result.\nElsewhere, theoutarray will retain its original value.\nNote that if an uninitializedoutarray is created via the defaultout=None, locations within it where the condition is False will\nremain uninitialized."
            },
            {
                "**kwargs": "For other keyword-only arguments, see theufunc docs."
            }
        ],
        "return": "yndarrayOutput array of bools\nThis is a scalar ifxis a scalar.",
        "notes": "",
        "examples": ""
    },
    "isspace": {
        "description": "Returns true for each element if there are only whitespace\ncharacters in the string and there is at least one character,\nfalse otherwise.",
        "params": [
            {
                "xarray_like, withStringDType,bytes_, orstr_dtype": ""
            },
            {
                "outndarray, None, or tuple of ndarray and None, optional": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs."
            },
            {
                "wherearray_like, optional": "This condition is broadcast over the input. At locations where the\ncondition is True, theoutarray will be set to the ufunc result.\nElsewhere, theoutarray will retain its original value.\nNote that if an uninitializedoutarray is created via the defaultout=None, locations within it where the condition is False will\nremain uninitialized."
            },
            {
                "**kwargs": "For other keyword-only arguments, see theufunc docs."
            }
        ],
        "return": "yndarrayOutput array of bools\nThis is a scalar ifxis a scalar.",
        "notes": "",
        "examples": ""
    },
    "istitle": {
        "description": "Returns true for each element if the element is a titlecased\nstring and there is at least one character, false otherwise.",
        "params": [
            {
                "xarray_like, withStringDType,bytes_orstr_dtype": ""
            },
            {
                "outndarray, None, or tuple of ndarray and None, optional": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs."
            },
            {
                "wherearray_like, optional": "This condition is broadcast over the input. At locations where the\ncondition is True, theoutarray will be set to the ufunc result.\nElsewhere, theoutarray will retain its original value.\nNote that if an uninitializedoutarray is created via the defaultout=None, locations within it where the condition is False will\nremain uninitialized."
            },
            {
                "**kwargs": "For other keyword-only arguments, see theufunc docs."
            }
        ],
        "return": "outndarrayOutput array of bools\nThis is a scalar ifxis a scalar.",
        "notes": "",
        "examples": ""
    },
    "isupper": {
        "description": "Return true for each element if all cased characters in the\nstring are uppercase and there is at least one character, false\notherwise.",
        "params": [
            {
                "xarray_like, withStringDType,bytes_orstr_dtype": ""
            },
            {
                "outndarray, None, or tuple of ndarray and None, optional": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs."
            },
            {
                "wherearray_like, optional": "This condition is broadcast over the input. At locations where the\ncondition is True, theoutarray will be set to the ufunc result.\nElsewhere, theoutarray will retain its original value.\nNote that if an uninitializedoutarray is created via the defaultout=None, locations within it where the condition is False will\nremain uninitialized."
            },
            {
                "**kwargs": "For other keyword-only arguments, see theufunc docs."
            }
        ],
        "return": "outndarrayOutput array of bools\nThis is a scalar ifxis a scalar.",
        "notes": "",
        "examples": ""
    },
    "rfind": {
        "description": "For each element, return the highest index in the string where\nsubstringsubis found, such thatsubis contained in the\nrange [start,end).",
        "params": [
            {
                "aarray-like, withStringDType,bytes_, orstr_dtype": ""
            },
            {
                "subarray-like, withStringDType,bytes_, orstr_dtype": "The substring to search for."
            },
            {
                "start, endarray_like, with any integer dtype": "The range to look in, interpreted as in slice notation."
            }
        ],
        "return": "yndarrayOutput array of ints",
        "notes": "",
        "examples": ""
    },
    "rindex": {
        "description": "Likerfind, but raisesValueErrorwhen the substringsubis\nnot found.",
        "params": [
            {
                "aarray-like, withnp.bytes_ornp.str_dtype": ""
            },
            {
                "subarray-like, withnp.bytes_ornp.str_dtype": ""
            },
            {
                "start, endarray-like, with any integer dtype, optional": ""
            }
        ],
        "return": "outndarrayOutput array of ints.",
        "notes": "",
        "examples": ""
    },
    "startswith": {
        "description": "Returns a boolean array which isTruewhere the string element\ninastarts withprefix, otherwiseFalse.",
        "params": [
            {
                "aarray-like, withStringDType,bytes_, orstr_dtype": ""
            },
            {
                "prefixarray-like, withStringDType,bytes_, orstr_dtype": ""
            },
            {
                "start, endarray_like, with any integer dtype": "Withstart, test beginning at that position. Withend,\nstop comparing at that position."
            }
        ],
        "return": "outndarrayOutput array of bools",
        "notes": "",
        "examples": ""
    },
    "str_len": {
        "description": "Returns the length of each element. For byte strings,\nthis is the number of bytes, while, for Unicode strings,\nit is the number of Unicode code points.",
        "params": [
            {
                "xarray_like, withStringDType,bytes_, orstr_dtype": ""
            },
            {
                "outndarray, None, or tuple of ndarray and None, optional": "A location into which the result is stored. If provided, it must have\na shape that the inputs broadcast to. If not provided or None,\na freshly-allocated array is returned. A tuple (possible only as a\nkeyword argument) must have length equal to the number of outputs."
            },
            {
                "wherearray_like, optional": "This condition is broadcast over the input. At locations where the\ncondition is True, theoutarray will be set to the ufunc result.\nElsewhere, theoutarray will retain its original value.\nNote that if an uninitializedoutarray is created via the defaultout=None, locations within it where the condition is False will\nremain uninitialized."
            },
            {
                "**kwargs": "For other keyword-only arguments, see theufunc docs."
            }
        ],
        "return": "yndarrayOutput array of ints\nThis is a scalar ifxis a scalar.",
        "notes": "",
        "examples": ""
    }
}