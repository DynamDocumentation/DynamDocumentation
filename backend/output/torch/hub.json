{
  "description": "No description available",
  "functions": [
    {
      "name": "Dict",
      "signature": "Dict(*args, **kwargs)",
      "documentation": {
        "description": "A generic version of dict.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "MAP_LOCATION",
      "signature": "Union(*args, **kwargs)",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "Optional",
      "signature": "Optional(*args, **kwds)",
      "documentation": {
        "description": "Optional[X] is equivalent to Union[X, None].",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "Union",
      "signature": "Union(*args, **kwds)",
      "documentation": {
        "description": "Union type; Union[X, Y] means either X or Y.\n\nOn Python 3.10 and higher, the | operator\ncan also be used to denote unions;\nX | Y means the same thing to the type checker as Union[X, Y].\n\nTo define a union, use e.g. Union[int, str]. Details:\n- The arguments must be types and there must be at least one.\n- None as an argument is a special case and is replaced by\n  type(None).\n- Unions of unions are flattened, e.g.::\n\n    assert Union[Union[int, str], float] == Union[int, str, float]\n\n- Unions of a single argument vanish, e.g.::\n\n    assert Union[int] == int  # The constructor actually returns int\n\n- Redundant arguments are skipped, e.g.::\n\n    assert Union[int, str, int] == Union[int, str]\n\n- When comparing unions, the argument order is ignored, e.g.::\n\n    assert Union[int, str] == Union[str, int]\n\n- You cannot subclass or instantiate a union.\n- You can use Optional[X] as a shorthand for Union[X, None].",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "download_url_to_file",
      "signature": "download_url_to_file(url: str, dst: str, hash_prefix: Optional[str] = None, progress: bool = True) -> None",
      "documentation": {
        "description": "Download object at the given URL to a local path.",
        "parameters": {
          "url": {
            "type": "str",
            "description": "URL of the object to download"
          },
          "dst": {
            "type": "str",
            "description": "Full path where object will be saved, e.g. ``/tmp/temporary_file``"
          },
          "hash_prefix": {
            "type": "str, optional",
            "description": "If not None, the SHA256 downloaded file should start with ``hash_prefix``."
          },
          "Default": {
            "type": "",
            "description": "True"
          },
          "progress": {
            "type": "bool, optional",
            "description": "whether or not to display a progress bar to stderr"
          },
          "Example": {
            "type": "",
            "description": ">>> # xdoctest: +REQUIRES(env:TORCH_DOCTEST_HUB)\n>>> # xdoctest: +REQUIRES(POSIX)\n>>> torch.hub.download_url_to_file(\n...     \"https://s3.amazonaws.com/pytorch/models/resnet18-5c106cde.pth\",\n...     \"/tmp/temporary_file\",\n... )"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ">>> # xdoctest: +REQUIRES(env:TORCH_DOCTEST_HUB)\n    >>> # xdoctest: +REQUIRES(POSIX)\n    >>> torch.hub.download_url_to_file(\n    ...     \"https://s3.amazonaws.com/pytorch/models/resnet18-5c106cde.pth\",\n    ...     \"/tmp/temporary_file\",\n    ... )"
      }
    },
    {
      "name": "get_dir",
      "signature": "get_dir() -> str",
      "documentation": {
        "description": "Get the Torch Hub cache directory used for storing downloaded models & weights.\n\nIf :func:`~torch.hub.set_dir` is not called, default path is ``$TORCH_HOME/hub`` where\nenvironment variable ``$TORCH_HOME`` defaults to ``$XDG_CACHE_HOME/torch``.\n``$XDG_CACHE_HOME`` follows the X Design Group specification of the Linux\nfilesystem layout, with a default value ``~/.cache`` if the environment\nvariable is not set.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "help",
      "signature": "help(github, model, force_reload=False, skip_validation=False, trust_repo=None)",
      "documentation": {
        "description": "Show the docstring of entrypoint ``model``.",
        "parameters": {
          "github": {
            "type": "str",
            "description": "a string with format <repo_owner/repo_name[:ref]> with an optional"
          },
          "ref": {
            "type": "a tag or a branch",
            "description": ". If ``ref`` is not specified, the default branch is assumed"
          },
          "to": {
            "type": "",
            "description": "be ``main`` if it exists, and otherwise ``master``."
          },
          "Example": {
            "type": "",
            "description": ">>> # xdoctest: +REQUIRES(env:TORCH_DOCTEST_HUB)\n>>> print(torch.hub.help(\"pytorch/vision\", \"resnet18\", force_reload=True))"
          },
          "model": {
            "type": "str",
            "description": "a string of entrypoint name defined in repo's ``hubconf.py``"
          },
          "force_reload": {
            "type": "bool, optional",
            "description": "whether to discard the existing cache and force a fresh download."
          },
          "Default": {
            "type": "",
            "description": "is ``None`` and will eventually change to ``\"check\"`` in v2.0."
          },
          "skip_validation": {
            "type": "bool, optional",
            "description": "if ``False``, torchhub will check that the ref"
          },
          "specified": {
            "type": "",
            "description": "by the ``github`` argument properly belongs to the repo owner. This will make"
          },
          "requests": {
            "type": "",
            "description": "to the GitHub API; you can specify a non-default GitHub token by setting the\n``GITHUB_TOKEN`` environment variable. Default is ``False``."
          },
          "trust_repo": {
            "type": "bool, str or None",
            "description": "``\"check\"``, ``True``, ``False`` or ``None``."
          },
          "This": {
            "type": "",
            "description": "parameter was introduced in v1.12 and helps ensuring that users"
          },
          "only": {
            "type": "",
            "description": "run code from repos that they trust.\n- If ``False``, a prompt will ask the user whether the repo should"
          },
          "be": {
            "type": "",
            "description": "trusted.\n- If ``True``, the repo will be added to the trusted list and loaded"
          },
          "without": {
            "type": "",
            "description": "requiring explicit confirmation.\n- If ``\"check\"``, the repo will be checked against the list of"
          },
          "trusted": {
            "type": "",
            "description": "repos in the cache. If it is not present in that list, the"
          },
          "behaviour": {
            "type": "",
            "description": "will fall back onto the ``trust_repo=False`` option.\n- If ``None``: this will raise a warning, inviting the user to set\n``trust_repo`` to either ``False``, ``True`` or ``\"check\"``. This"
          },
          "is": {
            "type": "",
            "description": "only present for backward compatibility and will be removed in"
          },
          "v2": {
            "type": "",
            "description": ".0."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ">>> # xdoctest: +REQUIRES(env:TORCH_DOCTEST_HUB)\n    >>> print(torch.hub.help(\"pytorch/vision\", \"resnet18\", force_reload=True))"
      }
    },
    {
      "name": "list",
      "signature": "list(github, force_reload=False, skip_validation=False, trust_repo=None, verbose=True)",
      "documentation": {
        "description": "List all callable entrypoints available in the repo specified by ``github``.",
        "parameters": {
          "github": {
            "type": "str",
            "description": "a string with format \"repo_owner/repo_name[:ref]\" with an optional"
          },
          "ref": {
            "type": "tag or branch",
            "description": ". If ``ref`` is not specified, the default branch is assumed to be ``main`` if"
          },
          "it": {
            "type": "",
            "description": "exists, and otherwise ``master``."
          },
          "Example": {
            "type": "",
            "description": "'pytorch/vision:0.10'"
          },
          "force_reload": {
            "type": "bool, optional",
            "description": "whether to discard the existing cache and force a fresh download."
          },
          "Default": {
            "type": "",
            "description": "is ``None`` and will eventually change to ``\"check\"`` in v2.0."
          },
          "skip_validation": {
            "type": "bool, optional",
            "description": "if ``False``, torchhub will check that the branch or commit"
          },
          "specified": {
            "type": "",
            "description": "by the ``github`` argument properly belongs to the repo owner. This will make"
          },
          "requests": {
            "type": "",
            "description": "to the GitHub API; you can specify a non-default GitHub token by setting the\n``GITHUB_TOKEN`` environment variable. Default is ``False``."
          },
          "trust_repo": {
            "type": "bool, str or None",
            "description": "``\"check\"``, ``True``, ``False`` or ``None``."
          },
          "This": {
            "type": "",
            "description": "parameter was introduced in v1.12 and helps ensuring that users"
          },
          "only": {
            "type": "",
            "description": "run code from repos that they trust.\n- If ``False``, a prompt will ask the user whether the repo should"
          },
          "be": {
            "type": "",
            "description": "trusted.\n- If ``True``, the repo will be added to the trusted list and loaded"
          },
          "without": {
            "type": "",
            "description": "requiring explicit confirmation.\n- If ``\"check\"``, the repo will be checked against the list of"
          },
          "trusted": {
            "type": "",
            "description": "repos in the cache. If it is not present in that list, the"
          },
          "behaviour": {
            "type": "",
            "description": "will fall back onto the ``trust_repo=False`` option.\n- If ``None``: this will raise a warning, inviting the user to set\n``trust_repo`` to either ``False``, ``True`` or ``\"check\"``. This"
          },
          "is": {
            "type": "",
            "description": "only present for backward compatibility and will be removed in"
          },
          "v2": {
            "type": "",
            "description": ".0."
          },
          "verbose": {
            "type": "bool, optional",
            "description": "If ``False``, mute messages about hitting"
          },
          "local": {
            "type": "",
            "description": "caches. Note that the message about first download cannot be"
          },
          "muted": {
            "type": "",
            "description": ". Default is ``True``."
          }
        },
        "returns": "list: The available callables entrypoint\n\nExample:\n    >>> # xdoctest: +REQUIRES(env:TORCH_DOCTEST_HUB)\n    >>> entrypoints = torch.hub.list(\"pytorch/vision\", force_reload=True)",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ">>> # xdoctest: +REQUIRES(env:TORCH_DOCTEST_HUB)\n    >>> entrypoints = torch.hub.list(\"pytorch/vision\", force_reload=True)"
      }
    },
    {
      "name": "load",
      "signature": "load(repo_or_dir, model, *args, source='github', trust_repo=None, force_reload=False, verbose=True, skip_validation=False, **kwargs)",
      "documentation": {
        "description": "Load a model from a github repo or a local directory.",
        "parameters": {
          "repo_or_dir": {
            "type": "str",
            "description": "If ``source`` is 'github',"
          },
          "this": {
            "type": "",
            "description": "should correspond to a github repo with format ``repo_owner/repo_name[:ref]`` with"
          },
          "an": {
            "type": "",
            "description": "optional ref (tag or branch), for example 'pytorch/vision:0.10'. If ``ref`` is not specified,"
          },
          "the": {
            "type": "",
            "description": "github repo unconditionally. Does not have any effect if\n``source = 'local'``. Default is ``False``."
          },
          "If": {
            "type": "",
            "description": "``source`` is 'local'  then it should be a path to a local directory."
          },
          "model": {
            "type": "str",
            "description": "the name of a callable (entrypoint) defined in the"
          },
          "repo": {
            "type": "",
            "description": "/dir's ``hubconf.py``.\n*args (optional): the corresponding args for callable ``model``."
          },
          "source": {
            "type": "str, optional",
            "description": "'github' or 'local'. Specifies how\n``repo_or_dir`` is to be interpreted. Default is 'github'."
          },
          "trust_repo": {
            "type": "bool, str or None",
            "description": "``\"check\"``, ``True``, ``False`` or ``None``."
          },
          "This": {
            "type": "",
            "description": "parameter was introduced in v1.12 and helps ensuring that users"
          },
          "only": {
            "type": "",
            "description": "run code from repos that they trust.\n- If ``False``, a prompt will ask the user whether the repo should"
          },
          "be": {
            "type": "",
            "description": "trusted.\n- If ``True``, the repo will be added to the trusted list and loaded"
          },
          "without": {
            "type": "",
            "description": "requiring explicit confirmation.\n- If ``\"check\"``, the repo will be checked against the list of"
          },
          "trusted": {
            "type": "",
            "description": "repos in the cache. If it is not present in that list, the"
          },
          "behaviour": {
            "type": "",
            "description": "will fall back onto the ``trust_repo=False`` option.\n- If ``None``: this will raise a warning, inviting the user to set\n``trust_repo`` to either ``False``, ``True`` or ``\"check\"``. This"
          },
          "is": {
            "type": "",
            "description": "only present for backward compatibility and will be removed in"
          },
          "v2": {
            "type": "",
            "description": ".0."
          },
          "Default": {
            "type": "",
            "description": "is ``True``."
          },
          "force_reload": {
            "type": "bool, optional",
            "description": "whether to force a fresh download of"
          },
          "verbose": {
            "type": "bool, optional",
            "description": "If ``False``, mute messages about hitting"
          },
          "local": {
            "type": "",
            "description": "caches. Note that the message about first download cannot be"
          },
          "muted": {
            "type": "",
            "description": ". Does not have any effect if ``source = 'local'``."
          },
          "skip_validation": {
            "type": "bool, optional",
            "description": "if ``False``, torchhub will check that the branch or commit"
          },
          "specified": {
            "type": "",
            "description": "by the ``github`` argument properly belongs to the repo owner. This will make"
          },
          "requests": {
            "type": "",
            "description": "to the GitHub API; you can specify a non-default GitHub token by setting the\n``GITHUB_TOKEN`` environment variable. Default is ``False``.\n**kwargs (optional): the corresponding kwargs for callable ``model``."
          }
        },
        "returns": "The output of the ``model`` callable when called with the given\n    ``*args`` and ``**kwargs``.\n\nExample:\n    >>> # xdoctest: +REQUIRES(env:TORCH_DOCTEST_HUB)\n    >>> # from a github repo\n    >>> repo = \"pytorch/vision\"\n    >>> model = torch.hub.load(\n    ...     repo, \"resnet50\", weights=\"ResNet50_Weights.IMAGENET1K_V1\"\n    ... )\n    >>> # from a local directory\n    >>> path = \"/some/local/path/pytorch/vision\"\n    >>> # xdoctest: +SKIP\n    >>> model = torch.hub.load(path, \"resnet50\", weights=\"ResNet50_Weights.DEFAULT\")",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ">>> # xdoctest: +REQUIRES(env:TORCH_DOCTEST_HUB)\n    >>> # from a github repo\n    >>> repo = \"pytorch/vision\"\n    >>> model = torch.hub.load(\n    ...     repo, \"resnet50\", weights=\"ResNet50_Weights.IMAGENET1K_V1\"\n    ... )\n    >>> # from a local directory\n    >>> path = \"/some/local/path/pytorch/vision\"\n    >>> # xdoctest: +SKIP\n    >>> model = torch.hub.load(path, \"resnet50\", weights=\"ResNet50_Weights.DEFAULT\")"
      }
    },
    {
      "name": "load_state_dict_from_url",
      "signature": "load_state_dict_from_url(url: str, model_dir: Optional[str] = None, map_location: Union[Callable[[torch.types.Storage, str], torch.types.Storage], torch.device, str, Dict[str, str], NoneType] = None, progress: bool = True, check_hash: bool = False, file_name: Optional[str] = None, weights_only: bool = False) -> Dict[str, Any]",
      "documentation": {
        "description": "Loads the Torch serialized object at the given URL.\n\nIf downloaded file is a zip file, it will be automatically\ndecompressed.\n\nIf the object is already present in `model_dir`, it's deserialized and\nreturned.\nThe default value of ``model_dir`` is ``<hub_dir>/checkpoints`` where\n``hub_dir`` is the directory returned by :func:`~torch.hub.get_dir`.",
        "parameters": {
          "url": {
            "type": "str",
            "description": "URL of the object to download"
          },
          "model_dir": {
            "type": "str, optional",
            "description": "directory in which to save the object"
          },
          "map_location": {
            "type": "optional",
            "description": "a function or a dict specifying how to remap storage locations (see torch.load)"
          },
          "progress": {
            "type": "bool, optional",
            "description": "whether or not to display a progress bar to stderr."
          },
          "Default": {
            "type": "",
            "description": "False"
          },
          "check_hash": {
            "type": "bool, optional",
            "description": "If True, the filename part of the URL should follow the naming convention\n``filename-<sha256>.ext`` where ``<sha256>`` is the first eight or more"
          },
          "digits": {
            "type": "",
            "description": "of the SHA256 hash of the contents of the file. The hash is used to"
          },
          "ensure": {
            "type": "",
            "description": "unique names and to verify the contents of the file."
          },
          "file_name": {
            "type": "str, optional",
            "description": "name for the downloaded file. Filename from ``url`` will be used if not set."
          },
          "weights_only": {
            "type": "bool, optional",
            "description": "If True, only weights will be loaded and no complex pickled objects."
          },
          "Recommended": {
            "type": "",
            "description": "for untrusted sources. See :func:`~torch.load` for more details."
          },
          "Example": {
            "type": "",
            "description": ">>> # xdoctest: +REQUIRES(env:TORCH_DOCTEST_HUB)\n>>> state_dict = torch.hub.load_state_dict_from_url(\n...     \"https://s3.amazonaws.com/pytorch/models/resnet18-5c106cde.pth\"\n... )"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ">>> # xdoctest: +REQUIRES(env:TORCH_DOCTEST_HUB)\n    >>> state_dict = torch.hub.load_state_dict_from_url(\n    ...     \"https://s3.amazonaws.com/pytorch/models/resnet18-5c106cde.pth\"\n    ... )"
      }
    },
    {
      "name": "set_dir",
      "signature": "set_dir(d: Union[str, os.PathLike]) -> None",
      "documentation": {
        "description": "Optionally set the Torch Hub directory used to save downloaded models & weights.",
        "parameters": {
          "d": {
            "type": "str",
            "description": "path to a local folder to save downloaded models & weights."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "urlopen",
      "signature": "urlopen(url, data=None, timeout=<object object at 0x76e2ee778c50>, *, cafile=None, capath=None, cadefault=False, context=None)",
      "documentation": {
        "description": "Open the URL url, which can be either a string or a Request object.\n\n*data* must be an object specifying additional data to be sent to\nthe server, or None if no such data is needed.  See Request for\ndetails.\n\nurllib.request module uses HTTP/1.1 and includes a \"Connection:close\"\nheader in its HTTP requests.\n\nThe optional *timeout* parameter specifies a timeout in seconds for\nblocking operations like the connection attempt (if not specified, the\nglobal default timeout setting will be used). This only works for HTTP,\nHTTPS and FTP connections.\n\nIf *context* is specified, it must be a ssl.SSLContext instance describing\nthe various SSL options. See HTTPSConnection for more details.\n\nThe optional *cafile* and *capath* parameters specify a set of trusted CA\ncertificates for HTTPS requests. cafile should point to a single file\ncontaining a bundle of CA certificates, whereas capath should point to a\ndirectory of hashed certificate files. More information can be found in\nssl.SSLContext.load_verify_locations().\n\nThe *cadefault* parameter is ignored.\n\n\nThis function always returns an object which can work as a\ncontext manager and has the properties url, headers, and status.\nSee urllib.response.addinfourl for more detail on these properties.\n\nFor HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse\nobject slightly modified. In addition to the three new methods above, the\nmsg attribute contains the same information as the reason attribute ---\nthe reason phrase returned by the server --- instead of the response\nheaders as it is specified in the documentation for HTTPResponse.\n\nFor FTP, file, and data URLs and requests explicitly handled by legacy\nURLopener and FancyURLopener classes, this function returns a\nurllib.response.addinfourl object.\n\nNote that None may be returned if no handler handles the request (though\nthe default installed global OpenerDirector uses UnknownHandler to ensure\nthis never happens).\n\nIn addition, if proxy settings are detected (for example, when a *_proxy\nenvironment variable like http_proxy is set), ProxyHandler is default\ninstalled and makes sure the requests are handled through the proxy.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "urlparse",
      "signature": "urlparse(url, scheme='', allow_fragments=True)",
      "documentation": {
        "description": "Parse a URL into 6 components:\n<scheme>://<netloc>/<path>;<params>?<query>#<fragment>\n\nThe result is a named 6-tuple with fields corresponding to the\nabove. It is either a ParseResult or ParseResultBytes object,\ndepending on the type of the url parameter.\n\nThe username, password, hostname, and port sub-components of netloc\ncan also be accessed as attributes of the returned object.\n\nThe scheme argument provides the default value of the scheme\ncomponent when no scheme is found in url.\n\nIf allow_fragments is False, no attempt is made to separate the\nfragment component from the previous component, which can be either\npath or query.\n\nNote that % escapes are not expanded.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    }
  ],
  "classes": [
    {
      "name": "Any",
      "documentation": {
        "description": "Special type indicating an unconstrained type.\n\n- Any is compatible with every type.\n- Any assumed to have all methods.\n- All values assumed to be instances of Any.\n\nNote that all the above statements are true from the point of view of\nstatic type checkers. At runtime, Any should not be used with instance\nchecks.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": []
    },
    {
      "name": "HTTPError",
      "documentation": {
        "description": "Raised when HTTP error occurs, but also acts like non-error return",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "add_note",
          "signature": "add_note(...)",
          "documentation": {
            "description": "Exception.add_note(note) --\nadd a note to the exception",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "close",
          "signature": "close(self)",
          "documentation": {
            "description": "Close the temporary file, possibly deleting it.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "getcode",
          "signature": "getcode(self)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "geturl",
          "signature": "geturl(self)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "info",
          "signature": "info(self)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "with_traceback",
          "signature": "with_traceback(...)",
          "documentation": {
            "description": "Exception.with_traceback(tb) --\nset self.__traceback__ to tb and return self.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "Path",
      "documentation": {
        "description": "PurePath subclass that can make system calls.\n\nPath represents a filesystem path but unlike PurePath, also offers\nmethods to do system calls on path objects. Depending on your system,\ninstantiating a Path will return either a PosixPath or a WindowsPath\nobject. You can also instantiate a PosixPath or WindowsPath directly,\nbut cannot instantiate a WindowsPath on a POSIX system or vice versa.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "absolute",
          "signature": "absolute(self)",
          "documentation": {
            "description": "Return an absolute version of this path by prepending the current\nworking directory. No normalization or symlink resolution is performed.\n\nUse resolve() to get the canonical path to a file.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "as_posix",
          "signature": "as_posix(self)",
          "documentation": {
            "description": "Return the string representation of the path with forward (/)\nslashes.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "as_uri",
          "signature": "as_uri(self)",
          "documentation": {
            "description": "Return the path as a 'file' URI.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "chmod",
          "signature": "chmod(self, mode, *, follow_symlinks=True)",
          "documentation": {
            "description": "Change the permissions of the path, like os.chmod().",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cwd",
          "signature": "cwd()",
          "documentation": {
            "description": "Return a new path pointing to the current working directory.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "exists",
          "signature": "exists(self, *, follow_symlinks=True)",
          "documentation": {
            "description": "Whether this path exists.\n\nThis method normally follows symlinks; to check whether a symlink exists,\nadd the argument follow_symlinks=False.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "expanduser",
          "signature": "expanduser(self)",
          "documentation": {
            "description": "Return a new path with expanded ~ and ~user constructs\n(as returned by os.path.expanduser)",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "glob",
          "signature": "glob(self, pattern, *, case_sensitive=None)",
          "documentation": {
            "description": "Iterate over this subtree and yield all existing files (of any\nkind, including directories) matching the given relative pattern.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "group",
          "signature": "group(self)",
          "documentation": {
            "description": "Return the group name of the file gid.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "hardlink_to",
          "signature": "hardlink_to(self, target)",
          "documentation": {
            "description": "Make this path a hard link pointing to the same file as *target*.\n\nNote the order of arguments (self, target) is the reverse of os.link's.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "home",
          "signature": "home()",
          "documentation": {
            "description": "Return a new path pointing to the user's home directory (as\nreturned by os.path.expanduser('~')).",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_absolute",
          "signature": "is_absolute(self)",
          "documentation": {
            "description": "True if the path is absolute (has both a root and, if applicable,\na drive).",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_block_device",
          "signature": "is_block_device(self)",
          "documentation": {
            "description": "Whether this path is a block device.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_char_device",
          "signature": "is_char_device(self)",
          "documentation": {
            "description": "Whether this path is a character device.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_dir",
          "signature": "is_dir(self)",
          "documentation": {
            "description": "Whether this path is a directory.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_fifo",
          "signature": "is_fifo(self)",
          "documentation": {
            "description": "Whether this path is a FIFO.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_file",
          "signature": "is_file(self)",
          "documentation": {
            "description": "Whether this path is a regular file (also True for symlinks pointing\nto regular files).",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_junction",
          "signature": "is_junction(self)",
          "documentation": {
            "description": "Whether this path is a junction.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_mount",
          "signature": "is_mount(self)",
          "documentation": {
            "description": "Check if this path is a mount point",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_relative_to",
          "signature": "is_relative_to(self, other, /, *_deprecated)",
          "documentation": {
            "description": "Return True if the path is relative to another path or False.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_reserved",
          "signature": "is_reserved(self)",
          "documentation": {
            "description": "Return True if the path contains one of the special names reserved\nby the system, if any.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_socket",
          "signature": "is_socket(self)",
          "documentation": {
            "description": "Whether this path is a socket.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_symlink",
          "signature": "is_symlink(self)",
          "documentation": {
            "description": "Whether this path is a symbolic link.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "iterdir",
          "signature": "iterdir(self)",
          "documentation": {
            "description": "Yield path objects of the directory contents.\n\nThe children are yielded in arbitrary order, and the\nspecial entries '.' and '..' are not included.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "joinpath",
          "signature": "joinpath(self, *pathsegments)",
          "documentation": {
            "description": "Combine this path with one or several arguments, and return a\nnew path representing either a subpath (if all arguments are relative\npaths) or a totally different path (if one of the arguments is\nanchored).",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "lchmod",
          "signature": "lchmod(self, mode)",
          "documentation": {
            "description": "Like chmod(), except if the path points to a symlink, the symlink's\npermissions are changed, rather than its target's.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "lstat",
          "signature": "lstat(self)",
          "documentation": {
            "description": "Like stat(), except if the path points to a symlink, the symlink's\nstatus information is returned, rather than its target's.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "match",
          "signature": "match(self, path_pattern, *, case_sensitive=None)",
          "documentation": {
            "description": "Return True if this path matches the given pattern.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "mkdir",
          "signature": "mkdir(self, mode=511, parents=False, exist_ok=False)",
          "documentation": {
            "description": "Create a new directory at this given path.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "open",
          "signature": "open(self, mode='r', buffering=-1, encoding=None, errors=None, newline=None)",
          "documentation": {
            "description": "Open the file pointed by this path and return a file object, as\nthe built-in open() function does.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "owner",
          "signature": "owner(self)",
          "documentation": {
            "description": "Return the login name of the file owner.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "read_bytes",
          "signature": "read_bytes(self)",
          "documentation": {
            "description": "Open the file in bytes mode, read it, and close the file.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "read_text",
          "signature": "read_text(self, encoding=None, errors=None)",
          "documentation": {
            "description": "Open the file in text mode, read it, and close the file.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "readlink",
          "signature": "readlink(self)",
          "documentation": {
            "description": "Return the path to which the symbolic link points.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "relative_to",
          "signature": "relative_to(self, other, /, *_deprecated, walk_up=False)",
          "documentation": {
            "description": "Return the relative path to another path identified by the passed\narguments.  If the operation is not possible (because this is not\nrelated to the other path), raise ValueError.\n\nThe *walk_up* parameter controls whether `..` may be used to resolve\nthe path.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "rename",
          "signature": "rename(self, target)",
          "documentation": {
            "description": "Rename this path to the target path.\n\nThe target path may be absolute or relative. Relative paths are\ninterpreted relative to the current working directory, *not* the\ndirectory of the Path object.\n\nReturns the new Path instance pointing to the target path.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "replace",
          "signature": "replace(self, target)",
          "documentation": {
            "description": "Rename this path to the target path, overwriting if that path exists.\n\nThe target path may be absolute or relative. Relative paths are\ninterpreted relative to the current working directory, *not* the\ndirectory of the Path object.\n\nReturns the new Path instance pointing to the target path.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "resolve",
          "signature": "resolve(self, strict=False)",
          "documentation": {
            "description": "Make the path absolute, resolving all symlinks on the way and also\nnormalizing it.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "rglob",
          "signature": "rglob(self, pattern, *, case_sensitive=None)",
          "documentation": {
            "description": "Recursively yield all existing files (of any kind, including\ndirectories) matching the given relative pattern, anywhere in\nthis subtree.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "rmdir",
          "signature": "rmdir(self)",
          "documentation": {
            "description": "Remove this directory.  The directory must be empty.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "samefile",
          "signature": "samefile(self, other_path)",
          "documentation": {
            "description": "Return whether other_path is the same or not as this file\n(as returned by os.path.samefile()).",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "stat",
          "signature": "stat(self, *, follow_symlinks=True)",
          "documentation": {
            "description": "Return the result of the stat() system call on this path, like\nos.stat() does.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "symlink_to",
          "signature": "symlink_to(self, target, target_is_directory=False)",
          "documentation": {
            "description": "Make this path a symlink pointing to the target path.\nNote the order of arguments (link, target) is the reverse of os.symlink.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "touch",
          "signature": "touch(self, mode=438, exist_ok=True)",
          "documentation": {
            "description": "Create this file with the given access mode, if it doesn't exist.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "unlink",
          "signature": "unlink(self, missing_ok=False)",
          "documentation": {
            "description": "Remove this file or link.\nIf the path is a directory, use rmdir() instead.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "walk",
          "signature": "walk(self, top_down=True, on_error=None, follow_symlinks=False)",
          "documentation": {
            "description": "Walk the directory tree from this directory, similar to os.walk().",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "with_name",
          "signature": "with_name(self, name)",
          "documentation": {
            "description": "Return a new path with the file name changed.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "with_segments",
          "signature": "with_segments(self, *pathsegments)",
          "documentation": {
            "description": "Construct a new path object from any number of path-like objects.\nSubclasses may override this method to customize how new path objects\nare created from methods like `iterdir()`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "with_stem",
          "signature": "with_stem(self, stem)",
          "documentation": {
            "description": "Return a new path with the stem changed.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "with_suffix",
          "signature": "with_suffix(self, suffix)",
          "documentation": {
            "description": "Return a new path with the file suffix changed.  If the path\nhas no suffix, add given suffix.  If the given suffix is an empty\nstring, remove the suffix from the path.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "write_bytes",
          "signature": "write_bytes(self, data)",
          "documentation": {
            "description": "Open the file in bytes mode, write to it, and close the file.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "write_text",
          "signature": "write_text(self, data, encoding=None, errors=None, newline=None)",
          "documentation": {
            "description": "Open the file in text mode, write to it, and close the file.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "Request",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "add_header",
          "signature": "add_header(self, key, val)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "add_unredirected_header",
          "signature": "add_unredirected_header(self, key, val)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_full_url",
          "signature": "get_full_url(self)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_header",
          "signature": "get_header(self, header_name, default=None)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_method",
          "signature": "get_method(self)",
          "documentation": {
            "description": "Return a string indicating the HTTP request method.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_header",
          "signature": "has_header(self, header_name)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_proxy",
          "signature": "has_proxy(self)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "header_items",
          "signature": "header_items(self)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "remove_header",
          "signature": "remove_header(self, header_name)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_proxy",
          "signature": "set_proxy(self, host, type)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "URLError",
      "documentation": {
        "description": "Base class for I/O related errors.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "add_note",
          "signature": "add_note(...)",
          "documentation": {
            "description": "Exception.add_note(note) --\nadd a note to the exception",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "with_traceback",
          "signature": "with_traceback(...)",
          "documentation": {
            "description": "Exception.with_traceback(tb) --\nset self.__traceback__ to tb and return self.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "deprecated",
      "documentation": {
        "description": "Indicate that a class, function or overload is deprecated.\n\nWhen this decorator is applied to an object, the type checker\nwill generate a diagnostic on usage of the deprecated object.\n\nUsage:\n\n    @deprecated(\"Use B instead\")\n    class A:\n        pass\n\n    @deprecated(\"Use g instead\")\n    def f():\n        pass\n\n    @overload\n    @deprecated(\"int support is deprecated\")\n    def g(x: int) -> int: ...\n    @overload\n    def g(x: str) -> int: ...\n\nThe warning specified by *category* will be emitted at runtime\non use of deprecated objects. For functions, that happens on calls;\nfor classes, on instantiation and on creation of subclasses.\nIf the *category* is ``None``, no warning is emitted at runtime.\nThe *stacklevel* determines where the\nwarning is emitted. If it is ``1`` (the default), the warning\nis emitted at the direct caller of the deprecated object; if it\nis higher, it is emitted further up the stack.\nStatic type checker behavior is not affected by the *category*\nand *stacklevel* arguments.\n\nThe deprecation message passed to the decorator is saved in the\n``__deprecated__`` attribute on the decorated object.\nIf applied to an overload, the decorator\nmust be after the ``@overload`` decorator for the attribute to\nexist on the overload as returned by ``get_overloads()``.\n\nSee PEP 702 for details.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": []
    },
    {
      "name": "tqdm",
      "documentation": {
        "description": "Decorate an iterable object, returning an iterator which acts exactly\nlike the original iterable, but prints a dynamically updating\nprogressbar every time a value is requested.\n\nParameters\n----------\niterable  : iterable, optional\n    Iterable to decorate with a progressbar.\n    Leave blank to manually manage the updates.\ndesc  : str, optional\n    Prefix for the progressbar.\ntotal  : int or float, optional\n    The number of expected iterations. If unspecified,\n    len(iterable) is used if possible. If float(\"inf\") or as a last\n    resort, only basic progress statistics are displayed\n    (no ETA, no progressbar).\n    If `gui` is True and this parameter needs subsequent updating,\n    specify an initial arbitrary large positive number,\n    e.g. 9e9.\nleave  : bool, optional\n    If [default: True], keeps all traces of the progressbar\n    upon termination of iteration.\n    If `None`, will leave only if `position` is `0`.\nfile  : `io.TextIOWrapper` or `io.StringIO`, optional\n    Specifies where to output the progress messages\n    (default: sys.stderr). Uses `file.write(str)` and `file.flush()`\n    methods.  For encoding, see `write_bytes`.\nncols  : int, optional\n    The width of the entire output message. If specified,\n    dynamically resizes the progressbar to stay within this bound.\n    If unspecified, attempts to use environment width. The\n    fallback is a meter width of 10 and no limit for the counter and\n    statistics. If 0, will not print any meter (only stats).\nmininterval  : float, optional\n    Minimum progress display update interval [default: 0.1] seconds.\nmaxinterval  : float, optional\n    Maximum progress display update interval [default: 10] seconds.\n    Automatically adjusts `miniters` to correspond to `mininterval`\n    after long display update lag. Only works if `dynamic_miniters`\n    or monitor thread is enabled.\nminiters  : int or float, optional\n    Minimum progress display update interval, in iterations.\n    If 0 and `dynamic_miniters`, will automatically adjust to equal\n    `mininterval` (more CPU efficient, good for tight loops).\n    If > 0, will skip display of specified number of iterations.\n    Tweak this and `mininterval` to get very efficient loops.\n    If your progress is erratic with both fast and slow iterations\n    (network, skipping items, etc) you should set miniters=1.\nascii  : bool or str, optional\n    If unspecified or False, use unicode (smooth blocks) to fill\n    the meter. The fallback is to use ASCII characters \" 123456789#\".\ndisable  : bool, optional\n    Whether to disable the entire progressbar wrapper\n    [default: False]. If set to None, disable on non-TTY.\nunit  : str, optional\n    String that will be used to define the unit of each iteration\n    [default: it].\nunit_scale  : bool or int or float, optional\n    If 1 or True, the number of iterations will be reduced/scaled\n    automatically and a metric prefix following the\n    International System of Units standard will be added\n    (kilo, mega, etc.) [default: False]. If any other non-zero\n    number, will scale `total` and `n`.\ndynamic_ncols  : bool, optional\n    If set, constantly alters `ncols` and `nrows` to the\n    environment (allowing for window resizes) [default: False].\nsmoothing  : float, optional\n    Exponential moving average smoothing factor for speed estimates\n    (ignored in GUI mode). Ranges from 0 (average speed) to 1\n    (current/instantaneous speed) [default: 0.3].\nbar_format  : str, optional\n    Specify a custom bar string formatting. May impact performance.\n    [default: '{l_bar}{bar}{r_bar}'], where\n    l_bar='{desc}: {percentage:3.0f}%|' and\n    r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, '\n        '{rate_fmt}{postfix}]'\n    Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,\n        percentage, elapsed, elapsed_s, ncols, nrows, desc, unit,\n        rate, rate_fmt, rate_noinv, rate_noinv_fmt,\n        rate_inv, rate_inv_fmt, postfix, unit_divisor,\n        remaining, remaining_s, eta.\n    Note that a trailing \": \" is automatically removed after {desc}\n    if the latter is empty.\ninitial  : int or float, optional\n    The initial counter value. Useful when restarting a progress\n    bar [default: 0]. If using float, consider specifying `{n:.3f}`\n    or similar in `bar_format`, or specifying `unit_scale`.\nposition  : int, optional\n    Specify the line offset to print this bar (starting from 0)\n    Automatic if unspecified.\n    Useful to manage multiple bars at once (eg, from threads).\npostfix  : dict or *, optional\n    Specify additional stats to display at the end of the bar.\n    Calls `set_postfix(**postfix)` if possible (dict).\nunit_divisor  : float, optional\n    [default: 1000], ignored unless `unit_scale` is True.\nwrite_bytes  : bool, optional\n    Whether to write bytes. If (default: False) will write unicode.\nlock_args  : tuple, optional\n    Passed to `refresh` for intermediate output\n    (initialisation, iterating, and updating).\nnrows  : int, optional\n    The screen height. If specified, hides nested bars outside this\n    bound. If unspecified, attempts to use environment height.\n    The fallback is 20.\ncolour  : str, optional\n    Bar colour (e.g. 'green', '#00ff00').\ndelay  : float, optional\n    Don't display until [default: 0] seconds have elapsed.\ngui  : bool, optional\n    WARNING: internal parameter - do not use.\n    Use tqdm.gui.tqdm(...) instead. If set, will attempt to use\n    matplotlib animations for a graphical output [default: False].\n\nReturns\n-------\nout  : decorated iterator.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "clear",
          "signature": "clear(self, nolock=False)",
          "documentation": {
            "description": "Clear current bar display.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "close",
          "signature": "close(self)",
          "documentation": {
            "description": "Cleanup and (if leave=False) close the progressbar.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "display",
          "signature": "display(self, msg=None, pos=None)",
          "documentation": {
            "description": "Use `self.sp` to display `msg` in the specified `pos`.\n\nConsider overloading this function when inheriting to use e.g.:\n`self.some_frontend(**self.format_dict)` instead of `self.sp`.\n\nParameters\n----------\nmsg  : str, optional. What to display (default: `repr(self)`).\npos  : int, optional. Position to `moveto`\n  (default: `abs(self.pos)`).",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "external_write_mode",
          "signature": "external_write_mode(file=None, nolock=False)",
          "documentation": {
            "description": "Disable tqdm within context and refresh tqdm when exits.\nUseful when writing to standard output stream",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "format_interval",
          "signature": "format_interval(t)",
          "documentation": {
            "description": "Formats a number of seconds as a clock time, [H:]MM:SS\n\nParameters\n----------\nt  : int\n    Number of seconds.\n\nReturns\n-------\nout  : str\n    [H:]MM:SS",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "format_meter",
          "signature": "format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False, unit='it', unit_scale=False, rate=None, bar_format=None, postfix=None, unit_divisor=1000, initial=0, colour=None, **extra_kwargs)",
          "documentation": {
            "description": "Return a string-based progress bar given some parameters\n\nParameters\n----------\nn  : int or float\n    Number of finished iterations.\ntotal  : int or float\n    The expected total number of iterations. If meaningless (None),\n    only basic progress statistics are displayed (no ETA).\nelapsed  : float\n    Number of seconds passed since start.\nncols  : int, optional\n    The width of the entire output message. If specified,\n    dynamically resizes `{bar}` to stay within this bound\n    [default: None]. If `0`, will not print any bar (only stats).\n    The fallback is `{bar:10}`.\nprefix  : str, optional\n    Prefix message (included in total width) [default: ''].\n    Use as {desc} in bar_format string.\nascii  : bool, optional or str, optional\n    If not set, use unicode (smooth blocks) to fill the meter\n    [default: False]. The fallback is to use ASCII characters\n    \" 123456789#\".\nunit  : str, optional\n    The iteration unit [default: 'it'].\nunit_scale  : bool or int or float, optional\n    If 1 or True, the number of iterations will be printed with an\n    appropriate SI metric prefix (k = 10^3, M = 10^6, etc.)\n    [default: False]. If any other non-zero number, will scale\n    `total` and `n`.\nrate  : float, optional\n    Manual override for iteration rate.\n    If [default: None], uses n/elapsed.\nbar_format  : str, optional\n    Specify a custom bar string formatting. May impact performance.\n    [default: '{l_bar}{bar}{r_bar}'], where\n    l_bar='{desc}: {percentage:3.0f}%|' and\n    r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, '\n      '{rate_fmt}{postfix}]'\n    Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,\n      percentage, elapsed, elapsed_s, ncols, nrows, desc, unit,\n      rate, rate_fmt, rate_noinv, rate_noinv_fmt,\n      rate_inv, rate_inv_fmt, postfix, unit_divisor,\n      remaining, remaining_s, eta.\n    Note that a trailing \": \" is automatically removed after {desc}\n    if the latter is empty.\npostfix  : *, optional\n    Similar to `prefix`, but placed at the end\n    (e.g. for additional stats).",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "format_num",
          "signature": "format_num(n)",
          "documentation": {
            "description": "Intelligent scientific notation (.3g).\n\nParameters\n----------\nn  : int or float or Numeric\n    A Number.\n\nReturns\n-------\nout  : str\n    Formatted number.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "format_sizeof",
          "signature": "format_sizeof(num, suffix='', divisor=1000)",
          "documentation": {
            "description": "Formats a number (greater than unity) with SI Order of Magnitude\nprefixes.\n\nParameters\n----------\nnum  : float\n    Number ( >= 1) to format.\nsuffix  : str, optional\n    Post-postfix [default: ''].\ndivisor  : float, optional\n    Divisor between prefixes [default: 1000].\n\nReturns\n-------\nout  : str\n    Number with Order of Magnitude SI unit postfix.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_lock",
          "signature": "get_lock()",
          "documentation": {
            "description": "Get the global lock. Construct it if it does not exist.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "moveto",
          "signature": "moveto(self, n)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "pandas",
          "signature": "pandas(**tqdm_kwargs)",
          "documentation": {
            "description": "Registers the current `tqdm` class with\n    pandas.core.\n    ( frame.DataFrame\n    | series.Series\n    | groupby.(generic.)DataFrameGroupBy\n    | groupby.(generic.)SeriesGroupBy\n    ).progress_apply\n\nA new instance will be created every time `progress_apply` is called,\nand each instance will automatically `close()` upon completion.\n\nParameters\n----------\ntqdm_kwargs  : arguments for the tqdm instance\n\nExamples\n--------\n>>> import pandas as pd\n>>> import numpy as np\n>>> from tqdm import tqdm\n>>> from tqdm.gui import tqdm as tqdm_gui\n>>>\n>>> df = pd.DataFrame(np.random.randint(0, 100, (100000, 6)))\n>>> tqdm.pandas(ncols=50)  # can use tqdm_gui, optional kwargs, etc\n>>> # Now you can use `progress_apply` instead of `apply`\n>>> df.groupby(0).progress_apply(lambda x: x**2)\n\nReferences\n----------\n<https://stackoverflow.com/questions/18603270/        progress-indicator-during-pandas-operations-python>",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "refresh",
          "signature": "refresh(self, nolock=False, lock_args=None)",
          "documentation": {
            "description": "Force refresh the display of this bar.\n\nParameters\n----------\nnolock  : bool, optional\n    If `True`, does not lock.\n    If [default: `False`]: calls `acquire()` on internal lock.\nlock_args  : tuple, optional\n    Passed to internal lock's `acquire()`.\n    If specified, will only `display()` if `acquire()` returns `True`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "reset",
          "signature": "reset(self, total=None)",
          "documentation": {
            "description": "Resets to 0 iterations for repeated use.\n\nConsider combining with `leave=True`.\n\nParameters\n----------\ntotal  : int or float, optional. Total to use for the new bar.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_description",
          "signature": "set_description(self, desc=None, refresh=True)",
          "documentation": {
            "description": "Set/modify description of the progress bar.\n\nParameters\n----------\ndesc  : str, optional\nrefresh  : bool, optional\n    Forces refresh [default: True].",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_description_str",
          "signature": "set_description_str(self, desc=None, refresh=True)",
          "documentation": {
            "description": "Set/modify description without ': ' appended.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_lock",
          "signature": "set_lock(lock)",
          "documentation": {
            "description": "Set the global lock.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_postfix",
          "signature": "set_postfix(self, ordered_dict=None, refresh=True, **kwargs)",
          "documentation": {
            "description": "Set/modify postfix (additional stats)\nwith automatic formatting based on datatype.\n\nParameters\n----------\nordered_dict  : dict or OrderedDict, optional\nrefresh  : bool, optional\n    Forces refresh [default: True].\nkwargs  : dict, optional",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_postfix_str",
          "signature": "set_postfix_str(self, s='', refresh=True)",
          "documentation": {
            "description": "Postfix without dictionary expansion, similar to prefix handling.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "status_printer",
          "signature": "status_printer(file)",
          "documentation": {
            "description": "Manage the printing and in-place updating of a line of characters.\nNote that if the string is longer than a line, then in-place\nupdating may not work (it will print a new line at each refresh).",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "unpause",
          "signature": "unpause(self)",
          "documentation": {
            "description": "Restart tqdm timer from last print time.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "update",
          "signature": "update(self, n=1)",
          "documentation": {
            "description": "Manually update the progress bar, useful for streams\nsuch as reading files.\nE.g.:\n>>> t = tqdm(total=filesize) # Initialise\n>>> for current_buffer in stream:\n...    ...\n...    t.update(len(current_buffer))\n>>> t.close()\nThe last line is highly recommended, but possibly not necessary if\n`t.update()` will be called in such a way that `filesize` will be\nexactly reached and printed.\n\nParameters\n----------\nn  : int or float, optional\n    Increment to add to the internal counter of iterations\n    [default: 1]. If using float, consider specifying `{n:.3f}`\n    or similar in `bar_format`, or specifying `unit_scale`.\n\nReturns\n-------\nout  : bool or None\n    True if a `display()` was triggered.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "wrapattr",
          "signature": "wrapattr(stream, method, total=None, bytes=True, **tqdm_kwargs)",
          "documentation": {
            "description": "stream  : file-like object.\nmethod  : str, \"read\" or \"write\". The result of `read()` and\n    the first argument of `write()` should have a `len()`.\n\n>>> with tqdm.wrapattr(file_obj, \"read\", total=file_obj.size) as fobj:\n...     while True:\n...         chunk = fobj.read(chunk_size)\n...         if not chunk:\n...             break",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "write",
          "signature": "write(s, file=None, end='\\n', nolock=False)",
          "documentation": {
            "description": "Print a message via tqdm (without overlap with bars).",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    }
  ]
}