{
  "description": "This package enables an interface for accessing MPS (Metal Performance Shaders) backend in Python.\nMetal is Apple's API for programming metal GPU (graphics processor unit). Using MPS means that increased\nperformance can be achieved, by running work on the metal GPU(s).\nSee https://developer.apple.com/documentation/metalperformanceshaders for more details.",
  "functions": [
    {
      "name": "Union",
      "signature": "Union(*args, **kwds)",
      "documentation": {
        "description": "Union type; Union[X, Y] means either X or Y.\n\nOn Python 3.10 and higher, the | operator\ncan also be used to denote unions;\nX | Y means the same thing to the type checker as Union[X, Y].\n\nTo define a union, use e.g. Union[int, str]. Details:\n- The arguments must be types and there must be at least one.\n- None as an argument is a special case and is replaced by\n  type(None).\n- Unions of unions are flattened, e.g.::\n\n    assert Union[Union[int, str], float] == Union[int, str, float]\n\n- Unions of a single argument vanish, e.g.::\n\n    assert Union[int] == int  # The constructor actually returns int\n\n- Redundant arguments are skipped, e.g.::\n\n    assert Union[int, str, int] == Union[int, str]\n\n- When comparing unions, the argument order is ignored, e.g.::\n\n    assert Union[int, str] == Union[str, int]\n\n- You cannot subclass or instantiate a union.\n- You can use Optional[X] as a shorthand for Union[X, None].",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "current_allocated_memory",
      "signature": "current_allocated_memory() -> int",
      "documentation": {
        "description": "Returns the current GPU memory occupied by tensors in bytes.\n\n.. note::\n   The returned size does not include cached allocations in\n   memory pools of MPSAllocator.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "device_count",
      "signature": "device_count() -> int",
      "documentation": {
        "description": "Returns the number of available MPS devices.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "driver_allocated_memory",
      "signature": "driver_allocated_memory() -> int",
      "documentation": {
        "description": "Returns total GPU memory allocated by Metal driver for the process in bytes.\n\n.. note::\n   The returned size includes cached allocations in MPSAllocator pools\n   as well as allocations from MPS/MPSGraph frameworks.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "empty_cache",
      "signature": "empty_cache() -> None",
      "documentation": {
        "description": "Releases all unoccupied cached memory currently held by the caching\nallocator so that those can be used in other GPU applications.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "get_rng_state",
      "signature": "get_rng_state(device: Union[int, str, torch.device] = 'mps') -> torch.Tensor",
      "documentation": {
        "description": "Returns the random number generator state as a ByteTensor.",
        "parameters": {
          "device": {
            "type": "torch.device or int, optional",
            "description": "The device to return the RNG state of."
          },
          "Default": {
            "type": "",
            "description": "``'mps'`` (i.e., ``torch.device('mps')``, the current MPS device)."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "is_available",
      "signature": "is_available() -> bool",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "manual_seed",
      "signature": "manual_seed(seed: int) -> None",
      "documentation": {
        "description": "Sets the seed for generating random numbers.",
        "parameters": {
          "seed": {
            "type": "int",
            "description": "The desired seed."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "recommended_max_memory",
      "signature": "recommended_max_memory() -> int",
      "documentation": {
        "description": "Returns recommended max Working set size for GPU memory in bytes.\n\n.. note::\n   Recommended max working set size for Metal.\n   returned from device.recommendedMaxWorkingSetSize.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "seed",
      "signature": "seed() -> None",
      "documentation": {
        "description": "Sets the seed for generating random numbers to a random number.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "set_per_process_memory_fraction",
      "signature": "set_per_process_memory_fraction(fraction) -> None",
      "documentation": {
        "description": "Set memory fraction for limiting process's memory allocation on MPS device.\nThe allowed value equals the fraction multiplied by recommended maximum device memory\n(obtained from Metal API device.recommendedMaxWorkingSetSize).\nIf trying to allocate more than the allowed value in a process, it will raise an out of\nmemory error in allocator.",
        "parameters": {
          "fraction": {
            "type": "float",
            "description": "Range: 0~2. Allowed memory equals total_memory * fraction.\n.. note::"
          },
          "Passing": {
            "type": "",
            "description": "fraction greater than 1.0 allows limits beyond the value"
          },
          "returned": {
            "type": "",
            "description": "from device.recommendedMaxWorkingSetSize."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "set_rng_state",
      "signature": "set_rng_state(new_state: torch.Tensor, device: Union[int, str, torch.device] = 'mps') -> None",
      "documentation": {
        "description": "Sets the random number generator state.",
        "parameters": {
          "new_state": {
            "type": "torch.ByteTensor",
            "description": "The desired state"
          },
          "device": {
            "type": "torch.device or int, optional",
            "description": "The device to set the RNG state."
          },
          "Default": {
            "type": "",
            "description": "``'mps'`` (i.e., ``torch.device('mps')``, the current MPS device)."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "synchronize",
      "signature": "synchronize() -> None",
      "documentation": {
        "description": "Waits for all kernels in all streams on a MPS device to complete.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    }
  ],
  "classes": [
    {
      "name": "Event",
      "documentation": {
        "description": "Wrapper around an MPS event.\n\nMPS events are synchronization markers that can be used to monitor the\ndevice's progress, to accurately measure timing, and to synchronize MPS streams.",
        "parameters": {
          "enable_timing": {
            "type": "bool, optional",
            "description": "indicates if the event should measure time\n(default: ``False``)"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "elapsed_time",
          "signature": "elapsed_time(self, end_event)",
          "documentation": {
            "description": "Returns the time elapsed in milliseconds after the event was\nrecorded and before the end_event was recorded.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "query",
          "signature": "query(self)",
          "documentation": {
            "description": "Returns True if all work currently captured by event has completed.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "record",
          "signature": "record(self)",
          "documentation": {
            "description": "Records the event in the default stream.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "synchronize",
          "signature": "synchronize(self)",
          "documentation": {
            "description": "Waits until the completion of all work currently captured in this event.\nThis prevents the CPU thread from proceeding until the event completes.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "wait",
          "signature": "wait(self)",
          "documentation": {
            "description": "Makes all future work submitted to the default stream wait for this event.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "Tensor",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "abs",
          "signature": "abs()",
          "documentation": {
            "description": "abs() -> Tensor\n\nSee :func:`torch.abs`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "abs_",
          "signature": "abs_()",
          "documentation": {
            "description": "abs_() -> Tensor\n\nIn-place version of :meth:`~Tensor.abs`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "absolute",
          "signature": "absolute()",
          "documentation": {
            "description": "absolute() -> Tensor\n\nAlias for :func:`abs`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "absolute_",
          "signature": "absolute_()",
          "documentation": {
            "description": "absolute_() -> Tensor\n\nIn-place version of :meth:`~Tensor.absolute`\nAlias for :func:`abs_`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "acos",
          "signature": "acos()",
          "documentation": {
            "description": "acos() -> Tensor\n\nSee :func:`torch.acos`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "acos_",
          "signature": "acos_()",
          "documentation": {
            "description": "acos_() -> Tensor\n\nIn-place version of :meth:`~Tensor.acos`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "acosh",
          "signature": "acosh()",
          "documentation": {
            "description": "acosh() -> Tensor\n\nSee :func:`torch.acosh`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "acosh_",
          "signature": "acosh_()",
          "documentation": {
            "description": "acosh_() -> Tensor\n\nIn-place version of :meth:`~Tensor.acosh`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "add",
          "signature": "add(other, *, alpha=1)",
          "documentation": {
            "description": "add(other, *, alpha=1) -> Tensor\n\nAdd a scalar or tensor to :attr:`self` tensor. If both :attr:`alpha`\nand :attr:`other` are specified, each element of :attr:`other` is scaled by\n:attr:`alpha` before being used.\n\nWhen :attr:`other` is a tensor, the shape of :attr:`other` must be\n:ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying\ntensor\n\nSee :func:`torch.add`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "add_",
          "signature": "add_(other, *, alpha=1)",
          "documentation": {
            "description": "add_(other, *, alpha=1) -> Tensor\n\nIn-place version of :meth:`~Tensor.add`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "addbmm",
          "signature": "addbmm(batch1, batch2, *, beta=1, alpha=1)",
          "documentation": {
            "description": "addbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor\n\nSee :func:`torch.addbmm`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "addbmm_",
          "signature": "addbmm_(batch1, batch2, *, beta=1, alpha=1)",
          "documentation": {
            "description": "addbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor\n\nIn-place version of :meth:`~Tensor.addbmm`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "addcdiv",
          "signature": "addcdiv(tensor1, tensor2, *, value=1)",
          "documentation": {
            "description": "addcdiv(tensor1, tensor2, *, value=1) -> Tensor\n\nSee :func:`torch.addcdiv`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "addcdiv_",
          "signature": "addcdiv_(tensor1, tensor2, *, value=1)",
          "documentation": {
            "description": "addcdiv_(tensor1, tensor2, *, value=1) -> Tensor\n\nIn-place version of :meth:`~Tensor.addcdiv`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "addcmul",
          "signature": "addcmul(tensor1, tensor2, *, value=1)",
          "documentation": {
            "description": "addcmul(tensor1, tensor2, *, value=1) -> Tensor\n\nSee :func:`torch.addcmul`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "addcmul_",
          "signature": "addcmul_(tensor1, tensor2, *, value=1)",
          "documentation": {
            "description": "addcmul_(tensor1, tensor2, *, value=1) -> Tensor\n\nIn-place version of :meth:`~Tensor.addcmul`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "addmm",
          "signature": "addmm(mat1, mat2, *, beta=1, alpha=1)",
          "documentation": {
            "description": "addmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor\n\nSee :func:`torch.addmm`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "addmm_",
          "signature": "addmm_(mat1, mat2, *, beta=1, alpha=1)",
          "documentation": {
            "description": "addmm_(mat1, mat2, *, beta=1, alpha=1) -> Tensor\n\nIn-place version of :meth:`~Tensor.addmm`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "addmv",
          "signature": "addmv(mat, vec, *, beta=1, alpha=1)",
          "documentation": {
            "description": "addmv(mat, vec, *, beta=1, alpha=1) -> Tensor\n\nSee :func:`torch.addmv`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "addmv_",
          "signature": "addmv_(mat, vec, *, beta=1, alpha=1)",
          "documentation": {
            "description": "addmv_(mat, vec, *, beta=1, alpha=1) -> Tensor\n\nIn-place version of :meth:`~Tensor.addmv`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "addr",
          "signature": "addr(vec1, vec2, *, beta=1, alpha=1)",
          "documentation": {
            "description": "addr(vec1, vec2, *, beta=1, alpha=1) -> Tensor\n\nSee :func:`torch.addr`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "addr_",
          "signature": "addr_(vec1, vec2, *, beta=1, alpha=1)",
          "documentation": {
            "description": "addr_(vec1, vec2, *, beta=1, alpha=1) -> Tensor\n\nIn-place version of :meth:`~Tensor.addr`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "adjoint",
          "signature": "adjoint()",
          "documentation": {
            "description": "adjoint() -> Tensor\n\nAlias for :func:`adjoint`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "align_as",
          "signature": "align_as(other)",
          "documentation": {
            "description": "align_as(other) -> Tensor\n\nPermutes the dimensions of the :attr:`self` tensor to match the dimension order\nin the :attr:`other` tensor, adding size-one dims for any new names.\n\nThis operation is useful for explicit broadcasting by names (see examples).\n\nAll of the dims of :attr:`self` must be named in order to use this method.\nThe resulting tensor is a view on the original tensor.\n\nAll dimension names of :attr:`self` must be present in ``other.names``.\n:attr:`other` may contain named dimensions that are not in ``self.names``;\nthe output tensor has a size-one dimension for each of those new names.\n\nTo align a tensor to a specific order, use :meth:`~Tensor.align_to`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "align_to",
          "signature": "align_to(self, *names)",
          "documentation": {
            "description": "Permutes the dimensions of the :attr:`self` tensor to match the order\nspecified in :attr:`names`, adding size-one dims for any new names.\n\nAll of the dims of :attr:`self` must be named in order to use this method.\nThe resulting tensor is a view on the original tensor.\n\nAll dimension names of :attr:`self` must be present in :attr:`names`.\n:attr:`names` may contain additional names that are not in ``self.names``;\nthe output tensor has a size-one dimension for each of those new names.\n\n:attr:`names` may contain up to one Ellipsis (``...``).\nThe Ellipsis is expanded to be equal to all dimension names of :attr:`self`\nthat are not mentioned in :attr:`names`, in the order that they appear\nin :attr:`self`.\n\nPython 2 does not support Ellipsis but one may use a string literal\ninstead (``'...'``).",
            "parameters": {
              "names": {
                "type": "iterable of str",
                "description": "The desired dimension ordering of the"
              },
              "output": {
                "type": "",
                "description": "tensor. May contain up to one Ellipsis that is expanded"
              },
              "to": {
                "type": "",
                "description": "all unmentioned dim names of :attr:`self`."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "all",
          "signature": "all(dim=None, keepdim=False)",
          "documentation": {
            "description": "all(dim=None, keepdim=False) -> Tensor\n\nSee :func:`torch.all`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "allclose",
          "signature": "allclose(other, rtol=1e-05, atol=1e-08, equal_nan=False)",
          "documentation": {
            "description": "allclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor\n\nSee :func:`torch.allclose`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "amax",
          "signature": "amax(dim=None, keepdim=False)",
          "documentation": {
            "description": "amax(dim=None, keepdim=False) -> Tensor\n\nSee :func:`torch.amax`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "amin",
          "signature": "amin(dim=None, keepdim=False)",
          "documentation": {
            "description": "amin(dim=None, keepdim=False) -> Tensor\n\nSee :func:`torch.amin`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "aminmax",
          "signature": "aminmax(*, dim=None, keepdim=False)",
          "documentation": {
            "description": "aminmax(*, dim=None, keepdim=False) -> (Tensor min, Tensor max)\n\nSee :func:`torch.aminmax`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "angle",
          "signature": "angle()",
          "documentation": {
            "description": "angle() -> Tensor\n\nSee :func:`torch.angle`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "any",
          "signature": "any(dim=None, keepdim=False)",
          "documentation": {
            "description": "any(dim=None, keepdim=False) -> Tensor\n\nSee :func:`torch.any`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "apply_",
          "signature": "apply_(callable)",
          "documentation": {
            "description": "apply_(callable) -> Tensor\n\nApplies the function :attr:`callable` to each element in the tensor, replacing\neach element with the value returned by :attr:`callable`.\n\n.. note::\n\n    This function only works with CPU tensors and should not be used in code\n    sections that require high performance.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "arccos",
          "signature": "arccos()",
          "documentation": {
            "description": "arccos() -> Tensor\n\nSee :func:`torch.arccos`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "arccos_",
          "signature": "arccos_()",
          "documentation": {
            "description": "arccos_() -> Tensor\n\nIn-place version of :meth:`~Tensor.arccos`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "arccosh",
          "signature": "arccosh()",
          "documentation": {
            "description": "acosh() -> Tensor\n\nSee :func:`torch.arccosh`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "arccosh_",
          "signature": "arccosh_()",
          "documentation": {
            "description": "acosh_() -> Tensor\n\nIn-place version of :meth:`~Tensor.arccosh`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "arcsin",
          "signature": "arcsin()",
          "documentation": {
            "description": "arcsin() -> Tensor\n\nSee :func:`torch.arcsin`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "arcsin_",
          "signature": "arcsin_()",
          "documentation": {
            "description": "arcsin_() -> Tensor\n\nIn-place version of :meth:`~Tensor.arcsin`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "arcsinh",
          "signature": "arcsinh()",
          "documentation": {
            "description": "arcsinh() -> Tensor\n\nSee :func:`torch.arcsinh`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "arcsinh_",
          "signature": "arcsinh_()",
          "documentation": {
            "description": "arcsinh_() -> Tensor\n\nIn-place version of :meth:`~Tensor.arcsinh`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "arctan",
          "signature": "arctan()",
          "documentation": {
            "description": "arctan() -> Tensor\n\nSee :func:`torch.arctan`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "arctan2",
          "signature": "arctan2(other)",
          "documentation": {
            "description": "arctan2(other) -> Tensor\n\nSee :func:`torch.arctan2`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "arctan2_",
          "signature": "arctan2_(other)",
          "documentation": {
            "description": "atan2_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.arctan2`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "arctan_",
          "signature": "arctan_()",
          "documentation": {
            "description": "arctan_() -> Tensor\n\nIn-place version of :meth:`~Tensor.arctan`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "arctanh",
          "signature": "arctanh()",
          "documentation": {
            "description": "arctanh() -> Tensor\n\nSee :func:`torch.arctanh`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "arctanh_",
          "signature": "arctanh_(other)",
          "documentation": {
            "description": "arctanh_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.arctanh`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "argmax",
          "signature": "argmax(dim=None, keepdim=False)",
          "documentation": {
            "description": "argmax(dim=None, keepdim=False) -> LongTensor\n\nSee :func:`torch.argmax`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "argmin",
          "signature": "argmin(dim=None, keepdim=False)",
          "documentation": {
            "description": "argmin(dim=None, keepdim=False) -> LongTensor\n\nSee :func:`torch.argmin`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "argsort",
          "signature": "argsort(dim=-1, descending=False)",
          "documentation": {
            "description": "argsort(dim=-1, descending=False) -> LongTensor\n\nSee :func:`torch.argsort`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "argwhere",
          "signature": "argwhere()",
          "documentation": {
            "description": "argwhere() -> Tensor\n\nSee :func:`torch.argwhere`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "as_strided",
          "signature": "as_strided(size, stride, storage_offset=None)",
          "documentation": {
            "description": "as_strided(size, stride, storage_offset=None) -> Tensor\n\nSee :func:`torch.as_strided`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "as_strided_",
          "signature": "as_strided_(size, stride, storage_offset=None)",
          "documentation": {
            "description": "as_strided_(size, stride, storage_offset=None) -> Tensor\n\nIn-place version of :meth:`~Tensor.as_strided`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "as_strided_scatter",
          "signature": "as_strided_scatter(src, size, stride, storage_offset=None)",
          "documentation": {
            "description": "as_strided_scatter(src, size, stride, storage_offset=None) -> Tensor\n\nSee :func:`torch.as_strided_scatter`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "as_subclass",
          "signature": "as_subclass(cls)",
          "documentation": {
            "description": "as_subclass(cls) -> Tensor\n\nMakes a ``cls`` instance with the same data pointer as ``self``. Changes\nin the output mirror changes in ``self``, and the output stays attached\nto the autograd graph. ``cls`` must be a subclass of ``Tensor``.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "asin",
          "signature": "asin()",
          "documentation": {
            "description": "asin() -> Tensor\n\nSee :func:`torch.asin`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "asin_",
          "signature": "asin_()",
          "documentation": {
            "description": "asin_() -> Tensor\n\nIn-place version of :meth:`~Tensor.asin`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "asinh",
          "signature": "asinh()",
          "documentation": {
            "description": "asinh() -> Tensor\n\nSee :func:`torch.asinh`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "asinh_",
          "signature": "asinh_()",
          "documentation": {
            "description": "asinh_() -> Tensor\n\nIn-place version of :meth:`~Tensor.asinh`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "atan",
          "signature": "atan()",
          "documentation": {
            "description": "atan() -> Tensor\n\nSee :func:`torch.atan`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "atan2",
          "signature": "atan2(other)",
          "documentation": {
            "description": "atan2(other) -> Tensor\n\nSee :func:`torch.atan2`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "atan2_",
          "signature": "atan2_(other)",
          "documentation": {
            "description": "atan2_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.atan2`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "atan_",
          "signature": "atan_()",
          "documentation": {
            "description": "atan_() -> Tensor\n\nIn-place version of :meth:`~Tensor.atan`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "atanh",
          "signature": "atanh()",
          "documentation": {
            "description": "atanh() -> Tensor\n\nSee :func:`torch.atanh`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "atanh_",
          "signature": "atanh_(other)",
          "documentation": {
            "description": "atanh_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.atanh`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "backward",
          "signature": "backward(self, gradient=None, retain_graph=None, create_graph=False, inputs=None)",
          "documentation": {
            "description": "Computes the gradient of current tensor wrt graph leaves.\n\nThe graph is differentiated using the chain rule. If the tensor is\nnon-scalar (i.e. its data has more than one element) and requires\ngradient, the function additionally requires specifying a ``gradient``.\nIt should be a tensor of matching type and shape, that represents\nthe gradient of the differentiated function w.r.t. ``self``.\n\nThis function accumulates gradients in the leaves - you might need to zero\n``.grad`` attributes or set them to ``None`` before calling it.\nSee :ref:`Default gradient layouts<default-grad-layouts>`\nfor details on the memory layout of accumulated gradients.\n\n.. note::\n\n    If you run any forward ops, create ``gradient``, and/or call ``backward``\n    in a user-specified CUDA stream context, see\n    :ref:`Stream semantics of backward passes<bwd-cuda-stream-semantics>`.\n\n.. note::\n\n    When ``inputs`` are provided and a given input is not a leaf,\n    the current implementation will call its grad_fn (though it is not strictly needed to get this gradients).\n    It is an implementation detail on which the user should not rely.\n    See https://github.com/pytorch/pytorch/pull/60521#issuecomment-867061780 for more details.",
            "parameters": {
              "gradient": {
                "type": "Tensor, optional",
                "description": "The gradient of the function"
              },
              "being": {
                "type": "",
                "description": "differentiated w.r.t. ``self``."
              },
              "This": {
                "type": "",
                "description": "argument can be omitted if ``self`` is a scalar."
              },
              "retain_graph": {
                "type": "bool, optional",
                "description": "If ``False``, the graph used to compute"
              },
              "the": {
                "type": "",
                "description": "grads will be freed. Note that in nearly all cases setting"
              },
              "this": {
                "type": "",
                "description": "option to True is not needed and often can be worked around"
              },
              "in": {
                "type": "",
                "description": "a much more efficient way. Defaults to the value of\n``create_graph``."
              },
              "create_graph": {
                "type": "bool, optional",
                "description": "If ``True``, graph of the derivative will"
              },
              "be": {
                "type": "",
                "description": "constructed, allowing to compute higher order derivative"
              },
              "products": {
                "type": "",
                "description": ". Defaults to ``False``."
              },
              "inputs": {
                "type": "sequence of Tensor, optional",
                "description": "Inputs w.r.t. which the gradient will be"
              },
              "accumulated": {
                "type": "",
                "description": "into ``.grad``. All other tensors will be ignored. If not"
              },
              "provided": {
                "type": "",
                "description": ", the gradient is accumulated into all the leaf Tensors that were"
              },
              "used": {
                "type": "",
                "description": "to compute the :attr:`tensors`."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "baddbmm",
          "signature": "baddbmm(batch1, batch2, *, beta=1, alpha=1)",
          "documentation": {
            "description": "baddbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor\n\nSee :func:`torch.baddbmm`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "baddbmm_",
          "signature": "baddbmm_(batch1, batch2, *, beta=1, alpha=1)",
          "documentation": {
            "description": "baddbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor\n\nIn-place version of :meth:`~Tensor.baddbmm`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "bernoulli",
          "signature": "bernoulli(*, generator=None)",
          "documentation": {
            "description": "bernoulli(*, generator=None) -> Tensor\n\nReturns a result tensor where each :math:`\\texttt{result[i]}` is independently\nsampled from :math:`\\text{Bernoulli}(\\texttt{self[i]})`. :attr:`self` must have\nfloating point ``dtype``, and the result will have the same ``dtype``.\n\nSee :func:`torch.bernoulli`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "bernoulli_",
          "signature": "bernoulli_(p=0.5, *, generator=None)",
          "documentation": {
            "description": "bernoulli_(p=0.5, *, generator=None) -> Tensor\n\nFills each location of :attr:`self` with an independent sample from\n:math:`\\text{Bernoulli}(\\texttt{p})`. :attr:`self` can have integral\n``dtype``.\n\n:attr:`p` should either be a scalar or tensor containing probabilities to be\nused for drawing the binary random number.\n\nIf it is a tensor, the :math:`\\text{i}^{th}` element of :attr:`self` tensor\nwill be set to a value sampled from\n:math:`\\text{Bernoulli}(\\texttt{p\\_tensor[i]})`. In this case `p` must have\nfloating point ``dtype``.\n\nSee also :meth:`~Tensor.bernoulli` and :func:`torch.bernoulli`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "bfloat16",
          "signature": "bfloat16(memory_format=torch.preserve_format)",
          "documentation": {
            "description": "bfloat16(memory_format=torch.preserve_format) -> Tensor\n``self.bfloat16()`` is equivalent to ``self.to(torch.bfloat16)``. See :func:`to`.",
            "parameters": {
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "returned": {
                "type": "",
                "description": "Tensor. Default: ``torch.preserve_format``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "bincount",
          "signature": "bincount(weights=None, minlength=0)",
          "documentation": {
            "description": "bincount(weights=None, minlength=0) -> Tensor\n\nSee :func:`torch.bincount`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "bitwise_and",
          "signature": "bitwise_and()",
          "documentation": {
            "description": "bitwise_and() -> Tensor\n\nSee :func:`torch.bitwise_and`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "bitwise_and_",
          "signature": "bitwise_and_()",
          "documentation": {
            "description": "bitwise_and_() -> Tensor\n\nIn-place version of :meth:`~Tensor.bitwise_and`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "bitwise_left_shift",
          "signature": "bitwise_left_shift(other)",
          "documentation": {
            "description": "bitwise_left_shift(other) -> Tensor\n\nSee :func:`torch.bitwise_left_shift`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "bitwise_left_shift_",
          "signature": "bitwise_left_shift_(other)",
          "documentation": {
            "description": "bitwise_left_shift_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.bitwise_left_shift`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "bitwise_not",
          "signature": "bitwise_not()",
          "documentation": {
            "description": "bitwise_not() -> Tensor\n\nSee :func:`torch.bitwise_not`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "bitwise_not_",
          "signature": "bitwise_not_()",
          "documentation": {
            "description": "bitwise_not_() -> Tensor\n\nIn-place version of :meth:`~Tensor.bitwise_not`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "bitwise_or",
          "signature": "bitwise_or()",
          "documentation": {
            "description": "bitwise_or() -> Tensor\n\nSee :func:`torch.bitwise_or`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "bitwise_or_",
          "signature": "bitwise_or_()",
          "documentation": {
            "description": "bitwise_or_() -> Tensor\n\nIn-place version of :meth:`~Tensor.bitwise_or`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "bitwise_right_shift",
          "signature": "bitwise_right_shift(other)",
          "documentation": {
            "description": "bitwise_right_shift(other) -> Tensor\n\nSee :func:`torch.bitwise_right_shift`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "bitwise_right_shift_",
          "signature": "bitwise_right_shift_(other)",
          "documentation": {
            "description": "bitwise_right_shift_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.bitwise_right_shift`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "bitwise_xor",
          "signature": "bitwise_xor()",
          "documentation": {
            "description": "bitwise_xor() -> Tensor\n\nSee :func:`torch.bitwise_xor`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "bitwise_xor_",
          "signature": "bitwise_xor_()",
          "documentation": {
            "description": "bitwise_xor_() -> Tensor\n\nIn-place version of :meth:`~Tensor.bitwise_xor`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "bmm",
          "signature": "bmm(batch2)",
          "documentation": {
            "description": "bmm(batch2) -> Tensor\n\nSee :func:`torch.bmm`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "bool",
          "signature": "bool(memory_format=torch.preserve_format)",
          "documentation": {
            "description": "bool(memory_format=torch.preserve_format) -> Tensor\n\n``self.bool()`` is equivalent to ``self.to(torch.bool)``. See :func:`to`.",
            "parameters": {
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "returned": {
                "type": "",
                "description": "Tensor. Default: ``torch.preserve_format``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "broadcast_to",
          "signature": "broadcast_to(shape)",
          "documentation": {
            "description": "broadcast_to(shape) -> Tensor\n\nSee :func:`torch.broadcast_to`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "byte",
          "signature": "byte(memory_format=torch.preserve_format)",
          "documentation": {
            "description": "byte(memory_format=torch.preserve_format) -> Tensor\n\n``self.byte()`` is equivalent to ``self.to(torch.uint8)``. See :func:`to`.",
            "parameters": {
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "returned": {
                "type": "",
                "description": "Tensor. Default: ``torch.preserve_format``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cauchy_",
          "signature": "cauchy_(median=0, sigma=1, *, generator=None)",
          "documentation": {
            "description": "cauchy_(median=0, sigma=1, *, generator=None) -> Tensor\n\nFills the tensor with numbers drawn from the Cauchy distribution:\n\n.. math::\n\n    f(x) = \\dfrac{1}{\\pi} \\dfrac{\\sigma}{(x - \\text{median})^2 + \\sigma^2}\n\n.. note::\n  Sigma (:math:`\\sigma`) is used to denote the scale parameter in Cauchy distribution.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "ccol_indices",
          "signature": "ccol_indices(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cdouble",
          "signature": "cdouble(memory_format=torch.preserve_format)",
          "documentation": {
            "description": "cdouble(memory_format=torch.preserve_format) -> Tensor\n\n``self.cdouble()`` is equivalent to ``self.to(torch.complex128)``. See :func:`to`.",
            "parameters": {
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "returned": {
                "type": "",
                "description": "Tensor. Default: ``torch.preserve_format``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "ceil",
          "signature": "ceil()",
          "documentation": {
            "description": "ceil() -> Tensor\n\nSee :func:`torch.ceil`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "ceil_",
          "signature": "ceil_()",
          "documentation": {
            "description": "ceil_() -> Tensor\n\nIn-place version of :meth:`~Tensor.ceil`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cfloat",
          "signature": "cfloat(memory_format=torch.preserve_format)",
          "documentation": {
            "description": "cfloat(memory_format=torch.preserve_format) -> Tensor\n\n``self.cfloat()`` is equivalent to ``self.to(torch.complex64)``. See :func:`to`.",
            "parameters": {
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "returned": {
                "type": "",
                "description": "Tensor. Default: ``torch.preserve_format``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "chalf",
          "signature": "chalf(memory_format=torch.preserve_format)",
          "documentation": {
            "description": "chalf(memory_format=torch.preserve_format) -> Tensor\n\n``self.chalf()`` is equivalent to ``self.to(torch.complex32)``. See :func:`to`.",
            "parameters": {
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "returned": {
                "type": "",
                "description": "Tensor. Default: ``torch.preserve_format``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "char",
          "signature": "char(memory_format=torch.preserve_format)",
          "documentation": {
            "description": "char(memory_format=torch.preserve_format) -> Tensor\n\n``self.char()`` is equivalent to ``self.to(torch.int8)``. See :func:`to`.",
            "parameters": {
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "returned": {
                "type": "",
                "description": "Tensor. Default: ``torch.preserve_format``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cholesky",
          "signature": "cholesky(upper=False)",
          "documentation": {
            "description": "cholesky(upper=False) -> Tensor\n\nSee :func:`torch.cholesky`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cholesky_inverse",
          "signature": "cholesky_inverse(upper=False)",
          "documentation": {
            "description": "cholesky_inverse(upper=False) -> Tensor\n\nSee :func:`torch.cholesky_inverse`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cholesky_solve",
          "signature": "cholesky_solve(input2, upper=False)",
          "documentation": {
            "description": "cholesky_solve(input2, upper=False) -> Tensor\n\nSee :func:`torch.cholesky_solve`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "chunk",
          "signature": "chunk(chunks, dim=0)",
          "documentation": {
            "description": "chunk(chunks, dim=0) -> List of Tensors\n\nSee :func:`torch.chunk`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "clamp",
          "signature": "clamp(min=None, max=None)",
          "documentation": {
            "description": "clamp(min=None, max=None) -> Tensor\n\nSee :func:`torch.clamp`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "clamp_",
          "signature": "clamp_(min=None, max=None)",
          "documentation": {
            "description": "clamp_(min=None, max=None) -> Tensor\n\nIn-place version of :meth:`~Tensor.clamp`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "clamp_max",
          "signature": "clamp_max(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "clamp_max_",
          "signature": "clamp_max_(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "clamp_min",
          "signature": "clamp_min(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "clamp_min_",
          "signature": "clamp_min_(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "clip",
          "signature": "clip(min=None, max=None)",
          "documentation": {
            "description": "clip(min=None, max=None) -> Tensor\n\nAlias for :meth:`~Tensor.clamp`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "clip_",
          "signature": "clip_(min=None, max=None)",
          "documentation": {
            "description": "clip_(min=None, max=None) -> Tensor\n\nAlias for :meth:`~Tensor.clamp_`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "clone",
          "signature": "clone(*, memory_format=torch.preserve_format)",
          "documentation": {
            "description": "clone(*, memory_format=torch.preserve_format) -> Tensor\n\nSee :func:`torch.clone`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "coalesce",
          "signature": "coalesce()",
          "documentation": {
            "description": "coalesce() -> Tensor\n\nReturns a coalesced copy of :attr:`self` if :attr:`self` is an\n:ref:`uncoalesced tensor <sparse-uncoalesced-coo-docs>`.\n\nReturns :attr:`self` if :attr:`self` is a coalesced tensor.\n\n.. warning::\n  Throws an error if :attr:`self` is not a sparse COO tensor.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "col_indices",
          "signature": "col_indices()",
          "documentation": {
            "description": "col_indices() -> IntTensor\n\nReturns the tensor containing the column indices of the :attr:`self`\ntensor when :attr:`self` is a sparse CSR tensor of layout ``sparse_csr``.\nThe ``col_indices`` tensor is strictly of shape (:attr:`self`.nnz())\nand of type ``int32`` or ``int64``.  When using MKL routines such as sparse\nmatrix multiplication, it is necessary to use ``int32`` indexing in order\nto avoid downcasting and potentially losing information.\n\nExample::\n    >>> csr = torch.eye(5,5).to_sparse_csr()\n    >>> csr.col_indices()\n    tensor([0, 1, 2, 3, 4], dtype=torch.int32)",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "conj",
          "signature": "conj()",
          "documentation": {
            "description": "conj() -> Tensor\n\nSee :func:`torch.conj`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "conj_physical",
          "signature": "conj_physical()",
          "documentation": {
            "description": "conj_physical() -> Tensor\n\nSee :func:`torch.conj_physical`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "conj_physical_",
          "signature": "conj_physical_()",
          "documentation": {
            "description": "conj_physical_() -> Tensor\n\nIn-place version of :meth:`~Tensor.conj_physical`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "contiguous",
          "signature": "contiguous(memory_format=torch.contiguous_format)",
          "documentation": {
            "description": "contiguous(memory_format=torch.contiguous_format) -> Tensor\n\nReturns a contiguous in memory tensor containing the same data as :attr:`self` tensor. If\n:attr:`self` tensor is already in the specified memory format, this function returns the\n:attr:`self` tensor.",
            "parameters": {
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "returned": {
                "type": "",
                "description": "Tensor. Default: ``torch.contiguous_format``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "copy_",
          "signature": "copy_(src, non_blocking=False)",
          "documentation": {
            "description": "copy_(src, non_blocking=False) -> Tensor\n\nCopies the elements from :attr:`src` into :attr:`self` tensor and returns\n:attr:`self`.\n\nThe :attr:`src` tensor must be :ref:`broadcastable <broadcasting-semantics>`\nwith the :attr:`self` tensor. It may be of a different data type or reside on a\ndifferent device.",
            "parameters": {
              "src": {
                "type": "Tensor",
                "description": "the source tensor to copy from"
              },
              "non_blocking": {
                "type": "bool",
                "description": "if ``True`` and this copy is between CPU and GPU,"
              },
              "the": {
                "type": "",
                "description": "copy may occur asynchronously with respect to the host. For other"
              },
              "cases": {
                "type": "",
                "description": ", this argument has no effect."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "copysign",
          "signature": "copysign(other)",
          "documentation": {
            "description": "copysign(other) -> Tensor\n\nSee :func:`torch.copysign`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "copysign_",
          "signature": "copysign_(other)",
          "documentation": {
            "description": "copysign_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.copysign`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "corrcoef",
          "signature": "corrcoef()",
          "documentation": {
            "description": "corrcoef() -> Tensor\n\nSee :func:`torch.corrcoef`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cos",
          "signature": "cos()",
          "documentation": {
            "description": "cos() -> Tensor\n\nSee :func:`torch.cos`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cos_",
          "signature": "cos_()",
          "documentation": {
            "description": "cos_() -> Tensor\n\nIn-place version of :meth:`~Tensor.cos`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cosh",
          "signature": "cosh()",
          "documentation": {
            "description": "cosh() -> Tensor\n\nSee :func:`torch.cosh`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cosh_",
          "signature": "cosh_()",
          "documentation": {
            "description": "cosh_() -> Tensor\n\nIn-place version of :meth:`~Tensor.cosh`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "count_nonzero",
          "signature": "count_nonzero(dim=None)",
          "documentation": {
            "description": "count_nonzero(dim=None) -> Tensor\n\nSee :func:`torch.count_nonzero`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cov",
          "signature": "cov(*, correction=1, fweights=None, aweights=None)",
          "documentation": {
            "description": "cov(*, correction=1, fweights=None, aweights=None) -> Tensor\n\nSee :func:`torch.cov`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cpu",
          "signature": "cpu(memory_format=torch.preserve_format)",
          "documentation": {
            "description": "cpu(memory_format=torch.preserve_format) -> Tensor\n\nReturns a copy of this object in CPU memory.\n\nIf this object is already in CPU memory and on the correct device,\nthen no copy is performed and the original object is returned.",
            "parameters": {
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "returned": {
                "type": "",
                "description": "Tensor. Default: ``torch.preserve_format``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cross",
          "signature": "cross(other, dim=None)",
          "documentation": {
            "description": "cross(other, dim=None) -> Tensor\n\nSee :func:`torch.cross`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "crow_indices",
          "signature": "crow_indices()",
          "documentation": {
            "description": "crow_indices() -> IntTensor\n\nReturns the tensor containing the compressed row indices of the :attr:`self`\ntensor when :attr:`self` is a sparse CSR tensor of layout ``sparse_csr``.\nThe ``crow_indices`` tensor is strictly of shape (:attr:`self`.size(0) + 1)\nand of type ``int32`` or ``int64``. When using MKL routines such as sparse\nmatrix multiplication, it is necessary to use ``int32`` indexing in order\nto avoid downcasting and potentially losing information.\n\nExample::\n    >>> csr = torch.eye(5,5).to_sparse_csr()\n    >>> csr.crow_indices()\n    tensor([0, 1, 2, 3, 4, 5], dtype=torch.int32)",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cuda",
          "signature": "cuda(device=None, non_blocking=False, memory_format=torch.preserve_format)",
          "documentation": {
            "description": "cuda(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor\n\nReturns a copy of this object in CUDA memory.\n\nIf this object is already in CUDA memory and on the correct device,\nthen no copy is performed and the original object is returned.",
            "parameters": {
              "device": {
                "type": ":class:`torch.device`",
                "description": "The destination GPU device."
              },
              "Defaults": {
                "type": "",
                "description": "to the current CUDA device."
              },
              "non_blocking": {
                "type": "bool",
                "description": "If ``True`` and the source is in pinned memory,"
              },
              "the": {
                "type": "",
                "description": "copy will be asynchronous with respect to the host."
              },
              "Otherwise": {
                "type": "",
                "description": ", the argument has no effect. Default: ``False``."
              },
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "returned": {
                "type": "",
                "description": "Tensor. Default: ``torch.preserve_format``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cummax",
          "signature": "cummax(dim)",
          "documentation": {
            "description": "cummax(dim) -> (Tensor, Tensor)\n\nSee :func:`torch.cummax`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cummin",
          "signature": "cummin(dim)",
          "documentation": {
            "description": "cummin(dim) -> (Tensor, Tensor)\n\nSee :func:`torch.cummin`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cumprod",
          "signature": "cumprod(dim, dtype=None)",
          "documentation": {
            "description": "cumprod(dim, dtype=None) -> Tensor\n\nSee :func:`torch.cumprod`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cumprod_",
          "signature": "cumprod_(dim, dtype=None)",
          "documentation": {
            "description": "cumprod_(dim, dtype=None) -> Tensor\n\nIn-place version of :meth:`~Tensor.cumprod`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cumsum",
          "signature": "cumsum(dim, dtype=None)",
          "documentation": {
            "description": "cumsum(dim, dtype=None) -> Tensor\n\nSee :func:`torch.cumsum`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cumsum_",
          "signature": "cumsum_(dim, dtype=None)",
          "documentation": {
            "description": "cumsum_(dim, dtype=None) -> Tensor\n\nIn-place version of :meth:`~Tensor.cumsum`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "data_ptr",
          "signature": "data_ptr()",
          "documentation": {
            "description": "data_ptr() -> int\n\nReturns the address of the first element of :attr:`self` tensor.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "deg2rad",
          "signature": "deg2rad()",
          "documentation": {
            "description": "deg2rad() -> Tensor\n\nSee :func:`torch.deg2rad`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "deg2rad_",
          "signature": "deg2rad_()",
          "documentation": {
            "description": "deg2rad_() -> Tensor\n\nIn-place version of :meth:`~Tensor.deg2rad`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "dense_dim",
          "signature": "dense_dim()",
          "documentation": {
            "description": "dense_dim() -> int\n\nReturn the number of dense dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.\n\n.. note::\n  Returns ``len(self.shape)`` if :attr:`self` is not a sparse tensor.\n\nSee also :meth:`Tensor.sparse_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "dequantize",
          "signature": "dequantize()",
          "documentation": {
            "description": "dequantize() -> Tensor\n\nGiven a quantized Tensor, dequantize it and return the dequantized float Tensor.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "det",
          "signature": "det()",
          "documentation": {
            "description": "det() -> Tensor\n\nSee :func:`torch.det`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "detach",
          "signature": "detach(...)",
          "documentation": {
            "description": "Returns a new Tensor, detached from the current graph.\n\nThe result will never require gradient.\n\nThis method also affects forward mode AD gradients and the result will never\nhave forward mode AD gradients.\n\n.. note::\n\n  Returned Tensor shares the same storage with the original one.\n  In-place modifications on either of them will be seen, and may trigger\n  errors in correctness checks.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "detach_",
          "signature": "detach_(...)",
          "documentation": {
            "description": "Detaches the Tensor from the graph that created it, making it a leaf.\nViews cannot be detached in-place.\n\nThis method also affects forward mode AD gradients and the result will never\nhave forward mode AD gradients.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "diag",
          "signature": "diag(diagonal=0)",
          "documentation": {
            "description": "diag(diagonal=0) -> Tensor\n\nSee :func:`torch.diag`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "diag_embed",
          "signature": "diag_embed(offset=0, dim1=-2, dim2=-1)",
          "documentation": {
            "description": "diag_embed(offset=0, dim1=-2, dim2=-1) -> Tensor\n\nSee :func:`torch.diag_embed`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "diagflat",
          "signature": "diagflat(offset=0)",
          "documentation": {
            "description": "diagflat(offset=0) -> Tensor\n\nSee :func:`torch.diagflat`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "diagonal",
          "signature": "diagonal(offset=0, dim1=0, dim2=1)",
          "documentation": {
            "description": "diagonal(offset=0, dim1=0, dim2=1) -> Tensor\n\nSee :func:`torch.diagonal`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "diagonal_scatter",
          "signature": "diagonal_scatter(src, offset=0, dim1=0, dim2=1)",
          "documentation": {
            "description": "diagonal_scatter(src, offset=0, dim1=0, dim2=1) -> Tensor\n\nSee :func:`torch.diagonal_scatter`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "diff",
          "signature": "diff(n=1, dim=-1, prepend=None, append=None)",
          "documentation": {
            "description": "diff(n=1, dim=-1, prepend=None, append=None) -> Tensor\n\nSee :func:`torch.diff`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "digamma",
          "signature": "digamma()",
          "documentation": {
            "description": "digamma() -> Tensor\n\nSee :func:`torch.digamma`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "digamma_",
          "signature": "digamma_()",
          "documentation": {
            "description": "digamma_() -> Tensor\n\nIn-place version of :meth:`~Tensor.digamma`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "dim",
          "signature": "dim()",
          "documentation": {
            "description": "dim() -> int\n\nReturns the number of dimensions of :attr:`self` tensor.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "dim_order",
          "signature": "dim_order(self, *, ambiguity_check: Union[bool, List[torch.memory_format]] = False)",
          "documentation": {
            "description": "dim_order(ambiguity_check=False) -> tuple\n\nReturns the uniquely determined tuple of int describing the dim order or\nphysical layout of :attr:`self`.\n\nThe dim order represents how dimensions are laid out in memory,\nstarting from the outermost to the innermost dimension.\n\nNote that the dim order may not always be uniquely determined.\nIf `ambiguity_check` is True, this function raises a RuntimeError when the dim order cannot be uniquely determined;\nIf `ambiguity_check` is a list of memory formats, this function raises a RuntimeError when tensor can not be interpreted\ninto exactly one of the given memory formats, or it cannot be uniquely determined.\nIf `ambiguity_check` is False, it will return one of legal dim order(s) without checking its uniqueness.\nOtherwise, it will raise TypeError.",
            "parameters": {
              "ambiguity_check": {
                "type": "bool or List[torch.memory_format]",
                "description": "The check method for ambiguity of dim order.\n>>> torch.empty((2, 3, 5, 7)).dim_order()\n(0, 1, 2, 3)\n>>> torch.empty((2, 3, 5, 7)).transpose(1, 2).dim_order()\n(0, 2, 1, 3)\n>>> torch.empty((2, 3, 5, 7), memory_format=torch.channels_last).dim_order()\n(0, 2, 3, 1)\n>>> torch.empty((1, 2, 3, 4)).dim_order()\n(0, 1, 2, 3)\n>>> try:\n...     torch.empty((1, 2, 3, 4)).dim_order(ambiguity_check=True)\n... except RuntimeError as e:\n...     print(e)"
              },
              "The": {
                "type": "",
                "description": "dim_order tensor API is experimental and subject to change."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "dist",
          "signature": "dist(other, p=2)",
          "documentation": {
            "description": "dist(other, p=2) -> Tensor\n\nSee :func:`torch.dist`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "div",
          "signature": "div(value, *, rounding_mode=None)",
          "documentation": {
            "description": "div(value, *, rounding_mode=None) -> Tensor\n\nSee :func:`torch.div`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "div_",
          "signature": "div_(value, *, rounding_mode=None)",
          "documentation": {
            "description": "div_(value, *, rounding_mode=None) -> Tensor\n\nIn-place version of :meth:`~Tensor.div`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "divide",
          "signature": "divide(value, *, rounding_mode=None)",
          "documentation": {
            "description": "divide(value, *, rounding_mode=None) -> Tensor\n\nSee :func:`torch.divide`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "divide_",
          "signature": "divide_(value, *, rounding_mode=None)",
          "documentation": {
            "description": "divide_(value, *, rounding_mode=None) -> Tensor\n\nIn-place version of :meth:`~Tensor.divide`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "dot",
          "signature": "dot(other)",
          "documentation": {
            "description": "dot(other) -> Tensor\n\nSee :func:`torch.dot`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "double",
          "signature": "double(memory_format=torch.preserve_format)",
          "documentation": {
            "description": "double(memory_format=torch.preserve_format) -> Tensor\n\n``self.double()`` is equivalent to ``self.to(torch.float64)``. See :func:`to`.",
            "parameters": {
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "returned": {
                "type": "",
                "description": "Tensor. Default: ``torch.preserve_format``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "dsplit",
          "signature": "dsplit(split_size_or_sections)",
          "documentation": {
            "description": "dsplit(split_size_or_sections) -> List of Tensors\n\nSee :func:`torch.dsplit`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "eig",
          "signature": "eig(self, eigenvectors=False)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "element_size",
          "signature": "element_size()",
          "documentation": {
            "description": "element_size() -> int\n\nReturns the size in bytes of an individual element.\n\nExample::\n\n    >>> torch.tensor([]).element_size()\n    4\n    >>> torch.tensor([], dtype=torch.uint8).element_size()\n    1",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "eq",
          "signature": "eq(other)",
          "documentation": {
            "description": "eq(other) -> Tensor\n\nSee :func:`torch.eq`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "eq_",
          "signature": "eq_(other)",
          "documentation": {
            "description": "eq_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.eq`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "equal",
          "signature": "equal(other)",
          "documentation": {
            "description": "equal(other) -> bool\n\nSee :func:`torch.equal`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "erf",
          "signature": "erf()",
          "documentation": {
            "description": "erf() -> Tensor\n\nSee :func:`torch.erf`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "erf_",
          "signature": "erf_()",
          "documentation": {
            "description": "erf_() -> Tensor\n\nIn-place version of :meth:`~Tensor.erf`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "erfc",
          "signature": "erfc()",
          "documentation": {
            "description": "erfc() -> Tensor\n\nSee :func:`torch.erfc`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "erfc_",
          "signature": "erfc_()",
          "documentation": {
            "description": "erfc_() -> Tensor\n\nIn-place version of :meth:`~Tensor.erfc`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "erfinv",
          "signature": "erfinv()",
          "documentation": {
            "description": "erfinv() -> Tensor\n\nSee :func:`torch.erfinv`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "erfinv_",
          "signature": "erfinv_()",
          "documentation": {
            "description": "erfinv_() -> Tensor\n\nIn-place version of :meth:`~Tensor.erfinv`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "exp",
          "signature": "exp()",
          "documentation": {
            "description": "exp() -> Tensor\n\nSee :func:`torch.exp`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "exp2",
          "signature": "exp2()",
          "documentation": {
            "description": "exp2() -> Tensor\n\nSee :func:`torch.exp2`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "exp2_",
          "signature": "exp2_()",
          "documentation": {
            "description": "exp2_() -> Tensor\n\nIn-place version of :meth:`~Tensor.exp2`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "exp_",
          "signature": "exp_()",
          "documentation": {
            "description": "exp_() -> Tensor\n\nIn-place version of :meth:`~Tensor.exp`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "expand",
          "signature": "expand(*sizes)",
          "documentation": {
            "description": "expand(*sizes) -> Tensor\n\nReturns a new view of the :attr:`self` tensor with singleton dimensions expanded\nto a larger size.\n\nPassing -1 as the size for a dimension means not changing the size of\nthat dimension.\n\nTensor can be also expanded to a larger number of dimensions, and the\nnew ones will be appended at the front. For the new dimensions, the\nsize cannot be set to -1.\n\nExpanding a tensor does not allocate new memory, but only creates a\nnew view on the existing tensor where a dimension of size one is\nexpanded to a larger size by setting the ``stride`` to 0. Any dimension\nof size 1 can be expanded to an arbitrary value without allocating new\nmemory.",
            "parameters": {
              "More": {
                "type": "",
                "description": "than one element of an expanded tensor may refer to a single"
              },
              "memory": {
                "type": "",
                "description": "location. As a result, in-place operations (especially ones that"
              },
              "are": {
                "type": "",
                "description": "vectorized) may result in incorrect behavior. If you need to write"
              },
              "to": {
                "type": "",
                "description": "the tensors, please clone them first."
              },
              "Example": {
                "type": "",
                "description": ":\n>>> x = torch.tensor([[1], [2], [3]])\n>>> x.size()"
              },
              "torch": {
                "type": "",
                "description": ".Size([3, 1])\n>>> x.expand(3, 4)"
              },
              "tensor": {
                "type": "",
                "description": "([[ 1,  1,  1,  1],\n[ 2,  2,  2,  2],\n[ 3,  3,  3,  3]])"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "expand_as",
          "signature": "expand_as(other)",
          "documentation": {
            "description": "expand_as(other) -> Tensor\n\nExpand this tensor to the same size as :attr:`other`.\n``self.expand_as(other)`` is equivalent to ``self.expand(other.size())``.\n\nPlease see :meth:`~Tensor.expand` for more information about ``expand``.",
            "parameters": {
              "other": {
                "type": ":class:`torch.Tensor`",
                "description": "The result tensor has the same size"
              },
              "as": {
                "type": "",
                "description": "attr:`other`."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "expm1",
          "signature": "expm1()",
          "documentation": {
            "description": "expm1() -> Tensor\n\nSee :func:`torch.expm1`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "expm1_",
          "signature": "expm1_()",
          "documentation": {
            "description": "expm1_() -> Tensor\n\nIn-place version of :meth:`~Tensor.expm1`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "exponential_",
          "signature": "exponential_(lambd=1, *, generator=None)",
          "documentation": {
            "description": "exponential_(lambd=1, *, generator=None) -> Tensor\n\nFills :attr:`self` tensor with elements drawn from the PDF (probability density function):\n\n.. math::\n\n    f(x) = \\lambda e^{-\\lambda x}, x > 0\n\n.. note::\n  In probability theory, exponential distribution is supported on interval [0, :math:`\\inf`) (i.e., :math:`x >= 0`)\n  implying that zero can be sampled from the exponential distribution.\n  However, :func:`torch.Tensor.exponential_` does not sample zero,\n  which means that its actual support is the interval (0, :math:`\\inf`).\n\n  Note that :func:`torch.distributions.exponential.Exponential` is supported on the interval [0, :math:`\\inf`) and can sample zero.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fill_",
          "signature": "fill_(value)",
          "documentation": {
            "description": "fill_(value) -> Tensor\n\nFills :attr:`self` tensor with the specified value.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fill_diagonal_",
          "signature": "fill_diagonal_(fill_value, wrap=False)",
          "documentation": {
            "description": "fill_diagonal_(fill_value, wrap=False) -> Tensor\n\nFill the main diagonal of a tensor that has at least 2-dimensions.\nWhen dims>2, all dimensions of input must be of equal length.\nThis function modifies the input tensor in-place, and returns the input tensor.",
            "parameters": {
              "fill_value": {
                "type": "Scalar",
                "description": "the fill value"
              },
              "wrap": {
                "type": "bool",
                "description": "the diagonal 'wrapped' after N columns for tall matrices."
              },
              "Example": {
                "type": "",
                "description": ":\n>>> a = torch.zeros(3, 3)\n>>> a.fill_diagonal_(5)"
              },
              "tensor": {
                "type": "",
                "description": "([[5., 0., 0.],\n[0., 5., 0.],\n[0., 0., 5.],\n[0., 0., 0.],\n[5., 0., 0.],\n[0., 5., 0.],\n[0., 0., 5.]])"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fix",
          "signature": "fix()",
          "documentation": {
            "description": "fix() -> Tensor\n\nSee :func:`torch.fix`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fix_",
          "signature": "fix_()",
          "documentation": {
            "description": "fix_() -> Tensor\n\nIn-place version of :meth:`~Tensor.fix`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "flatten",
          "signature": "flatten(start_dim=0, end_dim=-1)",
          "documentation": {
            "description": "flatten(start_dim=0, end_dim=-1) -> Tensor\n\nSee :func:`torch.flatten`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "flip",
          "signature": "flip(dims)",
          "documentation": {
            "description": "flip(dims) -> Tensor\n\nSee :func:`torch.flip`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fliplr",
          "signature": "fliplr()",
          "documentation": {
            "description": "fliplr() -> Tensor\n\nSee :func:`torch.fliplr`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "flipud",
          "signature": "flipud()",
          "documentation": {
            "description": "flipud() -> Tensor\n\nSee :func:`torch.flipud`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "float",
          "signature": "float(memory_format=torch.preserve_format)",
          "documentation": {
            "description": "float(memory_format=torch.preserve_format) -> Tensor\n\n``self.float()`` is equivalent to ``self.to(torch.float32)``. See :func:`to`.",
            "parameters": {
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "returned": {
                "type": "",
                "description": "Tensor. Default: ``torch.preserve_format``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "float_power",
          "signature": "float_power(exponent)",
          "documentation": {
            "description": "float_power(exponent) -> Tensor\n\nSee :func:`torch.float_power`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "float_power_",
          "signature": "float_power_(exponent)",
          "documentation": {
            "description": "float_power_(exponent) -> Tensor\n\nIn-place version of :meth:`~Tensor.float_power`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "floor",
          "signature": "floor()",
          "documentation": {
            "description": "floor() -> Tensor\n\nSee :func:`torch.floor`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "floor_",
          "signature": "floor_()",
          "documentation": {
            "description": "floor_() -> Tensor\n\nIn-place version of :meth:`~Tensor.floor`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "floor_divide",
          "signature": "floor_divide(value)",
          "documentation": {
            "description": "floor_divide(value) -> Tensor\n\nSee :func:`torch.floor_divide`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "floor_divide_",
          "signature": "floor_divide_(value)",
          "documentation": {
            "description": "floor_divide_(value) -> Tensor\n\nIn-place version of :meth:`~Tensor.floor_divide`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fmax",
          "signature": "fmax(other)",
          "documentation": {
            "description": "fmax(other) -> Tensor\n\nSee :func:`torch.fmax`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fmin",
          "signature": "fmin(other)",
          "documentation": {
            "description": "fmin(other) -> Tensor\n\nSee :func:`torch.fmin`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fmod",
          "signature": "fmod(divisor)",
          "documentation": {
            "description": "fmod(divisor) -> Tensor\n\nSee :func:`torch.fmod`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fmod_",
          "signature": "fmod_(divisor)",
          "documentation": {
            "description": "fmod_(divisor) -> Tensor\n\nIn-place version of :meth:`~Tensor.fmod`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "frac",
          "signature": "frac()",
          "documentation": {
            "description": "frac() -> Tensor\n\nSee :func:`torch.frac`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "frac_",
          "signature": "frac_()",
          "documentation": {
            "description": "frac_() -> Tensor\n\nIn-place version of :meth:`~Tensor.frac`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "frexp",
          "signature": "frexp(input)",
          "documentation": {
            "description": "frexp(input) -> (Tensor mantissa, Tensor exponent)\n\nSee :func:`torch.frexp`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "gather",
          "signature": "gather(dim, index)",
          "documentation": {
            "description": "gather(dim, index) -> Tensor\n\nSee :func:`torch.gather`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "gcd",
          "signature": "gcd(other)",
          "documentation": {
            "description": "gcd(other) -> Tensor\n\nSee :func:`torch.gcd`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "gcd_",
          "signature": "gcd_(other)",
          "documentation": {
            "description": "gcd_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.gcd`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "ge",
          "signature": "ge(other)",
          "documentation": {
            "description": "ge(other) -> Tensor\n\nSee :func:`torch.ge`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "ge_",
          "signature": "ge_(other)",
          "documentation": {
            "description": "ge_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.ge`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "geometric_",
          "signature": "geometric_(p, *, generator=None)",
          "documentation": {
            "description": "geometric_(p, *, generator=None) -> Tensor\n\nFills :attr:`self` tensor with elements drawn from the geometric distribution:\n\n.. math::\n\n    P(X=k) = (1 - p)^{k - 1} p, k = 1, 2, ...\n\n.. note::\n  :func:`torch.Tensor.geometric_` `k`-th trial is the first success hence draws samples in :math:`\\{1, 2, \\ldots\\}`, whereas\n  :func:`torch.distributions.geometric.Geometric` :math:`(k+1)`-th trial is the first success\n  hence draws samples in :math:`\\{0, 1, \\ldots\\}`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "geqrf",
          "signature": "geqrf()",
          "documentation": {
            "description": "geqrf() -> (Tensor, Tensor)\n\nSee :func:`torch.geqrf`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "ger",
          "signature": "ger(vec2)",
          "documentation": {
            "description": "ger(vec2) -> Tensor\n\nSee :func:`torch.ger`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_device",
          "signature": "get_device()",
          "documentation": {
            "description": "get_device() -> Device ordinal (Integer)\n\nFor CUDA tensors, this function returns the device ordinal of the GPU on which the tensor resides.\nFor CPU tensors, this function returns `-1`.\n\nExample::\n\n    >>> x = torch.randn(3, 4, 5, device='cuda:0')\n    >>> x.get_device()\n    0\n    >>> x.cpu().get_device()\n    -1",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "greater",
          "signature": "greater(other)",
          "documentation": {
            "description": "greater(other) -> Tensor\n\nSee :func:`torch.greater`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "greater_",
          "signature": "greater_(other)",
          "documentation": {
            "description": "greater_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.greater`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "greater_equal",
          "signature": "greater_equal(other)",
          "documentation": {
            "description": "greater_equal(other) -> Tensor\n\nSee :func:`torch.greater_equal`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "greater_equal_",
          "signature": "greater_equal_(other)",
          "documentation": {
            "description": "greater_equal_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.greater_equal`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "gt",
          "signature": "gt(other)",
          "documentation": {
            "description": "gt(other) -> Tensor\n\nSee :func:`torch.gt`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "gt_",
          "signature": "gt_(other)",
          "documentation": {
            "description": "gt_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.gt`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "half",
          "signature": "half(memory_format=torch.preserve_format)",
          "documentation": {
            "description": "half(memory_format=torch.preserve_format) -> Tensor\n\n``self.half()`` is equivalent to ``self.to(torch.float16)``. See :func:`to`.",
            "parameters": {
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "returned": {
                "type": "",
                "description": "Tensor. Default: ``torch.preserve_format``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "hardshrink",
          "signature": "hardshrink(lambd=0.5)",
          "documentation": {
            "description": "hardshrink(lambd=0.5) -> Tensor\n\nSee :func:`torch.nn.functional.hardshrink`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_names",
          "signature": "has_names(...)",
          "documentation": {
            "description": "Is ``True`` if any of this tensor's dimensions are named. Otherwise, is ``False``.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "heaviside",
          "signature": "heaviside(values)",
          "documentation": {
            "description": "heaviside(values) -> Tensor\n\nSee :func:`torch.heaviside`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "heaviside_",
          "signature": "heaviside_(values)",
          "documentation": {
            "description": "heaviside_(values) -> Tensor\n\nIn-place version of :meth:`~Tensor.heaviside`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "histc",
          "signature": "histc(bins=100, min=0, max=0)",
          "documentation": {
            "description": "histc(bins=100, min=0, max=0) -> Tensor\n\nSee :func:`torch.histc`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "histogram",
          "signature": "histogram(input, bins, *, range=None, weight=None, density=False)",
          "documentation": {
            "description": "histogram(input, bins, *, range=None, weight=None, density=False) -> (Tensor, Tensor)\n\nSee :func:`torch.histogram`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "hsplit",
          "signature": "hsplit(split_size_or_sections)",
          "documentation": {
            "description": "hsplit(split_size_or_sections) -> List of Tensors\n\nSee :func:`torch.hsplit`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "hypot",
          "signature": "hypot(other)",
          "documentation": {
            "description": "hypot(other) -> Tensor\n\nSee :func:`torch.hypot`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "hypot_",
          "signature": "hypot_(other)",
          "documentation": {
            "description": "hypot_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.hypot`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "i0",
          "signature": "i0()",
          "documentation": {
            "description": "i0() -> Tensor\n\nSee :func:`torch.i0`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "i0_",
          "signature": "i0_()",
          "documentation": {
            "description": "i0_() -> Tensor\n\nIn-place version of :meth:`~Tensor.i0`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "igamma",
          "signature": "igamma(other)",
          "documentation": {
            "description": "igamma(other) -> Tensor\n\nSee :func:`torch.igamma`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "igamma_",
          "signature": "igamma_(other)",
          "documentation": {
            "description": "igamma_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.igamma`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "igammac",
          "signature": "igammac(other)",
          "documentation": {
            "description": "igammac(other) -> Tensor\nSee :func:`torch.igammac`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "igammac_",
          "signature": "igammac_(other)",
          "documentation": {
            "description": "igammac_(other) -> Tensor\nIn-place version of :meth:`~Tensor.igammac`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "index_add",
          "signature": "index_add(dim, index, source, *, alpha=1)",
          "documentation": {
            "description": "index_add(dim, index, source, *, alpha=1) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.index_add_`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "index_add_",
          "signature": "index_add_(dim, index, source, *, alpha=1)",
          "documentation": {
            "description": "index_add_(dim, index, source, *, alpha=1) -> Tensor\n\nAccumulate the elements of :attr:`alpha` times ``source`` into the :attr:`self`\ntensor by adding to the indices in the order given in :attr:`index`. For example,\nif ``dim == 0``, ``index[i] == j``, and ``alpha=-1``, then the ``i``\\ th row of\n``source`` is subtracted from the ``j``\\ th row of :attr:`self`.\n\nThe :attr:`dim`\\ th dimension of ``source`` must have the same size as the\nlength of :attr:`index` (which must be a vector), and all other dimensions must\nmatch :attr:`self`, or an error will be raised.\n\nFor a 3-D tensor the output is given as::\n\n    self[index[i], :, :] += alpha * src[i, :, :]  # if dim == 0\n    self[:, index[i], :] += alpha * src[:, i, :]  # if dim == 1\n    self[:, :, index[i]] += alpha * src[:, :, i]  # if dim == 2",
            "parameters": {
              "dim": {
                "type": "int",
                "description": "dimension along which to index"
              },
              "index": {
                "type": "Tensor",
                "description": "indices of ``source`` to select from,"
              },
              "should": {
                "type": "",
                "description": "have dtype either `torch.int64` or `torch.int32`"
              },
              "source": {
                "type": "Tensor",
                "description": "the tensor containing values to add"
              },
              "Keyword": {
                "type": "",
                "description": "args:"
              },
              "alpha": {
                "type": "Number",
                "description": "the scalar multiplier for ``source``"
              },
              "Example": {
                "type": "",
                "description": ":\n>>> x = torch.ones(5, 3)\n>>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)\n>>> index = torch.tensor([0, 4, 2])\n>>> x.index_add_(0, index, t)"
              },
              "tensor": {
                "type": "",
                "description": "([[  1.,   1.,   1.],\n[  1.,   1.,   1.],\n[  1.,   1.,   1.],\n[  1.,   1.,   1.],\n[  1.,   1.,   1.]])"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.\n\nArgs:\n    dim (int): dimension along which to index\n    index (Tensor): indices of ``source`` to select from,\n            should have dtype either `torch.int64` or `torch.int32`\n    source (Tensor): the tensor containing values to add\n\nKeyword args:\n    alpha (Number): the scalar multiplier for ``source``",
            "examples": ""
          }
        },
        {
          "name": "index_copy",
          "signature": "index_copy(dim, index, tensor2)",
          "documentation": {
            "description": "index_copy(dim, index, tensor2) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.index_copy_`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "index_copy_",
          "signature": "index_copy_(dim, index, tensor)",
          "documentation": {
            "description": "index_copy_(dim, index, tensor) -> Tensor\n\nCopies the elements of :attr:`tensor` into the :attr:`self` tensor by selecting\nthe indices in the order given in :attr:`index`. For example, if ``dim == 0``\nand ``index[i] == j``, then the ``i``\\ th row of :attr:`tensor` is copied to the\n``j``\\ th row of :attr:`self`.\n\nThe :attr:`dim`\\ th dimension of :attr:`tensor` must have the same size as the\nlength of :attr:`index` (which must be a vector), and all other dimensions must\nmatch :attr:`self`, or an error will be raised.\n\n.. note::\n    If :attr:`index` contains duplicate entries, multiple elements from\n    :attr:`tensor` will be copied to the same index of :attr:`self`. The result\n    is nondeterministic since it depends on which copy occurs last.",
            "parameters": {
              "dim": {
                "type": "int",
                "description": "dimension along which to index"
              },
              "index": {
                "type": "LongTensor",
                "description": "indices of :attr:`tensor` to select from"
              },
              "tensor": {
                "type": "",
                "description": "([[ 1.,  2.,  3.],\n[ 0.,  0.,  0.],\n[ 7.,  8.,  9.],\n[ 0.,  0.,  0.],\n[ 4.,  5.,  6.]])"
              },
              "Example": {
                "type": "",
                "description": ":\n>>> x = torch.zeros(5, 3)\n>>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)\n>>> index = torch.tensor([0, 4, 2])\n>>> x.index_copy_(0, index, t)"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "index_fill",
          "signature": "index_fill(dim, index, value)",
          "documentation": {
            "description": "index_fill(dim, index, value) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.index_fill_`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "index_fill_",
          "signature": "index_fill_(dim, index, value)",
          "documentation": {
            "description": "index_fill_(dim, index, value) -> Tensor\n\nFills the elements of the :attr:`self` tensor with value :attr:`value` by\nselecting the indices in the order given in :attr:`index`.",
            "parameters": {
              "dim": {
                "type": "int",
                "description": "dimension along which to index"
              },
              "index": {
                "type": "LongTensor",
                "description": "indices of :attr:`self` tensor to fill in"
              },
              "value": {
                "type": "float",
                "description": "the value to fill with"
              },
              "Example": {
                "type": "",
                "description": ":\n>>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)\n>>> index = torch.tensor([0, 2])\n>>> x.index_fill_(1, index, -1)"
              },
              "tensor": {
                "type": "",
                "description": "([[-1.,  2., -1.],\n[-1.,  5., -1.],\n[-1.,  8., -1.]])"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "index_put",
          "signature": "index_put(indices, values, accumulate=False)",
          "documentation": {
            "description": "index_put(indices, values, accumulate=False) -> Tensor\n\nOut-place version of :meth:`~Tensor.index_put_`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "index_put_",
          "signature": "index_put_(indices, values, accumulate=False)",
          "documentation": {
            "description": "index_put_(indices, values, accumulate=False) -> Tensor\n\nPuts values from the tensor :attr:`values` into the tensor :attr:`self` using\nthe indices specified in :attr:`indices` (which is a tuple of Tensors). The\nexpression ``tensor.index_put_(indices, values)`` is equivalent to\n``tensor[indices] = values``. Returns :attr:`self`.\n\nIf :attr:`accumulate` is ``True``, the elements in :attr:`values` are added to\n:attr:`self`. If accumulate is ``False``, the behavior is undefined if indices\ncontain duplicate elements.",
            "parameters": {
              "indices": {
                "type": "tuple of LongTensor",
                "description": "tensors used to index into `self`."
              },
              "values": {
                "type": "Tensor",
                "description": "tensor of same dtype as `self`."
              },
              "accumulate": {
                "type": "bool",
                "description": "whether to accumulate into self"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "index_reduce",
          "signature": "index_reduce(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "index_reduce_",
          "signature": "index_reduce_(dim, index, source, reduce, *, include_self=True)",
          "documentation": {
            "description": "index_reduce_(dim, index, source, reduce, *, include_self=True) -> Tensor\n\nAccumulate the elements of ``source`` into the :attr:`self`\ntensor by accumulating to the indices in the order given in :attr:`index`\nusing the reduction given by the ``reduce`` argument. For example, if ``dim == 0``,\n``index[i] == j``, ``reduce == prod`` and ``include_self == True`` then the ``i``\\ th\nrow of ``source`` is multiplied by the ``j``\\ th row of :attr:`self`. If\n:obj:`include_self=\"True\"`, the values in the :attr:`self` tensor are included\nin the reduction, otherwise, rows in the :attr:`self` tensor that are accumulated\nto are treated as if they were filled with the reduction identites.\n\nThe :attr:`dim`\\ th dimension of ``source`` must have the same size as the\nlength of :attr:`index` (which must be a vector), and all other dimensions must\nmatch :attr:`self`, or an error will be raised.\n\nFor a 3-D tensor with :obj:`reduce=\"prod\"` and :obj:`include_self=True` the\noutput is given as::\n\n    self[index[i], :, :] *= src[i, :, :]  # if dim == 0\n    self[:, index[i], :] *= src[:, i, :]  # if dim == 1\n    self[:, :, index[i]] *= src[:, :, i]  # if dim == 2",
            "parameters": {
              "dim": {
                "type": "int",
                "description": "dimension along which to index"
              },
              "index": {
                "type": "Tensor",
                "description": "indices of ``source`` to select from,"
              },
              "should": {
                "type": "",
                "description": "have dtype either `torch.int64` or `torch.int32`"
              },
              "source": {
                "type": "FloatTensor",
                "description": "the tensor containing values to accumulate"
              },
              "reduce": {
                "type": "str",
                "description": "the reduction operation to apply\n(:obj:`\"prod\"`, :obj:`\"mean\"`, :obj:`\"amax\"`, :obj:`\"amin\"`)"
              },
              "Keyword": {
                "type": "",
                "description": "args:"
              },
              "include_self": {
                "type": "bool",
                "description": "whether the elements from the ``self`` tensor are"
              },
              "included": {
                "type": "",
                "description": "in the reduction"
              },
              "Example": {
                "type": "",
                "description": ":\n>>> x = torch.empty(5, 3).fill_(2)\n>>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], dtype=torch.float)\n>>> index = torch.tensor([0, 4, 2, 0])\n>>> x.index_reduce_(0, index, t, 'prod')"
              },
              "tensor": {
                "type": "",
                "description": "([[10., 22., 36.],\n[ 2.,  2.,  2.],\n[ 7.,  8.,  9.],\n[ 2.,  2.,  2.],\n[ 4.,  5.,  6.]])"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.\n\n.. note::\n\n    This function only supports floating point tensors.\n\n.. warning::\n\n    This function is in beta and may change in the near future.\n\nArgs:\n    dim (int): dimension along which to index\n    index (Tensor): indices of ``source`` to select from,\n        should have dtype either `torch.int64` or `torch.int32`\n    source (FloatTensor): the tensor containing values to accumulate\n    reduce (str): the reduction operation to apply\n        (:obj:`\"prod\"`, :obj:`\"mean\"`, :obj:`\"amax\"`, :obj:`\"amin\"`)\n\nKeyword args:\n    include_self (bool): whether the elements from the ``self`` tensor are\n        included in the reduction",
            "examples": ""
          }
        },
        {
          "name": "index_select",
          "signature": "index_select(dim, index)",
          "documentation": {
            "description": "index_select(dim, index) -> Tensor\n\nSee :func:`torch.index_select`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "indices",
          "signature": "indices()",
          "documentation": {
            "description": "indices() -> Tensor\n\nReturn the indices tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.\n\n.. warning::\n  Throws an error if :attr:`self` is not a sparse COO tensor.\n\nSee also :meth:`Tensor.values`.\n\n.. note::\n  This method can only be called on a coalesced sparse tensor. See\n  :meth:`Tensor.coalesce` for details.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "inner",
          "signature": "inner(other)",
          "documentation": {
            "description": "inner(other) -> Tensor\n\nSee :func:`torch.inner`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "int",
          "signature": "int(memory_format=torch.preserve_format)",
          "documentation": {
            "description": "int(memory_format=torch.preserve_format) -> Tensor\n\n``self.int()`` is equivalent to ``self.to(torch.int32)``. See :func:`to`.",
            "parameters": {
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "returned": {
                "type": "",
                "description": "Tensor. Default: ``torch.preserve_format``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "int_repr",
          "signature": "int_repr()",
          "documentation": {
            "description": "int_repr() -> Tensor\n\nGiven a quantized Tensor,\n``self.int_repr()`` returns a CPU Tensor with uint8_t as data type that stores the\nunderlying uint8_t values of the given Tensor.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "inverse",
          "signature": "inverse()",
          "documentation": {
            "description": "inverse() -> Tensor\n\nSee :func:`torch.inverse`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "ipu",
          "signature": "ipu(device=None, non_blocking=False, memory_format=torch.preserve_format)",
          "documentation": {
            "description": "ipu(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor\n\nReturns a copy of this object in IPU memory.\n\nIf this object is already in IPU memory and on the correct device,\nthen no copy is performed and the original object is returned.",
            "parameters": {
              "device": {
                "type": ":class:`torch.device`",
                "description": "The destination IPU device."
              },
              "Defaults": {
                "type": "",
                "description": "to the current IPU device."
              },
              "non_blocking": {
                "type": "bool",
                "description": "If ``True`` and the source is in pinned memory,"
              },
              "the": {
                "type": "",
                "description": "copy will be asynchronous with respect to the host."
              },
              "Otherwise": {
                "type": "",
                "description": ", the argument has no effect. Default: ``False``."
              },
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "returned": {
                "type": "",
                "description": "Tensor. Default: ``torch.preserve_format``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_coalesced",
          "signature": "is_coalesced()",
          "documentation": {
            "description": "is_coalesced() -> bool\n\nReturns ``True`` if :attr:`self` is a :ref:`sparse COO tensor\n<sparse-coo-docs>` that is coalesced, ``False`` otherwise.\n\n.. warning::\n  Throws an error if :attr:`self` is not a sparse COO tensor.\n\nSee :meth:`coalesce` and :ref:`uncoalesced tensors <sparse-uncoalesced-coo-docs>`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_complex",
          "signature": "is_complex()",
          "documentation": {
            "description": "is_complex() -> bool\n\nReturns True if the data type of :attr:`self` is a complex data type.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_conj",
          "signature": "is_conj()",
          "documentation": {
            "description": "is_conj() -> bool\n\nReturns True if the conjugate bit of :attr:`self` is set to true.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_contiguous",
          "signature": "is_contiguous(memory_format=torch.contiguous_format)",
          "documentation": {
            "description": "is_contiguous(memory_format=torch.contiguous_format) -> bool\n\nReturns True if :attr:`self` tensor is contiguous in memory in the order specified\nby memory format.",
            "parameters": {
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "Specifies memory allocation"
              },
              "order": {
                "type": "",
                "description": ". Default: ``torch.contiguous_format``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_distributed",
          "signature": "is_distributed(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_floating_point",
          "signature": "is_floating_point()",
          "documentation": {
            "description": "is_floating_point() -> bool\n\nReturns True if the data type of :attr:`self` is a floating point data type.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_inference",
          "signature": "is_inference()",
          "documentation": {
            "description": "is_inference() -> bool\n\nSee :func:`torch.is_inference`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_neg",
          "signature": "is_neg()",
          "documentation": {
            "description": "is_neg() -> bool\n\nReturns True if the negative bit of :attr:`self` is set to true.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_nonzero",
          "signature": "is_nonzero(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_pinned",
          "signature": "is_pinned(...)",
          "documentation": {
            "description": "Returns true if this tensor resides in pinned memory.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_same_size",
          "signature": "is_same_size(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_set_to",
          "signature": "is_set_to(tensor)",
          "documentation": {
            "description": "is_set_to(tensor) -> bool\n\nReturns True if both tensors are pointing to the exact same memory (same\nstorage, offset, size and stride).",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_shared",
          "signature": "is_shared(self)",
          "documentation": {
            "description": "Checks if tensor is in shared memory.\n\nThis is always ``True`` for CUDA tensors.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "is_signed",
          "signature": "is_signed()",
          "documentation": {
            "description": "is_signed() -> bool\n\nReturns True if the data type of :attr:`self` is a signed data type.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "isclose",
          "signature": "isclose(other, rtol=1e-05, atol=1e-08, equal_nan=False)",
          "documentation": {
            "description": "isclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor\n\nSee :func:`torch.isclose`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "isfinite",
          "signature": "isfinite()",
          "documentation": {
            "description": "isfinite() -> Tensor\n\nSee :func:`torch.isfinite`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "isinf",
          "signature": "isinf()",
          "documentation": {
            "description": "isinf() -> Tensor\n\nSee :func:`torch.isinf`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "isnan",
          "signature": "isnan()",
          "documentation": {
            "description": "isnan() -> Tensor\n\nSee :func:`torch.isnan`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "isneginf",
          "signature": "isneginf()",
          "documentation": {
            "description": "isneginf() -> Tensor\n\nSee :func:`torch.isneginf`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "isposinf",
          "signature": "isposinf()",
          "documentation": {
            "description": "isposinf() -> Tensor\n\nSee :func:`torch.isposinf`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "isreal",
          "signature": "isreal()",
          "documentation": {
            "description": "isreal() -> Tensor\n\nSee :func:`torch.isreal`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "istft",
          "signature": "istft(self, n_fft: int, hop_length: Optional[int] = None, win_length: Optional[int] = None, window: 'Optional[Tensor]' = None, center: bool = True, normalized: bool = False, onesided: Optional[bool] = None, length: Optional[int] = None, return_complex: bool = False)",
          "documentation": {
            "description": "See :func:`torch.istft`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "item",
          "signature": "item()",
          "documentation": {
            "description": "item() -> number\n\nReturns the value of this tensor as a standard Python number. This only works\nfor tensors with one element. For other cases, see :meth:`~Tensor.tolist`.\n\nThis operation is not differentiable.\n\nExample::\n\n    >>> x = torch.tensor([1.0])\n    >>> x.item()\n    1.0",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "kron",
          "signature": "kron(other)",
          "documentation": {
            "description": "kron(other) -> Tensor\n\nSee :func:`torch.kron`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "kthvalue",
          "signature": "kthvalue(k, dim=None, keepdim=False)",
          "documentation": {
            "description": "kthvalue(k, dim=None, keepdim=False) -> (Tensor, LongTensor)\n\nSee :func:`torch.kthvalue`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "lcm",
          "signature": "lcm(other)",
          "documentation": {
            "description": "lcm(other) -> Tensor\n\nSee :func:`torch.lcm`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "lcm_",
          "signature": "lcm_(other)",
          "documentation": {
            "description": "lcm_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.lcm`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "ldexp",
          "signature": "ldexp(other)",
          "documentation": {
            "description": "ldexp(other) -> Tensor\n\nSee :func:`torch.ldexp`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "ldexp_",
          "signature": "ldexp_(other)",
          "documentation": {
            "description": "ldexp_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.ldexp`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "le",
          "signature": "le(other)",
          "documentation": {
            "description": "le(other) -> Tensor\n\nSee :func:`torch.le`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "le_",
          "signature": "le_(other)",
          "documentation": {
            "description": "le_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.le`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "lerp",
          "signature": "lerp(end, weight)",
          "documentation": {
            "description": "lerp(end, weight) -> Tensor\n\nSee :func:`torch.lerp`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "lerp_",
          "signature": "lerp_(end, weight)",
          "documentation": {
            "description": "lerp_(end, weight) -> Tensor\n\nIn-place version of :meth:`~Tensor.lerp`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "less",
          "signature": "less(other)",
          "documentation": {
            "description": "lt(other) -> Tensor\n\nSee :func:`torch.less`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "less_",
          "signature": "less_(other)",
          "documentation": {
            "description": "less_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.less`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "less_equal",
          "signature": "less_equal(other)",
          "documentation": {
            "description": "less_equal(other) -> Tensor\n\nSee :func:`torch.less_equal`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "less_equal_",
          "signature": "less_equal_(other)",
          "documentation": {
            "description": "less_equal_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.less_equal`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "lgamma",
          "signature": "lgamma()",
          "documentation": {
            "description": "lgamma() -> Tensor\n\nSee :func:`torch.lgamma`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "lgamma_",
          "signature": "lgamma_()",
          "documentation": {
            "description": "lgamma_() -> Tensor\n\nIn-place version of :meth:`~Tensor.lgamma`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "log",
          "signature": "log()",
          "documentation": {
            "description": "log() -> Tensor\n\nSee :func:`torch.log`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "log10",
          "signature": "log10()",
          "documentation": {
            "description": "log10() -> Tensor\n\nSee :func:`torch.log10`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "log10_",
          "signature": "log10_()",
          "documentation": {
            "description": "log10_() -> Tensor\n\nIn-place version of :meth:`~Tensor.log10`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "log1p",
          "signature": "log1p()",
          "documentation": {
            "description": "log1p() -> Tensor\n\nSee :func:`torch.log1p`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "log1p_",
          "signature": "log1p_()",
          "documentation": {
            "description": "log1p_() -> Tensor\n\nIn-place version of :meth:`~Tensor.log1p`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "log2",
          "signature": "log2()",
          "documentation": {
            "description": "log2() -> Tensor\n\nSee :func:`torch.log2`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "log2_",
          "signature": "log2_()",
          "documentation": {
            "description": "log2_() -> Tensor\n\nIn-place version of :meth:`~Tensor.log2`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "log_",
          "signature": "log_()",
          "documentation": {
            "description": "log_() -> Tensor\n\nIn-place version of :meth:`~Tensor.log`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "log_normal_",
          "signature": "log_normal_(mean=1, std=2, *, generator=None)",
          "documentation": {
            "description": "log_normal_(mean=1, std=2, *, generator=None)\n\nFills :attr:`self` tensor with numbers samples from the log-normal distribution\nparameterized by the given mean :math:`\\mu` and standard deviation\n:math:`\\sigma`. Note that :attr:`mean` and :attr:`std` are the mean and\nstandard deviation of the underlying normal distribution, and not of the\nreturned distribution:\n\n.. math::\n\n    f(x) = \\dfrac{1}{x \\sigma \\sqrt{2\\pi}}\\ e^{-\\frac{(\\ln x - \\mu)^2}{2\\sigma^2}}",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "log_softmax",
          "signature": "log_softmax(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "logaddexp",
          "signature": "logaddexp(other)",
          "documentation": {
            "description": "logaddexp(other) -> Tensor\n\nSee :func:`torch.logaddexp`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "logaddexp2",
          "signature": "logaddexp2(other)",
          "documentation": {
            "description": "logaddexp2(other) -> Tensor\n\nSee :func:`torch.logaddexp2`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "logcumsumexp",
          "signature": "logcumsumexp(dim)",
          "documentation": {
            "description": "logcumsumexp(dim) -> Tensor\n\nSee :func:`torch.logcumsumexp`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "logdet",
          "signature": "logdet()",
          "documentation": {
            "description": "logdet() -> Tensor\n\nSee :func:`torch.logdet`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "logical_and",
          "signature": "logical_and()",
          "documentation": {
            "description": "logical_and() -> Tensor\n\nSee :func:`torch.logical_and`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "logical_and_",
          "signature": "logical_and_()",
          "documentation": {
            "description": "logical_and_() -> Tensor\n\nIn-place version of :meth:`~Tensor.logical_and`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "logical_not",
          "signature": "logical_not()",
          "documentation": {
            "description": "logical_not() -> Tensor\n\nSee :func:`torch.logical_not`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "logical_not_",
          "signature": "logical_not_()",
          "documentation": {
            "description": "logical_not_() -> Tensor\n\nIn-place version of :meth:`~Tensor.logical_not`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "logical_or",
          "signature": "logical_or()",
          "documentation": {
            "description": "logical_or() -> Tensor\n\nSee :func:`torch.logical_or`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "logical_or_",
          "signature": "logical_or_()",
          "documentation": {
            "description": "logical_or_() -> Tensor\n\nIn-place version of :meth:`~Tensor.logical_or`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "logical_xor",
          "signature": "logical_xor()",
          "documentation": {
            "description": "logical_xor() -> Tensor\n\nSee :func:`torch.logical_xor`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "logical_xor_",
          "signature": "logical_xor_()",
          "documentation": {
            "description": "logical_xor_() -> Tensor\n\nIn-place version of :meth:`~Tensor.logical_xor`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "logit",
          "signature": "logit()",
          "documentation": {
            "description": "logit() -> Tensor\n\nSee :func:`torch.logit`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "logit_",
          "signature": "logit_()",
          "documentation": {
            "description": "logit_() -> Tensor\n\nIn-place version of :meth:`~Tensor.logit`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "logsumexp",
          "signature": "logsumexp(dim, keepdim=False)",
          "documentation": {
            "description": "logsumexp(dim, keepdim=False) -> Tensor\n\nSee :func:`torch.logsumexp`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "long",
          "signature": "long(memory_format=torch.preserve_format)",
          "documentation": {
            "description": "long(memory_format=torch.preserve_format) -> Tensor\n\n``self.long()`` is equivalent to ``self.to(torch.int64)``. See :func:`to`.",
            "parameters": {
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "returned": {
                "type": "",
                "description": "Tensor. Default: ``torch.preserve_format``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "lstsq",
          "signature": "lstsq(self, other)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "lt",
          "signature": "lt(other)",
          "documentation": {
            "description": "lt(other) -> Tensor\n\nSee :func:`torch.lt`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "lt_",
          "signature": "lt_(other)",
          "documentation": {
            "description": "lt_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.lt`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "lu",
          "signature": "lu(self, pivot=True, get_infos=False)",
          "documentation": {
            "description": "See :func:`torch.lu`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "lu_solve",
          "signature": "lu_solve(LU_data, LU_pivots)",
          "documentation": {
            "description": "lu_solve(LU_data, LU_pivots) -> Tensor\n\nSee :func:`torch.lu_solve`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "map2_",
          "signature": "map2_(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "map_",
          "signature": "map_(tensor, callable)",
          "documentation": {
            "description": "map_(tensor, callable)\n\nApplies :attr:`callable` for each element in :attr:`self` tensor and the given\n:attr:`tensor` and stores the results in :attr:`self` tensor. :attr:`self` tensor and\nthe given :attr:`tensor` must be :ref:`broadcastable <broadcasting-semantics>`.\n\nThe :attr:`callable` should have the signature::\n\n    def callable(a, b) -> number",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "masked_fill",
          "signature": "masked_fill(mask, value)",
          "documentation": {
            "description": "masked_fill(mask, value) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.masked_fill_`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "masked_fill_",
          "signature": "masked_fill_(mask, value)",
          "documentation": {
            "description": "masked_fill_(mask, value)\n\nFills elements of :attr:`self` tensor with :attr:`value` where :attr:`mask` is\nTrue. The shape of :attr:`mask` must be\n:ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying\ntensor.",
            "parameters": {
              "mask": {
                "type": "BoolTensor",
                "description": "the boolean mask"
              },
              "value": {
                "type": "float",
                "description": "the value to fill in with"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "masked_scatter",
          "signature": "masked_scatter(mask, tensor)",
          "documentation": {
            "description": "masked_scatter(mask, tensor) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.masked_scatter_`\n\n.. note::\n\n    The inputs :attr:`self` and :attr:`mask`\n    :ref:`broadcast <broadcasting-semantics>`.\n\nExample:\n\n    >>> self = torch.tensor([0, 0, 0, 0, 0])\n    >>> mask = torch.tensor([[0, 0, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=torch.bool)\n    >>> source = torch.tensor([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n    >>> self.masked_scatter(mask, source)\n    tensor([[0, 0, 0, 0, 1],\n            [2, 3, 0, 4, 5]])",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ">>> self = torch.tensor([0, 0, 0, 0, 0])\n    >>> mask = torch.tensor([[0, 0, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=torch.bool)\n    >>> source = torch.tensor([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n    >>> self.masked_scatter(mask, source)\n    tensor([[0, 0, 0, 0, 1],\n            [2, 3, 0, 4, 5]])"
          }
        },
        {
          "name": "masked_scatter_",
          "signature": "masked_scatter_(mask, source)",
          "documentation": {
            "description": "masked_scatter_(mask, source)\n\nCopies elements from :attr:`source` into :attr:`self` tensor at positions where\nthe :attr:`mask` is True. Elements from :attr:`source` are copied into :attr:`self`\nstarting at position 0 of :attr:`source` and continuing in order one-by-one for each\noccurrence of :attr:`mask` being True.\nThe shape of :attr:`mask` must be :ref:`broadcastable <broadcasting-semantics>`\nwith the shape of the underlying tensor. The :attr:`source` should have at least\nas many elements as the number of ones in :attr:`mask`.",
            "parameters": {
              "mask": {
                "type": "BoolTensor",
                "description": "the boolean mask"
              },
              "source": {
                "type": "Tensor",
                "description": "the tensor to copy from\n.. note::"
              },
              "The": {
                "type": "",
                "description": "attr:`mask` operates on the :attr:`self` tensor, not on the given\n:attr:`source` tensor."
              },
              "Example": {
                "type": "",
                "description": ">>> self = torch.tensor([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])\n>>> mask = torch.tensor([[0, 0, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=torch.bool)\n>>> source = torch.tensor([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n>>> self.masked_scatter_(mask, source)"
              },
              "tensor": {
                "type": "",
                "description": "([[0, 0, 0, 0, 1],\n[2, 3, 0, 4, 5]])"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ">>> self = torch.tensor([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])\n    >>> mask = torch.tensor([[0, 0, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=torch.bool)\n    >>> source = torch.tensor([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n    >>> self.masked_scatter_(mask, source)\n    tensor([[0, 0, 0, 0, 1],\n            [2, 3, 0, 4, 5]])"
          }
        },
        {
          "name": "masked_select",
          "signature": "masked_select(mask)",
          "documentation": {
            "description": "masked_select(mask) -> Tensor\n\nSee :func:`torch.masked_select`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "matmul",
          "signature": "matmul(tensor2)",
          "documentation": {
            "description": "matmul(tensor2) -> Tensor\n\nSee :func:`torch.matmul`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "matrix_exp",
          "signature": "matrix_exp()",
          "documentation": {
            "description": "matrix_exp() -> Tensor\n\nSee :func:`torch.matrix_exp`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "matrix_power",
          "signature": "matrix_power(n)",
          "documentation": {
            "description": "matrix_power(n) -> Tensor\n\n.. note:: :meth:`~Tensor.matrix_power` is deprecated, use :func:`torch.linalg.matrix_power` instead.\n\nAlias for :func:`torch.linalg.matrix_power`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "max",
          "signature": "max(dim=None, keepdim=False)",
          "documentation": {
            "description": "max(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)\n\nSee :func:`torch.max`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "maximum",
          "signature": "maximum(other)",
          "documentation": {
            "description": "maximum(other) -> Tensor\n\nSee :func:`torch.maximum`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "mean",
          "signature": "mean(dim=None, keepdim=False, *, dtype=None)",
          "documentation": {
            "description": "mean(dim=None, keepdim=False, *, dtype=None) -> Tensor\n\nSee :func:`torch.mean`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "median",
          "signature": "median(dim=None, keepdim=False)",
          "documentation": {
            "description": "median(dim=None, keepdim=False) -> (Tensor, LongTensor)\n\nSee :func:`torch.median`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "min",
          "signature": "min(dim=None, keepdim=False)",
          "documentation": {
            "description": "min(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)\n\nSee :func:`torch.min`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "minimum",
          "signature": "minimum(other)",
          "documentation": {
            "description": "minimum(other) -> Tensor\n\nSee :func:`torch.minimum`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "mm",
          "signature": "mm(mat2)",
          "documentation": {
            "description": "mm(mat2) -> Tensor\n\nSee :func:`torch.mm`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "mode",
          "signature": "mode(dim=None, keepdim=False)",
          "documentation": {
            "description": "mode(dim=None, keepdim=False) -> (Tensor, LongTensor)\n\nSee :func:`torch.mode`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "module_load",
          "signature": "module_load(self, other, assign=False)",
          "documentation": {
            "description": "Defines how to transform ``other`` when loading it into ``self`` in :meth:`~nn.Module.load_state_dict`.\n\nUsed when :func:`~torch.__future__.get_swap_module_params_on_conversion` is ``True``.\n\nIt is expected that ``self`` is a parameter or buffer in an ``nn.Module`` and ``other`` is the\nvalue in the state dictionary with the corresponding key, this method defines\nhow ``other`` is remapped before being swapped with ``self`` via\n:func:`~torch.utils.swap_tensors` in :meth:`~nn.Module.load_state_dict`.\n\n.. note::\n    This method should always return a new object that is not ``self`` or ``other``.\n    For example, the default implementation returns ``self.copy_(other).detach()``\n    if ``assign`` is ``False`` or ``other.detach()`` if ``assign`` is ``True``.",
            "parameters": {
              "other": {
                "type": "Tensor",
                "description": "value in state dict with key corresponding to ``self``"
              },
              "assign": {
                "type": "bool",
                "description": "the assign argument passed to :meth:`nn.Module.load_state_dict`"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "moveaxis",
          "signature": "moveaxis(source, destination)",
          "documentation": {
            "description": "moveaxis(source, destination) -> Tensor\n\nSee :func:`torch.moveaxis`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "movedim",
          "signature": "movedim(source, destination)",
          "documentation": {
            "description": "movedim(source, destination) -> Tensor\n\nSee :func:`torch.movedim`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "msort",
          "signature": "msort()",
          "documentation": {
            "description": "msort() -> Tensor\n\nSee :func:`torch.msort`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "mtia",
          "signature": "mtia(device=None, non_blocking=False, memory_format=torch.preserve_format)",
          "documentation": {
            "description": "mtia(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor\n\nReturns a copy of this object in MTIA memory.\n\nIf this object is already in MTIA memory and on the correct device,\nthen no copy is performed and the original object is returned.",
            "parameters": {
              "device": {
                "type": ":class:`torch.device`",
                "description": "The destination MTIA device."
              },
              "Defaults": {
                "type": "",
                "description": "to the current MTIA device."
              },
              "non_blocking": {
                "type": "bool",
                "description": "If ``True`` and the source is in pinned memory,"
              },
              "the": {
                "type": "",
                "description": "copy will be asynchronous with respect to the host."
              },
              "Otherwise": {
                "type": "",
                "description": ", the argument has no effect. Default: ``False``."
              },
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "returned": {
                "type": "",
                "description": "Tensor. Default: ``torch.preserve_format``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "mul",
          "signature": "mul(value)",
          "documentation": {
            "description": "mul(value) -> Tensor\n\nSee :func:`torch.mul`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "mul_",
          "signature": "mul_(value)",
          "documentation": {
            "description": "mul_(value) -> Tensor\n\nIn-place version of :meth:`~Tensor.mul`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "multinomial",
          "signature": "multinomial(num_samples, replacement=False, *, generator=None)",
          "documentation": {
            "description": "multinomial(num_samples, replacement=False, *, generator=None) -> Tensor\n\nSee :func:`torch.multinomial`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "multiply",
          "signature": "multiply(value)",
          "documentation": {
            "description": "multiply(value) -> Tensor\n\nSee :func:`torch.multiply`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "multiply_",
          "signature": "multiply_(value)",
          "documentation": {
            "description": "multiply_(value) -> Tensor\n\nIn-place version of :meth:`~Tensor.multiply`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "mv",
          "signature": "mv(vec)",
          "documentation": {
            "description": "mv(vec) -> Tensor\n\nSee :func:`torch.mv`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "mvlgamma",
          "signature": "mvlgamma(p)",
          "documentation": {
            "description": "mvlgamma(p) -> Tensor\n\nSee :func:`torch.mvlgamma`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "mvlgamma_",
          "signature": "mvlgamma_(p)",
          "documentation": {
            "description": "mvlgamma_(p) -> Tensor\n\nIn-place version of :meth:`~Tensor.mvlgamma`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "nan_to_num",
          "signature": "nan_to_num(nan=0.0, posinf=None, neginf=None)",
          "documentation": {
            "description": "nan_to_num(nan=0.0, posinf=None, neginf=None) -> Tensor\n\nSee :func:`torch.nan_to_num`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "nan_to_num_",
          "signature": "nan_to_num_(nan=0.0, posinf=None, neginf=None)",
          "documentation": {
            "description": "nan_to_num_(nan=0.0, posinf=None, neginf=None) -> Tensor\n\nIn-place version of :meth:`~Tensor.nan_to_num`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "nanmean",
          "signature": "nanmean(dim=None, keepdim=False, *, dtype=None)",
          "documentation": {
            "description": "nanmean(dim=None, keepdim=False, *, dtype=None) -> Tensor\n\nSee :func:`torch.nanmean`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "nanmedian",
          "signature": "nanmedian(dim=None, keepdim=False)",
          "documentation": {
            "description": "nanmedian(dim=None, keepdim=False) -> (Tensor, LongTensor)\n\nSee :func:`torch.nanmedian`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "nanquantile",
          "signature": "nanquantile(q, dim=None, keepdim=False, *, interpolation='linear')",
          "documentation": {
            "description": "nanquantile(q, dim=None, keepdim=False, *, interpolation='linear') -> Tensor\n\nSee :func:`torch.nanquantile`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "nansum",
          "signature": "nansum(dim=None, keepdim=False, dtype=None)",
          "documentation": {
            "description": "nansum(dim=None, keepdim=False, dtype=None) -> Tensor\n\nSee :func:`torch.nansum`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "narrow",
          "signature": "narrow(dimension, start, length)",
          "documentation": {
            "description": "narrow(dimension, start, length) -> Tensor\n\nSee :func:`torch.narrow`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "narrow_copy",
          "signature": "narrow_copy(dimension, start, length)",
          "documentation": {
            "description": "narrow_copy(dimension, start, length) -> Tensor\n\nSee :func:`torch.narrow_copy`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "ndimension",
          "signature": "ndimension()",
          "documentation": {
            "description": "ndimension() -> int\n\nAlias for :meth:`~Tensor.dim()`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "ne",
          "signature": "ne(other)",
          "documentation": {
            "description": "ne(other) -> Tensor\n\nSee :func:`torch.ne`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "ne_",
          "signature": "ne_(other)",
          "documentation": {
            "description": "ne_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.ne`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "neg",
          "signature": "neg()",
          "documentation": {
            "description": "neg() -> Tensor\n\nSee :func:`torch.neg`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "neg_",
          "signature": "neg_()",
          "documentation": {
            "description": "neg_() -> Tensor\n\nIn-place version of :meth:`~Tensor.neg`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "negative",
          "signature": "negative()",
          "documentation": {
            "description": "negative() -> Tensor\n\nSee :func:`torch.negative`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "negative_",
          "signature": "negative_()",
          "documentation": {
            "description": "negative_() -> Tensor\n\nIn-place version of :meth:`~Tensor.negative`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "nelement",
          "signature": "nelement()",
          "documentation": {
            "description": "nelement() -> int\n\nAlias for :meth:`~Tensor.numel`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "new",
          "signature": "new(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "new_empty",
          "signature": "new_empty(size, *, dtype=None, device=None, requires_grad=False, layout=torch.strided, pin_memory=False)",
          "documentation": {
            "description": "new_empty(size, *, dtype=None, device=None, requires_grad=False, layout=torch.strided, pin_memory=False) -> Tensor\n\n\nReturns a Tensor of size :attr:`size` filled with uninitialized data.\nBy default, the returned Tensor has the same :class:`torch.dtype` and\n:class:`torch.device` as this tensor.",
            "parameters": {
              "size": {
                "type": "int...",
                "description": "a list, tuple, or :class:`torch.Size` of integers defining the"
              },
              "shape": {
                "type": "",
                "description": "of the output tensor."
              },
              "Keyword": {
                "type": "",
                "description": "args:"
              },
              "dtype": {
                "type": ":class:`torch.dtype`, optional",
                "description": "the desired type of returned tensor."
              },
              "Default": {
                "type": "",
                "description": "``torch.strided``."
              },
              "device": {
                "type": ":class:`torch.device`, optional",
                "description": "the desired device of returned tensor."
              },
              "requires_grad": {
                "type": "bool, optional",
                "description": "If autograd should record operations on the"
              },
              "returned": {
                "type": "",
                "description": "tensor. Default: ``False``."
              },
              "layout": {
                "type": ":class:`torch.layout`, optional",
                "description": "the desired layout of returned Tensor."
              },
              "pin_memory": {
                "type": "bool, optional",
                "description": "If set, returned tensor would be allocated in"
              },
              "the": {
                "type": "",
                "description": "pinned memory. Works only for CPU tensors. Default: ``False``."
              },
              "Example": {
                "type": "",
                "description": ":\n>>> tensor = torch.ones(())\n>>> tensor.new_empty((2, 3))"
              },
              "tensor": {
                "type": "",
                "description": "([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],\n[ 3.0949e-41,  4.4842e-44,  0.0000e+00]])"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "new_empty_strided",
          "signature": "new_empty_strided(size, stride, dtype=None, device=None, requires_grad=False, layout=torch.strided, pin_memory=False)",
          "documentation": {
            "description": "new_empty_strided(size, stride, dtype=None, device=None, requires_grad=False, layout=torch.strided, pin_memory=False) -> Tensor\n\n\nReturns a Tensor of size :attr:`size` and strides :attr:`stride` filled with\nuninitialized data. By default, the returned Tensor has the same\n:class:`torch.dtype` and :class:`torch.device` as this tensor.",
            "parameters": {
              "size": {
                "type": "int...",
                "description": "a list, tuple, or :class:`torch.Size` of integers defining the"
              },
              "shape": {
                "type": "",
                "description": "of the output tensor."
              },
              "Keyword": {
                "type": "",
                "description": "args:"
              },
              "dtype": {
                "type": ":class:`torch.dtype`, optional",
                "description": "the desired type of returned tensor."
              },
              "Default": {
                "type": "",
                "description": "``torch.strided``."
              },
              "device": {
                "type": ":class:`torch.device`, optional",
                "description": "the desired device of returned tensor."
              },
              "requires_grad": {
                "type": "bool, optional",
                "description": "If autograd should record operations on the"
              },
              "returned": {
                "type": "",
                "description": "tensor. Default: ``False``."
              },
              "layout": {
                "type": ":class:`torch.layout`, optional",
                "description": "the desired layout of returned Tensor."
              },
              "pin_memory": {
                "type": "bool, optional",
                "description": "If set, returned tensor would be allocated in"
              },
              "the": {
                "type": "",
                "description": "pinned memory. Works only for CPU tensors. Default: ``False``."
              },
              "Example": {
                "type": "",
                "description": ":\n>>> tensor = torch.ones(())\n>>> tensor.new_empty_strided((2, 3), (3, 1))"
              },
              "tensor": {
                "type": "",
                "description": "([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],\n[ 3.0949e-41,  4.4842e-44,  0.0000e+00]])"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "new_full",
          "signature": "new_full(size, fill_value, *, dtype=None, device=None, requires_grad=False, layout=torch.strided, pin_memory=False)",
          "documentation": {
            "description": "new_full(size, fill_value, *, dtype=None, device=None, requires_grad=False, layout=torch.strided, pin_memory=False) -> Tensor\n\n\nReturns a Tensor of size :attr:`size` filled with :attr:`fill_value`.\nBy default, the returned Tensor has the same :class:`torch.dtype` and\n:class:`torch.device` as this tensor.",
            "parameters": {
              "fill_value": {
                "type": "scalar",
                "description": "the number to fill the output tensor with."
              },
              "Keyword": {
                "type": "",
                "description": "args:"
              },
              "dtype": {
                "type": ":class:`torch.dtype`, optional",
                "description": "the desired type of returned tensor."
              },
              "Default": {
                "type": "",
                "description": "``torch.strided``."
              },
              "device": {
                "type": ":class:`torch.device`, optional",
                "description": "the desired device of returned tensor."
              },
              "requires_grad": {
                "type": "bool, optional",
                "description": "If autograd should record operations on the"
              },
              "returned": {
                "type": "",
                "description": "tensor. Default: ``False``."
              },
              "layout": {
                "type": ":class:`torch.layout`, optional",
                "description": "the desired layout of returned Tensor."
              },
              "pin_memory": {
                "type": "bool, optional",
                "description": "If set, returned tensor would be allocated in"
              },
              "the": {
                "type": "",
                "description": "pinned memory. Works only for CPU tensors. Default: ``False``."
              },
              "Example": {
                "type": "",
                "description": ":\n>>> tensor = torch.ones((2,), dtype=torch.float64)\n>>> tensor.new_full((3, 4), 3.141592)"
              },
              "tensor": {
                "type": "",
                "description": "([[ 3.1416,  3.1416,  3.1416,  3.1416],\n[ 3.1416,  3.1416,  3.1416,  3.1416],\n[ 3.1416,  3.1416,  3.1416,  3.1416]], dtype=torch.float64)"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "new_ones",
          "signature": "new_ones(size, *, dtype=None, device=None, requires_grad=False, layout=torch.strided, pin_memory=False)",
          "documentation": {
            "description": "new_ones(size, *, dtype=None, device=None, requires_grad=False, layout=torch.strided, pin_memory=False) -> Tensor\n\n\nReturns a Tensor of size :attr:`size` filled with ``1``.\nBy default, the returned Tensor has the same :class:`torch.dtype` and\n:class:`torch.device` as this tensor.",
            "parameters": {
              "size": {
                "type": "int...",
                "description": "a list, tuple, or :class:`torch.Size` of integers defining the"
              },
              "shape": {
                "type": "",
                "description": "of the output tensor."
              },
              "Keyword": {
                "type": "",
                "description": "args:"
              },
              "dtype": {
                "type": ":class:`torch.dtype`, optional",
                "description": "the desired type of returned tensor."
              },
              "Default": {
                "type": "",
                "description": "``torch.strided``."
              },
              "device": {
                "type": ":class:`torch.device`, optional",
                "description": "the desired device of returned tensor."
              },
              "requires_grad": {
                "type": "bool, optional",
                "description": "If autograd should record operations on the"
              },
              "returned": {
                "type": "",
                "description": "tensor. Default: ``False``."
              },
              "layout": {
                "type": ":class:`torch.layout`, optional",
                "description": "the desired layout of returned Tensor."
              },
              "pin_memory": {
                "type": "bool, optional",
                "description": "If set, returned tensor would be allocated in"
              },
              "the": {
                "type": "",
                "description": "pinned memory. Works only for CPU tensors. Default: ``False``."
              },
              "Example": {
                "type": "",
                "description": ":\n>>> tensor = torch.tensor((), dtype=torch.int32)\n>>> tensor.new_ones((2, 3))"
              },
              "tensor": {
                "type": "",
                "description": "([[ 1,  1,  1],\n[ 1,  1,  1]], dtype=torch.int32)"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "new_tensor",
          "signature": "new_tensor(data, *, dtype=None, device=None, requires_grad=False, layout=torch.strided, pin_memory=False)",
          "documentation": {
            "description": "new_tensor(data, *, dtype=None, device=None, requires_grad=False, layout=torch.strided, pin_memory=False) -> Tensor\n\n\nReturns a new Tensor with :attr:`data` as the tensor data.\nBy default, the returned Tensor has the same :class:`torch.dtype` and\n:class:`torch.device` as this tensor.\n\n.. warning::\n\n    :func:`new_tensor` always copies :attr:`data`. If you have a Tensor\n    ``data`` and want to avoid a copy, use :func:`torch.Tensor.requires_grad_`\n    or :func:`torch.Tensor.detach`.\n    If you have a numpy array and want to avoid a copy, use\n    :func:`torch.from_numpy`.\n\n.. warning::\n\n    When data is a tensor `x`, :func:`new_tensor()` reads out 'the data' from whatever it is passed,\n    and constructs a leaf variable. Therefore ``tensor.new_tensor(x)`` is equivalent to ``x.clone().detach()``\n    and ``tensor.new_tensor(x, requires_grad=True)`` is equivalent to ``x.clone().detach().requires_grad_(True)``.\n    The equivalents using ``clone()`` and ``detach()`` are recommended.",
            "parameters": {
              "data": {
                "type": "array_like",
                "description": "The returned Tensor copies :attr:`data`."
              },
              "Keyword": {
                "type": "",
                "description": "args:"
              },
              "dtype": {
                "type": ":class:`torch.dtype`, optional",
                "description": "the desired type of returned tensor."
              },
              "Default": {
                "type": "",
                "description": "``torch.strided``."
              },
              "device": {
                "type": ":class:`torch.device`, optional",
                "description": "the desired device of returned tensor."
              },
              "requires_grad": {
                "type": "bool, optional",
                "description": "If autograd should record operations on the"
              },
              "returned": {
                "type": "",
                "description": "tensor. Default: ``False``."
              },
              "layout": {
                "type": ":class:`torch.layout`, optional",
                "description": "the desired layout of returned Tensor."
              },
              "pin_memory": {
                "type": "bool, optional",
                "description": "If set, returned tensor would be allocated in"
              },
              "the": {
                "type": "",
                "description": "pinned memory. Works only for CPU tensors. Default: ``False``."
              },
              "Example": {
                "type": "",
                "description": ":\n>>> tensor = torch.ones((2,), dtype=torch.int8)\n>>> data = [[0, 1], [2, 3]]\n>>> tensor.new_tensor(data)"
              },
              "tensor": {
                "type": "",
                "description": "([[ 0,  1],\n[ 2,  3]], dtype=torch.int8)"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "new_zeros",
          "signature": "new_zeros(size, *, dtype=None, device=None, requires_grad=False, layout=torch.strided, pin_memory=False)",
          "documentation": {
            "description": "new_zeros(size, *, dtype=None, device=None, requires_grad=False, layout=torch.strided, pin_memory=False) -> Tensor\n\n\nReturns a Tensor of size :attr:`size` filled with ``0``.\nBy default, the returned Tensor has the same :class:`torch.dtype` and\n:class:`torch.device` as this tensor.",
            "parameters": {
              "size": {
                "type": "int...",
                "description": "a list, tuple, or :class:`torch.Size` of integers defining the"
              },
              "shape": {
                "type": "",
                "description": "of the output tensor."
              },
              "Keyword": {
                "type": "",
                "description": "args:"
              },
              "dtype": {
                "type": ":class:`torch.dtype`, optional",
                "description": "the desired type of returned tensor."
              },
              "Default": {
                "type": "",
                "description": "``torch.strided``."
              },
              "device": {
                "type": ":class:`torch.device`, optional",
                "description": "the desired device of returned tensor."
              },
              "requires_grad": {
                "type": "bool, optional",
                "description": "If autograd should record operations on the"
              },
              "returned": {
                "type": "",
                "description": "tensor. Default: ``False``."
              },
              "layout": {
                "type": ":class:`torch.layout`, optional",
                "description": "the desired layout of returned Tensor."
              },
              "pin_memory": {
                "type": "bool, optional",
                "description": "If set, returned tensor would be allocated in"
              },
              "the": {
                "type": "",
                "description": "pinned memory. Works only for CPU tensors. Default: ``False``."
              },
              "Example": {
                "type": "",
                "description": ":\n>>> tensor = torch.tensor((), dtype=torch.float64)\n>>> tensor.new_zeros((2, 3))"
              },
              "tensor": {
                "type": "",
                "description": "([[ 0.,  0.,  0.],\n[ 0.,  0.,  0.]], dtype=torch.float64)"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "nextafter",
          "signature": "nextafter(other)",
          "documentation": {
            "description": "nextafter(other) -> Tensor\nSee :func:`torch.nextafter`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "nextafter_",
          "signature": "nextafter_(other)",
          "documentation": {
            "description": "nextafter_(other) -> Tensor\nIn-place version of :meth:`~Tensor.nextafter`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "nonzero",
          "signature": "nonzero()",
          "documentation": {
            "description": "nonzero() -> LongTensor\n\nSee :func:`torch.nonzero`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "nonzero_static",
          "signature": "nonzero_static(input, *, size, fill_value=-1)",
          "documentation": {
            "description": "nonzero_static(input, *, size, fill_value=-1) -> Tensor\n\nReturns a 2-D tensor where each row is the index for a non-zero value.\nThe returned Tensor has the same `torch.dtype` as `torch.nonzero()`.",
            "parameters": {
              "input": {
                "type": "Tensor",
                "description": "the input tensor to count non-zero elements."
              },
              "Keyword": {
                "type": "",
                "description": "args:"
              },
              "size": {
                "type": "int",
                "description": "the size of non-zero elements expected to be included in the out"
              },
              "tensor": {
                "type": "[], size=(2, 0",
                "description": ", dtype=torch.int64)"
              },
              "than": {
                "type": "",
                "description": "the total number of non-zero elements. Default is `-1` to represent"
              },
              "is": {
                "type": "",
                "description": "smaller. The size must be a non-negative integer."
              },
              "fill_value": {
                "type": "int",
                "description": "the value to fill the output tensor with when `size` is larger"
              },
              "invalid": {
                "type": "",
                "description": "index."
              },
              "Example": {
                "type": "",
                "description": "# Example 1: Padding\n>>> input_tensor = torch.tensor([[1, 0], [3, 2]])\n>>> static_size = 4\n>>> t = torch.nonzero_static(input_tensor, size = static_size)"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": "# Example 1: Padding\n    >>> input_tensor = torch.tensor([[1, 0], [3, 2]])\n    >>> static_size = 4\n    >>> t = torch.nonzero_static(input_tensor, size = static_size)\n    tensor([[  0,   0],\n            [  1,   0],\n            [  1,   1],\n            [  -1, -1]], dtype=torch.int64)\n\n    # Example 2: Truncating\n    >>> input_tensor = torch.tensor([[1, 0], [3, 2]])\n    >>> static_size = 2\n    >>> t = torch.nonzero_static(input_tensor, size = static_size)\n    tensor([[  0,   0],\n            [  1,   0]], dtype=torch.int64)\n\n    # Example 3: 0 size\n    >>> input_tensor = torch.tensor([10])\n    >>> static_size = 0\n    >>> t = torch.nonzero_static(input_tensor, size = static_size)\n    tensor([], size=(0, 1), dtype=torch.int64)\n\n    # Example 4: 0 rank input\n    >>> input_tensor = torch.tensor(10)\n    >>> static_size = 2\n    >>> t = torch.nonzero_static(input_tensor, size = static_size)\n    tensor([], size=(2, 0), dtype=torch.int64)"
          }
        },
        {
          "name": "norm",
          "signature": "norm(self, p: Union[float, str, NoneType] = 'fro', dim=None, keepdim=False, dtype=None)",
          "documentation": {
            "description": "See :func:`torch.norm`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "normal_",
          "signature": "normal_(mean=0, std=1, *, generator=None)",
          "documentation": {
            "description": "normal_(mean=0, std=1, *, generator=None) -> Tensor\n\nFills :attr:`self` tensor with elements samples from the normal distribution\nparameterized by :attr:`mean` and :attr:`std`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "not_equal",
          "signature": "not_equal(other)",
          "documentation": {
            "description": "not_equal(other) -> Tensor\n\nSee :func:`torch.not_equal`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "not_equal_",
          "signature": "not_equal_(other)",
          "documentation": {
            "description": "not_equal_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.not_equal`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "numel",
          "signature": "numel()",
          "documentation": {
            "description": "numel() -> int\n\nSee :func:`torch.numel`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "numpy",
          "signature": "numpy(*, force=False)",
          "documentation": {
            "description": "numpy(*, force=False) -> numpy.ndarray\n\nReturns the tensor as a NumPy :class:`ndarray`.\n\nIf :attr:`force` is ``False`` (the default), the conversion\nis performed only if the tensor is on the CPU, does not require grad,\ndoes not have its conjugate bit set, and is a dtype and layout that\nNumPy supports. The returned ndarray and the tensor will share their\nstorage, so changes to the tensor will be reflected in the ndarray\nand vice versa.\n\nIf :attr:`force` is ``True`` this is equivalent to\ncalling ``t.detach().cpu().resolve_conj().resolve_neg().numpy()``.\nIf the tensor isn't on the CPU or the conjugate or negative bit is set,\nthe tensor won't share its storage with the returned ndarray.\nSetting :attr:`force` to ``True`` can be a useful shorthand.",
            "parameters": {
              "force": {
                "type": "bool",
                "description": "if ``True``, the ndarray may be a copy of the tensor"
              },
              "instead": {
                "type": "",
                "description": "of always sharing memory, defaults to ``False``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "orgqr",
          "signature": "orgqr(input2)",
          "documentation": {
            "description": "orgqr(input2) -> Tensor\n\nSee :func:`torch.orgqr`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "ormqr",
          "signature": "ormqr(input2, input3, left=True, transpose=False)",
          "documentation": {
            "description": "ormqr(input2, input3, left=True, transpose=False) -> Tensor\n\nSee :func:`torch.ormqr`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "outer",
          "signature": "outer(vec2)",
          "documentation": {
            "description": "outer(vec2) -> Tensor\n\nSee :func:`torch.outer`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "permute",
          "signature": "permute(*dims)",
          "documentation": {
            "description": "permute(*dims) -> Tensor\n\nSee :func:`torch.permute`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "pin_memory",
          "signature": "pin_memory()",
          "documentation": {
            "description": "pin_memory() -> Tensor\n\nCopies the tensor to pinned memory, if it's not already pinned.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "pinverse",
          "signature": "pinverse()",
          "documentation": {
            "description": "pinverse() -> Tensor\n\nSee :func:`torch.pinverse`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "polygamma",
          "signature": "polygamma(n)",
          "documentation": {
            "description": "polygamma(n) -> Tensor\n\nSee :func:`torch.polygamma`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "polygamma_",
          "signature": "polygamma_(n)",
          "documentation": {
            "description": "polygamma_(n) -> Tensor\n\nIn-place version of :meth:`~Tensor.polygamma`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "positive",
          "signature": "positive()",
          "documentation": {
            "description": "positive() -> Tensor\n\nSee :func:`torch.positive`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "pow",
          "signature": "pow(exponent)",
          "documentation": {
            "description": "pow(exponent) -> Tensor\n\nSee :func:`torch.pow`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "pow_",
          "signature": "pow_(exponent)",
          "documentation": {
            "description": "pow_(exponent) -> Tensor\n\nIn-place version of :meth:`~Tensor.pow`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "prelu",
          "signature": "prelu(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "prod",
          "signature": "prod(dim=None, keepdim=False, dtype=None)",
          "documentation": {
            "description": "prod(dim=None, keepdim=False, dtype=None) -> Tensor\n\nSee :func:`torch.prod`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "put",
          "signature": "put(input, index, source, accumulate=False)",
          "documentation": {
            "description": "put(input, index, source, accumulate=False) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.put_`.\n`input` corresponds to `self` in :meth:`torch.Tensor.put_`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "put_",
          "signature": "put_(index, source, accumulate=False)",
          "documentation": {
            "description": "put_(index, source, accumulate=False) -> Tensor\n\nCopies the elements from :attr:`source` into the positions specified by\n:attr:`index`. For the purpose of indexing, the :attr:`self` tensor is treated as if\nit were a 1-D tensor.\n\n:attr:`index` and :attr:`source` need to have the same number of elements, but not necessarily\nthe same shape.\n\nIf :attr:`accumulate` is ``True``, the elements in :attr:`source` are added to\n:attr:`self`. If accumulate is ``False``, the behavior is undefined if :attr:`index`\ncontain duplicate elements.",
            "parameters": {
              "index": {
                "type": "LongTensor",
                "description": "the indices into self"
              },
              "source": {
                "type": "Tensor",
                "description": "the tensor containing values to copy from"
              },
              "accumulate": {
                "type": "bool",
                "description": "whether to accumulate into self"
              },
              "Example": {
                "type": "",
                "description": ":\n>>> src = torch.tensor([[4, 3, 5],\n...                     [6, 7, 8]])\n>>> src.put_(torch.tensor([1, 3]), torch.tensor([9, 10]))"
              },
              "tensor": {
                "type": "",
                "description": "([[  4,   9,   5],\n[ 10,   7,   8]])"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "q_per_channel_axis",
          "signature": "q_per_channel_axis()",
          "documentation": {
            "description": "q_per_channel_axis() -> int\n\nGiven a Tensor quantized by linear (affine) per-channel quantization,\nreturns the index of dimension on which per-channel quantization is applied.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "q_per_channel_scales",
          "signature": "q_per_channel_scales()",
          "documentation": {
            "description": "q_per_channel_scales() -> Tensor\n\nGiven a Tensor quantized by linear (affine) per-channel quantization,\nreturns a Tensor of scales of the underlying quantizer. It has the number of\nelements that matches the corresponding dimensions (from q_per_channel_axis) of\nthe tensor.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "q_per_channel_zero_points",
          "signature": "q_per_channel_zero_points()",
          "documentation": {
            "description": "q_per_channel_zero_points() -> Tensor\n\nGiven a Tensor quantized by linear (affine) per-channel quantization,\nreturns a tensor of zero_points of the underlying quantizer. It has the number of\nelements that matches the corresponding dimensions (from q_per_channel_axis) of\nthe tensor.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "q_scale",
          "signature": "q_scale()",
          "documentation": {
            "description": "q_scale() -> float\n\nGiven a Tensor quantized by linear(affine) quantization,\nreturns the scale of the underlying quantizer().",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "q_zero_point",
          "signature": "q_zero_point()",
          "documentation": {
            "description": "q_zero_point() -> int\n\nGiven a Tensor quantized by linear(affine) quantization,\nreturns the zero_point of the underlying quantizer().",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "qr",
          "signature": "qr(some=True)",
          "documentation": {
            "description": "qr(some=True) -> (Tensor, Tensor)\n\nSee :func:`torch.qr`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "qscheme",
          "signature": "qscheme()",
          "documentation": {
            "description": "qscheme() -> torch.qscheme\n\nReturns the quantization scheme of a given QTensor.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "quantile",
          "signature": "quantile(q, dim=None, keepdim=False, *, interpolation='linear')",
          "documentation": {
            "description": "quantile(q, dim=None, keepdim=False, *, interpolation='linear') -> Tensor\n\nSee :func:`torch.quantile`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "rad2deg",
          "signature": "rad2deg()",
          "documentation": {
            "description": "rad2deg() -> Tensor\n\nSee :func:`torch.rad2deg`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "rad2deg_",
          "signature": "rad2deg_()",
          "documentation": {
            "description": "rad2deg_() -> Tensor\n\nIn-place version of :meth:`~Tensor.rad2deg`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "random_",
          "signature": "random_(from=0, to=None, *, generator=None)",
          "documentation": {
            "description": "random_(from=0, to=None, *, generator=None) -> Tensor\n\nFills :attr:`self` tensor with numbers sampled from the discrete uniform\ndistribution over ``[from, to - 1]``. If not specified, the values are usually\nonly bounded by :attr:`self` tensor's data type. However, for floating point\ntypes, if unspecified, range will be ``[0, 2^mantissa]`` to ensure that every\nvalue is representable. For example, `torch.tensor(1, dtype=torch.double).random_()`\nwill be uniform in ``[0, 2^53]``.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "ravel",
          "signature": "ravel()",
          "documentation": {
            "description": "ravel() -> Tensor\n\nsee :func:`torch.ravel`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "reciprocal",
          "signature": "reciprocal()",
          "documentation": {
            "description": "reciprocal() -> Tensor\n\nSee :func:`torch.reciprocal`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "reciprocal_",
          "signature": "reciprocal_()",
          "documentation": {
            "description": "reciprocal_() -> Tensor\n\nIn-place version of :meth:`~Tensor.reciprocal`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "record_stream",
          "signature": "record_stream(stream)",
          "documentation": {
            "description": "record_stream(stream)\n\nMarks the tensor as having been used by this stream.  When the tensor\nis deallocated, ensure the tensor memory is not reused for another tensor\nuntil all work queued on :attr:`stream` at the time of deallocation is\ncomplete.\n\n.. note::\n\n    The caching allocator is aware of only the stream where a tensor was\n    allocated. Due to the awareness, it already correctly manages the life\n    cycle of tensors on only one stream. But if a tensor is used on a stream\n    different from the stream of origin, the allocator might reuse the memory\n    unexpectedly. Calling this method lets the allocator know which streams\n    have used the tensor.\n\n.. warning::\n\n    This method is most suitable for use cases where you are providing a\n    function that created a tensor on a side stream, and want users to be able\n    to make use of the tensor without having to think carefully about stream\n    safety when making use of them.  These safety guarantees come at some\n    performance and predictability cost (analogous to the tradeoff between GC\n    and manual memory management), so if you are in a situation where\n    you manage the full lifetime of your tensors, you may consider instead\n    manually managing CUDA events so that calling this method is not necessary.\n    In particular, when you call this method, on later allocations the\n    allocator will poll the recorded stream to see if all operations have\n    completed yet; you can potentially race with side stream computation and\n    non-deterministically reuse or fail to reuse memory for an allocation.\n\n    You can safely use tensors allocated on side streams without\n    :meth:`~Tensor.record_stream`; you must manually ensure that\n    any non-creation stream uses of a tensor are synced back to the creation\n    stream before you deallocate the tensor.  As the CUDA caching allocator\n    guarantees that the memory will only be reused with the same creation stream,\n    this is sufficient to ensure that writes to future reallocations of the\n    memory will be delayed until non-creation stream uses are done.\n    (Counterintuitively, you may observe that on the CPU side we have already\n    reallocated the tensor, even though CUDA kernels on the old tensor are\n    still in progress.  This is fine, because CUDA operations on the new\n    tensor will appropriately wait for the old operations to complete, as they\n    are all on the same stream.)\n\n    Concretely, this looks like this::\n\n        with torch.cuda.stream(s0):\n            x = torch.zeros(N)\n\n        s1.wait_stream(s0)\n        with torch.cuda.stream(s1):\n            y = some_comm_op(x)\n\n        ... some compute on s0 ...\n\n        # synchronize creation stream s0 to side stream s1\n        # before deallocating x\n        s0.wait_stream(s1)\n        del x\n\n    Note that some discretion is required when deciding when to perform\n    ``s0.wait_stream(s1)``.  In particular, if we were to wait immediately\n    after ``some_comm_op``, there wouldn't be any point in having the side\n    stream; it would be equivalent to have run ``some_comm_op`` on ``s0``.\n    Instead, the synchronization must be placed at some appropriate, later\n    point in time where you expect the side stream ``s1`` to have finished\n    work.  This location is typically identified via profiling, e.g., using\n    Chrome traces produced\n    :meth:`torch.autograd.profiler.profile.export_chrome_trace`.  If you\n    place the wait too early, work on s0 will block until ``s1`` has finished,\n    preventing further overlapping of communication and computation.  If you\n    place the wait too late, you will use more memory than is strictly\n    necessary (as you are keeping ``x`` live for longer.)  For a concrete\n    example of how this guidance can be applied in practice, see this post:\n    `FSDP and CUDACachingAllocator\n    <https://dev-discuss.pytorch.org/t/fsdp-cudacachingallocator-an-outsider-newb-perspective/1486>`_.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "refine_names",
          "signature": "refine_names(self, *names)",
          "documentation": {
            "description": "Refines the dimension names of :attr:`self` according to :attr:`names`.\n\nRefining is a special case of renaming that \"lifts\" unnamed dimensions.\nA ``None`` dim can be refined to have any name; a named dim can only be\nrefined to have the same name.\n\nBecause named tensors can coexist with unnamed tensors, refining names\ngives a nice way to write named-tensor-aware code that works with both\nnamed and unnamed tensors.\n\n:attr:`names` may contain up to one Ellipsis (``...``).\nThe Ellipsis is expanded greedily; it is expanded in-place to fill\n:attr:`names` to the same length as ``self.dim()`` using names from the\ncorresponding indices of ``self.names``.\n\nPython 2 does not support Ellipsis but one may use a string literal\ninstead (``'...'``).",
            "parameters": {
              "names": {
                "type": "iterable of str",
                "description": "The desired names of the output tensor. May"
              },
              "contain": {
                "type": "",
                "description": "up to one Ellipsis."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "register_hook",
          "signature": "register_hook(self, hook)",
          "documentation": {
            "description": "Registers a backward hook.\n\nThe hook will be called every time a gradient with respect to the\nTensor is computed. The hook should have the following signature::\n\n    hook(grad) -> Tensor or None\n\n\nThe hook should not modify its argument, but it can optionally return\na new gradient which will be used in place of :attr:`grad`.\n\nThis function returns a handle with a method ``handle.remove()``\nthat removes the hook from the module.\n\n.. note::\n    See :ref:`backward-hooks-execution` for more information on how when this hook\n    is executed, and how its execution is ordered relative to other hooks.\n\nExample::\n\n    >>> v = torch.tensor([0., 0., 0.], requires_grad=True)\n    >>> h = v.register_hook(lambda grad: grad * 2)  # double the gradient\n    >>> v.backward(torch.tensor([1., 2., 3.]))\n    >>> v.grad\n\n     2\n     4\n     6\n    [torch.FloatTensor of size (3,)]\n\n    >>> h.remove()  # removes the hook",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "register_post_accumulate_grad_hook",
          "signature": "register_post_accumulate_grad_hook(self, hook)",
          "documentation": {
            "description": "Registers a backward hook that runs after grad accumulation.\n\nThe hook will be called after all gradients for a tensor have been accumulated,\nmeaning that the .grad field has been updated on that tensor. The post\naccumulate grad hook is ONLY applicable for leaf tensors (tensors without a\n.grad_fn field). Registering this hook on a non-leaf tensor will error!\n\nThe hook should have the following signature::\n\n    hook(param: Tensor) -> None\n\nNote that, unlike other autograd hooks, this hook operates on the tensor\nthat requires grad and not the grad itself. The hook can in-place modify\nand access its Tensor argument, including its .grad field.\n\nThis function returns a handle with a method ``handle.remove()``\nthat removes the hook from the module.\n\n.. note::\n    See :ref:`backward-hooks-execution` for more information on how when this hook\n    is executed, and how its execution is ordered relative to other hooks. Since\n    this hook runs during the backward pass, it will run in no_grad mode (unless\n    create_graph is True). You can use torch.enable_grad() to re-enable autograd\n    within the hook if you need it.\n\nExample::\n\n    >>> v = torch.tensor([0., 0., 0.], requires_grad=True)\n    >>> lr = 0.01\n    >>> # simulate a simple SGD update\n    >>> h = v.register_post_accumulate_grad_hook(lambda p: p.add_(p.grad, alpha=-lr))\n    >>> v.backward(torch.tensor([1., 2., 3.]))\n    >>> v\n    tensor([-0.0100, -0.0200, -0.0300], requires_grad=True)\n\n    >>> h.remove()  # removes the hook",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "reinforce",
          "signature": "reinforce(self, reward)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "relu",
          "signature": "relu(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "relu_",
          "signature": "relu_(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "remainder",
          "signature": "remainder(divisor)",
          "documentation": {
            "description": "remainder(divisor) -> Tensor\n\nSee :func:`torch.remainder`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "remainder_",
          "signature": "remainder_(divisor)",
          "documentation": {
            "description": "remainder_(divisor) -> Tensor\n\nIn-place version of :meth:`~Tensor.remainder`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "rename",
          "signature": "rename(self, *names, **rename_map)",
          "documentation": {
            "description": "Renames dimension names of :attr:`self`.\n\nThere are two main usages:\n\n``self.rename(**rename_map)`` returns a view on tensor that has dims\nrenamed as specified in the mapping :attr:`rename_map`.\n\n``self.rename(*names)`` returns a view on tensor, renaming all\ndimensions positionally using :attr:`names`.\nUse ``self.rename(None)`` to drop names on a tensor.\n\nOne cannot specify both positional args :attr:`names` and keyword args\n:attr:`rename_map`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "rename_",
          "signature": "rename_(self, *names, **rename_map)",
          "documentation": {
            "description": "In-place version of :meth:`~Tensor.rename`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "renorm",
          "signature": "renorm(p, dim, maxnorm)",
          "documentation": {
            "description": "renorm(p, dim, maxnorm) -> Tensor\n\nSee :func:`torch.renorm`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "renorm_",
          "signature": "renorm_(p, dim, maxnorm)",
          "documentation": {
            "description": "renorm_(p, dim, maxnorm) -> Tensor\n\nIn-place version of :meth:`~Tensor.renorm`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "repeat",
          "signature": "repeat(*repeats)",
          "documentation": {
            "description": "repeat(*repeats) -> Tensor\n\nRepeats this tensor along the specified dimensions.\n\nUnlike :meth:`~Tensor.expand`, this function copies the tensor's data.\n\n.. warning::\n\n    :meth:`~Tensor.repeat` behaves differently from\n    `numpy.repeat <https://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html>`_,\n    but is more similar to\n    `numpy.tile <https://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html>`_.\n    For the operator similar to `numpy.repeat`, see :func:`torch.repeat_interleave`.",
            "parameters": {
              "repeat": {
                "type": "torch.Size, int..., tuple of int or list of int",
                "description": "The number of times to repeat this tensor along each dimension"
              },
              "Example": {
                "type": "",
                "description": ":\n>>> x = torch.tensor([1, 2, 3])\n>>> x.repeat(4, 2)"
              },
              "tensor": {
                "type": "",
                "description": "([[ 1,  2,  3,  1,  2,  3],\n[ 1,  2,  3,  1,  2,  3],\n[ 1,  2,  3,  1,  2,  3],\n[ 1,  2,  3,  1,  2,  3]])\n>>> x.repeat(4, 2, 1).size()"
              },
              "torch": {
                "type": "",
                "description": ".Size([4, 2, 3])"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "repeat_interleave",
          "signature": "repeat_interleave(repeats, dim=None, *, output_size=None)",
          "documentation": {
            "description": "repeat_interleave(repeats, dim=None, *, output_size=None) -> Tensor\n\nSee :func:`torch.repeat_interleave`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "requires_grad_",
          "signature": "requires_grad_(requires_grad=True)",
          "documentation": {
            "description": "requires_grad_(requires_grad=True) -> Tensor\n\nChange if autograd should record operations on this tensor: sets this tensor's\n:attr:`requires_grad` attribute in-place. Returns this tensor.\n\n:func:`requires_grad_`'s main use case is to tell autograd to begin recording\noperations on a Tensor ``tensor``. If ``tensor`` has ``requires_grad=False``\n(because it was obtained through a DataLoader, or required preprocessing or\ninitialization), ``tensor.requires_grad_()`` makes it so that autograd will\nbegin to record operations on ``tensor``.",
            "parameters": {
              "requires_grad": {
                "type": "bool",
                "description": "If autograd should record operations on this tensor."
              },
              "Default": {
                "type": "",
                "description": "``True``."
              },
              "Example": {
                "type": "",
                "description": ":\n>>> # Let's say we want to preprocess some saved weights and use\n>>> # the result as new weights.\n>>> saved_weights = [0.1, 0.2, 0.3, 0.25]\n>>> loaded_weights = torch.tensor(saved_weights)\n>>> weights = preprocess(loaded_weights)  # some function\n>>> weights"
              },
              "tensor": {
                "type": "[-1.1007,  0.9853, -4.2316, -1.6606]",
                "description": ""
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "reshape",
          "signature": "reshape(*shape)",
          "documentation": {
            "description": "reshape(*shape) -> Tensor\n\nReturns a tensor with the same data and number of elements as :attr:`self`\nbut with the specified shape. This method returns a view if :attr:`shape` is\ncompatible with the current shape. See :meth:`torch.Tensor.view` on when it is\npossible to return a view.\n\nSee :func:`torch.reshape`",
            "parameters": {
              "shape": {
                "type": "tuple of ints or int...",
                "description": "the desired shape"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "reshape_as",
          "signature": "reshape_as(other)",
          "documentation": {
            "description": "reshape_as(other) -> Tensor\n\nReturns this tensor as the same shape as :attr:`other`.\n``self.reshape_as(other)`` is equivalent to ``self.reshape(other.sizes())``.\nThis method returns a view if ``other.sizes()`` is compatible with the current\nshape. See :meth:`torch.Tensor.view` on when it is possible to return a view.\n\nPlease see :meth:`reshape` for more information about ``reshape``.",
            "parameters": {
              "other": {
                "type": ":class:`torch.Tensor`",
                "description": "The result tensor has the same shape"
              },
              "as": {
                "type": "",
                "description": "attr:`other`."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "resize",
          "signature": "resize(self, *sizes)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "resize_",
          "signature": "resize_(*sizes, memory_format=torch.contiguous_format)",
          "documentation": {
            "description": "resize_(*sizes, memory_format=torch.contiguous_format) -> Tensor\n\nResizes :attr:`self` tensor to the specified size. If the number of elements is\nlarger than the current storage size, then the underlying storage is resized\nto fit the new number of elements. If the number of elements is smaller, the\nunderlying storage is not changed. Existing elements are preserved but any new\nmemory is uninitialized.\n\n.. warning::\n\n    This is a low-level method. The storage is reinterpreted as C-contiguous,\n    ignoring the current strides (unless the target size equals the current\n    size, in which case the tensor is left unchanged). For most purposes, you\n    will instead want to use :meth:`~Tensor.view()`, which checks for\n    contiguity, or :meth:`~Tensor.reshape()`, which copies data if needed. To\n    change the size in-place with custom strides, see :meth:`~Tensor.set_()`.\n\n.. note::\n\n    If :func:`torch.use_deterministic_algorithms()` and\n    :attr:`torch.utils.deterministic.fill_uninitialized_memory` are both set to\n    ``True``, new elements are initialized to prevent nondeterministic behavior\n    from using the result as an input to an operation. Floating point and\n    complex values are set to NaN, and integer values are set to the maximum\n    value.",
            "parameters": {
              "sizes": {
                "type": "torch.Size or int...",
                "description": "the desired size"
              },
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "Tensor": {
                "type": "",
                "description": ". Default: ``torch.contiguous_format``. Note that memory format of\n:attr:`self` is going to be unaffected if ``self.size()`` matches ``sizes``."
              },
              "Example": {
                "type": "",
                "description": ":\n>>> x = torch.tensor([[1, 2], [3, 4], [5, 6]])\n>>> x.resize_(2, 2)"
              },
              "tensor": {
                "type": "",
                "description": "([[ 1,  2],\n[ 3,  4]])"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "resize_as",
          "signature": "resize_as(self, tensor)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "resize_as_",
          "signature": "resize_as_(tensor, memory_format=torch.contiguous_format)",
          "documentation": {
            "description": "resize_as_(tensor, memory_format=torch.contiguous_format) -> Tensor\n\nResizes the :attr:`self` tensor to be the same size as the specified\n:attr:`tensor`. This is equivalent to ``self.resize_(tensor.size())``.",
            "parameters": {
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "Tensor": {
                "type": "",
                "description": ". Default: ``torch.contiguous_format``. Note that memory format of\n:attr:`self` is going to be unaffected if ``self.size()`` matches ``tensor.size()``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "resize_as_sparse_",
          "signature": "resize_as_sparse_(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "resolve_conj",
          "signature": "resolve_conj()",
          "documentation": {
            "description": "resolve_conj() -> Tensor\n\nSee :func:`torch.resolve_conj`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "resolve_neg",
          "signature": "resolve_neg()",
          "documentation": {
            "description": "resolve_neg() -> Tensor\n\nSee :func:`torch.resolve_neg`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "retain_grad",
          "signature": "retain_grad()",
          "documentation": {
            "description": "retain_grad() -> None\n\nEnables this Tensor to have their :attr:`grad` populated during\n:func:`backward`. This is a no-op for leaf tensors.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "roll",
          "signature": "roll(shifts, dims)",
          "documentation": {
            "description": "roll(shifts, dims) -> Tensor\n\nSee :func:`torch.roll`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "rot90",
          "signature": "rot90(k, dims)",
          "documentation": {
            "description": "rot90(k, dims) -> Tensor\n\nSee :func:`torch.rot90`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "round",
          "signature": "round(decimals=0)",
          "documentation": {
            "description": "round(decimals=0) -> Tensor\n\nSee :func:`torch.round`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "round_",
          "signature": "round_(decimals=0)",
          "documentation": {
            "description": "round_(decimals=0) -> Tensor\n\nIn-place version of :meth:`~Tensor.round`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "row_indices",
          "signature": "row_indices(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "rsqrt",
          "signature": "rsqrt()",
          "documentation": {
            "description": "rsqrt() -> Tensor\n\nSee :func:`torch.rsqrt`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "rsqrt_",
          "signature": "rsqrt_()",
          "documentation": {
            "description": "rsqrt_() -> Tensor\n\nIn-place version of :meth:`~Tensor.rsqrt`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "scatter",
          "signature": "scatter(dim, index, src)",
          "documentation": {
            "description": "scatter(dim, index, src) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.scatter_`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "scatter_",
          "signature": "scatter_(dim, index, src, *, reduce=None)",
          "documentation": {
            "description": "scatter_(dim, index, src, *, reduce=None) -> Tensor\n\nWrites all values from the tensor :attr:`src` into :attr:`self` at the indices\nspecified in the :attr:`index` tensor. For each value in :attr:`src`, its output\nindex is specified by its index in :attr:`src` for ``dimension != dim`` and by\nthe corresponding value in :attr:`index` for ``dimension = dim``.\n\nFor a 3-D tensor, :attr:`self` is updated as::\n\n    self[index[i][j][k]][j][k] = src[i][j][k]  # if dim == 0\n    self[i][index[i][j][k]][k] = src[i][j][k]  # if dim == 1\n    self[i][j][index[i][j][k]] = src[i][j][k]  # if dim == 2\n\nThis is the reverse operation of the manner described in :meth:`~Tensor.gather`.\n\n:attr:`self`, :attr:`index` and :attr:`src` (if it is a Tensor) should all have\nthe same number of dimensions. It is also required that\n``index.size(d) <= src.size(d)`` for all dimensions ``d``, and that\n``index.size(d) <= self.size(d)`` for all dimensions ``d != dim``.\nNote that ``index`` and ``src`` do not broadcast.\n\nMoreover, as for :meth:`~Tensor.gather`, the values of :attr:`index` must be\nbetween ``0`` and ``self.size(dim) - 1`` inclusive.\n\n.. warning::\n\n    When indices are not unique, the behavior is non-deterministic (one of the\n    values from ``src`` will be picked arbitrarily) and the gradient will be\n    incorrect (it will be propagated to all locations in the source that\n    correspond to the same index)!\n\n.. note::\n\n    The backward pass is implemented only for ``src.shape == index.shape``.\n\nAdditionally accepts an optional :attr:`reduce` argument that allows\nspecification of an optional reduction operation, which is applied to all\nvalues in the tensor :attr:`src` into :attr:`self` at the indices\nspecified in the :attr:`index`. For each value in :attr:`src`, the reduction\noperation is applied to an index in :attr:`self` which is specified by\nits index in :attr:`src` for ``dimension != dim`` and by the corresponding\nvalue in :attr:`index` for ``dimension = dim``.\n\nGiven a 3-D tensor and reduction using the multiplication operation, :attr:`self`\nis updated as::\n\n    self[index[i][j][k]][j][k] *= src[i][j][k]  # if dim == 0\n    self[i][index[i][j][k]][k] *= src[i][j][k]  # if dim == 1\n    self[i][j][index[i][j][k]] *= src[i][j][k]  # if dim == 2\n\nReducing with the addition operation is the same as using\n:meth:`~torch.Tensor.scatter_add_`.\n\n.. warning::\n    The reduce argument with Tensor ``src`` is deprecated and will be removed in\n    a future PyTorch release. Please use :meth:`~torch.Tensor.scatter_reduce_`\n    instead for more reduction options.",
            "parameters": {
              "dim": {
                "type": "int",
                "description": "the axis along which to index"
              },
              "index": {
                "type": "LongTensor",
                "description": "the indices of elements to scatter, can be either empty"
              },
              "or": {
                "type": "",
                "description": "of the same dimensionality as ``src``. When empty, the operation"
              },
              "returns": {
                "type": "",
                "description": "``self`` unchanged."
              },
              "src": {
                "type": "Tensor",
                "description": "the source element(s) to scatter."
              },
              "Keyword": {
                "type": "",
                "description": "args:"
              },
              "reduce": {
                "type": "str, optional",
                "description": "reduction operation to apply, can be either\n``'add'`` or ``'multiply'``."
              },
              "Example": {
                "type": "",
                "description": ":\n>>> index = torch.tensor([[0, 1]])\n>>> value = 2\n>>> torch.zeros(3, 5).scatter_(0, index, value)"
              },
              "tensor": {
                "type": "",
                "description": "([[2., 0., 0., 0., 0.],\n[0., 2., 0., 0., 0.],\n[0., 0., 0., 0., 0.]])"
              },
              "Writes": {
                "type": "",
                "description": "the value from :attr:`value` into :attr:`self` at the indices"
              },
              "specified": {
                "type": "",
                "description": "in the :attr:`index` tensor.  This operation is equivalent to the previous version,"
              },
              "with": {
                "type": "",
                "description": "the :attr:`src` tensor filled entirely with :attr:`value`."
              },
              "Args": {
                "type": "",
                "description": ""
              },
              "value": {
                "type": "Scalar",
                "description": "the value to scatter."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "scatter_add",
          "signature": "scatter_add(dim, index, src)",
          "documentation": {
            "description": "scatter_add(dim, index, src) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.scatter_add_`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "scatter_add_",
          "signature": "scatter_add_(dim, index, src)",
          "documentation": {
            "description": "scatter_add_(dim, index, src) -> Tensor\n\nAdds all values from the tensor :attr:`src` into :attr:`self` at the indices\nspecified in the :attr:`index` tensor in a similar fashion as\n:meth:`~torch.Tensor.scatter_`. For each value in :attr:`src`, it is added to\nan index in :attr:`self` which is specified by its index in :attr:`src`\nfor ``dimension != dim`` and by the corresponding value in :attr:`index` for\n``dimension = dim``.\n\nFor a 3-D tensor, :attr:`self` is updated as::\n\n    self[index[i][j][k]][j][k] += src[i][j][k]  # if dim == 0\n    self[i][index[i][j][k]][k] += src[i][j][k]  # if dim == 1\n    self[i][j][index[i][j][k]] += src[i][j][k]  # if dim == 2\n\n:attr:`self`, :attr:`index` and :attr:`src` should have same number of\ndimensions. It is also required that ``index.size(d) <= src.size(d)`` for all\ndimensions ``d``, and that ``index.size(d) <= self.size(d)`` for all dimensions\n``d != dim``. Note that ``index`` and ``src`` do not broadcast.",
            "parameters": {
              "dim": {
                "type": "int",
                "description": "the axis along which to index"
              },
              "index": {
                "type": "LongTensor",
                "description": "the indices of elements to scatter and add, can be"
              },
              "either": {
                "type": "",
                "description": "empty or of the same dimensionality as ``src``. When empty, the"
              },
              "operation": {
                "type": "",
                "description": "returns ``self`` unchanged."
              },
              "src": {
                "type": "Tensor",
                "description": "the source elements to scatter and add"
              },
              "Example": {
                "type": "",
                "description": ":\n>>> src = torch.ones((2, 5))\n>>> index = torch.tensor([[0, 1, 2, 0, 0]])\n>>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)"
              },
              "tensor": {
                "type": "",
                "description": "([[2., 0., 0., 1., 1.],\n[0., 2., 0., 0., 0.],\n[0., 0., 2., 1., 1.]])"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.\n\n.. note::\n\n    The backward pass is implemented only for ``src.shape == index.shape``.\n\nArgs:\n    dim (int): the axis along which to index\n    index (LongTensor): the indices of elements to scatter and add, can be\n        either empty or of the same dimensionality as ``src``. When empty, the\n        operation returns ``self`` unchanged.\n    src (Tensor): the source elements to scatter and add",
            "examples": ""
          }
        },
        {
          "name": "scatter_reduce",
          "signature": "scatter_reduce(dim, index, src, reduce, *, include_self=True)",
          "documentation": {
            "description": "scatter_reduce(dim, index, src, reduce, *, include_self=True) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.scatter_reduce_`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "scatter_reduce_",
          "signature": "scatter_reduce_(dim, index, src, reduce, *, include_self=True)",
          "documentation": {
            "description": "scatter_reduce_(dim, index, src, reduce, *, include_self=True) -> Tensor\n\nReduces all values from the :attr:`src` tensor to the indices specified in\nthe :attr:`index` tensor in the :attr:`self` tensor using the applied reduction\ndefined via the :attr:`reduce` argument (:obj:`\"sum\"`, :obj:`\"prod\"`, :obj:`\"mean\"`,\n:obj:`\"amax\"`, :obj:`\"amin\"`). For each value in :attr:`src`, it is reduced to an\nindex in :attr:`self` which is specified by its index in :attr:`src` for\n``dimension != dim`` and by the corresponding value in :attr:`index` for\n``dimension = dim``. If :obj:`include_self=\"True\"`, the values in the :attr:`self`\ntensor are included in the reduction.\n\n:attr:`self`, :attr:`index` and :attr:`src` should all have\nthe same number of dimensions. It is also required that\n``index.size(d) <= src.size(d)`` for all dimensions ``d``, and that\n``index.size(d) <= self.size(d)`` for all dimensions ``d != dim``.\nNote that ``index`` and ``src`` do not broadcast.\n\nFor a 3-D tensor with :obj:`reduce=\"sum\"` and :obj:`include_self=True` the\noutput is given as::\n\n    self[index[i][j][k]][j][k] += src[i][j][k]  # if dim == 0\n    self[i][index[i][j][k]][k] += src[i][j][k]  # if dim == 1\n    self[i][j][index[i][j][k]] += src[i][j][k]  # if dim == 2",
            "parameters": {
              "dim": {
                "type": "int",
                "description": "the axis along which to index"
              },
              "index": {
                "type": "LongTensor",
                "description": "the indices of elements to scatter and reduce."
              },
              "src": {
                "type": "Tensor",
                "description": "the source elements to scatter and reduce"
              },
              "reduce": {
                "type": "str",
                "description": "the reduction operation to apply for non-unique indices\n(:obj:`\"sum\"`, :obj:`\"prod\"`, :obj:`\"mean\"`, :obj:`\"amax\"`, :obj:`\"amin\"`)"
              },
              "include_self": {
                "type": "bool",
                "description": "whether elements from the :attr:`self` tensor are"
              },
              "included": {
                "type": "",
                "description": "in the reduction"
              },
              "Example": {
                "type": "",
                "description": ":\n>>> src = torch.tensor([1., 2., 3., 4., 5., 6.])\n>>> index = torch.tensor([0, 1, 0, 1, 2, 1])\n>>> input = torch.tensor([1., 2., 3., 4.])\n>>> input.scatter_reduce(0, index, src, reduce=\"sum\")"
              },
              "tensor": {
                "type": "[3., 6., 5., 2.]",
                "description": ""
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "This operation may behave nondeterministically when given tensors on a CUDA device. See :doc:`/notes/randomness` for more information.\n\n.. note::\n\n    The backward pass is implemented only for ``src.shape == index.shape``.\n\n.. warning::\n\n    This function is in beta and may change in the near future.\n\nArgs:\n    dim (int): the axis along which to index\n    index (LongTensor): the indices of elements to scatter and reduce.\n    src (Tensor): the source elements to scatter and reduce\n    reduce (str): the reduction operation to apply for non-unique indices\n        (:obj:`\"sum\"`, :obj:`\"prod\"`, :obj:`\"mean\"`, :obj:`\"amax\"`, :obj:`\"amin\"`)\n    include_self (bool): whether elements from the :attr:`self` tensor are\n        included in the reduction",
            "examples": ""
          }
        },
        {
          "name": "select",
          "signature": "select(dim, index)",
          "documentation": {
            "description": "select(dim, index) -> Tensor\n\nSee :func:`torch.select`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "select_scatter",
          "signature": "select_scatter(src, dim, index)",
          "documentation": {
            "description": "select_scatter(src, dim, index) -> Tensor\n\nSee :func:`torch.select_scatter`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_",
          "signature": "set_(source=None, storage_offset=0, size=None, stride=None)",
          "documentation": {
            "description": "set_(source=None, storage_offset=0, size=None, stride=None) -> Tensor\n\nSets the underlying storage, size, and strides. If :attr:`source` is a tensor,\n:attr:`self` tensor will share the same storage and have the same size and\nstrides as :attr:`source`. Changes to elements in one tensor will be reflected\nin the other.\n\nIf :attr:`source` is a :class:`~torch.Storage`, the method sets the underlying\nstorage, offset, size, and stride.",
            "parameters": {
              "source": {
                "type": "Tensor or Storage",
                "description": "the tensor or storage to use"
              },
              "storage_offset": {
                "type": "int, optional",
                "description": "the offset in the storage"
              },
              "size": {
                "type": "torch.Size, optional",
                "description": "the desired size. Defaults to the size of the source."
              },
              "stride": {
                "type": "tuple, optional",
                "description": "the desired stride. Defaults to C-contiguous strides."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sgn",
          "signature": "sgn()",
          "documentation": {
            "description": "sgn() -> Tensor\n\nSee :func:`torch.sgn`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sgn_",
          "signature": "sgn_()",
          "documentation": {
            "description": "sgn_() -> Tensor\n\nIn-place version of :meth:`~Tensor.sgn`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "share_memory_",
          "signature": "share_memory_(self)",
          "documentation": {
            "description": "Moves the underlying storage to shared memory.\n\nThis is a no-op if the underlying storage is already in shared memory\nand for CUDA tensors. Tensors in shared memory cannot be resized.\n\nSee :meth:`torch.UntypedStorage.share_memory_` for more details.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "short",
          "signature": "short(memory_format=torch.preserve_format)",
          "documentation": {
            "description": "short(memory_format=torch.preserve_format) -> Tensor\n\n``self.short()`` is equivalent to ``self.to(torch.int16)``. See :func:`to`.",
            "parameters": {
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "returned": {
                "type": "",
                "description": "Tensor. Default: ``torch.preserve_format``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sigmoid",
          "signature": "sigmoid()",
          "documentation": {
            "description": "sigmoid() -> Tensor\n\nSee :func:`torch.sigmoid`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sigmoid_",
          "signature": "sigmoid_()",
          "documentation": {
            "description": "sigmoid_() -> Tensor\n\nIn-place version of :meth:`~Tensor.sigmoid`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sign",
          "signature": "sign()",
          "documentation": {
            "description": "sign() -> Tensor\n\nSee :func:`torch.sign`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sign_",
          "signature": "sign_()",
          "documentation": {
            "description": "sign_() -> Tensor\n\nIn-place version of :meth:`~Tensor.sign`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "signbit",
          "signature": "signbit()",
          "documentation": {
            "description": "signbit() -> Tensor\n\nSee :func:`torch.signbit`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sin",
          "signature": "sin()",
          "documentation": {
            "description": "sin() -> Tensor\n\nSee :func:`torch.sin`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sin_",
          "signature": "sin_()",
          "documentation": {
            "description": "sin_() -> Tensor\n\nIn-place version of :meth:`~Tensor.sin`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sinc",
          "signature": "sinc()",
          "documentation": {
            "description": "sinc() -> Tensor\n\nSee :func:`torch.sinc`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sinc_",
          "signature": "sinc_()",
          "documentation": {
            "description": "sinc_() -> Tensor\n\nIn-place version of :meth:`~Tensor.sinc`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sinh",
          "signature": "sinh()",
          "documentation": {
            "description": "sinh() -> Tensor\n\nSee :func:`torch.sinh`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sinh_",
          "signature": "sinh_()",
          "documentation": {
            "description": "sinh_() -> Tensor\n\nIn-place version of :meth:`~Tensor.sinh`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "size",
          "signature": "size(dim=None)",
          "documentation": {
            "description": "size(dim=None) -> torch.Size or int\n\nReturns the size of the :attr:`self` tensor. If ``dim`` is not specified,\nthe returned value is a :class:`torch.Size`, a subclass of :class:`tuple`.\nIf ``dim`` is specified, returns an int holding the size of that dimension.",
            "parameters": {
              "dim": {
                "type": "int, optional",
                "description": "The dimension for which to retrieve the size."
              },
              "Example": {
                "type": "",
                "description": ":\n>>> t = torch.empty(3, 4, 5)\n>>> t.size()"
              },
              "torch": {
                "type": "",
                "description": ".Size([3, 4, 5])\n>>> t.size(dim=1)"
              },
              "4": {
                "type": "",
                "description": ""
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "slice_inverse",
          "signature": "slice_inverse(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "slice_scatter",
          "signature": "slice_scatter(src, dim=0, start=None, end=None, step=1)",
          "documentation": {
            "description": "slice_scatter(src, dim=0, start=None, end=None, step=1) -> Tensor\n\nSee :func:`torch.slice_scatter`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "slogdet",
          "signature": "slogdet()",
          "documentation": {
            "description": "slogdet() -> (Tensor, Tensor)\n\nSee :func:`torch.slogdet`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "smm",
          "signature": "smm(mat)",
          "documentation": {
            "description": "smm(mat) -> Tensor\n\nSee :func:`torch.smm`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "softmax",
          "signature": "softmax(dim)",
          "documentation": {
            "description": "softmax(dim) -> Tensor\n\nAlias for :func:`torch.nn.functional.softmax`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "solve",
          "signature": "solve(self, other)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sort",
          "signature": "sort(dim=-1, descending=False)",
          "documentation": {
            "description": "sort(dim=-1, descending=False) -> (Tensor, LongTensor)\n\nSee :func:`torch.sort`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sparse_dim",
          "signature": "sparse_dim()",
          "documentation": {
            "description": "sparse_dim() -> int\n\nReturn the number of sparse dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.\n\n.. note::\n  Returns ``0`` if :attr:`self` is not a sparse tensor.\n\nSee also :meth:`Tensor.dense_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sparse_mask",
          "signature": "sparse_mask(mask)",
          "documentation": {
            "description": "sparse_mask(mask) -> Tensor\n\nReturns a new :ref:`sparse tensor <sparse-docs>` with values from a\nstrided tensor :attr:`self` filtered by the indices of the sparse\ntensor :attr:`mask`. The values of :attr:`mask` sparse tensor are\nignored. :attr:`self` and :attr:`mask` tensors must have the same\nshape.\n\n.. note::\n\n  The returned sparse tensor might contain duplicate values if :attr:`mask`\n  is not coalesced. It is therefore advisable to pass ``mask.coalesce()``\n  if such behavior is not desired.\n\n.. note::\n\n  The returned sparse tensor has the same indices as the sparse tensor\n  :attr:`mask`, even when the corresponding values in :attr:`self` are\n  zeros.",
            "parameters": {
              "mask": {
                "type": "Tensor",
                "description": "a sparse tensor whose indices are used as a filter"
              },
              "Example": {
                "type": "",
                "description": ":\n>>> nse = 5\n>>> dims = (5, 5, 2, 2)\n>>> I = torch.cat([torch.randint(0, dims[0], size=(nse,)),\n...                torch.randint(0, dims[1], size=(nse,))], 0).reshape(2, nse)\n>>> V = torch.randn(nse, dims[2], dims[3])\n>>> S = torch.sparse_coo_tensor(I, V, dims).coalesce()\n>>> D = torch.randn(dims)\n>>> D.sparse_mask(S)"
              },
              "tensor": {
                "type": "",
                "description": "(indices=tensor([[0, 0, 0, 2],\n[0, 1, 4, 3]]),"
              },
              "values": {
                "type": "",
                "description": "=tensor([[[ 1.6550,  0.2397],\n[-0.1611, -0.0779]],\n[[ 0.2326, -1.0558],\n[ 1.4711,  1.9678]],\n[[-0.5138, -0.0411],\n[ 1.9417,  0.5158]],\n[[ 0.0793,  0.0036],\n[-0.2569, -0.1055]]]),"
              },
              "size": {
                "type": "",
                "description": "=(5, 5, 2, 2), nnz=4, layout=torch.sparse_coo)"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sparse_resize_",
          "signature": "sparse_resize_(size, sparse_dim, dense_dim)",
          "documentation": {
            "description": "sparse_resize_(size, sparse_dim, dense_dim) -> Tensor\n\nResizes :attr:`self` :ref:`sparse tensor <sparse-docs>` to the desired\nsize and the number of sparse and dense dimensions.\n\n.. note::\n  If the number of specified elements in :attr:`self` is zero, then\n  :attr:`size`, :attr:`sparse_dim`, and :attr:`dense_dim` can be any\n  size and positive integers such that ``len(size) == sparse_dim +\n  dense_dim``.\n\n  If :attr:`self` specifies one or more elements, however, then each\n  dimension in :attr:`size` must not be smaller than the corresponding\n  dimension of :attr:`self`, :attr:`sparse_dim` must equal the number\n  of sparse dimensions in :attr:`self`, and :attr:`dense_dim` must\n  equal the number of dense dimensions in :attr:`self`.\n\n.. warning::\n  Throws an error if :attr:`self` is not a sparse tensor.",
            "parameters": {
              "size": {
                "type": "torch.Size",
                "description": "the desired size. If :attr:`self` is non-empty"
              },
              "sparse": {
                "type": "",
                "description": "tensor, the desired size cannot be smaller than the"
              },
              "original": {
                "type": "",
                "description": "size."
              },
              "sparse_dim": {
                "type": "int",
                "description": "the number of sparse dimensions"
              },
              "dense_dim": {
                "type": "int",
                "description": "the number of dense dimensions"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sparse_resize_and_clear_",
          "signature": "sparse_resize_and_clear_(size, sparse_dim, dense_dim)",
          "documentation": {
            "description": "sparse_resize_and_clear_(size, sparse_dim, dense_dim) -> Tensor\n\nRemoves all specified elements from a :ref:`sparse tensor\n<sparse-docs>` :attr:`self` and resizes :attr:`self` to the desired\nsize and the number of sparse and dense dimensions.\n\n.. warning:\n  Throws an error if :attr:`self` is not a sparse tensor.",
            "parameters": {
              "size": {
                "type": "torch.Size",
                "description": "the desired size."
              },
              "sparse_dim": {
                "type": "int",
                "description": "the number of sparse dimensions"
              },
              "dense_dim": {
                "type": "int",
                "description": "the number of dense dimensions"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "split",
          "signature": "split(self, split_size, dim=0)",
          "documentation": {
            "description": "See :func:`torch.split`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "split_with_sizes",
          "signature": "split_with_sizes(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sqrt",
          "signature": "sqrt()",
          "documentation": {
            "description": "sqrt() -> Tensor\n\nSee :func:`torch.sqrt`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sqrt_",
          "signature": "sqrt_()",
          "documentation": {
            "description": "sqrt_() -> Tensor\n\nIn-place version of :meth:`~Tensor.sqrt`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "square",
          "signature": "square()",
          "documentation": {
            "description": "square() -> Tensor\n\nSee :func:`torch.square`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "square_",
          "signature": "square_()",
          "documentation": {
            "description": "square_() -> Tensor\n\nIn-place version of :meth:`~Tensor.square`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "squeeze",
          "signature": "squeeze(dim=None)",
          "documentation": {
            "description": "squeeze(dim=None) -> Tensor\n\nSee :func:`torch.squeeze`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "squeeze_",
          "signature": "squeeze_(dim=None)",
          "documentation": {
            "description": "squeeze_(dim=None) -> Tensor\n\nIn-place version of :meth:`~Tensor.squeeze`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sspaddmm",
          "signature": "sspaddmm(mat1, mat2, *, beta=1, alpha=1)",
          "documentation": {
            "description": "sspaddmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor\n\nSee :func:`torch.sspaddmm`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "std",
          "signature": "std(dim=None, *, correction=1, keepdim=False)",
          "documentation": {
            "description": "std(dim=None, *, correction=1, keepdim=False) -> Tensor\n\nSee :func:`torch.std`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "stft",
          "signature": "stft(self, n_fft: int, hop_length: Optional[int] = None, win_length: Optional[int] = None, window: 'Optional[Tensor]' = None, center: bool = True, pad_mode: str = 'reflect', normalized: bool = False, onesided: Optional[bool] = None, return_complex: Optional[bool] = None)",
          "documentation": {
            "description": "See :func:`torch.stft`\n\n.. warning::\n  This function changed signature at version 0.4.1. Calling with\n  the previous signature may cause error or return incorrect result.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "storage",
          "signature": "storage(self)",
          "documentation": {
            "description": "storage() -> torch.TypedStorage\n\nReturns the underlying :class:`TypedStorage`.\n\n.. warning::\n\n    :class:`TypedStorage` is deprecated. It will be removed in the future, and\n    :class:`UntypedStorage` will be the only storage class. To access the\n    :class:`UntypedStorage` directly, use :attr:`Tensor.untyped_storage()`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "storage_offset",
          "signature": "storage_offset()",
          "documentation": {
            "description": "storage_offset() -> int\n\nReturns :attr:`self` tensor's offset in the underlying storage in terms of\nnumber of storage elements (not bytes).\n\nExample::\n\n    >>> x = torch.tensor([1, 2, 3, 4, 5])\n    >>> x.storage_offset()\n    0\n    >>> x[3:].storage_offset()\n    3",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "storage_type",
          "signature": "storage_type(self)",
          "documentation": {
            "description": "storage_type() -> type\n\nReturns the type of the underlying storage.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "stride",
          "signature": "stride(dim)",
          "documentation": {
            "description": "stride(dim) -> tuple or int\n\nReturns the stride of :attr:`self` tensor.\n\nStride is the jump necessary to go from one element to the next one in the\nspecified dimension :attr:`dim`. A tuple of all strides is returned when no\nargument is passed in. Otherwise, an integer value is returned as the stride in\nthe particular dimension :attr:`dim`.",
            "parameters": {
              "dim": {
                "type": "int, optional",
                "description": "the desired dimension in which stride is required"
              },
              "Example": {
                "type": "",
                "description": ":\n>>> x = torch.tensor([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\n>>> x.stride()\n(5, 1)\n>>> x.stride(0)"
              },
              "5": {
                "type": "",
                "description": ">>> x.stride(-1)"
              },
              "1": {
                "type": "",
                "description": ""
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sub",
          "signature": "sub(other, *, alpha=1)",
          "documentation": {
            "description": "sub(other, *, alpha=1) -> Tensor\n\nSee :func:`torch.sub`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sub_",
          "signature": "sub_(other, *, alpha=1)",
          "documentation": {
            "description": "sub_(other, *, alpha=1) -> Tensor\n\nIn-place version of :meth:`~Tensor.sub`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "subtract",
          "signature": "subtract(other, *, alpha=1)",
          "documentation": {
            "description": "subtract(other, *, alpha=1) -> Tensor\n\nSee :func:`torch.subtract`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "subtract_",
          "signature": "subtract_(other, *, alpha=1)",
          "documentation": {
            "description": "subtract_(other, *, alpha=1) -> Tensor\n\nIn-place version of :meth:`~Tensor.subtract`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sum",
          "signature": "sum(dim=None, keepdim=False, dtype=None)",
          "documentation": {
            "description": "sum(dim=None, keepdim=False, dtype=None) -> Tensor\n\nSee :func:`torch.sum`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sum_to_size",
          "signature": "sum_to_size(*size)",
          "documentation": {
            "description": "sum_to_size(*size) -> Tensor\n\nSum ``this`` tensor to :attr:`size`.\n:attr:`size` must be broadcastable to ``this`` tensor size.",
            "parameters": {
              "size": {
                "type": "int...",
                "description": "a sequence of integers defining the shape of the output tensor."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "svd",
          "signature": "svd(some=True, compute_uv=True)",
          "documentation": {
            "description": "svd(some=True, compute_uv=True) -> (Tensor, Tensor, Tensor)\n\nSee :func:`torch.svd`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "swapaxes",
          "signature": "swapaxes(axis0, axis1)",
          "documentation": {
            "description": "swapaxes(axis0, axis1) -> Tensor\n\nSee :func:`torch.swapaxes`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "swapaxes_",
          "signature": "swapaxes_(axis0, axis1)",
          "documentation": {
            "description": "swapaxes_(axis0, axis1) -> Tensor\n\nIn-place version of :meth:`~Tensor.swapaxes`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "swapdims",
          "signature": "swapdims(dim0, dim1)",
          "documentation": {
            "description": "swapdims(dim0, dim1) -> Tensor\n\nSee :func:`torch.swapdims`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "swapdims_",
          "signature": "swapdims_(dim0, dim1)",
          "documentation": {
            "description": "swapdims_(dim0, dim1) -> Tensor\n\nIn-place version of :meth:`~Tensor.swapdims`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "symeig",
          "signature": "symeig(self, eigenvectors=False)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "t",
          "signature": "t()",
          "documentation": {
            "description": "t() -> Tensor\n\nSee :func:`torch.t`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "t_",
          "signature": "t_()",
          "documentation": {
            "description": "t_() -> Tensor\n\nIn-place version of :meth:`~Tensor.t`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "take",
          "signature": "take(indices)",
          "documentation": {
            "description": "take(indices) -> Tensor\n\nSee :func:`torch.take`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "take_along_dim",
          "signature": "take_along_dim(indices, dim)",
          "documentation": {
            "description": "take_along_dim(indices, dim) -> Tensor\n\nSee :func:`torch.take_along_dim`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "tan",
          "signature": "tan()",
          "documentation": {
            "description": "tan() -> Tensor\n\nSee :func:`torch.tan`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "tan_",
          "signature": "tan_()",
          "documentation": {
            "description": "tan_() -> Tensor\n\nIn-place version of :meth:`~Tensor.tan`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "tanh",
          "signature": "tanh()",
          "documentation": {
            "description": "tanh() -> Tensor\n\nSee :func:`torch.tanh`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "tanh_",
          "signature": "tanh_()",
          "documentation": {
            "description": "tanh_() -> Tensor\n\nIn-place version of :meth:`~Tensor.tanh`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "tensor_split",
          "signature": "tensor_split(indices_or_sections, dim=0)",
          "documentation": {
            "description": "tensor_split(indices_or_sections, dim=0) -> List of Tensors\n\nSee :func:`torch.tensor_split`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "tile",
          "signature": "tile(dims)",
          "documentation": {
            "description": "tile(dims) -> Tensor\n\nSee :func:`torch.tile`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "to",
          "signature": "to(*args, **kwargs)",
          "documentation": {
            "description": "to(*args, **kwargs) -> Tensor\n\nPerforms Tensor dtype and/or device conversion. A :class:`torch.dtype` and :class:`torch.device` are\ninferred from the arguments of ``self.to(*args, **kwargs)``.\n\n.. note::\n\n    If the ``self`` Tensor already\n    has the correct :class:`torch.dtype` and :class:`torch.device`, then ``self`` is returned.\n    Otherwise, the returned tensor is a copy of ``self`` with the desired\n    :class:`torch.dtype` and :class:`torch.device`.\n\nHere are the ways to call ``to``:\n\n.. method:: to(dtype, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor\n   :noindex:\n\n    Returns a Tensor with the specified :attr:`dtype`",
            "parameters": {
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "returned": {
                "type": "",
                "description": "Tensor. Default: ``torch.preserve_format``.\n.. method:: to(other, non_blocking=False, copy=False) -> Tensor\n:noindex:"
              },
              "Returns": {
                "type": "",
                "description": "a Tensor with same :class:`torch.dtype` and :class:`torch.device` as"
              },
              "When": {
                "type": "",
                "description": "attr:`copy` is set, a new Tensor is created even when the Tensor"
              },
              "the": {
                "type": "",
                "description": "Tensor :attr:`other`. When :attr:`non_blocking`, tries to convert"
              },
              "CUDA": {
                "type": "",
                "description": "Tensor."
              },
              "already": {
                "type": "",
                "description": "matches the desired conversion."
              },
              "Args": {
                "type": "",
                "description": ""
              },
              "asynchronously": {
                "type": "",
                "description": "with respect to the host if possible, e.g., converting a CPU"
              },
              "Tensor": {
                "type": "",
                "description": "with pinned memory to a CUDA Tensor."
              },
              "Example": {
                "type": "",
                "description": ":\n>>> tensor = torch.randn(2, 2)  # Initially dtype=float32, device=cpu\n>>> tensor.to(torch.float64)"
              },
              "tensor": {
                "type": "",
                "description": "([[-0.5044,  0.0005],\n[ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "to_dense",
          "signature": "to_dense(dtype=None, *, masked_grad=True)",
          "documentation": {
            "description": "to_dense(dtype=None, *, masked_grad=True) -> Tensor\n\nCreates a strided copy of :attr:`self` if :attr:`self` is not a strided tensor, otherwise returns :attr:`self`.\n\nKeyword args:\n    {dtype}\n    masked_grad (bool, optional): If set to ``True`` (default) and\n      :attr:`self` has a sparse layout then the backward of\n      :meth:`to_dense` returns ``grad.sparse_mask(self)``.\n\nExample::\n\n    >>> s = torch.sparse_coo_tensor(\n    ...        torch.tensor([[1, 1],\n    ...                      [0, 2]]),\n    ...        torch.tensor([9, 10]),\n    ...        size=(3, 3))\n    >>> s.to_dense()\n    tensor([[ 0,  0,  0],\n            [ 9,  0, 10],\n            [ 0,  0,  0]])",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "to_mkldnn",
          "signature": "to_mkldnn()",
          "documentation": {
            "description": "to_mkldnn() -> Tensor\nReturns a copy of the tensor in ``torch.mkldnn`` layout.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "to_padded_tensor",
          "signature": "to_padded_tensor(padding, output_size=None)",
          "documentation": {
            "description": "to_padded_tensor(padding, output_size=None) -> Tensor\nSee :func:`to_padded_tensor`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "to_sparse",
          "signature": "to_sparse(sparseDims)",
          "documentation": {
            "description": "to_sparse(sparseDims) -> Tensor\n\nReturns a sparse copy of the tensor.  PyTorch supports sparse tensors in\n:ref:`coordinate format <sparse-coo-docs>`.",
            "parameters": {
              "sparseDims": {
                "type": "int, optional",
                "description": "the number of sparse dimensions to include in the new sparse tensor"
              },
              "Example": {
                "type": "",
                "description": ":\n>>> x = torch.tensor([[1, 0], [0, 0], [2, 3]])\n>>> x.to_sparse(layout=torch.sparse_coo)"
              },
              "tensor": {
                "type": "crow_indices=tensor([0, 1, 1, 3]",
                "description": ","
              },
              "values": {
                "type": "",
                "description": "=tensor([[1],\n[2],\n[3]]), size=(3, 2, 1), nnz=3, layout=torch.sparse_csr)"
              },
              "size": {
                "type": "",
                "description": "=(3, 2), nnz=3, layout=torch.sparse_coo)\n>>> x.to_sparse(layout=torch.sparse_bsr, blocksize=(1, 2))"
              },
              "Returns": {
                "type": "",
                "description": "a sparse tensor with the specified layout and blocksize.  If"
              },
              "the": {
                "type": "",
                "description": "attr:`self` is strided, the number of dense dimensions could be"
              },
              "specified": {
                "type": "",
                "description": ", and a hybrid sparse tensor will be created, with\n`dense_dim` dense dimensions and `self.dim() - 2 - dense_dim` batch"
              },
              "dimension": {
                "type": "",
                "description": ".\n.. note:: If the :attr:`self` layout and blocksize parameters match"
              },
              "with": {
                "type": "",
                "description": "the specified layout and blocksize, return\n:attr:`self`. Otherwise, return a sparse tensor copy of\n:attr:`self`."
              },
              "Args": {
                "type": "",
                "description": ""
              },
              "layout": {
                "type": "",
                "description": ". One of ``torch.sparse_coo``, ``torch.sparse_csr``,\n``torch.sparse_csc``, ``torch.sparse_bsr``, or\n``torch.sparse_bsc``. Default: if ``None``,\n``torch.sparse_coo``."
              },
              "blocksize": {
                "type": "list, tuple, :class:`torch.Size`, optional",
                "description": "Block size"
              },
              "of": {
                "type": "",
                "description": "the resulting BSR or BSC tensor. For other layouts,"
              },
              "specifying": {
                "type": "",
                "description": "the block size that is not ``None`` will result in a"
              },
              "RuntimeError": {
                "type": "",
                "description": "to_sparse for Strided to SparseCsr conversion does not use specified blocksize\n>>> x = torch.tensor([[[1], [0]], [[0], [0]], [[2], [3]]])\n>>> x.to_sparse(layout=torch.sparse_csr, dense_dim=1)"
              },
              "two": {
                "type": "",
                "description": "such that its items evenly divide the two sparse dimensions."
              },
              "dense_dim": {
                "type": "int, optional",
                "description": "Number of dense dimensions of the"
              },
              "resulting": {
                "type": "",
                "description": "CSR, CSC, BSR or BSC tensor.  This argument should be"
              },
              "used": {
                "type": "",
                "description": "only if :attr:`self` is a strided tensor, and must be a"
              },
              "value": {
                "type": "",
                "description": "between 0 and dimension of :attr:`self` tensor minus two."
              },
              "col_indices": {
                "type": "",
                "description": "=tensor([0, 0, 1]),"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "to_sparse_bsc",
          "signature": "to_sparse_bsc(blocksize, dense_dim)",
          "documentation": {
            "description": "to_sparse_bsc(blocksize, dense_dim) -> Tensor\n\nConvert a tensor to a block sparse column (BSC) storage format of\ngiven blocksize.  If the :attr:`self` is strided, then the number of\ndense dimensions could be specified, and a hybrid BSC tensor will be\ncreated, with `dense_dim` dense dimensions and `self.dim() - 2 -\ndense_dim` batch dimension.",
            "parameters": {
              "blocksize": {
                "type": "list, tuple, :class:`torch.Size`, optional",
                "description": "Block size"
              },
              "of": {
                "type": "",
                "description": "the resulting BSC tensor. A block size must be a tuple of"
              },
              "length": {
                "type": "",
                "description": "two such that its items evenly divide the two sparse"
              },
              "dimensions": {
                "type": "",
                "description": "."
              },
              "dense_dim": {
                "type": "int, optional",
                "description": "Number of dense dimensions of the"
              },
              "resulting": {
                "type": "",
                "description": "BSC tensor.  This argument should be used only if\n:attr:`self` is a strided tensor, and must be a value between 0"
              },
              "and": {
                "type": "",
                "description": "dimension of :attr:`self` tensor minus two."
              },
              "Example": {
                "type": "",
                "description": ":\n>>> dense = torch.randn(10, 10)\n>>> sparse = dense.to_sparse_csr()\n>>> sparse_bsc = sparse.to_sparse_bsc((5, 5))\n>>> sparse_bsc.row_indices()"
              },
              "tensor": {
                "type": "ccol_indices=tensor([0, 1, 2, 3]",
                "description": ","
              },
              "row_indices": {
                "type": "",
                "description": "=tensor([0, 1, 0]),"
              },
              "values": {
                "type": "",
                "description": "=tensor([[[[1.]],\n[[1.]]],\n[[[1.]],\n[[1.]]],\n[[[1.]],\n[[1.]]]]), size=(4, 3, 1), nnz=3,"
              },
              "layout": {
                "type": "",
                "description": "=torch.sparse_bsc)"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "to_sparse_bsr",
          "signature": "to_sparse_bsr(blocksize, dense_dim)",
          "documentation": {
            "description": "to_sparse_bsr(blocksize, dense_dim) -> Tensor\n\nConvert a tensor to a block sparse row (BSR) storage format of given\nblocksize.  If the :attr:`self` is strided, then the number of dense\ndimensions could be specified, and a hybrid BSR tensor will be\ncreated, with `dense_dim` dense dimensions and `self.dim() - 2 -\ndense_dim` batch dimension.",
            "parameters": {
              "blocksize": {
                "type": "list, tuple, :class:`torch.Size`, optional",
                "description": "Block size"
              },
              "of": {
                "type": "",
                "description": "the resulting BSR tensor. A block size must be a tuple of"
              },
              "length": {
                "type": "",
                "description": "two such that its items evenly divide the two sparse"
              },
              "dimensions": {
                "type": "",
                "description": "."
              },
              "dense_dim": {
                "type": "int, optional",
                "description": "Number of dense dimensions of the"
              },
              "resulting": {
                "type": "",
                "description": "BSR tensor.  This argument should be used only if\n:attr:`self` is a strided tensor, and must be a value between 0"
              },
              "and": {
                "type": "",
                "description": "dimension of :attr:`self` tensor minus two."
              },
              "Example": {
                "type": "",
                "description": ":\n>>> dense = torch.randn(10, 10)\n>>> sparse = dense.to_sparse_csr()\n>>> sparse_bsr = sparse.to_sparse_bsr((5, 5))\n>>> sparse_bsr.col_indices()"
              },
              "tensor": {
                "type": "crow_indices=tensor([0, 2, 3]",
                "description": ","
              },
              "col_indices": {
                "type": "",
                "description": "=tensor([0, 2, 1]),"
              },
              "values": {
                "type": "",
                "description": "=tensor([[[[1.]],\n[[1.]]],\n[[[1.]],\n[[1.]]],\n[[[1.]],\n[[1.]]]]), size=(4, 3, 1), nnz=3,"
              },
              "layout": {
                "type": "",
                "description": "=torch.sparse_bsr)"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "to_sparse_coo",
          "signature": "to_sparse_coo(self)",
          "documentation": {
            "description": "Convert a tensor to :ref:`coordinate format <sparse-coo-docs>`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "to_sparse_csc",
          "signature": "to_sparse_csc()",
          "documentation": {
            "description": "to_sparse_csc() -> Tensor\n\nConvert a tensor to compressed column storage (CSC) format.  Except\nfor strided tensors, only works with 2D tensors.  If the :attr:`self`\nis strided, then the number of dense dimensions could be specified,\nand a hybrid CSC tensor will be created, with `dense_dim` dense\ndimensions and `self.dim() - 2 - dense_dim` batch dimension.",
            "parameters": {
              "dense_dim": {
                "type": "int, optional",
                "description": "Number of dense dimensions of the"
              },
              "resulting": {
                "type": "",
                "description": "CSC tensor.  This argument should be used only if\n:attr:`self` is a strided tensor, and must be a value between 0"
              },
              "and": {
                "type": "",
                "description": "dimension of :attr:`self` tensor minus two."
              },
              "Example": {
                "type": "",
                "description": ":\n>>> dense = torch.randn(5, 5)\n>>> sparse = dense.to_sparse_csc()\n>>> sparse._nnz()"
              },
              "25": {
                "type": "",
                "description": ">>> dense = torch.zeros(3, 3, 1, 1)\n>>> dense[0, 0] = dense[1, 2] = dense[2, 1] = 1\n>>> dense.to_sparse_csc(dense_dim=2)"
              },
              "tensor": {
                "type": "ccol_indices=tensor([0, 1, 2, 3]",
                "description": ","
              },
              "row_indices": {
                "type": "",
                "description": "=tensor([0, 2, 1]),"
              },
              "values": {
                "type": "",
                "description": "=tensor([[[1.]],\n[[1.]],\n[[1.]]]), size=(3, 3, 1, 1), nnz=3,"
              },
              "layout": {
                "type": "",
                "description": "=torch.sparse_csc)"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "to_sparse_csr",
          "signature": "to_sparse_csr(dense_dim=None)",
          "documentation": {
            "description": "to_sparse_csr(dense_dim=None) -> Tensor\n\nConvert a tensor to compressed row storage format (CSR).  Except for\nstrided tensors, only works with 2D tensors.  If the :attr:`self` is\nstrided, then the number of dense dimensions could be specified, and a\nhybrid CSR tensor will be created, with `dense_dim` dense dimensions\nand `self.dim() - 2 - dense_dim` batch dimension.",
            "parameters": {
              "dense_dim": {
                "type": "int, optional",
                "description": "Number of dense dimensions of the"
              },
              "resulting": {
                "type": "",
                "description": "CSR tensor.  This argument should be used only if\n:attr:`self` is a strided tensor, and must be a value between 0"
              },
              "and": {
                "type": "",
                "description": "dimension of :attr:`self` tensor minus two."
              },
              "Example": {
                "type": "",
                "description": ":\n>>> dense = torch.randn(5, 5)\n>>> sparse = dense.to_sparse_csr()\n>>> sparse._nnz()"
              },
              "25": {
                "type": "",
                "description": ">>> dense = torch.zeros(3, 3, 1, 1)\n>>> dense[0, 0] = dense[1, 2] = dense[2, 1] = 1\n>>> dense.to_sparse_csr(dense_dim=2)"
              },
              "tensor": {
                "type": "crow_indices=tensor([0, 1, 2, 3]",
                "description": ","
              },
              "col_indices": {
                "type": "",
                "description": "=tensor([0, 2, 1]),"
              },
              "values": {
                "type": "",
                "description": "=tensor([[[1.]],\n[[1.]],\n[[1.]]]), size=(3, 3, 1, 1), nnz=3,"
              },
              "layout": {
                "type": "",
                "description": "=torch.sparse_csr)"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "tolist",
          "signature": "tolist()",
          "documentation": {
            "description": "tolist() -> list or number\n\nReturns the tensor as a (nested) list. For scalars, a standard\nPython number is returned, just like with :meth:`~Tensor.item`.\nTensors are automatically moved to the CPU first if necessary.\n\nThis operation is not differentiable.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "topk",
          "signature": "topk(k, dim=None, largest=True, sorted=True)",
          "documentation": {
            "description": "topk(k, dim=None, largest=True, sorted=True) -> (Tensor, LongTensor)\n\nSee :func:`torch.topk`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "trace",
          "signature": "trace()",
          "documentation": {
            "description": "trace() -> Tensor\n\nSee :func:`torch.trace`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "transpose",
          "signature": "transpose(dim0, dim1)",
          "documentation": {
            "description": "transpose(dim0, dim1) -> Tensor\n\nSee :func:`torch.transpose`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "transpose_",
          "signature": "transpose_(dim0, dim1)",
          "documentation": {
            "description": "transpose_(dim0, dim1) -> Tensor\n\nIn-place version of :meth:`~Tensor.transpose`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "triangular_solve",
          "signature": "triangular_solve(A, upper=True, transpose=False, unitriangular=False)",
          "documentation": {
            "description": "triangular_solve(A, upper=True, transpose=False, unitriangular=False) -> (Tensor, Tensor)\n\nSee :func:`torch.triangular_solve`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "tril",
          "signature": "tril(diagonal=0)",
          "documentation": {
            "description": "tril(diagonal=0) -> Tensor\n\nSee :func:`torch.tril`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "tril_",
          "signature": "tril_(diagonal=0)",
          "documentation": {
            "description": "tril_(diagonal=0) -> Tensor\n\nIn-place version of :meth:`~Tensor.tril`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "triu",
          "signature": "triu(diagonal=0)",
          "documentation": {
            "description": "triu(diagonal=0) -> Tensor\n\nSee :func:`torch.triu`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "triu_",
          "signature": "triu_(diagonal=0)",
          "documentation": {
            "description": "triu_(diagonal=0) -> Tensor\n\nIn-place version of :meth:`~Tensor.triu`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "true_divide",
          "signature": "true_divide(value)",
          "documentation": {
            "description": "true_divide(value) -> Tensor\n\nSee :func:`torch.true_divide`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "true_divide_",
          "signature": "true_divide_(value)",
          "documentation": {
            "description": "true_divide_(value) -> Tensor\n\nIn-place version of :meth:`~Tensor.true_divide_`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "trunc",
          "signature": "trunc()",
          "documentation": {
            "description": "trunc() -> Tensor\n\nSee :func:`torch.trunc`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "trunc_",
          "signature": "trunc_()",
          "documentation": {
            "description": "trunc_() -> Tensor\n\nIn-place version of :meth:`~Tensor.trunc`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "type",
          "signature": "type(dtype=None, non_blocking=False, **kwargs)",
          "documentation": {
            "description": "type(dtype=None, non_blocking=False, **kwargs) -> str or Tensor\nReturns the type if `dtype` is not provided, else casts this object to\nthe specified type.\n\nIf this is already of the correct type, no copy is performed and the\noriginal object is returned.",
            "parameters": {
              "dtype": {
                "type": "dtype or string",
                "description": "The desired type"
              },
              "non_blocking": {
                "type": "bool",
                "description": "If ``True``, and the source is in pinned memory"
              },
              "and": {
                "type": "",
                "description": "destination is on the GPU or vice versa, the copy is performed"
              },
              "asynchronously": {
                "type": "",
                "description": "with respect to the host. Otherwise, the argument"
              },
              "has": {
                "type": "",
                "description": "no effect.\n**kwargs: For compatibility, may contain the key ``async`` in place of"
              },
              "the": {
                "type": "",
                "description": "``non_blocking`` argument. The ``async`` arg is deprecated."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "type_as",
          "signature": "type_as(tensor)",
          "documentation": {
            "description": "type_as(tensor) -> Tensor\n\nReturns this tensor cast to the type of the given tensor.\n\nThis is a no-op if the tensor is already of the correct type. This is\nequivalent to ``self.type(tensor.type())``",
            "parameters": {
              "tensor": {
                "type": "Tensor",
                "description": "the tensor which has the desired type"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "unbind",
          "signature": "unbind(dim=0)",
          "documentation": {
            "description": "unbind(dim=0) -> seq\n\nSee :func:`torch.unbind`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "unflatten",
          "signature": "unflatten(self, dim, sizes)",
          "documentation": {
            "description": "unflatten(dim, sizes) -> Tensor\n\nSee :func:`torch.unflatten`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "unfold",
          "signature": "unfold(dimension, size, step)",
          "documentation": {
            "description": "unfold(dimension, size, step) -> Tensor\n\nReturns a view of the original tensor which contains all slices of size :attr:`size` from\n:attr:`self` tensor in the dimension :attr:`dimension`.\n\nStep between two slices is given by :attr:`step`.\n\nIf `sizedim` is the size of dimension :attr:`dimension` for :attr:`self`, the size of\ndimension :attr:`dimension` in the returned tensor will be\n`(sizedim - size) / step + 1`.\n\nAn additional dimension of size :attr:`size` is appended in the returned tensor.",
            "parameters": {
              "dimension": {
                "type": "int",
                "description": "dimension in which unfolding happens"
              },
              "size": {
                "type": "int",
                "description": "the size of each slice that is unfolded"
              },
              "step": {
                "type": "int",
                "description": "the step between each slice"
              },
              "Example": {
                "type": "",
                "description": ":\n>>> x = torch.arange(1., 8)\n>>> x"
              },
              "tensor": {
                "type": "",
                "description": "([[ 1.,  2.],\n[ 3.,  4.],\n[ 5.,  6.]])"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "uniform_",
          "signature": "uniform_(from=0, to=1, *, generator=None)",
          "documentation": {
            "description": "uniform_(from=0, to=1, *, generator=None) -> Tensor\n\nFills :attr:`self` tensor with numbers sampled from the continuous uniform\ndistribution:\n\n.. math::\n    f(x) = \\dfrac{1}{\\text{to} - \\text{from}}",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "unique",
          "signature": "unique(self, sorted=True, return_inverse=False, return_counts=False, dim=None)",
          "documentation": {
            "description": "Returns the unique elements of the input tensor.\n\nSee :func:`torch.unique`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "unique_consecutive",
          "signature": "unique_consecutive(self, return_inverse=False, return_counts=False, dim=None)",
          "documentation": {
            "description": "Eliminates all but the first element from every consecutive group of equivalent elements.\n\nSee :func:`torch.unique_consecutive`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "unsafe_chunk",
          "signature": "unsafe_chunk(chunks, dim=0)",
          "documentation": {
            "description": "unsafe_chunk(chunks, dim=0) -> List of Tensors\n\nSee :func:`torch.unsafe_chunk`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "unsafe_split",
          "signature": "unsafe_split(split_size, dim=0)",
          "documentation": {
            "description": "unsafe_split(split_size, dim=0) -> List of Tensors\n\nSee :func:`torch.unsafe_split`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "unsafe_split_with_sizes",
          "signature": "unsafe_split_with_sizes(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "unsqueeze",
          "signature": "unsqueeze(dim)",
          "documentation": {
            "description": "unsqueeze(dim) -> Tensor\n\nSee :func:`torch.unsqueeze`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "unsqueeze_",
          "signature": "unsqueeze_(dim)",
          "documentation": {
            "description": "unsqueeze_(dim) -> Tensor\n\nIn-place version of :meth:`~Tensor.unsqueeze`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "untyped_storage",
          "signature": "untyped_storage()",
          "documentation": {
            "description": "untyped_storage() -> torch.UntypedStorage\n\nReturns the underlying :class:`UntypedStorage`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "values",
          "signature": "values()",
          "documentation": {
            "description": "values() -> Tensor\n\nReturn the values tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.\n\n.. warning::\n  Throws an error if :attr:`self` is not a sparse COO tensor.\n\nSee also :meth:`Tensor.indices`.\n\n.. note::\n  This method can only be called on a coalesced sparse tensor. See\n  :meth:`Tensor.coalesce` for details.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "var",
          "signature": "var(dim=None, *, correction=1, keepdim=False)",
          "documentation": {
            "description": "var(dim=None, *, correction=1, keepdim=False) -> Tensor\n\nSee :func:`torch.var`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "vdot",
          "signature": "vdot(other)",
          "documentation": {
            "description": "vdot(other) -> Tensor\n\nSee :func:`torch.vdot`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "view",
          "signature": "view(*shape)",
          "documentation": {
            "description": "view(*shape) -> Tensor\n\nReturns a new tensor with the same data as the :attr:`self` tensor but of a\ndifferent :attr:`shape`.\n\nThe returned tensor shares the same data and must have the same number\nof elements, but may have a different size. For a tensor to be viewed, the new\nview size must be compatible with its original size and stride, i.e., each new\nview dimension must either be a subspace of an original dimension, or only span\nacross original dimensions :math:`d, d+1, \\dots, d+k` that satisfy the following\ncontiguity-like condition that :math:`\\forall i = d, \\dots, d+k-1`,\n\n.. math::\n\n  \\text{stride}[i] = \\text{stride}[i+1] \\times \\text{size}[i+1]\n\nOtherwise, it will not be possible to view :attr:`self` tensor as :attr:`shape`\nwithout copying it (e.g., via :meth:`contiguous`). When it is unclear whether a\n:meth:`view` can be performed, it is advisable to use :meth:`reshape`, which\nreturns a view if the shapes are compatible, and copies (equivalent to calling\n:meth:`contiguous`) otherwise.",
            "parameters": {
              "shape": {
                "type": "torch.Size or int...",
                "description": "the desired size"
              },
              "Example": {
                "type": "",
                "description": ":\n>>> x = torch.randn(4, 4)\n>>> x"
              },
              "torch": {
                "type": "",
                "description": ".Size([4, 16])"
              },
              "False": {
                "type": "",
                "description": ".. method:: view(dtype) -> Tensor\n:noindex:"
              },
              "Returns": {
                "type": "",
                "description": "a new tensor with the same data as the :attr:`self` tensor but of a"
              },
              "different": {
                "type": "",
                "description": "attr:`dtype`."
              },
              "If": {
                "type": "",
                "description": "any of the above conditions are not met, an error is thrown.\n.. warning::"
              },
              "then": {
                "type": "",
                "description": "the size of the last dimension of the output will be scaled"
              },
              "proportionally": {
                "type": "",
                "description": ".  For instance, if :attr:`dtype` element size is twice that of\n``self.dtype``, then each pair of elements in the last dimension of\n:attr:`self` will be combined, and the size of the last dimension of the output"
              },
              "will": {
                "type": "",
                "description": "be half that of :attr:`self`. If :attr:`dtype` element size is half that"
              },
              "of": {
                "type": "",
                "description": "``self.dtype``, then each element in the last dimension of :attr:`self` will"
              },
              "be": {
                "type": "",
                "description": "split in two, and the size of the last dimension of the output will be"
              },
              "double": {
                "type": "",
                "description": "that of :attr:`self`. For this to be possible, the following conditions"
              },
              "must": {
                "type": "",
                "description": "be true:\n* ``self.dim()`` must be greater than 0.\n* ``self.stride(-1)`` must be 1."
              },
              "Additionally": {
                "type": "",
                "description": ", if the element size of :attr:`dtype` is greater than that of\n``self.dtype``, the following conditions must be true as well:\n* ``self.size(-1)`` must be divisible by the ratio between the element"
              },
              "sizes": {
                "type": "",
                "description": "of the dtypes.\n* ``self.storage_offset()`` must be divisible by the ratio between the"
              },
              "element": {
                "type": "",
                "description": "sizes of the dtypes.\n* The strides of all dimensions, except the last dimension, must be"
              },
              "divisible": {
                "type": "",
                "description": "by the ratio between the element sizes of the dtypes."
              },
              "This": {
                "type": "",
                "description": "overload is not supported by TorchScript, and using it in a Torchscript"
              },
              "program": {
                "type": "",
                "description": "will cause undefined behavior."
              },
              "Args": {
                "type": "",
                "description": ""
              },
              "dtype": {
                "type": "",
                "description": "=torch.int32)\n>>> y[0, 0] = 1000000000\n>>> x"
              },
              "tensor": {
                "type": "",
                "description": "([[  0, 202, 154,  59, 182, 243, 253, 188, 185, 252, 191,  63, 240,  22,"
              },
              "8": {
                "type": "",
                "description": ", 191],\n[227, 165,  27, 190, 128,  72,  63,  63, 146, 203,  15,  63,  22, 106,"
              },
              "93": {
                "type": "",
                "description": ", 191],\n[205,  59,  30, 192, 112, 206,   8, 189,   7,  95, 152, 190,  12, 147,"
              },
              "89": {
                "type": "",
                "description": ", 191],\n[ 43, 246,  87, 190, 235, 226, 254,  63, 111, 240, 117, 191, 177, 191,"
              },
              "28": {
                "type": "",
                "description": ", 191]], dtype=torch.uint8)\n>>> x.view(torch.uint8).size()"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "view_as",
          "signature": "view_as(other)",
          "documentation": {
            "description": "view_as(other) -> Tensor\n\nView this tensor as the same size as :attr:`other`.\n``self.view_as(other)`` is equivalent to ``self.view(other.size())``.\n\nPlease see :meth:`~Tensor.view` for more information about ``view``.",
            "parameters": {
              "other": {
                "type": ":class:`torch.Tensor`",
                "description": "The result tensor has the same size"
              },
              "as": {
                "type": "",
                "description": "attr:`other`."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "vsplit",
          "signature": "vsplit(split_size_or_sections)",
          "documentation": {
            "description": "vsplit(split_size_or_sections) -> List of Tensors\n\nSee :func:`torch.vsplit`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "where",
          "signature": "where(condition, y)",
          "documentation": {
            "description": "where(condition, y) -> Tensor\n\n``self.where(condition, y)`` is equivalent to ``torch.where(condition, self, y)``.\nSee :func:`torch.where`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "xlogy",
          "signature": "xlogy(other)",
          "documentation": {
            "description": "xlogy(other) -> Tensor\n\nSee :func:`torch.xlogy`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "xlogy_",
          "signature": "xlogy_(other)",
          "documentation": {
            "description": "xlogy_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.xlogy`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "xpu",
          "signature": "xpu(device=None, non_blocking=False, memory_format=torch.preserve_format)",
          "documentation": {
            "description": "xpu(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor\n\nReturns a copy of this object in XPU memory.\n\nIf this object is already in XPU memory and on the correct device,\nthen no copy is performed and the original object is returned.",
            "parameters": {
              "device": {
                "type": ":class:`torch.device`",
                "description": "The destination XPU device."
              },
              "Defaults": {
                "type": "",
                "description": "to the current XPU device."
              },
              "non_blocking": {
                "type": "bool",
                "description": "If ``True`` and the source is in pinned memory,"
              },
              "the": {
                "type": "",
                "description": "copy will be asynchronous with respect to the host."
              },
              "Otherwise": {
                "type": "",
                "description": ", the argument has no effect. Default: ``False``."
              },
              "memory_format": {
                "type": ":class:`torch.memory_format`, optional",
                "description": "the desired memory format of"
              },
              "returned": {
                "type": "",
                "description": "Tensor. Default: ``torch.preserve_format``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "zero_",
          "signature": "zero_()",
          "documentation": {
            "description": "zero_() -> Tensor\n\nFills :attr:`self` tensor with zeros.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    }
  ]
}