{
  "description": "No description available",
  "functions": [
    {
      "name": "log_event",
      "signature": "log_event(event: torch._C._monitor.Event)",
      "documentation": {
        "description": "log_event(event: torch._C._monitor.Event) -> None\n\n\nlog_event logs the specified event to all of the registered event\nhandlers. It's up to the event handlers to log the event out to the\ncorresponding event sink.\n\nIf there are no event handlers registered this method is a no-op.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "register_event_handler",
      "signature": "register_event_handler(callback: Callable[[torch._C._monitor.Event], None])",
      "documentation": {
        "description": "register_event_handler(callback: Callable[[torch._C._monitor.Event], None]) -> torch._C._monitor.EventHandlerHandle\n\n\nregister_event_handler registers a callback to be called whenever an\nevent is logged via ``log_event``. These handlers should avoid blocking\nthe main thread since that may interfere with training as they run\nduring the ``log_event`` call.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "unregister_event_handler",
      "signature": "unregister_event_handler(handler: torch._C._monitor.EventHandlerHandle)",
      "documentation": {
        "description": "unregister_event_handler(handler: torch._C._monitor.EventHandlerHandle) -> None\n\n\nunregister_event_handler unregisters the ``EventHandlerHandle`` returned\nafter calling ``register_event_handler``. After this returns the event\nhandler will no longer receive events.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    }
  ],
  "classes": [
    {
      "name": "Aggregation",
      "documentation": {
        "description": "These are types of aggregations that can be used to accumulate stats.\n      \n\nMembers:\n\n  VALUE : \n            VALUE returns the last value to be added.\n          \n\n  MEAN : \n            MEAN computes the arithmetic mean of all the added values.\n          \n\n  COUNT : \n            COUNT returns the total number of added values.\n          \n\n  SUM : \n            SUM returns the sum of the added values.\n          \n\n  MAX : \n            MAX returns the max of the added values.\n          \n\n  MIN : \n            MIN returns the min of the added values.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": []
    },
    {
      "name": "Event",
      "documentation": {
        "description": "Event represents a specific typed event to be logged. This can represent\nhigh-level data points such as loss or accuracy per epoch or more\nlow-level aggregations such as through the Stats provided through this\nlibrary.\n\nAll Events of the same type should have the same name so downstream\nhandlers can correctly process them.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": []
    },
    {
      "name": "EventHandlerHandle",
      "documentation": {
        "description": "EventHandlerHandle is a wrapper type returned by\n``register_event_handler`` used to unregister the handler via\n``unregister_event_handler``. This cannot be directly initialized.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": []
    },
    {
      "name": "Stat",
      "documentation": {
        "description": "Stat is used to compute summary statistics in a performant way over\nfixed intervals. Stat logs the statistics as an Event once every\n``window_size`` duration. When the window closes the stats are logged\nvia the event handlers as a ``torch.monitor.Stat`` event.\n\n``window_size`` should be set to something relatively high to avoid a\nhuge number of events being logged. Ex: 60s. Stat uses millisecond\nprecision.\n\nIf ``max_samples`` is set, the stat will cap the number of samples per\nwindow by discarding `add` calls once ``max_samples`` adds have\noccurred. If it's not set, all ``add`` calls during the window will be\nincluded. This is an optional field to make aggregations more directly\ncomparable across windows when the number of samples might vary.\n\nWhen the Stat is destructed it will log any remaining data even if the\nwindow hasn't elapsed.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "add",
          "signature": "add(self: torch._C._monitor.Stat, v: float)",
          "documentation": {
            "description": "add(self: torch._C._monitor.Stat, v: float) -> None\n\n\nAdds a value to the stat to be aggregated according to the\nconfigured stat type and aggregations.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get",
          "signature": "get(self: torch._C._monitor.Stat)",
          "documentation": {
            "description": "get(self: torch._C._monitor.Stat) -> dict[torch._C._monitor.Aggregation, float]\n\n\nReturns the current value of the stat, primarily for testing\npurposes. If the stat has logged and no additional values have been\nadded this will be zero.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "TensorboardEventHandler",
      "documentation": {
        "description": "TensorboardEventHandler is an event handler that will write known events to\nthe provided SummaryWriter.\n\nThis currently only supports ``torch.monitor.Stat`` events which are logged\nas scalars.\n\nExample:\n    >>> # xdoctest: +REQUIRES(env:TORCH_DOCTEST_MONITOR)\n    >>> # xdoctest: +REQUIRES(module:tensorboard)\n    >>> from torch.utils.tensorboard import SummaryWriter\n    >>> from torch.monitor import TensorboardEventHandler, register_event_handler\n    >>> writer = SummaryWriter(\"log_dir\")\n    >>> register_event_handler(TensorboardEventHandler(writer))",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ">>> # xdoctest: +REQUIRES(env:TORCH_DOCTEST_MONITOR)\n    >>> # xdoctest: +REQUIRES(module:tensorboard)\n    >>> from torch.utils.tensorboard import SummaryWriter\n    >>> from torch.monitor import TensorboardEventHandler, register_event_handler\n    >>> writer = SummaryWriter(\"log_dir\")\n    >>> register_event_handler(TensorboardEventHandler(writer))"
      },
      "methods": []
    },
    {
      "name": "data_value_t",
      "documentation": {
        "description": "data_value_t is one of ``str``, ``float``, ``int``, ``bool``.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": []
    }
  ]
}