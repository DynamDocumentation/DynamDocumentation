{
  "description": "Fortran to Python Interface Generator.\n\nCopyright 1999 -- 2011 Pearu Peterson all rights reserved.\nCopyright 2011 -- present NumPy Developers.\nPermission to use, modify, and distribute this software is given under the terms\nof the NumPy License.\n\nNO WARRANTY IS EXPRESSED OR IMPLIED.  USE AT YOUR OWN RISK.",
  "functions": [
    {
      "name": "compile",
      "signature": "compile(source, modulename='untitled', extra_args='', verbose=True, source_fn=None, extension='.f', full_output=False)",
      "documentation": {
        "description": "Build extension module from a Fortran 77 source string with f2py.",
        "parameters": {
          "source": {
            "type": "str or bytes",
            "description": "Fortran source of module / subroutine to compile\n.. versionchanged:: 1.16.0\nAccept str as well as bytes"
          },
          "modulename": {
            "type": "str, optional",
            "description": "The name of the compiled python module"
          },
          "extra_args": {
            "type": "str or list, optional",
            "description": "Additional parameters passed to f2py\n.. versionchanged:: 1.16.0\nA list of args may also be provided."
          },
          "verbose": {
            "type": "bool, optional",
            "description": "Print f2py output to screen"
          },
          "source_fn": {
            "type": "str, optional",
            "description": "Name of the file where the fortran source is written.\nThe default is to use a temporary file with the extension\nprovided by the ``extension`` parameter"
          },
          "extension": {
            "type": "``{'.f', '.f90'}``, optional",
            "description": "Filename extension if `source_fn` is not provided.\nThe extension tells which fortran standard is used.\nThe default is ``.f``, which implies F77 standard.\n.. versionadded:: 1.11.0"
          },
          "full_output": {
            "type": "bool, optional",
            "description": "If True, return a `subprocess.CompletedProcess` containing\nthe stdout and stderr of the compile process, instead of just\nthe status code.\n.. versionadded:: 1.20.0"
          }
        },
        "returns": "-------\nresult : int or `subprocess.CompletedProcess`\n0 on success, or a `subprocess.CompletedProcess` if\n``full_output=True``",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n.. literalinclude:: ../../source/f2py/code/results/compile_session.dat\n:language: python"
      }
    },
    {
      "name": "get_include",
      "signature": "get_include()",
      "documentation": {
        "description": "Return the directory that contains the ``fortranobject.c`` and ``.h`` files.\n.. note::\nThis function is not needed when building an extension with\n`numpy.distutils` directly from ``.f`` and/or ``.pyf`` files\nin one go.\nPython extension modules built with f2py-generated code need to use\n``fortranobject.c`` as a source file, and include the ``fortranobject.h``\nheader. This function can be used to obtain the directory containing\nboth of these files.",
        "parameters": {},
        "returns": "-------\ninclude_path : str\nAbsolute path to the directory containing ``fortranobject.c`` and\n``fortranobject.h``.",
        "raises": "",
        "see_also": "--------\nnumpy.get_include : function that returns the numpy include directory",
        "notes": "-----\n.. versionadded:: 1.21.1\nUnless the build system you are using has specific support for f2py,\nbuilding a Python extension using a ``.pyf`` signature file is a two-step\nprocess. For a module ``mymod``:\n* Step 1: run ``python -m numpy.f2py mymod.pyf --quiet``. This\ngenerates ``_mymodmodule.c`` and (if needed)\n``_fblas-f2pywrappers.f`` files next to ``mymod.pyf``.\n* Step 2: build your Python extension module. This requires the\nfollowing source files:\n* ``_mymodmodule.c``\n* ``_mymod-f2pywrappers.f`` (if it was generated in Step 1)\n* ``fortranobject.c``",
        "examples": ""
      }
    },
    {
      "name": "main",
      "signature": "main()",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "run_main",
      "signature": "run_main(comline_list)",
      "documentation": {
        "description": "Equivalent to running::\nf2py <args>\nwhere ``<args>=string.join(<list>,' ')``, but in Python.  Unless\n``-h`` is used, this function returns a dictionary containing\ninformation on generated modules and their dependencies on source\nfiles.\nYou cannot build extension modules with this function, that is,\nusing ``-c`` is not allowed. Use the ``compile`` command instead.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\nThe command ``f2py -m scalar scalar.f`` can be executed from Python as\nfollows.\n.. literalinclude:: ../../source/f2py/code/results/run_main_session.dat\n:language: python"
      }
    }
  ],
  "classes": [
    {
      "name": "VisibleDeprecationWarning",
      "documentation": {
        "description": "Visible deprecation warning.\nBy default, python will not show deprecation warnings, so this class\ncan be used when a very visible warning is helpful, for example because\nthe usage is most likely a user bug.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "add_note",
          "signature": "add_note(...)",
          "documentation": {
            "description": "Exception.add_note(note) --\nadd a note to the exception",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "with_traceback",
          "signature": "with_traceback(...)",
          "documentation": {
            "description": "Exception.with_traceback(tb) --\nset self.__traceback__ to tb and return self.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    }
  ]
}