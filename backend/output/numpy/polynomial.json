{
  "description": "A sub-package for efficiently dealing with polynomials.\n\nWithin the documentation for this sub-package, a \"finite power series,\"\ni.e., a polynomial (also referred to simply as a \"series\") is represented\nby a 1-D numpy array of the polynomial's coefficients, ordered from lowest\norder term to highest.  For example, array([1,2,3]) represents\n``P_0 + 2*P_1 + 3*P_2``, where P_n is the n-th order basis polynomial\napplicable to the specific module in question, e.g., `polynomial` (which\n\"wraps\" the \"standard\" basis) or `chebyshev`.  For optimal performance,\nall operations on polynomials, including evaluation at an argument, are\nimplemented as operations on the coefficients.  Additional (module-specific)\ninformation can be found in the docstring for the module of interest.\n\nThis package provides *convenience classes* for each of six different kinds\nof polynomials:\n\n         ========================    ================\n         **Name**                    **Provides**\n         ========================    ================\n         `~polynomial.Polynomial`    Power series\n         `~chebyshev.Chebyshev`      Chebyshev series\n         `~legendre.Legendre`        Legendre series\n         `~laguerre.Laguerre`        Laguerre series\n         `~hermite.Hermite`          Hermite series\n         `~hermite_e.HermiteE`       HermiteE series\n         ========================    ================\n\nThese *convenience classes* provide a consistent interface for creating,\nmanipulating, and fitting data with polynomials of different bases.\nThe convenience classes are the preferred interface for the `~numpy.polynomial`\npackage, and are available from the ``numpy.polynomial`` namespace.\nThis eliminates the need to navigate to the corresponding submodules, e.g.\n``np.polynomial.Polynomial`` or ``np.polynomial.Chebyshev`` instead of\n``np.polynomial.polynomial.Polynomial`` or\n``np.polynomial.chebyshev.Chebyshev``, respectively.\nThe classes provide a more consistent and concise interface than the\ntype-specific functions defined in the submodules for each type of polynomial.\nFor example, to fit a Chebyshev polynomial with degree ``1`` to data given\nby arrays ``xdata`` and ``ydata``, the\n`~chebyshev.Chebyshev.fit` class method::\n\n    >>> from numpy.polynomial import Chebyshev\n    >>> c = Chebyshev.fit(xdata, ydata, deg=1)\n\nis preferred over the `chebyshev.chebfit` function from the\n``np.polynomial.chebyshev`` module::\n\n    >>> from numpy.polynomial.chebyshev import chebfit\n    >>> c = chebfit(xdata, ydata, deg=1)\n\nSee :doc:`routines.polynomials.classes` for more details.\n\nConvenience Classes\n===================\n\nThe following lists the various constants and methods common to all of\nthe classes representing the various kinds of polynomials. In the following,\nthe term ``Poly`` represents any one of the convenience classes (e.g.\n`~polynomial.Polynomial`, `~chebyshev.Chebyshev`, `~hermite.Hermite`, etc.)\nwhile the lowercase ``p`` represents an **instance** of a polynomial class.\n\nConstants\n---------\n\n- ``Poly.domain``     -- Default domain\n- ``Poly.window``     -- Default window\n- ``Poly.basis_name`` -- String used to represent the basis\n- ``Poly.maxpower``   -- Maximum value ``n`` such that ``p**n`` is allowed\n- ``Poly.nickname``   -- String used in printing\n\nCreation\n--------\n\nMethods for creating polynomial instances.\n\n- ``Poly.basis(degree)``    -- Basis polynomial of given degree\n- ``Poly.identity()``       -- ``p`` where ``p(x) = x`` for all ``x``\n- ``Poly.fit(x, y, deg)``   -- ``p`` of degree ``deg`` with coefficients\n  determined by the least-squares fit to the data ``x``, ``y``\n- ``Poly.fromroots(roots)`` -- ``p`` with specified roots\n- ``p.copy()``              -- Create a copy of ``p``\n\nConversion\n----------\n\nMethods for converting a polynomial instance of one kind to another.\n\n- ``p.cast(Poly)``    -- Convert ``p`` to instance of kind ``Poly``\n- ``p.convert(Poly)`` -- Convert ``p`` to instance of kind ``Poly`` or map\n  between ``domain`` and ``window``\n\nCalculus\n--------\n- ``p.deriv()`` -- Take the derivative of ``p``\n- ``p.integ()`` -- Integrate ``p``\n\nValidation\n----------\n- ``Poly.has_samecoef(p1, p2)``   -- Check if coefficients match\n- ``Poly.has_samedomain(p1, p2)`` -- Check if domains match\n- ``Poly.has_sametype(p1, p2)``   -- Check if types match\n- ``Poly.has_samewindow(p1, p2)`` -- Check if windows match\n\nMisc\n----\n- ``p.linspace()`` -- Return ``x, p(x)`` at equally-spaced points in ``domain``\n- ``p.mapparms()`` -- Return the parameters for the linear mapping between\n  ``domain`` and ``window``.\n- ``p.roots()``    -- Return the roots of `p`.\n- ``p.trim()``     -- Remove trailing coefficients.\n- ``p.cutdeg(degree)`` -- Truncate p to given degree\n- ``p.truncate(size)`` -- Truncate p to given size",
  "functions": [
    {
      "name": "set_default_printstyle",
      "signature": "set_default_printstyle(style)",
      "documentation": {
        "description": "Set the default format for the string representation of polynomials.\nValues for ``style`` must be valid inputs to ``__format__``, i.e. 'ascii'\nor 'unicode'.",
        "parameters": {
          "style": {
            "type": "str",
            "description": "Format string for default printing style. Must be either 'ascii' or\n'unicode'."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "-----\nThe default format depends on the platform: 'unicode' is used on\nUnix-based systems and 'ascii' on Windows. This determination is based on\ndefault font support for the unicode superscript and subscript ranges.",
        "examples": "--------\n>>> p = np.polynomial.Polynomial([1, 2, 3])\n>>> c = np.polynomial.Chebyshev([1, 2, 3])\n>>> np.polynomial.set_default_printstyle('unicode')\n>>> print(p)\n1.0 + 2.0·x + 3.0·x²\n>>> print(c)\n1.0 + 2.0·T₁(x) + 3.0·T₂(x)\n>>> np.polynomial.set_default_printstyle('ascii')\n>>> print(p)\n1.0 + 2.0 x + 3.0 x**2\n>>> print(c)\n1.0 + 2.0 T_1(x) + 3.0 T_2(x)\n>>> # Formatting supersedes all class/package-level defaults\n>>> print(f\"{p:unicode}\")\n1.0 + 2.0·x + 3.0·x²"
      }
    }
  ],
  "classes": [
    {
      "name": "Chebyshev",
      "documentation": {
        "description": "A Chebyshev series class.\nThe Chebyshev class provides the standard Python numerical methods\n'+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\nmethods listed below.",
        "parameters": {
          "coef": {
            "type": "array_like",
            "description": "Chebyshev coefficients in order of increasing degree, i.e.,\n``(1, 2, 3)`` gives ``1*T_0(x) + 2*T_1(x) + 3*T_2(x)``."
          },
          "domain": {
            "type": "(2,) array_like, optional",
            "description": "Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\nto the interval ``[window[0], window[1]]`` by shifting and scaling.\nThe default value is [-1, 1]."
          },
          "window": {
            "type": "(2,) array_like, optional",
            "description": "Window, see `domain` for its use. The default value is [-1, 1].\n.. versionadded:: 1.6.0"
          },
          "symbol": {
            "type": "str, optional",
            "description": "Symbol used to represent the independent variable in string\nrepresentations of the polynomial expression, e.g. for printing.\nThe symbol must be a valid Python identifier. Default value is 'x'.\n.. versionadded:: 1.24"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "basis",
          "signature": "basis(deg, domain=None, window=None, symbol='x')",
          "documentation": {
            "description": "Series basis polynomial of degree `deg`.",
            "parameters": {
              "deg": {
                "type": "int",
                "description": "Degree of the basis polynomial for the series. Must be >= 0."
              },
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If given, the array must be of the form ``[beg, end]``, where\n``beg`` and ``end`` are the endpoints of the domain. If None is\ngiven then the class domain is used. The default is None."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "If given, the resulting array must be if the form\n``[beg, end]``, where ``beg`` and ``end`` are the endpoints of\nthe window. If None is given then the class window is used. The\ndefault is None."
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": ".. versionadded:: 1.7.0\n-------\nnew_series : series\nA series with the coefficient of the `deg` term set to one and\nall others zero.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cast",
          "signature": "cast(series, domain=None, window=None)",
          "documentation": {
            "description": "Convert series to series of this class.\nThe `series` is expected to be an instance of some polynomial\nseries of one of the types supported by by the numpy.polynomial\nmodule, but could be some other class that supports the convert\nmethod.\n.. versionadded:: 1.7.0",
            "parameters": {
              "series": {
                "type": "series",
                "description": "The series instance to be converted."
              },
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If given, the array must be of the form ``[beg, end]``, where\n``beg`` and ``end`` are the endpoints of the domain. If None is\ngiven then the class domain is used. The default is None."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "If given, the resulting array must be if the form\n``[beg, end]``, where ``beg`` and ``end`` are the endpoints of\nthe window. If None is given then the class window is used. The\ndefault is None."
              }
            },
            "returns": "-------\nnew_series : series\nA series of the same kind as the calling class and equal to\n`series` when evaluated.",
            "raises": "",
            "see_also": "--------\nconvert : similar instance method",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "convert",
          "signature": "convert(self, domain=None, kind=None, window=None)",
          "documentation": {
            "description": "Convert series to a different kind and/or domain and/or window.",
            "parameters": {
              "domain": {
                "type": "array_like, optional",
                "description": "The domain of the converted series. If the value is None,\nthe default domain of `kind` is used."
              },
              "kind": {
                "type": "class, optional",
                "description": "The polynomial series type class to which the current instance\nshould be converted. If kind is None, then the class of the\ncurrent instance is used."
              },
              "window": {
                "type": "array_like, optional",
                "description": "The window of the converted series. If the value is None,\nthe default window of `kind` is used."
              }
            },
            "returns": "-------\nnew_series : series\nThe returned class can be of different type than the current\ninstance and/or have a different domain and/or different\nwindow.",
            "raises": "",
            "see_also": "",
            "notes": "-----\nConversion between domains and class types can result in\nnumerically ill defined series.",
            "examples": ""
          }
        },
        {
          "name": "copy",
          "signature": "copy(self)",
          "documentation": {
            "description": "Return a copy.",
            "parameters": {},
            "returns": "-------\nnew_series : series\nCopy of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cutdeg",
          "signature": "cutdeg(self, deg)",
          "documentation": {
            "description": "Truncate series to the given degree.\nReduce the degree of the series to `deg` by discarding the\nhigh order terms. If `deg` is greater than the current degree a\ncopy of the current series is returned. This can be useful in least\nsquares where the coefficients of the high degree terms may be very\nsmall.\n.. versionadded:: 1.5.0",
            "parameters": {
              "deg": {
                "type": "non-negative int",
                "description": "The series is reduced to degree `deg` by discarding the high\norder terms. The value of `deg` must be a non-negative integer."
              }
            },
            "returns": "-------\nnew_series : series\nNew instance of series with reduced degree.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "degree",
          "signature": "degree(self)",
          "documentation": {
            "description": "The degree of the series.\n.. versionadded:: 1.5.0",
            "parameters": {},
            "returns": "-------\ndegree : int\nDegree of the series, one less than the number of coefficients.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": "--------\nCreate a polynomial object for ``1 + 7*x + 4*x**2``:\n>>> poly = np.polynomial.Polynomial([1, 7, 4])\n>>> print(poly)\n1.0 + 7.0·x + 4.0·x²\n>>> poly.degree()\n2\nNote that this method does not check for non-zero coefficients.\nYou must trim the polynomial to remove any trailing zeroes:\n>>> poly = np.polynomial.Polynomial([1, 7, 0])\n>>> print(poly)\n1.0 + 7.0·x + 0.0·x²\n>>> poly.degree()\n2\n>>> poly.trim().degree()\n1"
          }
        },
        {
          "name": "deriv",
          "signature": "deriv(self, m=1)",
          "documentation": {
            "description": "Differentiate.\nReturn a series instance of that is the derivative of the current\nseries.",
            "parameters": {
              "m": {
                "type": "non-negative int",
                "description": "Find the derivative of order `m`."
              }
            },
            "returns": "-------\nnew_series : series\nA new series representing the derivative. The domain is the same\nas the domain of the differentiated series.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None, symbol='x')",
          "documentation": {
            "description": "Least squares fit to data.\nReturn a series instance that is the least squares fit to the data\n`y` sampled at `x`. The domain of the returned instance can be\nspecified and this will often result in a superior fit with less\nchance of ill conditioning.",
            "parameters": {
              "x": {
                "type": "array_like, shape (M,)",
                "description": "x-coordinates of the M sample points ``(x[i], y[i])``."
              },
              "y": {
                "type": "array_like, shape (M,)",
                "description": "y-coordinates of the M sample points ``(x[i], y[i])``."
              },
              "deg": {
                "type": "int or 1-D array_like",
                "description": "Degree(s) of the fitting polynomials. If `deg` is a single integer\nall terms up to and including the `deg`'th term are included in the\nfit. For NumPy versions >= 1.11.0 a list of integers specifying the\ndegrees of the terms to include may be used instead."
              },
              "domain": {
                "type": "{None, [beg, end], []}, optional",
                "description": "Domain to use for the returned series. If ``None``,\nthen a minimal domain that covers the points `x` is chosen.  If\n``[]`` the class domain is used. The default value was the\nclass domain in NumPy 1.4 and ``None`` in later versions.\nThe ``[]`` option was added in numpy 1.5.0."
              },
              "rcond": {
                "type": "float, optional",
                "description": "Relative condition number of the fit. Singular values smaller\nthan this relative to the largest singular value will be\nignored. The default value is len(x)*eps, where eps is the\nrelative precision of the float type, about 2e-16 in most\ncases."
              },
              "full": {
                "type": "bool, optional",
                "description": "Switch determining nature of return value. When it is False\n(the default) just the coefficients are returned, when True\ndiagnostic information from the singular value decomposition is\nalso returned."
              },
              "w": {
                "type": "array_like, shape (M,), optional",
                "description": "Weights. If not None, the weight ``w[i]`` applies to the unsquared\nresidual ``y[i] - y_hat[i]`` at ``x[i]``. Ideally the weights are\nchosen so that the errors of the products ``w[i]*y[i]`` all have\nthe same variance.  When using inverse-variance weighting, use\n``w[i] = 1/sigma(y[i])``.  The default value is None.\n.. versionadded:: 1.5.0"
              },
              "window": {
                "type": "{[beg, end]}, optional",
                "description": "Window to use for the returned series. The default\nvalue is the default class domain\n.. versionadded:: 1.6.0"
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": "-------\nnew_series : series\nA series that represents the least squares fit to the data and\nhas the domain and window specified in the call. If the\ncoefficients for the unscaled and unshifted basis polynomials are\nof interest, do ``new_series.convert().coef``.\n[resid, rank, sv, rcond] : list\nThese values are only returned if ``full == True``\n- resid -- sum of squared residuals of the least squares fit\n- rank -- the numerical rank of the scaled Vandermonde matrix\n- sv -- singular values of the scaled Vandermonde matrix\n- rcond -- value of `rcond`.\nFor more details, see `linalg.lstsq`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fromroots",
          "signature": "fromroots(roots, domain=[], window=None, symbol='x')",
          "documentation": {
            "description": "Return series instance that has the specified roots.",
            "parameters": {
              "roots": {
                "type": "array_like",
                "description": "List of roots."
              },
              "domain": {
                "type": "{[], None, array_like}, optional",
                "description": "Domain for the resulting series. If None the domain is the\ninterval from the smallest root to the largest. If [] the\ndomain is the class domain. The default is []."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "Window for the returned series. If None the class window is\nused. The default is None."
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": "``(x - r[0])*(x - r[1])*...*(x - r[n-1])``, where ``r`` is a\nlist of roots.\n-------\nnew_series : series\nSeries with the specified roots.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_samecoef",
          "signature": "has_samecoef(self, other)",
          "documentation": {
            "description": "Check if coefficients match.\n.. versionadded:: 1.6.0",
            "parameters": {
              "other": {
                "type": "class instance",
                "description": "The other class must have the ``coef`` attribute."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if the coefficients are the same, False otherwise.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_samedomain",
          "signature": "has_samedomain(self, other)",
          "documentation": {
            "description": "Check if domains match.\n.. versionadded:: 1.6.0",
            "parameters": {
              "other": {
                "type": "class instance",
                "description": "The other class must have the ``domain`` attribute."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if the domains are the same, False otherwise.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_sametype",
          "signature": "has_sametype(self, other)",
          "documentation": {
            "description": "Check if types match.\n.. versionadded:: 1.7.0",
            "parameters": {
              "other": {
                "type": "object",
                "description": "Class instance."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if other is same class as self",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_samewindow",
          "signature": "has_samewindow(self, other)",
          "documentation": {
            "description": "Check if windows match.\n.. versionadded:: 1.6.0",
            "parameters": {
              "other": {
                "type": "class instance",
                "description": "The other class must have the ``window`` attribute."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if the windows are the same, False otherwise.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "identity",
          "signature": "identity(domain=None, window=None, symbol='x')",
          "documentation": {
            "description": "Identity function.\nIf ``p`` is the returned series, then ``p(x) == x`` for all\nvalues of x.",
            "parameters": {
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If given, the array must be of the form ``[beg, end]``, where\n``beg`` and ``end`` are the endpoints of the domain. If None is\ngiven then the class domain is used. The default is None."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "If given, the resulting array must be if the form\n``[beg, end]``, where ``beg`` and ``end`` are the endpoints of\nthe window. If None is given then the class window is used. The\ndefault is None."
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": "-------\nnew_series : series\nSeries of representing the identity.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "integ",
          "signature": "integ(self, m=1, k=[], lbnd=None)",
          "documentation": {
            "description": "Integrate.\nReturn a series instance that is the definite integral of the\ncurrent series.",
            "parameters": {
              "m": {
                "type": "non-negative int",
                "description": "The number of integrations to perform."
              },
              "k": {
                "type": "array_like",
                "description": "Integration constants. The first constant is applied to the\nfirst integration, the second to the second, and so on. The\nlist of values must less than or equal to `m` in length and any\nmissing values are set to zero."
              },
              "lbnd": {
                "type": "Scalar",
                "description": "The lower bound of the definite integral."
              }
            },
            "returns": "-------\nnew_series : series\nA new series representing the integral. The domain is the same\nas the domain of the integrated series.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "interpolate",
          "signature": "interpolate(func, deg, domain=None, args=())",
          "documentation": {
            "description": "Interpolate a function at the Chebyshev points of the first kind.",
            "parameters": {
              "func": {
                "type": "function",
                "description": "The function to be interpolated. It must be a function of a single\nvariable of the form ``f(x, a, b, c...)``, where ``a, b, c...`` are\nextra arguments passed in the `args` parameter."
              },
              "deg": {
                "type": "int",
                "description": "Degree of the interpolating polynomial."
              },
              "domain": {
                "type": "{None, [beg, end]}, optional",
                "description": "Domain over which `func` is interpolated. The default is None, in\nwhich case the domain is [-1, 1]."
              },
              "args": {
                "type": "tuple, optional",
                "description": "Extra arguments to be used in the function call. Default is no\nextra arguments."
              }
            },
            "returns": "the first kind scaled and shifted to the `domain`. The resulting series\ntends to a minmax approximation of `func` when the function is\ncontinuous in the domain.\n.. versionadded:: 1.14.0\n-------\npolynomial : Chebyshev instance\nInterpolating Chebyshev instance.",
            "raises": "",
            "see_also": "",
            "notes": "-----\nSee `numpy.polynomial.chebfromfunction` for more details.",
            "examples": ""
          }
        },
        {
          "name": "linspace",
          "signature": "linspace(self, n=100, domain=None)",
          "documentation": {
            "description": "Return x, y values at equally spaced points in domain.",
            "parameters": {
              "n": {
                "type": "int, optional",
                "description": "Number of point pairs to return. The default value is 100."
              },
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If not None, the specified domain is used instead of that of\nthe calling instance. It should be of the form ``[beg,end]``.\nThe default is None which case the class domain is used."
              }
            },
            "returns": "domain.  Here y is the value of the polynomial at the points x. By\ndefault the domain is the same as that of the series instance.\nThis method is intended mostly as a plotting aid.\n.. versionadded:: 1.5.0\n-------\nx, y : ndarray\nx is equal to linspace(self.domain[0], self.domain[1], n) and\ny is the series evaluated at element of x.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "mapparms",
          "signature": "mapparms(self)",
          "documentation": {
            "description": "Return the mapping parameters.\nThe returned values define a linear map ``off + scl*x`` that is\napplied to the input arguments before the series is evaluated. The\nmap depends on the ``domain`` and ``window``; if the current\n``domain`` is equal to the ``window`` the resulting map is the\nidentity.  If the coefficients of the series instance are to be\nused by themselves outside this class, then the linear function\nmust be substituted for the ``x`` in the standard representation of\nthe base polynomials.",
            "parameters": {},
            "returns": "-------\noff, scl : float or complex\nThe mapping function is defined by ``off + scl*x``.",
            "raises": "",
            "see_also": "",
            "notes": "-----\nIf the current domain is the interval ``[l1, r1]`` and the window\nis ``[l2, r2]``, then the linear mapping function ``L`` is\ndefined by the equations::\nL(l1) = l2\nL(r1) = r2",
            "examples": ""
          }
        },
        {
          "name": "roots",
          "signature": "roots(self)",
          "documentation": {
            "description": "Return the roots of the series polynomial.\nCompute the roots for the series. Note that the accuracy of the\nroots decreases the further outside the `domain` they lie.",
            "parameters": {},
            "returns": "-------\nroots : ndarray\nArray containing the roots of the series.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "trim",
          "signature": "trim(self, tol=0)",
          "documentation": {
            "description": "Remove trailing coefficients\nRemove trailing coefficients until a coefficient is reached whose\nabsolute value greater than `tol` or the beginning of the series is\nreached. If all the coefficients would be removed the series is set\nto ``[0]``. A new series instance is returned with the new\ncoefficients.  The current instance remains unchanged.",
            "parameters": {
              "tol": {
                "type": "non-negative number.",
                "description": "All trailing coefficients less than `tol` will be removed."
              }
            },
            "returns": "-------\nnew_series : series\nNew instance of series with trimmed coefficients.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "truncate",
          "signature": "truncate(self, size)",
          "documentation": {
            "description": "Truncate series to length `size`.\nReduce the series to length `size` by discarding the high\ndegree terms. The value of `size` must be a positive integer. This\ncan be useful in least squares where the coefficients of the\nhigh degree terms may be very small.",
            "parameters": {
              "size": {
                "type": "positive int",
                "description": "The series is reduced to length `size` by discarding the high\ndegree terms. The value of `size` must be a positive integer."
              }
            },
            "returns": "-------\nnew_series : series\nNew instance of series with truncated coefficients.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "Hermite",
      "documentation": {
        "description": "An Hermite series class.\nThe Hermite class provides the standard Python numerical methods\n'+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\nattributes and methods listed in the `ABCPolyBase` documentation.",
        "parameters": {
          "coef": {
            "type": "array_like",
            "description": "Hermite coefficients in order of increasing degree, i.e,\n``(1, 2, 3)`` gives ``1*H_0(x) + 2*H_1(X) + 3*H_2(x)``."
          },
          "domain": {
            "type": "(2,) array_like, optional",
            "description": "Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\nto the interval ``[window[0], window[1]]`` by shifting and scaling.\nThe default value is [-1, 1]."
          },
          "window": {
            "type": "(2,) array_like, optional",
            "description": "Window, see `domain` for its use. The default value is [-1, 1].\n.. versionadded:: 1.6.0"
          },
          "symbol": {
            "type": "str, optional",
            "description": "Symbol used to represent the independent variable in string\nrepresentations of the polynomial expression, e.g. for printing.\nThe symbol must be a valid Python identifier. Default value is 'x'.\n.. versionadded:: 1.24"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "basis",
          "signature": "basis(deg, domain=None, window=None, symbol='x')",
          "documentation": {
            "description": "Series basis polynomial of degree `deg`.",
            "parameters": {
              "deg": {
                "type": "int",
                "description": "Degree of the basis polynomial for the series. Must be >= 0."
              },
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If given, the array must be of the form ``[beg, end]``, where\n``beg`` and ``end`` are the endpoints of the domain. If None is\ngiven then the class domain is used. The default is None."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "If given, the resulting array must be if the form\n``[beg, end]``, where ``beg`` and ``end`` are the endpoints of\nthe window. If None is given then the class window is used. The\ndefault is None."
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": ".. versionadded:: 1.7.0\n-------\nnew_series : series\nA series with the coefficient of the `deg` term set to one and\nall others zero.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cast",
          "signature": "cast(series, domain=None, window=None)",
          "documentation": {
            "description": "Convert series to series of this class.\nThe `series` is expected to be an instance of some polynomial\nseries of one of the types supported by by the numpy.polynomial\nmodule, but could be some other class that supports the convert\nmethod.\n.. versionadded:: 1.7.0",
            "parameters": {
              "series": {
                "type": "series",
                "description": "The series instance to be converted."
              },
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If given, the array must be of the form ``[beg, end]``, where\n``beg`` and ``end`` are the endpoints of the domain. If None is\ngiven then the class domain is used. The default is None."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "If given, the resulting array must be if the form\n``[beg, end]``, where ``beg`` and ``end`` are the endpoints of\nthe window. If None is given then the class window is used. The\ndefault is None."
              }
            },
            "returns": "-------\nnew_series : series\nA series of the same kind as the calling class and equal to\n`series` when evaluated.",
            "raises": "",
            "see_also": "--------\nconvert : similar instance method",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "convert",
          "signature": "convert(self, domain=None, kind=None, window=None)",
          "documentation": {
            "description": "Convert series to a different kind and/or domain and/or window.",
            "parameters": {
              "domain": {
                "type": "array_like, optional",
                "description": "The domain of the converted series. If the value is None,\nthe default domain of `kind` is used."
              },
              "kind": {
                "type": "class, optional",
                "description": "The polynomial series type class to which the current instance\nshould be converted. If kind is None, then the class of the\ncurrent instance is used."
              },
              "window": {
                "type": "array_like, optional",
                "description": "The window of the converted series. If the value is None,\nthe default window of `kind` is used."
              }
            },
            "returns": "-------\nnew_series : series\nThe returned class can be of different type than the current\ninstance and/or have a different domain and/or different\nwindow.",
            "raises": "",
            "see_also": "",
            "notes": "-----\nConversion between domains and class types can result in\nnumerically ill defined series.",
            "examples": ""
          }
        },
        {
          "name": "copy",
          "signature": "copy(self)",
          "documentation": {
            "description": "Return a copy.",
            "parameters": {},
            "returns": "-------\nnew_series : series\nCopy of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cutdeg",
          "signature": "cutdeg(self, deg)",
          "documentation": {
            "description": "Truncate series to the given degree.\nReduce the degree of the series to `deg` by discarding the\nhigh order terms. If `deg` is greater than the current degree a\ncopy of the current series is returned. This can be useful in least\nsquares where the coefficients of the high degree terms may be very\nsmall.\n.. versionadded:: 1.5.0",
            "parameters": {
              "deg": {
                "type": "non-negative int",
                "description": "The series is reduced to degree `deg` by discarding the high\norder terms. The value of `deg` must be a non-negative integer."
              }
            },
            "returns": "-------\nnew_series : series\nNew instance of series with reduced degree.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "degree",
          "signature": "degree(self)",
          "documentation": {
            "description": "The degree of the series.\n.. versionadded:: 1.5.0",
            "parameters": {},
            "returns": "-------\ndegree : int\nDegree of the series, one less than the number of coefficients.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": "--------\nCreate a polynomial object for ``1 + 7*x + 4*x**2``:\n>>> poly = np.polynomial.Polynomial([1, 7, 4])\n>>> print(poly)\n1.0 + 7.0·x + 4.0·x²\n>>> poly.degree()\n2\nNote that this method does not check for non-zero coefficients.\nYou must trim the polynomial to remove any trailing zeroes:\n>>> poly = np.polynomial.Polynomial([1, 7, 0])\n>>> print(poly)\n1.0 + 7.0·x + 0.0·x²\n>>> poly.degree()\n2\n>>> poly.trim().degree()\n1"
          }
        },
        {
          "name": "deriv",
          "signature": "deriv(self, m=1)",
          "documentation": {
            "description": "Differentiate.\nReturn a series instance of that is the derivative of the current\nseries.",
            "parameters": {
              "m": {
                "type": "non-negative int",
                "description": "Find the derivative of order `m`."
              }
            },
            "returns": "-------\nnew_series : series\nA new series representing the derivative. The domain is the same\nas the domain of the differentiated series.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None, symbol='x')",
          "documentation": {
            "description": "Least squares fit to data.\nReturn a series instance that is the least squares fit to the data\n`y` sampled at `x`. The domain of the returned instance can be\nspecified and this will often result in a superior fit with less\nchance of ill conditioning.",
            "parameters": {
              "x": {
                "type": "array_like, shape (M,)",
                "description": "x-coordinates of the M sample points ``(x[i], y[i])``."
              },
              "y": {
                "type": "array_like, shape (M,)",
                "description": "y-coordinates of the M sample points ``(x[i], y[i])``."
              },
              "deg": {
                "type": "int or 1-D array_like",
                "description": "Degree(s) of the fitting polynomials. If `deg` is a single integer\nall terms up to and including the `deg`'th term are included in the\nfit. For NumPy versions >= 1.11.0 a list of integers specifying the\ndegrees of the terms to include may be used instead."
              },
              "domain": {
                "type": "{None, [beg, end], []}, optional",
                "description": "Domain to use for the returned series. If ``None``,\nthen a minimal domain that covers the points `x` is chosen.  If\n``[]`` the class domain is used. The default value was the\nclass domain in NumPy 1.4 and ``None`` in later versions.\nThe ``[]`` option was added in numpy 1.5.0."
              },
              "rcond": {
                "type": "float, optional",
                "description": "Relative condition number of the fit. Singular values smaller\nthan this relative to the largest singular value will be\nignored. The default value is len(x)*eps, where eps is the\nrelative precision of the float type, about 2e-16 in most\ncases."
              },
              "full": {
                "type": "bool, optional",
                "description": "Switch determining nature of return value. When it is False\n(the default) just the coefficients are returned, when True\ndiagnostic information from the singular value decomposition is\nalso returned."
              },
              "w": {
                "type": "array_like, shape (M,), optional",
                "description": "Weights. If not None, the weight ``w[i]`` applies to the unsquared\nresidual ``y[i] - y_hat[i]`` at ``x[i]``. Ideally the weights are\nchosen so that the errors of the products ``w[i]*y[i]`` all have\nthe same variance.  When using inverse-variance weighting, use\n``w[i] = 1/sigma(y[i])``.  The default value is None.\n.. versionadded:: 1.5.0"
              },
              "window": {
                "type": "{[beg, end]}, optional",
                "description": "Window to use for the returned series. The default\nvalue is the default class domain\n.. versionadded:: 1.6.0"
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": "-------\nnew_series : series\nA series that represents the least squares fit to the data and\nhas the domain and window specified in the call. If the\ncoefficients for the unscaled and unshifted basis polynomials are\nof interest, do ``new_series.convert().coef``.\n[resid, rank, sv, rcond] : list\nThese values are only returned if ``full == True``\n- resid -- sum of squared residuals of the least squares fit\n- rank -- the numerical rank of the scaled Vandermonde matrix\n- sv -- singular values of the scaled Vandermonde matrix\n- rcond -- value of `rcond`.\nFor more details, see `linalg.lstsq`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fromroots",
          "signature": "fromroots(roots, domain=[], window=None, symbol='x')",
          "documentation": {
            "description": "Return series instance that has the specified roots.",
            "parameters": {
              "roots": {
                "type": "array_like",
                "description": "List of roots."
              },
              "domain": {
                "type": "{[], None, array_like}, optional",
                "description": "Domain for the resulting series. If None the domain is the\ninterval from the smallest root to the largest. If [] the\ndomain is the class domain. The default is []."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "Window for the returned series. If None the class window is\nused. The default is None."
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": "``(x - r[0])*(x - r[1])*...*(x - r[n-1])``, where ``r`` is a\nlist of roots.\n-------\nnew_series : series\nSeries with the specified roots.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_samecoef",
          "signature": "has_samecoef(self, other)",
          "documentation": {
            "description": "Check if coefficients match.\n.. versionadded:: 1.6.0",
            "parameters": {
              "other": {
                "type": "class instance",
                "description": "The other class must have the ``coef`` attribute."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if the coefficients are the same, False otherwise.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_samedomain",
          "signature": "has_samedomain(self, other)",
          "documentation": {
            "description": "Check if domains match.\n.. versionadded:: 1.6.0",
            "parameters": {
              "other": {
                "type": "class instance",
                "description": "The other class must have the ``domain`` attribute."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if the domains are the same, False otherwise.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_sametype",
          "signature": "has_sametype(self, other)",
          "documentation": {
            "description": "Check if types match.\n.. versionadded:: 1.7.0",
            "parameters": {
              "other": {
                "type": "object",
                "description": "Class instance."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if other is same class as self",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_samewindow",
          "signature": "has_samewindow(self, other)",
          "documentation": {
            "description": "Check if windows match.\n.. versionadded:: 1.6.0",
            "parameters": {
              "other": {
                "type": "class instance",
                "description": "The other class must have the ``window`` attribute."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if the windows are the same, False otherwise.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "identity",
          "signature": "identity(domain=None, window=None, symbol='x')",
          "documentation": {
            "description": "Identity function.\nIf ``p`` is the returned series, then ``p(x) == x`` for all\nvalues of x.",
            "parameters": {
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If given, the array must be of the form ``[beg, end]``, where\n``beg`` and ``end`` are the endpoints of the domain. If None is\ngiven then the class domain is used. The default is None."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "If given, the resulting array must be if the form\n``[beg, end]``, where ``beg`` and ``end`` are the endpoints of\nthe window. If None is given then the class window is used. The\ndefault is None."
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": "-------\nnew_series : series\nSeries of representing the identity.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "integ",
          "signature": "integ(self, m=1, k=[], lbnd=None)",
          "documentation": {
            "description": "Integrate.\nReturn a series instance that is the definite integral of the\ncurrent series.",
            "parameters": {
              "m": {
                "type": "non-negative int",
                "description": "The number of integrations to perform."
              },
              "k": {
                "type": "array_like",
                "description": "Integration constants. The first constant is applied to the\nfirst integration, the second to the second, and so on. The\nlist of values must less than or equal to `m` in length and any\nmissing values are set to zero."
              },
              "lbnd": {
                "type": "Scalar",
                "description": "The lower bound of the definite integral."
              }
            },
            "returns": "-------\nnew_series : series\nA new series representing the integral. The domain is the same\nas the domain of the integrated series.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "linspace",
          "signature": "linspace(self, n=100, domain=None)",
          "documentation": {
            "description": "Return x, y values at equally spaced points in domain.",
            "parameters": {
              "n": {
                "type": "int, optional",
                "description": "Number of point pairs to return. The default value is 100."
              },
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If not None, the specified domain is used instead of that of\nthe calling instance. It should be of the form ``[beg,end]``.\nThe default is None which case the class domain is used."
              }
            },
            "returns": "domain.  Here y is the value of the polynomial at the points x. By\ndefault the domain is the same as that of the series instance.\nThis method is intended mostly as a plotting aid.\n.. versionadded:: 1.5.0\n-------\nx, y : ndarray\nx is equal to linspace(self.domain[0], self.domain[1], n) and\ny is the series evaluated at element of x.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "mapparms",
          "signature": "mapparms(self)",
          "documentation": {
            "description": "Return the mapping parameters.\nThe returned values define a linear map ``off + scl*x`` that is\napplied to the input arguments before the series is evaluated. The\nmap depends on the ``domain`` and ``window``; if the current\n``domain`` is equal to the ``window`` the resulting map is the\nidentity.  If the coefficients of the series instance are to be\nused by themselves outside this class, then the linear function\nmust be substituted for the ``x`` in the standard representation of\nthe base polynomials.",
            "parameters": {},
            "returns": "-------\noff, scl : float or complex\nThe mapping function is defined by ``off + scl*x``.",
            "raises": "",
            "see_also": "",
            "notes": "-----\nIf the current domain is the interval ``[l1, r1]`` and the window\nis ``[l2, r2]``, then the linear mapping function ``L`` is\ndefined by the equations::\nL(l1) = l2\nL(r1) = r2",
            "examples": ""
          }
        },
        {
          "name": "roots",
          "signature": "roots(self)",
          "documentation": {
            "description": "Return the roots of the series polynomial.\nCompute the roots for the series. Note that the accuracy of the\nroots decreases the further outside the `domain` they lie.",
            "parameters": {},
            "returns": "-------\nroots : ndarray\nArray containing the roots of the series.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "trim",
          "signature": "trim(self, tol=0)",
          "documentation": {
            "description": "Remove trailing coefficients\nRemove trailing coefficients until a coefficient is reached whose\nabsolute value greater than `tol` or the beginning of the series is\nreached. If all the coefficients would be removed the series is set\nto ``[0]``. A new series instance is returned with the new\ncoefficients.  The current instance remains unchanged.",
            "parameters": {
              "tol": {
                "type": "non-negative number.",
                "description": "All trailing coefficients less than `tol` will be removed."
              }
            },
            "returns": "-------\nnew_series : series\nNew instance of series with trimmed coefficients.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "truncate",
          "signature": "truncate(self, size)",
          "documentation": {
            "description": "Truncate series to length `size`.\nReduce the series to length `size` by discarding the high\ndegree terms. The value of `size` must be a positive integer. This\ncan be useful in least squares where the coefficients of the\nhigh degree terms may be very small.",
            "parameters": {
              "size": {
                "type": "positive int",
                "description": "The series is reduced to length `size` by discarding the high\ndegree terms. The value of `size` must be a positive integer."
              }
            },
            "returns": "-------\nnew_series : series\nNew instance of series with truncated coefficients.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "HermiteE",
      "documentation": {
        "description": "An HermiteE series class.\nThe HermiteE class provides the standard Python numerical methods\n'+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\nattributes and methods listed in the `ABCPolyBase` documentation.",
        "parameters": {
          "coef": {
            "type": "array_like",
            "description": "HermiteE coefficients in order of increasing degree, i.e,\n``(1, 2, 3)`` gives ``1*He_0(x) + 2*He_1(X) + 3*He_2(x)``."
          },
          "domain": {
            "type": "(2,) array_like, optional",
            "description": "Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\nto the interval ``[window[0], window[1]]`` by shifting and scaling.\nThe default value is [-1, 1]."
          },
          "window": {
            "type": "(2,) array_like, optional",
            "description": "Window, see `domain` for its use. The default value is [-1, 1].\n.. versionadded:: 1.6.0"
          },
          "symbol": {
            "type": "str, optional",
            "description": "Symbol used to represent the independent variable in string\nrepresentations of the polynomial expression, e.g. for printing.\nThe symbol must be a valid Python identifier. Default value is 'x'.\n.. versionadded:: 1.24"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "basis",
          "signature": "basis(deg, domain=None, window=None, symbol='x')",
          "documentation": {
            "description": "Series basis polynomial of degree `deg`.",
            "parameters": {
              "deg": {
                "type": "int",
                "description": "Degree of the basis polynomial for the series. Must be >= 0."
              },
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If given, the array must be of the form ``[beg, end]``, where\n``beg`` and ``end`` are the endpoints of the domain. If None is\ngiven then the class domain is used. The default is None."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "If given, the resulting array must be if the form\n``[beg, end]``, where ``beg`` and ``end`` are the endpoints of\nthe window. If None is given then the class window is used. The\ndefault is None."
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": ".. versionadded:: 1.7.0\n-------\nnew_series : series\nA series with the coefficient of the `deg` term set to one and\nall others zero.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cast",
          "signature": "cast(series, domain=None, window=None)",
          "documentation": {
            "description": "Convert series to series of this class.\nThe `series` is expected to be an instance of some polynomial\nseries of one of the types supported by by the numpy.polynomial\nmodule, but could be some other class that supports the convert\nmethod.\n.. versionadded:: 1.7.0",
            "parameters": {
              "series": {
                "type": "series",
                "description": "The series instance to be converted."
              },
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If given, the array must be of the form ``[beg, end]``, where\n``beg`` and ``end`` are the endpoints of the domain. If None is\ngiven then the class domain is used. The default is None."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "If given, the resulting array must be if the form\n``[beg, end]``, where ``beg`` and ``end`` are the endpoints of\nthe window. If None is given then the class window is used. The\ndefault is None."
              }
            },
            "returns": "-------\nnew_series : series\nA series of the same kind as the calling class and equal to\n`series` when evaluated.",
            "raises": "",
            "see_also": "--------\nconvert : similar instance method",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "convert",
          "signature": "convert(self, domain=None, kind=None, window=None)",
          "documentation": {
            "description": "Convert series to a different kind and/or domain and/or window.",
            "parameters": {
              "domain": {
                "type": "array_like, optional",
                "description": "The domain of the converted series. If the value is None,\nthe default domain of `kind` is used."
              },
              "kind": {
                "type": "class, optional",
                "description": "The polynomial series type class to which the current instance\nshould be converted. If kind is None, then the class of the\ncurrent instance is used."
              },
              "window": {
                "type": "array_like, optional",
                "description": "The window of the converted series. If the value is None,\nthe default window of `kind` is used."
              }
            },
            "returns": "-------\nnew_series : series\nThe returned class can be of different type than the current\ninstance and/or have a different domain and/or different\nwindow.",
            "raises": "",
            "see_also": "",
            "notes": "-----\nConversion between domains and class types can result in\nnumerically ill defined series.",
            "examples": ""
          }
        },
        {
          "name": "copy",
          "signature": "copy(self)",
          "documentation": {
            "description": "Return a copy.",
            "parameters": {},
            "returns": "-------\nnew_series : series\nCopy of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cutdeg",
          "signature": "cutdeg(self, deg)",
          "documentation": {
            "description": "Truncate series to the given degree.\nReduce the degree of the series to `deg` by discarding the\nhigh order terms. If `deg` is greater than the current degree a\ncopy of the current series is returned. This can be useful in least\nsquares where the coefficients of the high degree terms may be very\nsmall.\n.. versionadded:: 1.5.0",
            "parameters": {
              "deg": {
                "type": "non-negative int",
                "description": "The series is reduced to degree `deg` by discarding the high\norder terms. The value of `deg` must be a non-negative integer."
              }
            },
            "returns": "-------\nnew_series : series\nNew instance of series with reduced degree.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "degree",
          "signature": "degree(self)",
          "documentation": {
            "description": "The degree of the series.\n.. versionadded:: 1.5.0",
            "parameters": {},
            "returns": "-------\ndegree : int\nDegree of the series, one less than the number of coefficients.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": "--------\nCreate a polynomial object for ``1 + 7*x + 4*x**2``:\n>>> poly = np.polynomial.Polynomial([1, 7, 4])\n>>> print(poly)\n1.0 + 7.0·x + 4.0·x²\n>>> poly.degree()\n2\nNote that this method does not check for non-zero coefficients.\nYou must trim the polynomial to remove any trailing zeroes:\n>>> poly = np.polynomial.Polynomial([1, 7, 0])\n>>> print(poly)\n1.0 + 7.0·x + 0.0·x²\n>>> poly.degree()\n2\n>>> poly.trim().degree()\n1"
          }
        },
        {
          "name": "deriv",
          "signature": "deriv(self, m=1)",
          "documentation": {
            "description": "Differentiate.\nReturn a series instance of that is the derivative of the current\nseries.",
            "parameters": {
              "m": {
                "type": "non-negative int",
                "description": "Find the derivative of order `m`."
              }
            },
            "returns": "-------\nnew_series : series\nA new series representing the derivative. The domain is the same\nas the domain of the differentiated series.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None, symbol='x')",
          "documentation": {
            "description": "Least squares fit to data.\nReturn a series instance that is the least squares fit to the data\n`y` sampled at `x`. The domain of the returned instance can be\nspecified and this will often result in a superior fit with less\nchance of ill conditioning.",
            "parameters": {
              "x": {
                "type": "array_like, shape (M,)",
                "description": "x-coordinates of the M sample points ``(x[i], y[i])``."
              },
              "y": {
                "type": "array_like, shape (M,)",
                "description": "y-coordinates of the M sample points ``(x[i], y[i])``."
              },
              "deg": {
                "type": "int or 1-D array_like",
                "description": "Degree(s) of the fitting polynomials. If `deg` is a single integer\nall terms up to and including the `deg`'th term are included in the\nfit. For NumPy versions >= 1.11.0 a list of integers specifying the\ndegrees of the terms to include may be used instead."
              },
              "domain": {
                "type": "{None, [beg, end], []}, optional",
                "description": "Domain to use for the returned series. If ``None``,\nthen a minimal domain that covers the points `x` is chosen.  If\n``[]`` the class domain is used. The default value was the\nclass domain in NumPy 1.4 and ``None`` in later versions.\nThe ``[]`` option was added in numpy 1.5.0."
              },
              "rcond": {
                "type": "float, optional",
                "description": "Relative condition number of the fit. Singular values smaller\nthan this relative to the largest singular value will be\nignored. The default value is len(x)*eps, where eps is the\nrelative precision of the float type, about 2e-16 in most\ncases."
              },
              "full": {
                "type": "bool, optional",
                "description": "Switch determining nature of return value. When it is False\n(the default) just the coefficients are returned, when True\ndiagnostic information from the singular value decomposition is\nalso returned."
              },
              "w": {
                "type": "array_like, shape (M,), optional",
                "description": "Weights. If not None, the weight ``w[i]`` applies to the unsquared\nresidual ``y[i] - y_hat[i]`` at ``x[i]``. Ideally the weights are\nchosen so that the errors of the products ``w[i]*y[i]`` all have\nthe same variance.  When using inverse-variance weighting, use\n``w[i] = 1/sigma(y[i])``.  The default value is None.\n.. versionadded:: 1.5.0"
              },
              "window": {
                "type": "{[beg, end]}, optional",
                "description": "Window to use for the returned series. The default\nvalue is the default class domain\n.. versionadded:: 1.6.0"
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": "-------\nnew_series : series\nA series that represents the least squares fit to the data and\nhas the domain and window specified in the call. If the\ncoefficients for the unscaled and unshifted basis polynomials are\nof interest, do ``new_series.convert().coef``.\n[resid, rank, sv, rcond] : list\nThese values are only returned if ``full == True``\n- resid -- sum of squared residuals of the least squares fit\n- rank -- the numerical rank of the scaled Vandermonde matrix\n- sv -- singular values of the scaled Vandermonde matrix\n- rcond -- value of `rcond`.\nFor more details, see `linalg.lstsq`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fromroots",
          "signature": "fromroots(roots, domain=[], window=None, symbol='x')",
          "documentation": {
            "description": "Return series instance that has the specified roots.",
            "parameters": {
              "roots": {
                "type": "array_like",
                "description": "List of roots."
              },
              "domain": {
                "type": "{[], None, array_like}, optional",
                "description": "Domain for the resulting series. If None the domain is the\ninterval from the smallest root to the largest. If [] the\ndomain is the class domain. The default is []."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "Window for the returned series. If None the class window is\nused. The default is None."
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": "``(x - r[0])*(x - r[1])*...*(x - r[n-1])``, where ``r`` is a\nlist of roots.\n-------\nnew_series : series\nSeries with the specified roots.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_samecoef",
          "signature": "has_samecoef(self, other)",
          "documentation": {
            "description": "Check if coefficients match.\n.. versionadded:: 1.6.0",
            "parameters": {
              "other": {
                "type": "class instance",
                "description": "The other class must have the ``coef`` attribute."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if the coefficients are the same, False otherwise.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_samedomain",
          "signature": "has_samedomain(self, other)",
          "documentation": {
            "description": "Check if domains match.\n.. versionadded:: 1.6.0",
            "parameters": {
              "other": {
                "type": "class instance",
                "description": "The other class must have the ``domain`` attribute."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if the domains are the same, False otherwise.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_sametype",
          "signature": "has_sametype(self, other)",
          "documentation": {
            "description": "Check if types match.\n.. versionadded:: 1.7.0",
            "parameters": {
              "other": {
                "type": "object",
                "description": "Class instance."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if other is same class as self",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_samewindow",
          "signature": "has_samewindow(self, other)",
          "documentation": {
            "description": "Check if windows match.\n.. versionadded:: 1.6.0",
            "parameters": {
              "other": {
                "type": "class instance",
                "description": "The other class must have the ``window`` attribute."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if the windows are the same, False otherwise.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "identity",
          "signature": "identity(domain=None, window=None, symbol='x')",
          "documentation": {
            "description": "Identity function.\nIf ``p`` is the returned series, then ``p(x) == x`` for all\nvalues of x.",
            "parameters": {
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If given, the array must be of the form ``[beg, end]``, where\n``beg`` and ``end`` are the endpoints of the domain. If None is\ngiven then the class domain is used. The default is None."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "If given, the resulting array must be if the form\n``[beg, end]``, where ``beg`` and ``end`` are the endpoints of\nthe window. If None is given then the class window is used. The\ndefault is None."
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": "-------\nnew_series : series\nSeries of representing the identity.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "integ",
          "signature": "integ(self, m=1, k=[], lbnd=None)",
          "documentation": {
            "description": "Integrate.\nReturn a series instance that is the definite integral of the\ncurrent series.",
            "parameters": {
              "m": {
                "type": "non-negative int",
                "description": "The number of integrations to perform."
              },
              "k": {
                "type": "array_like",
                "description": "Integration constants. The first constant is applied to the\nfirst integration, the second to the second, and so on. The\nlist of values must less than or equal to `m` in length and any\nmissing values are set to zero."
              },
              "lbnd": {
                "type": "Scalar",
                "description": "The lower bound of the definite integral."
              }
            },
            "returns": "-------\nnew_series : series\nA new series representing the integral. The domain is the same\nas the domain of the integrated series.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "linspace",
          "signature": "linspace(self, n=100, domain=None)",
          "documentation": {
            "description": "Return x, y values at equally spaced points in domain.",
            "parameters": {
              "n": {
                "type": "int, optional",
                "description": "Number of point pairs to return. The default value is 100."
              },
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If not None, the specified domain is used instead of that of\nthe calling instance. It should be of the form ``[beg,end]``.\nThe default is None which case the class domain is used."
              }
            },
            "returns": "domain.  Here y is the value of the polynomial at the points x. By\ndefault the domain is the same as that of the series instance.\nThis method is intended mostly as a plotting aid.\n.. versionadded:: 1.5.0\n-------\nx, y : ndarray\nx is equal to linspace(self.domain[0], self.domain[1], n) and\ny is the series evaluated at element of x.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "mapparms",
          "signature": "mapparms(self)",
          "documentation": {
            "description": "Return the mapping parameters.\nThe returned values define a linear map ``off + scl*x`` that is\napplied to the input arguments before the series is evaluated. The\nmap depends on the ``domain`` and ``window``; if the current\n``domain`` is equal to the ``window`` the resulting map is the\nidentity.  If the coefficients of the series instance are to be\nused by themselves outside this class, then the linear function\nmust be substituted for the ``x`` in the standard representation of\nthe base polynomials.",
            "parameters": {},
            "returns": "-------\noff, scl : float or complex\nThe mapping function is defined by ``off + scl*x``.",
            "raises": "",
            "see_also": "",
            "notes": "-----\nIf the current domain is the interval ``[l1, r1]`` and the window\nis ``[l2, r2]``, then the linear mapping function ``L`` is\ndefined by the equations::\nL(l1) = l2\nL(r1) = r2",
            "examples": ""
          }
        },
        {
          "name": "roots",
          "signature": "roots(self)",
          "documentation": {
            "description": "Return the roots of the series polynomial.\nCompute the roots for the series. Note that the accuracy of the\nroots decreases the further outside the `domain` they lie.",
            "parameters": {},
            "returns": "-------\nroots : ndarray\nArray containing the roots of the series.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "trim",
          "signature": "trim(self, tol=0)",
          "documentation": {
            "description": "Remove trailing coefficients\nRemove trailing coefficients until a coefficient is reached whose\nabsolute value greater than `tol` or the beginning of the series is\nreached. If all the coefficients would be removed the series is set\nto ``[0]``. A new series instance is returned with the new\ncoefficients.  The current instance remains unchanged.",
            "parameters": {
              "tol": {
                "type": "non-negative number.",
                "description": "All trailing coefficients less than `tol` will be removed."
              }
            },
            "returns": "-------\nnew_series : series\nNew instance of series with trimmed coefficients.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "truncate",
          "signature": "truncate(self, size)",
          "documentation": {
            "description": "Truncate series to length `size`.\nReduce the series to length `size` by discarding the high\ndegree terms. The value of `size` must be a positive integer. This\ncan be useful in least squares where the coefficients of the\nhigh degree terms may be very small.",
            "parameters": {
              "size": {
                "type": "positive int",
                "description": "The series is reduced to length `size` by discarding the high\ndegree terms. The value of `size` must be a positive integer."
              }
            },
            "returns": "-------\nnew_series : series\nNew instance of series with truncated coefficients.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "Laguerre",
      "documentation": {
        "description": "A Laguerre series class.\nThe Laguerre class provides the standard Python numerical methods\n'+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\nattributes and methods listed in the `ABCPolyBase` documentation.",
        "parameters": {
          "coef": {
            "type": "array_like",
            "description": "Laguerre coefficients in order of increasing degree, i.e,\n``(1, 2, 3)`` gives ``1*L_0(x) + 2*L_1(X) + 3*L_2(x)``."
          },
          "domain": {
            "type": "(2,) array_like, optional",
            "description": "Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\nto the interval ``[window[0], window[1]]`` by shifting and scaling.\nThe default value is [0, 1]."
          },
          "window": {
            "type": "(2,) array_like, optional",
            "description": "Window, see `domain` for its use. The default value is [0, 1].\n.. versionadded:: 1.6.0"
          },
          "symbol": {
            "type": "str, optional",
            "description": "Symbol used to represent the independent variable in string\nrepresentations of the polynomial expression, e.g. for printing.\nThe symbol must be a valid Python identifier. Default value is 'x'.\n.. versionadded:: 1.24"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "basis",
          "signature": "basis(deg, domain=None, window=None, symbol='x')",
          "documentation": {
            "description": "Series basis polynomial of degree `deg`.",
            "parameters": {
              "deg": {
                "type": "int",
                "description": "Degree of the basis polynomial for the series. Must be >= 0."
              },
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If given, the array must be of the form ``[beg, end]``, where\n``beg`` and ``end`` are the endpoints of the domain. If None is\ngiven then the class domain is used. The default is None."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "If given, the resulting array must be if the form\n``[beg, end]``, where ``beg`` and ``end`` are the endpoints of\nthe window. If None is given then the class window is used. The\ndefault is None."
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": ".. versionadded:: 1.7.0\n-------\nnew_series : series\nA series with the coefficient of the `deg` term set to one and\nall others zero.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cast",
          "signature": "cast(series, domain=None, window=None)",
          "documentation": {
            "description": "Convert series to series of this class.\nThe `series` is expected to be an instance of some polynomial\nseries of one of the types supported by by the numpy.polynomial\nmodule, but could be some other class that supports the convert\nmethod.\n.. versionadded:: 1.7.0",
            "parameters": {
              "series": {
                "type": "series",
                "description": "The series instance to be converted."
              },
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If given, the array must be of the form ``[beg, end]``, where\n``beg`` and ``end`` are the endpoints of the domain. If None is\ngiven then the class domain is used. The default is None."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "If given, the resulting array must be if the form\n``[beg, end]``, where ``beg`` and ``end`` are the endpoints of\nthe window. If None is given then the class window is used. The\ndefault is None."
              }
            },
            "returns": "-------\nnew_series : series\nA series of the same kind as the calling class and equal to\n`series` when evaluated.",
            "raises": "",
            "see_also": "--------\nconvert : similar instance method",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "convert",
          "signature": "convert(self, domain=None, kind=None, window=None)",
          "documentation": {
            "description": "Convert series to a different kind and/or domain and/or window.",
            "parameters": {
              "domain": {
                "type": "array_like, optional",
                "description": "The domain of the converted series. If the value is None,\nthe default domain of `kind` is used."
              },
              "kind": {
                "type": "class, optional",
                "description": "The polynomial series type class to which the current instance\nshould be converted. If kind is None, then the class of the\ncurrent instance is used."
              },
              "window": {
                "type": "array_like, optional",
                "description": "The window of the converted series. If the value is None,\nthe default window of `kind` is used."
              }
            },
            "returns": "-------\nnew_series : series\nThe returned class can be of different type than the current\ninstance and/or have a different domain and/or different\nwindow.",
            "raises": "",
            "see_also": "",
            "notes": "-----\nConversion between domains and class types can result in\nnumerically ill defined series.",
            "examples": ""
          }
        },
        {
          "name": "copy",
          "signature": "copy(self)",
          "documentation": {
            "description": "Return a copy.",
            "parameters": {},
            "returns": "-------\nnew_series : series\nCopy of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cutdeg",
          "signature": "cutdeg(self, deg)",
          "documentation": {
            "description": "Truncate series to the given degree.\nReduce the degree of the series to `deg` by discarding the\nhigh order terms. If `deg` is greater than the current degree a\ncopy of the current series is returned. This can be useful in least\nsquares where the coefficients of the high degree terms may be very\nsmall.\n.. versionadded:: 1.5.0",
            "parameters": {
              "deg": {
                "type": "non-negative int",
                "description": "The series is reduced to degree `deg` by discarding the high\norder terms. The value of `deg` must be a non-negative integer."
              }
            },
            "returns": "-------\nnew_series : series\nNew instance of series with reduced degree.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "degree",
          "signature": "degree(self)",
          "documentation": {
            "description": "The degree of the series.\n.. versionadded:: 1.5.0",
            "parameters": {},
            "returns": "-------\ndegree : int\nDegree of the series, one less than the number of coefficients.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": "--------\nCreate a polynomial object for ``1 + 7*x + 4*x**2``:\n>>> poly = np.polynomial.Polynomial([1, 7, 4])\n>>> print(poly)\n1.0 + 7.0·x + 4.0·x²\n>>> poly.degree()\n2\nNote that this method does not check for non-zero coefficients.\nYou must trim the polynomial to remove any trailing zeroes:\n>>> poly = np.polynomial.Polynomial([1, 7, 0])\n>>> print(poly)\n1.0 + 7.0·x + 0.0·x²\n>>> poly.degree()\n2\n>>> poly.trim().degree()\n1"
          }
        },
        {
          "name": "deriv",
          "signature": "deriv(self, m=1)",
          "documentation": {
            "description": "Differentiate.\nReturn a series instance of that is the derivative of the current\nseries.",
            "parameters": {
              "m": {
                "type": "non-negative int",
                "description": "Find the derivative of order `m`."
              }
            },
            "returns": "-------\nnew_series : series\nA new series representing the derivative. The domain is the same\nas the domain of the differentiated series.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None, symbol='x')",
          "documentation": {
            "description": "Least squares fit to data.\nReturn a series instance that is the least squares fit to the data\n`y` sampled at `x`. The domain of the returned instance can be\nspecified and this will often result in a superior fit with less\nchance of ill conditioning.",
            "parameters": {
              "x": {
                "type": "array_like, shape (M,)",
                "description": "x-coordinates of the M sample points ``(x[i], y[i])``."
              },
              "y": {
                "type": "array_like, shape (M,)",
                "description": "y-coordinates of the M sample points ``(x[i], y[i])``."
              },
              "deg": {
                "type": "int or 1-D array_like",
                "description": "Degree(s) of the fitting polynomials. If `deg` is a single integer\nall terms up to and including the `deg`'th term are included in the\nfit. For NumPy versions >= 1.11.0 a list of integers specifying the\ndegrees of the terms to include may be used instead."
              },
              "domain": {
                "type": "{None, [beg, end], []}, optional",
                "description": "Domain to use for the returned series. If ``None``,\nthen a minimal domain that covers the points `x` is chosen.  If\n``[]`` the class domain is used. The default value was the\nclass domain in NumPy 1.4 and ``None`` in later versions.\nThe ``[]`` option was added in numpy 1.5.0."
              },
              "rcond": {
                "type": "float, optional",
                "description": "Relative condition number of the fit. Singular values smaller\nthan this relative to the largest singular value will be\nignored. The default value is len(x)*eps, where eps is the\nrelative precision of the float type, about 2e-16 in most\ncases."
              },
              "full": {
                "type": "bool, optional",
                "description": "Switch determining nature of return value. When it is False\n(the default) just the coefficients are returned, when True\ndiagnostic information from the singular value decomposition is\nalso returned."
              },
              "w": {
                "type": "array_like, shape (M,), optional",
                "description": "Weights. If not None, the weight ``w[i]`` applies to the unsquared\nresidual ``y[i] - y_hat[i]`` at ``x[i]``. Ideally the weights are\nchosen so that the errors of the products ``w[i]*y[i]`` all have\nthe same variance.  When using inverse-variance weighting, use\n``w[i] = 1/sigma(y[i])``.  The default value is None.\n.. versionadded:: 1.5.0"
              },
              "window": {
                "type": "{[beg, end]}, optional",
                "description": "Window to use for the returned series. The default\nvalue is the default class domain\n.. versionadded:: 1.6.0"
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": "-------\nnew_series : series\nA series that represents the least squares fit to the data and\nhas the domain and window specified in the call. If the\ncoefficients for the unscaled and unshifted basis polynomials are\nof interest, do ``new_series.convert().coef``.\n[resid, rank, sv, rcond] : list\nThese values are only returned if ``full == True``\n- resid -- sum of squared residuals of the least squares fit\n- rank -- the numerical rank of the scaled Vandermonde matrix\n- sv -- singular values of the scaled Vandermonde matrix\n- rcond -- value of `rcond`.\nFor more details, see `linalg.lstsq`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fromroots",
          "signature": "fromroots(roots, domain=[], window=None, symbol='x')",
          "documentation": {
            "description": "Return series instance that has the specified roots.",
            "parameters": {
              "roots": {
                "type": "array_like",
                "description": "List of roots."
              },
              "domain": {
                "type": "{[], None, array_like}, optional",
                "description": "Domain for the resulting series. If None the domain is the\ninterval from the smallest root to the largest. If [] the\ndomain is the class domain. The default is []."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "Window for the returned series. If None the class window is\nused. The default is None."
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": "``(x - r[0])*(x - r[1])*...*(x - r[n-1])``, where ``r`` is a\nlist of roots.\n-------\nnew_series : series\nSeries with the specified roots.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_samecoef",
          "signature": "has_samecoef(self, other)",
          "documentation": {
            "description": "Check if coefficients match.\n.. versionadded:: 1.6.0",
            "parameters": {
              "other": {
                "type": "class instance",
                "description": "The other class must have the ``coef`` attribute."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if the coefficients are the same, False otherwise.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_samedomain",
          "signature": "has_samedomain(self, other)",
          "documentation": {
            "description": "Check if domains match.\n.. versionadded:: 1.6.0",
            "parameters": {
              "other": {
                "type": "class instance",
                "description": "The other class must have the ``domain`` attribute."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if the domains are the same, False otherwise.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_sametype",
          "signature": "has_sametype(self, other)",
          "documentation": {
            "description": "Check if types match.\n.. versionadded:: 1.7.0",
            "parameters": {
              "other": {
                "type": "object",
                "description": "Class instance."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if other is same class as self",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_samewindow",
          "signature": "has_samewindow(self, other)",
          "documentation": {
            "description": "Check if windows match.\n.. versionadded:: 1.6.0",
            "parameters": {
              "other": {
                "type": "class instance",
                "description": "The other class must have the ``window`` attribute."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if the windows are the same, False otherwise.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "identity",
          "signature": "identity(domain=None, window=None, symbol='x')",
          "documentation": {
            "description": "Identity function.\nIf ``p`` is the returned series, then ``p(x) == x`` for all\nvalues of x.",
            "parameters": {
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If given, the array must be of the form ``[beg, end]``, where\n``beg`` and ``end`` are the endpoints of the domain. If None is\ngiven then the class domain is used. The default is None."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "If given, the resulting array must be if the form\n``[beg, end]``, where ``beg`` and ``end`` are the endpoints of\nthe window. If None is given then the class window is used. The\ndefault is None."
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": "-------\nnew_series : series\nSeries of representing the identity.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "integ",
          "signature": "integ(self, m=1, k=[], lbnd=None)",
          "documentation": {
            "description": "Integrate.\nReturn a series instance that is the definite integral of the\ncurrent series.",
            "parameters": {
              "m": {
                "type": "non-negative int",
                "description": "The number of integrations to perform."
              },
              "k": {
                "type": "array_like",
                "description": "Integration constants. The first constant is applied to the\nfirst integration, the second to the second, and so on. The\nlist of values must less than or equal to `m` in length and any\nmissing values are set to zero."
              },
              "lbnd": {
                "type": "Scalar",
                "description": "The lower bound of the definite integral."
              }
            },
            "returns": "-------\nnew_series : series\nA new series representing the integral. The domain is the same\nas the domain of the integrated series.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "linspace",
          "signature": "linspace(self, n=100, domain=None)",
          "documentation": {
            "description": "Return x, y values at equally spaced points in domain.",
            "parameters": {
              "n": {
                "type": "int, optional",
                "description": "Number of point pairs to return. The default value is 100."
              },
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If not None, the specified domain is used instead of that of\nthe calling instance. It should be of the form ``[beg,end]``.\nThe default is None which case the class domain is used."
              }
            },
            "returns": "domain.  Here y is the value of the polynomial at the points x. By\ndefault the domain is the same as that of the series instance.\nThis method is intended mostly as a plotting aid.\n.. versionadded:: 1.5.0\n-------\nx, y : ndarray\nx is equal to linspace(self.domain[0], self.domain[1], n) and\ny is the series evaluated at element of x.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "mapparms",
          "signature": "mapparms(self)",
          "documentation": {
            "description": "Return the mapping parameters.\nThe returned values define a linear map ``off + scl*x`` that is\napplied to the input arguments before the series is evaluated. The\nmap depends on the ``domain`` and ``window``; if the current\n``domain`` is equal to the ``window`` the resulting map is the\nidentity.  If the coefficients of the series instance are to be\nused by themselves outside this class, then the linear function\nmust be substituted for the ``x`` in the standard representation of\nthe base polynomials.",
            "parameters": {},
            "returns": "-------\noff, scl : float or complex\nThe mapping function is defined by ``off + scl*x``.",
            "raises": "",
            "see_also": "",
            "notes": "-----\nIf the current domain is the interval ``[l1, r1]`` and the window\nis ``[l2, r2]``, then the linear mapping function ``L`` is\ndefined by the equations::\nL(l1) = l2\nL(r1) = r2",
            "examples": ""
          }
        },
        {
          "name": "roots",
          "signature": "roots(self)",
          "documentation": {
            "description": "Return the roots of the series polynomial.\nCompute the roots for the series. Note that the accuracy of the\nroots decreases the further outside the `domain` they lie.",
            "parameters": {},
            "returns": "-------\nroots : ndarray\nArray containing the roots of the series.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "trim",
          "signature": "trim(self, tol=0)",
          "documentation": {
            "description": "Remove trailing coefficients\nRemove trailing coefficients until a coefficient is reached whose\nabsolute value greater than `tol` or the beginning of the series is\nreached. If all the coefficients would be removed the series is set\nto ``[0]``. A new series instance is returned with the new\ncoefficients.  The current instance remains unchanged.",
            "parameters": {
              "tol": {
                "type": "non-negative number.",
                "description": "All trailing coefficients less than `tol` will be removed."
              }
            },
            "returns": "-------\nnew_series : series\nNew instance of series with trimmed coefficients.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "truncate",
          "signature": "truncate(self, size)",
          "documentation": {
            "description": "Truncate series to length `size`.\nReduce the series to length `size` by discarding the high\ndegree terms. The value of `size` must be a positive integer. This\ncan be useful in least squares where the coefficients of the\nhigh degree terms may be very small.",
            "parameters": {
              "size": {
                "type": "positive int",
                "description": "The series is reduced to length `size` by discarding the high\ndegree terms. The value of `size` must be a positive integer."
              }
            },
            "returns": "-------\nnew_series : series\nNew instance of series with truncated coefficients.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "Legendre",
      "documentation": {
        "description": "A Legendre series class.\nThe Legendre class provides the standard Python numerical methods\n'+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\nattributes and methods listed in the `ABCPolyBase` documentation.",
        "parameters": {
          "coef": {
            "type": "array_like",
            "description": "Legendre coefficients in order of increasing degree, i.e.,\n``(1, 2, 3)`` gives ``1*P_0(x) + 2*P_1(x) + 3*P_2(x)``."
          },
          "domain": {
            "type": "(2,) array_like, optional",
            "description": "Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\nto the interval ``[window[0], window[1]]`` by shifting and scaling.\nThe default value is [-1, 1]."
          },
          "window": {
            "type": "(2,) array_like, optional",
            "description": "Window, see `domain` for its use. The default value is [-1, 1].\n.. versionadded:: 1.6.0"
          },
          "symbol": {
            "type": "str, optional",
            "description": "Symbol used to represent the independent variable in string\nrepresentations of the polynomial expression, e.g. for printing.\nThe symbol must be a valid Python identifier. Default value is 'x'.\n.. versionadded:: 1.24"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "basis",
          "signature": "basis(deg, domain=None, window=None, symbol='x')",
          "documentation": {
            "description": "Series basis polynomial of degree `deg`.",
            "parameters": {
              "deg": {
                "type": "int",
                "description": "Degree of the basis polynomial for the series. Must be >= 0."
              },
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If given, the array must be of the form ``[beg, end]``, where\n``beg`` and ``end`` are the endpoints of the domain. If None is\ngiven then the class domain is used. The default is None."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "If given, the resulting array must be if the form\n``[beg, end]``, where ``beg`` and ``end`` are the endpoints of\nthe window. If None is given then the class window is used. The\ndefault is None."
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": ".. versionadded:: 1.7.0\n-------\nnew_series : series\nA series with the coefficient of the `deg` term set to one and\nall others zero.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cast",
          "signature": "cast(series, domain=None, window=None)",
          "documentation": {
            "description": "Convert series to series of this class.\nThe `series` is expected to be an instance of some polynomial\nseries of one of the types supported by by the numpy.polynomial\nmodule, but could be some other class that supports the convert\nmethod.\n.. versionadded:: 1.7.0",
            "parameters": {
              "series": {
                "type": "series",
                "description": "The series instance to be converted."
              },
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If given, the array must be of the form ``[beg, end]``, where\n``beg`` and ``end`` are the endpoints of the domain. If None is\ngiven then the class domain is used. The default is None."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "If given, the resulting array must be if the form\n``[beg, end]``, where ``beg`` and ``end`` are the endpoints of\nthe window. If None is given then the class window is used. The\ndefault is None."
              }
            },
            "returns": "-------\nnew_series : series\nA series of the same kind as the calling class and equal to\n`series` when evaluated.",
            "raises": "",
            "see_also": "--------\nconvert : similar instance method",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "convert",
          "signature": "convert(self, domain=None, kind=None, window=None)",
          "documentation": {
            "description": "Convert series to a different kind and/or domain and/or window.",
            "parameters": {
              "domain": {
                "type": "array_like, optional",
                "description": "The domain of the converted series. If the value is None,\nthe default domain of `kind` is used."
              },
              "kind": {
                "type": "class, optional",
                "description": "The polynomial series type class to which the current instance\nshould be converted. If kind is None, then the class of the\ncurrent instance is used."
              },
              "window": {
                "type": "array_like, optional",
                "description": "The window of the converted series. If the value is None,\nthe default window of `kind` is used."
              }
            },
            "returns": "-------\nnew_series : series\nThe returned class can be of different type than the current\ninstance and/or have a different domain and/or different\nwindow.",
            "raises": "",
            "see_also": "",
            "notes": "-----\nConversion between domains and class types can result in\nnumerically ill defined series.",
            "examples": ""
          }
        },
        {
          "name": "copy",
          "signature": "copy(self)",
          "documentation": {
            "description": "Return a copy.",
            "parameters": {},
            "returns": "-------\nnew_series : series\nCopy of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cutdeg",
          "signature": "cutdeg(self, deg)",
          "documentation": {
            "description": "Truncate series to the given degree.\nReduce the degree of the series to `deg` by discarding the\nhigh order terms. If `deg` is greater than the current degree a\ncopy of the current series is returned. This can be useful in least\nsquares where the coefficients of the high degree terms may be very\nsmall.\n.. versionadded:: 1.5.0",
            "parameters": {
              "deg": {
                "type": "non-negative int",
                "description": "The series is reduced to degree `deg` by discarding the high\norder terms. The value of `deg` must be a non-negative integer."
              }
            },
            "returns": "-------\nnew_series : series\nNew instance of series with reduced degree.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "degree",
          "signature": "degree(self)",
          "documentation": {
            "description": "The degree of the series.\n.. versionadded:: 1.5.0",
            "parameters": {},
            "returns": "-------\ndegree : int\nDegree of the series, one less than the number of coefficients.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": "--------\nCreate a polynomial object for ``1 + 7*x + 4*x**2``:\n>>> poly = np.polynomial.Polynomial([1, 7, 4])\n>>> print(poly)\n1.0 + 7.0·x + 4.0·x²\n>>> poly.degree()\n2\nNote that this method does not check for non-zero coefficients.\nYou must trim the polynomial to remove any trailing zeroes:\n>>> poly = np.polynomial.Polynomial([1, 7, 0])\n>>> print(poly)\n1.0 + 7.0·x + 0.0·x²\n>>> poly.degree()\n2\n>>> poly.trim().degree()\n1"
          }
        },
        {
          "name": "deriv",
          "signature": "deriv(self, m=1)",
          "documentation": {
            "description": "Differentiate.\nReturn a series instance of that is the derivative of the current\nseries.",
            "parameters": {
              "m": {
                "type": "non-negative int",
                "description": "Find the derivative of order `m`."
              }
            },
            "returns": "-------\nnew_series : series\nA new series representing the derivative. The domain is the same\nas the domain of the differentiated series.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None, symbol='x')",
          "documentation": {
            "description": "Least squares fit to data.\nReturn a series instance that is the least squares fit to the data\n`y` sampled at `x`. The domain of the returned instance can be\nspecified and this will often result in a superior fit with less\nchance of ill conditioning.",
            "parameters": {
              "x": {
                "type": "array_like, shape (M,)",
                "description": "x-coordinates of the M sample points ``(x[i], y[i])``."
              },
              "y": {
                "type": "array_like, shape (M,)",
                "description": "y-coordinates of the M sample points ``(x[i], y[i])``."
              },
              "deg": {
                "type": "int or 1-D array_like",
                "description": "Degree(s) of the fitting polynomials. If `deg` is a single integer\nall terms up to and including the `deg`'th term are included in the\nfit. For NumPy versions >= 1.11.0 a list of integers specifying the\ndegrees of the terms to include may be used instead."
              },
              "domain": {
                "type": "{None, [beg, end], []}, optional",
                "description": "Domain to use for the returned series. If ``None``,\nthen a minimal domain that covers the points `x` is chosen.  If\n``[]`` the class domain is used. The default value was the\nclass domain in NumPy 1.4 and ``None`` in later versions.\nThe ``[]`` option was added in numpy 1.5.0."
              },
              "rcond": {
                "type": "float, optional",
                "description": "Relative condition number of the fit. Singular values smaller\nthan this relative to the largest singular value will be\nignored. The default value is len(x)*eps, where eps is the\nrelative precision of the float type, about 2e-16 in most\ncases."
              },
              "full": {
                "type": "bool, optional",
                "description": "Switch determining nature of return value. When it is False\n(the default) just the coefficients are returned, when True\ndiagnostic information from the singular value decomposition is\nalso returned."
              },
              "w": {
                "type": "array_like, shape (M,), optional",
                "description": "Weights. If not None, the weight ``w[i]`` applies to the unsquared\nresidual ``y[i] - y_hat[i]`` at ``x[i]``. Ideally the weights are\nchosen so that the errors of the products ``w[i]*y[i]`` all have\nthe same variance.  When using inverse-variance weighting, use\n``w[i] = 1/sigma(y[i])``.  The default value is None.\n.. versionadded:: 1.5.0"
              },
              "window": {
                "type": "{[beg, end]}, optional",
                "description": "Window to use for the returned series. The default\nvalue is the default class domain\n.. versionadded:: 1.6.0"
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": "-------\nnew_series : series\nA series that represents the least squares fit to the data and\nhas the domain and window specified in the call. If the\ncoefficients for the unscaled and unshifted basis polynomials are\nof interest, do ``new_series.convert().coef``.\n[resid, rank, sv, rcond] : list\nThese values are only returned if ``full == True``\n- resid -- sum of squared residuals of the least squares fit\n- rank -- the numerical rank of the scaled Vandermonde matrix\n- sv -- singular values of the scaled Vandermonde matrix\n- rcond -- value of `rcond`.\nFor more details, see `linalg.lstsq`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fromroots",
          "signature": "fromroots(roots, domain=[], window=None, symbol='x')",
          "documentation": {
            "description": "Return series instance that has the specified roots.",
            "parameters": {
              "roots": {
                "type": "array_like",
                "description": "List of roots."
              },
              "domain": {
                "type": "{[], None, array_like}, optional",
                "description": "Domain for the resulting series. If None the domain is the\ninterval from the smallest root to the largest. If [] the\ndomain is the class domain. The default is []."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "Window for the returned series. If None the class window is\nused. The default is None."
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": "``(x - r[0])*(x - r[1])*...*(x - r[n-1])``, where ``r`` is a\nlist of roots.\n-------\nnew_series : series\nSeries with the specified roots.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_samecoef",
          "signature": "has_samecoef(self, other)",
          "documentation": {
            "description": "Check if coefficients match.\n.. versionadded:: 1.6.0",
            "parameters": {
              "other": {
                "type": "class instance",
                "description": "The other class must have the ``coef`` attribute."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if the coefficients are the same, False otherwise.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_samedomain",
          "signature": "has_samedomain(self, other)",
          "documentation": {
            "description": "Check if domains match.\n.. versionadded:: 1.6.0",
            "parameters": {
              "other": {
                "type": "class instance",
                "description": "The other class must have the ``domain`` attribute."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if the domains are the same, False otherwise.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_sametype",
          "signature": "has_sametype(self, other)",
          "documentation": {
            "description": "Check if types match.\n.. versionadded:: 1.7.0",
            "parameters": {
              "other": {
                "type": "object",
                "description": "Class instance."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if other is same class as self",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_samewindow",
          "signature": "has_samewindow(self, other)",
          "documentation": {
            "description": "Check if windows match.\n.. versionadded:: 1.6.0",
            "parameters": {
              "other": {
                "type": "class instance",
                "description": "The other class must have the ``window`` attribute."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if the windows are the same, False otherwise.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "identity",
          "signature": "identity(domain=None, window=None, symbol='x')",
          "documentation": {
            "description": "Identity function.\nIf ``p`` is the returned series, then ``p(x) == x`` for all\nvalues of x.",
            "parameters": {
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If given, the array must be of the form ``[beg, end]``, where\n``beg`` and ``end`` are the endpoints of the domain. If None is\ngiven then the class domain is used. The default is None."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "If given, the resulting array must be if the form\n``[beg, end]``, where ``beg`` and ``end`` are the endpoints of\nthe window. If None is given then the class window is used. The\ndefault is None."
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": "-------\nnew_series : series\nSeries of representing the identity.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "integ",
          "signature": "integ(self, m=1, k=[], lbnd=None)",
          "documentation": {
            "description": "Integrate.\nReturn a series instance that is the definite integral of the\ncurrent series.",
            "parameters": {
              "m": {
                "type": "non-negative int",
                "description": "The number of integrations to perform."
              },
              "k": {
                "type": "array_like",
                "description": "Integration constants. The first constant is applied to the\nfirst integration, the second to the second, and so on. The\nlist of values must less than or equal to `m` in length and any\nmissing values are set to zero."
              },
              "lbnd": {
                "type": "Scalar",
                "description": "The lower bound of the definite integral."
              }
            },
            "returns": "-------\nnew_series : series\nA new series representing the integral. The domain is the same\nas the domain of the integrated series.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "linspace",
          "signature": "linspace(self, n=100, domain=None)",
          "documentation": {
            "description": "Return x, y values at equally spaced points in domain.",
            "parameters": {
              "n": {
                "type": "int, optional",
                "description": "Number of point pairs to return. The default value is 100."
              },
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If not None, the specified domain is used instead of that of\nthe calling instance. It should be of the form ``[beg,end]``.\nThe default is None which case the class domain is used."
              }
            },
            "returns": "domain.  Here y is the value of the polynomial at the points x. By\ndefault the domain is the same as that of the series instance.\nThis method is intended mostly as a plotting aid.\n.. versionadded:: 1.5.0\n-------\nx, y : ndarray\nx is equal to linspace(self.domain[0], self.domain[1], n) and\ny is the series evaluated at element of x.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "mapparms",
          "signature": "mapparms(self)",
          "documentation": {
            "description": "Return the mapping parameters.\nThe returned values define a linear map ``off + scl*x`` that is\napplied to the input arguments before the series is evaluated. The\nmap depends on the ``domain`` and ``window``; if the current\n``domain`` is equal to the ``window`` the resulting map is the\nidentity.  If the coefficients of the series instance are to be\nused by themselves outside this class, then the linear function\nmust be substituted for the ``x`` in the standard representation of\nthe base polynomials.",
            "parameters": {},
            "returns": "-------\noff, scl : float or complex\nThe mapping function is defined by ``off + scl*x``.",
            "raises": "",
            "see_also": "",
            "notes": "-----\nIf the current domain is the interval ``[l1, r1]`` and the window\nis ``[l2, r2]``, then the linear mapping function ``L`` is\ndefined by the equations::\nL(l1) = l2\nL(r1) = r2",
            "examples": ""
          }
        },
        {
          "name": "roots",
          "signature": "roots(self)",
          "documentation": {
            "description": "Return the roots of the series polynomial.\nCompute the roots for the series. Note that the accuracy of the\nroots decreases the further outside the `domain` they lie.",
            "parameters": {},
            "returns": "-------\nroots : ndarray\nArray containing the roots of the series.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "trim",
          "signature": "trim(self, tol=0)",
          "documentation": {
            "description": "Remove trailing coefficients\nRemove trailing coefficients until a coefficient is reached whose\nabsolute value greater than `tol` or the beginning of the series is\nreached. If all the coefficients would be removed the series is set\nto ``[0]``. A new series instance is returned with the new\ncoefficients.  The current instance remains unchanged.",
            "parameters": {
              "tol": {
                "type": "non-negative number.",
                "description": "All trailing coefficients less than `tol` will be removed."
              }
            },
            "returns": "-------\nnew_series : series\nNew instance of series with trimmed coefficients.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "truncate",
          "signature": "truncate(self, size)",
          "documentation": {
            "description": "Truncate series to length `size`.\nReduce the series to length `size` by discarding the high\ndegree terms. The value of `size` must be a positive integer. This\ncan be useful in least squares where the coefficients of the\nhigh degree terms may be very small.",
            "parameters": {
              "size": {
                "type": "positive int",
                "description": "The series is reduced to length `size` by discarding the high\ndegree terms. The value of `size` must be a positive integer."
              }
            },
            "returns": "-------\nnew_series : series\nNew instance of series with truncated coefficients.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "Polynomial",
      "documentation": {
        "description": "A power series class.\nThe Polynomial class provides the standard Python numerical methods\n'+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\nattributes and methods listed in the `ABCPolyBase` documentation.",
        "parameters": {
          "coef": {
            "type": "array_like",
            "description": "Polynomial coefficients in order of increasing degree, i.e.,\n``(1, 2, 3)`` give ``1 + 2*x + 3*x**2``."
          },
          "domain": {
            "type": "(2,) array_like, optional",
            "description": "Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\nto the interval ``[window[0], window[1]]`` by shifting and scaling.\nThe default value is [-1, 1]."
          },
          "window": {
            "type": "(2,) array_like, optional",
            "description": "Window, see `domain` for its use. The default value is [-1, 1].\n.. versionadded:: 1.6.0"
          },
          "symbol": {
            "type": "str, optional",
            "description": "Symbol used to represent the independent variable in string\nrepresentations of the polynomial expression, e.g. for printing.\nThe symbol must be a valid Python identifier. Default value is 'x'.\n.. versionadded:: 1.24"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "basis",
          "signature": "basis(deg, domain=None, window=None, symbol='x')",
          "documentation": {
            "description": "Series basis polynomial of degree `deg`.",
            "parameters": {
              "deg": {
                "type": "int",
                "description": "Degree of the basis polynomial for the series. Must be >= 0."
              },
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If given, the array must be of the form ``[beg, end]``, where\n``beg`` and ``end`` are the endpoints of the domain. If None is\ngiven then the class domain is used. The default is None."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "If given, the resulting array must be if the form\n``[beg, end]``, where ``beg`` and ``end`` are the endpoints of\nthe window. If None is given then the class window is used. The\ndefault is None."
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": ".. versionadded:: 1.7.0\n-------\nnew_series : series\nA series with the coefficient of the `deg` term set to one and\nall others zero.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cast",
          "signature": "cast(series, domain=None, window=None)",
          "documentation": {
            "description": "Convert series to series of this class.\nThe `series` is expected to be an instance of some polynomial\nseries of one of the types supported by by the numpy.polynomial\nmodule, but could be some other class that supports the convert\nmethod.\n.. versionadded:: 1.7.0",
            "parameters": {
              "series": {
                "type": "series",
                "description": "The series instance to be converted."
              },
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If given, the array must be of the form ``[beg, end]``, where\n``beg`` and ``end`` are the endpoints of the domain. If None is\ngiven then the class domain is used. The default is None."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "If given, the resulting array must be if the form\n``[beg, end]``, where ``beg`` and ``end`` are the endpoints of\nthe window. If None is given then the class window is used. The\ndefault is None."
              }
            },
            "returns": "-------\nnew_series : series\nA series of the same kind as the calling class and equal to\n`series` when evaluated.",
            "raises": "",
            "see_also": "--------\nconvert : similar instance method",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "convert",
          "signature": "convert(self, domain=None, kind=None, window=None)",
          "documentation": {
            "description": "Convert series to a different kind and/or domain and/or window.",
            "parameters": {
              "domain": {
                "type": "array_like, optional",
                "description": "The domain of the converted series. If the value is None,\nthe default domain of `kind` is used."
              },
              "kind": {
                "type": "class, optional",
                "description": "The polynomial series type class to which the current instance\nshould be converted. If kind is None, then the class of the\ncurrent instance is used."
              },
              "window": {
                "type": "array_like, optional",
                "description": "The window of the converted series. If the value is None,\nthe default window of `kind` is used."
              }
            },
            "returns": "-------\nnew_series : series\nThe returned class can be of different type than the current\ninstance and/or have a different domain and/or different\nwindow.",
            "raises": "",
            "see_also": "",
            "notes": "-----\nConversion between domains and class types can result in\nnumerically ill defined series.",
            "examples": ""
          }
        },
        {
          "name": "copy",
          "signature": "copy(self)",
          "documentation": {
            "description": "Return a copy.",
            "parameters": {},
            "returns": "-------\nnew_series : series\nCopy of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cutdeg",
          "signature": "cutdeg(self, deg)",
          "documentation": {
            "description": "Truncate series to the given degree.\nReduce the degree of the series to `deg` by discarding the\nhigh order terms. If `deg` is greater than the current degree a\ncopy of the current series is returned. This can be useful in least\nsquares where the coefficients of the high degree terms may be very\nsmall.\n.. versionadded:: 1.5.0",
            "parameters": {
              "deg": {
                "type": "non-negative int",
                "description": "The series is reduced to degree `deg` by discarding the high\norder terms. The value of `deg` must be a non-negative integer."
              }
            },
            "returns": "-------\nnew_series : series\nNew instance of series with reduced degree.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "degree",
          "signature": "degree(self)",
          "documentation": {
            "description": "The degree of the series.\n.. versionadded:: 1.5.0",
            "parameters": {},
            "returns": "-------\ndegree : int\nDegree of the series, one less than the number of coefficients.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": "--------\nCreate a polynomial object for ``1 + 7*x + 4*x**2``:\n>>> poly = np.polynomial.Polynomial([1, 7, 4])\n>>> print(poly)\n1.0 + 7.0·x + 4.0·x²\n>>> poly.degree()\n2\nNote that this method does not check for non-zero coefficients.\nYou must trim the polynomial to remove any trailing zeroes:\n>>> poly = np.polynomial.Polynomial([1, 7, 0])\n>>> print(poly)\n1.0 + 7.0·x + 0.0·x²\n>>> poly.degree()\n2\n>>> poly.trim().degree()\n1"
          }
        },
        {
          "name": "deriv",
          "signature": "deriv(self, m=1)",
          "documentation": {
            "description": "Differentiate.\nReturn a series instance of that is the derivative of the current\nseries.",
            "parameters": {
              "m": {
                "type": "non-negative int",
                "description": "Find the derivative of order `m`."
              }
            },
            "returns": "-------\nnew_series : series\nA new series representing the derivative. The domain is the same\nas the domain of the differentiated series.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None, symbol='x')",
          "documentation": {
            "description": "Least squares fit to data.\nReturn a series instance that is the least squares fit to the data\n`y` sampled at `x`. The domain of the returned instance can be\nspecified and this will often result in a superior fit with less\nchance of ill conditioning.",
            "parameters": {
              "x": {
                "type": "array_like, shape (M,)",
                "description": "x-coordinates of the M sample points ``(x[i], y[i])``."
              },
              "y": {
                "type": "array_like, shape (M,)",
                "description": "y-coordinates of the M sample points ``(x[i], y[i])``."
              },
              "deg": {
                "type": "int or 1-D array_like",
                "description": "Degree(s) of the fitting polynomials. If `deg` is a single integer\nall terms up to and including the `deg`'th term are included in the\nfit. For NumPy versions >= 1.11.0 a list of integers specifying the\ndegrees of the terms to include may be used instead."
              },
              "domain": {
                "type": "{None, [beg, end], []}, optional",
                "description": "Domain to use for the returned series. If ``None``,\nthen a minimal domain that covers the points `x` is chosen.  If\n``[]`` the class domain is used. The default value was the\nclass domain in NumPy 1.4 and ``None`` in later versions.\nThe ``[]`` option was added in numpy 1.5.0."
              },
              "rcond": {
                "type": "float, optional",
                "description": "Relative condition number of the fit. Singular values smaller\nthan this relative to the largest singular value will be\nignored. The default value is len(x)*eps, where eps is the\nrelative precision of the float type, about 2e-16 in most\ncases."
              },
              "full": {
                "type": "bool, optional",
                "description": "Switch determining nature of return value. When it is False\n(the default) just the coefficients are returned, when True\ndiagnostic information from the singular value decomposition is\nalso returned."
              },
              "w": {
                "type": "array_like, shape (M,), optional",
                "description": "Weights. If not None, the weight ``w[i]`` applies to the unsquared\nresidual ``y[i] - y_hat[i]`` at ``x[i]``. Ideally the weights are\nchosen so that the errors of the products ``w[i]*y[i]`` all have\nthe same variance.  When using inverse-variance weighting, use\n``w[i] = 1/sigma(y[i])``.  The default value is None.\n.. versionadded:: 1.5.0"
              },
              "window": {
                "type": "{[beg, end]}, optional",
                "description": "Window to use for the returned series. The default\nvalue is the default class domain\n.. versionadded:: 1.6.0"
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": "-------\nnew_series : series\nA series that represents the least squares fit to the data and\nhas the domain and window specified in the call. If the\ncoefficients for the unscaled and unshifted basis polynomials are\nof interest, do ``new_series.convert().coef``.\n[resid, rank, sv, rcond] : list\nThese values are only returned if ``full == True``\n- resid -- sum of squared residuals of the least squares fit\n- rank -- the numerical rank of the scaled Vandermonde matrix\n- sv -- singular values of the scaled Vandermonde matrix\n- rcond -- value of `rcond`.\nFor more details, see `linalg.lstsq`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fromroots",
          "signature": "fromroots(roots, domain=[], window=None, symbol='x')",
          "documentation": {
            "description": "Return series instance that has the specified roots.",
            "parameters": {
              "roots": {
                "type": "array_like",
                "description": "List of roots."
              },
              "domain": {
                "type": "{[], None, array_like}, optional",
                "description": "Domain for the resulting series. If None the domain is the\ninterval from the smallest root to the largest. If [] the\ndomain is the class domain. The default is []."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "Window for the returned series. If None the class window is\nused. The default is None."
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": "``(x - r[0])*(x - r[1])*...*(x - r[n-1])``, where ``r`` is a\nlist of roots.\n-------\nnew_series : series\nSeries with the specified roots.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_samecoef",
          "signature": "has_samecoef(self, other)",
          "documentation": {
            "description": "Check if coefficients match.\n.. versionadded:: 1.6.0",
            "parameters": {
              "other": {
                "type": "class instance",
                "description": "The other class must have the ``coef`` attribute."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if the coefficients are the same, False otherwise.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_samedomain",
          "signature": "has_samedomain(self, other)",
          "documentation": {
            "description": "Check if domains match.\n.. versionadded:: 1.6.0",
            "parameters": {
              "other": {
                "type": "class instance",
                "description": "The other class must have the ``domain`` attribute."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if the domains are the same, False otherwise.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_sametype",
          "signature": "has_sametype(self, other)",
          "documentation": {
            "description": "Check if types match.\n.. versionadded:: 1.7.0",
            "parameters": {
              "other": {
                "type": "object",
                "description": "Class instance."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if other is same class as self",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "has_samewindow",
          "signature": "has_samewindow(self, other)",
          "documentation": {
            "description": "Check if windows match.\n.. versionadded:: 1.6.0",
            "parameters": {
              "other": {
                "type": "class instance",
                "description": "The other class must have the ``window`` attribute."
              }
            },
            "returns": "-------\nbool : boolean\nTrue if the windows are the same, False otherwise.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "identity",
          "signature": "identity(domain=None, window=None, symbol='x')",
          "documentation": {
            "description": "Identity function.\nIf ``p`` is the returned series, then ``p(x) == x`` for all\nvalues of x.",
            "parameters": {
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If given, the array must be of the form ``[beg, end]``, where\n``beg`` and ``end`` are the endpoints of the domain. If None is\ngiven then the class domain is used. The default is None."
              },
              "window": {
                "type": "{None, array_like}, optional",
                "description": "If given, the resulting array must be if the form\n``[beg, end]``, where ``beg`` and ``end`` are the endpoints of\nthe window. If None is given then the class window is used. The\ndefault is None."
              },
              "symbol": {
                "type": "str, optional",
                "description": "Symbol representing the independent variable. Default is 'x'."
              }
            },
            "returns": "-------\nnew_series : series\nSeries of representing the identity.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "integ",
          "signature": "integ(self, m=1, k=[], lbnd=None)",
          "documentation": {
            "description": "Integrate.\nReturn a series instance that is the definite integral of the\ncurrent series.",
            "parameters": {
              "m": {
                "type": "non-negative int",
                "description": "The number of integrations to perform."
              },
              "k": {
                "type": "array_like",
                "description": "Integration constants. The first constant is applied to the\nfirst integration, the second to the second, and so on. The\nlist of values must less than or equal to `m` in length and any\nmissing values are set to zero."
              },
              "lbnd": {
                "type": "Scalar",
                "description": "The lower bound of the definite integral."
              }
            },
            "returns": "-------\nnew_series : series\nA new series representing the integral. The domain is the same\nas the domain of the integrated series.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "linspace",
          "signature": "linspace(self, n=100, domain=None)",
          "documentation": {
            "description": "Return x, y values at equally spaced points in domain.",
            "parameters": {
              "n": {
                "type": "int, optional",
                "description": "Number of point pairs to return. The default value is 100."
              },
              "domain": {
                "type": "{None, array_like}, optional",
                "description": "If not None, the specified domain is used instead of that of\nthe calling instance. It should be of the form ``[beg,end]``.\nThe default is None which case the class domain is used."
              }
            },
            "returns": "domain.  Here y is the value of the polynomial at the points x. By\ndefault the domain is the same as that of the series instance.\nThis method is intended mostly as a plotting aid.\n.. versionadded:: 1.5.0\n-------\nx, y : ndarray\nx is equal to linspace(self.domain[0], self.domain[1], n) and\ny is the series evaluated at element of x.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "mapparms",
          "signature": "mapparms(self)",
          "documentation": {
            "description": "Return the mapping parameters.\nThe returned values define a linear map ``off + scl*x`` that is\napplied to the input arguments before the series is evaluated. The\nmap depends on the ``domain`` and ``window``; if the current\n``domain`` is equal to the ``window`` the resulting map is the\nidentity.  If the coefficients of the series instance are to be\nused by themselves outside this class, then the linear function\nmust be substituted for the ``x`` in the standard representation of\nthe base polynomials.",
            "parameters": {},
            "returns": "-------\noff, scl : float or complex\nThe mapping function is defined by ``off + scl*x``.",
            "raises": "",
            "see_also": "",
            "notes": "-----\nIf the current domain is the interval ``[l1, r1]`` and the window\nis ``[l2, r2]``, then the linear mapping function ``L`` is\ndefined by the equations::\nL(l1) = l2\nL(r1) = r2",
            "examples": ""
          }
        },
        {
          "name": "roots",
          "signature": "roots(self)",
          "documentation": {
            "description": "Return the roots of the series polynomial.\nCompute the roots for the series. Note that the accuracy of the\nroots decreases the further outside the `domain` they lie.",
            "parameters": {},
            "returns": "-------\nroots : ndarray\nArray containing the roots of the series.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "trim",
          "signature": "trim(self, tol=0)",
          "documentation": {
            "description": "Remove trailing coefficients\nRemove trailing coefficients until a coefficient is reached whose\nabsolute value greater than `tol` or the beginning of the series is\nreached. If all the coefficients would be removed the series is set\nto ``[0]``. A new series instance is returned with the new\ncoefficients.  The current instance remains unchanged.",
            "parameters": {
              "tol": {
                "type": "non-negative number.",
                "description": "All trailing coefficients less than `tol` will be removed."
              }
            },
            "returns": "-------\nnew_series : series\nNew instance of series with trimmed coefficients.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "truncate",
          "signature": "truncate(self, size)",
          "documentation": {
            "description": "Truncate series to length `size`.\nReduce the series to length `size` by discarding the high\ndegree terms. The value of `size` must be a positive integer. This\ncan be useful in least squares where the coefficients of the\nhigh degree terms may be very small.",
            "parameters": {
              "size": {
                "type": "positive int",
                "description": "The series is reduced to length `size` by discarding the high\ndegree terms. The value of `size` must be a positive integer."
              }
            },
            "returns": "-------\nnew_series : series\nNew instance of series with truncated coefficients.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    }
  ]
}