{
  "description": "Sub-package containing the matrix class and related functions.",
  "functions": [
    {
      "name": "asmatrix",
      "signature": "asmatrix(data, dtype=None)",
      "documentation": {
        "description": "Interpret the input as a matrix.\n\n    Unlike `matrix`, `asmatrix` does not make a copy if the input is already\n    a matrix or an ndarray.  Equivalent to ``matrix(data, copy=False)``.",
        "parameters": {
          "dtype": {
            "type": "data-type",
            "description": "Data-type of the output matrix."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "bmat",
      "signature": "bmat(obj, ldict=None, gdict=None)",
      "documentation": {
        "description": "Build a matrix object from a string, nested sequence, or array.",
        "parameters": {
          "ldict": {
            "type": "dict",
            "description": "A dictionary that replaces local operands in current frame.\n        Ignored if `obj` is not a string or `gdict` is None."
          },
          "gdict": {
            "type": "dict",
            "description": "A dictionary that replaces global operands in current frame.\n        Ignored if `obj` is not a string."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "mat",
      "signature": "asmatrix(data, dtype=None)",
      "documentation": {
        "description": "Interpret the input as a matrix.\n\n    Unlike `matrix`, `asmatrix` does not make a copy if the input is already\n    a matrix or an ndarray.  Equivalent to ``matrix(data, copy=False)``.",
        "parameters": {
          "dtype": {
            "type": "data-type",
            "description": "Data-type of the output matrix."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    }
  ],
  "classes": [
    {
      "name": "matrix",
      "documentation": {
        "description": "matrix(data, dtype=None, copy=True)\n\n    .. note:: It is no longer recommended to use this class, even for linear\n              algebra. Instead use regular arrays. The class may be removed\n              in the future.\n\n    Returns a matrix from an array-like object, or from a string of data.\n    A matrix is a specialized 2-D array that retains its 2-D nature\n    through operations.  It has certain special operators, such as ``*``\n    (matrix multiplication) and ``**`` (matrix power).",
        "parameters": {
          "dtype": {
            "type": "data-type",
            "description": "Data-type of the output matrix."
          },
          "copy": {
            "type": "bool",
            "description": "If `data` is already an `ndarray`, then this flag determines\n       whether the data is copied (the default), or whether a view is\n       constructed."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "all",
          "signature": "all(self, axis=None, out=None)",
          "documentation": {
            "description": "Test whether all matrix elements along a given axis evaluate to True.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "any",
          "signature": "any(self, axis=None, out=None)",
          "documentation": {
            "description": "Test whether any array element along a given axis evaluates to True.\n\n        Refer to `numpy.any` for full documentation.",
            "parameters": {
              "out": {
                "type": "ndarray",
                "description": "Output to existing array instead of creating new one, must have\n            same shape as expected output"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "argmax",
          "signature": "argmax(self, axis=None, out=None)",
          "documentation": {
            "description": "Indexes of the maximum values along an axis.\n\n        Return the indexes of the first occurrences of the maximum values\n        along the specified axis.  If axis is None, the index is for the\n        flattened matrix.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "argmin",
          "signature": "argmin(self, axis=None, out=None)",
          "documentation": {
            "description": "Indexes of the minimum values along an axis.\n\n        Return the indexes of the first occurrences of the minimum values\n        along the specified axis.  If axis is None, the index is for the\n        flattened matrix.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "argpartition",
          "signature": "argpartition(kth, axis=-1, kind='introselect', order=None)",
          "documentation": {
            "description": "a.argpartition(kth, axis=-1, kind='introselect', order=None)\n\n    Returns the indices that would partition this array.\n\n    Refer to `numpy.argpartition` for full documentation.\n\n    .. versionadded:: 1.8.0",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "numpy.argpartition : equivalent function",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "argsort",
          "signature": "argsort(axis=-1, kind=None, order=None)",
          "documentation": {
            "description": "a.argsort(axis=-1, kind=None, order=None)\n\n    Returns the indices that would sort this array.\n\n    Refer to `numpy.argsort` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "numpy.argsort : equivalent function",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "astype",
          "signature": "astype(dtype, order='K', casting='unsafe', subok=True, copy=True)",
          "documentation": {
            "description": "a.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)\n\n    Copy of the array, cast to a specified type.",
            "parameters": {
              "order": {
                "type": "{'C'",
                "description": ", 'F', 'A', 'K'}, optional\n        Controls the memory layout order of the result.\n        'C' means C order, 'F' means Fortran order, 'A'\n        means 'F' order if all the arrays are Fortran contiguous,\n        'C' order otherwise, and 'K' means as close to the\n        order the array elements appear in memory as possible.\n        Default is 'K'."
              },
              "casting": {
                "type": "{'no'",
                "description": ", 'equiv', 'safe', 'same_kind', 'unsafe'}, optional\n        Controls what kind of data casting may occur. Defaults to 'unsafe'\n        for backwards compatibility.\n\n          * 'no' means the data types should not be cast at all.\n          * 'equiv' means only byte-order changes are allowed.\n          * 'safe' means only casts which can preserve values are allowed.\n          * 'same_kind' means only safe casts or casts within a kind,\n            like float64 to float32, are allowed.\n          * 'unsafe' means any data conversions may be done."
              },
              "subok": {
                "type": "bool",
                "description": "If True, then sub-classes will be passed-through (default), otherwise\n        the returned array will be forced to be a base-class array."
              },
              "copy": {
                "type": "bool",
                "description": "By default, astype always returns a newly allocated array. If this\n        is set to false, and the `dtype`, `order`, and `subok`\n        requirements are satisfied, the input array is returned instead\n        of a copy."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "byteswap",
          "signature": "byteswap(inplace=False)",
          "documentation": {
            "description": "a.byteswap(inplace=False)\n\n    Swap the bytes of the array elements\n\n    Toggle between low-endian and big-endian data representation by\n    returning a byteswapped array, optionally swapped in-place.\n    Arrays of byte-strings are not swapped. The real and imaginary\n    parts of a complex number are swapped individually.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "choose",
          "signature": "choose(choices, out=None, mode='raise')",
          "documentation": {
            "description": "a.choose(choices, out=None, mode='raise')\n\n    Use an index array to construct a new array from a set of choices.\n\n    Refer to `numpy.choose` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "numpy.choose : equivalent function",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "clip",
          "signature": "clip(min=None, max=None, out=None, **kwargs)",
          "documentation": {
            "description": "a.clip(min=None, max=None, out=None, **kwargs)\n\n    Return an array whose values are limited to ``[min, max]``.\n    One of max or min must be given.\n\n    Refer to `numpy.clip` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "numpy.clip : equivalent function",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "compress",
          "signature": "compress(condition, axis=None, out=None)",
          "documentation": {
            "description": "a.compress(condition, axis=None, out=None)\n\n    Return selected slices of this array along given axis.\n\n    Refer to `numpy.compress` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "numpy.compress : equivalent function",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "conj",
          "signature": "conj()",
          "documentation": {
            "description": "a.conj()\n\n    Complex-conjugate all elements.\n\n    Refer to `numpy.conjugate` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "numpy.conjugate : equivalent function",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "conjugate",
          "signature": "conjugate()",
          "documentation": {
            "description": "a.conjugate()\n\n    Return the complex conjugate, element-wise.\n\n    Refer to `numpy.conjugate` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "numpy.conjugate : equivalent function",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "copy",
          "signature": "copy(order='C')",
          "documentation": {
            "description": "a.copy(order='C')\n\n    Return a copy of the array.",
            "parameters": {
              "function": {
                "type": "func:`numpy.copy` is similar",
                "description": ", but it defaults to using order 'K',\n    and will not pass sub-classes through by default."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cumprod",
          "signature": "cumprod(axis=None, dtype=None, out=None)",
          "documentation": {
            "description": "a.cumprod(axis=None, dtype=None, out=None)\n\n    Return the cumulative product of the elements along the given axis.\n\n    Refer to `numpy.cumprod` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "numpy.cumprod : equivalent function",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cumsum",
          "signature": "cumsum(axis=None, dtype=None, out=None)",
          "documentation": {
            "description": "a.cumsum(axis=None, dtype=None, out=None)\n\n    Return the cumulative sum of the elements along the given axis.\n\n    Refer to `numpy.cumsum` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "numpy.cumsum : equivalent function",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "diagonal",
          "signature": "diagonal(offset=0, axis1=0, axis2=1)",
          "documentation": {
            "description": "a.diagonal(offset=0, axis1=0, axis2=1)\n\n    Return specified diagonals. In NumPy 1.9 the returned array is a\n    read-only view instead of a copy as in previous NumPy versions.  In\n    a future version the read-only restriction will be removed.\n\n    Refer to :func:`numpy.diagonal` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "numpy.diagonal : equivalent function",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "dot",
          "signature": "dot(...)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "dump",
          "signature": "dump(file)",
          "documentation": {
            "description": "a.dump(file)\n\n    Dump a pickle of the array to the specified file.\n    The array can be read back with pickle.load or numpy.load.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "dumps",
          "signature": "dumps()",
          "documentation": {
            "description": "a.dumps()\n\n    Returns the pickle of the array as a string.\n    pickle.loads will convert the string back to an array.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fill",
          "signature": "fill(value)",
          "documentation": {
            "description": "a.fill(value)\n\n    Fill the array with a scalar value.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "flatten",
          "signature": "flatten(self, order='C')",
          "documentation": {
            "description": "Return a flattened copy of the matrix.\n\n        All `N` elements of the matrix are placed into a single row.",
            "parameters": {
              "flat": {
                "type": "A 1-D flat iterator over the matrix.",
                "description": ""
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "getA",
          "signature": "A(self)",
          "documentation": {
            "description": "Return `self` as an `ndarray` object.\n\n        Equivalent to ``np.asarray(self)``.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "getA1",
          "signature": "A1(self)",
          "documentation": {
            "description": "Return `self` as a flattened `ndarray`.\n\n        Equivalent to ``np.asarray(x).ravel()``",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "getH",
          "signature": "H(self)",
          "documentation": {
            "description": "Returns the (complex) conjugate transpose of `self`.\n\n        Equivalent to ``np.transpose(self)`` if `self` is real-valued.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "getI",
          "signature": "I(self)",
          "documentation": {
            "description": "Returns the (multiplicative) inverse of invertible `self`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "getT",
          "signature": "T(self)",
          "documentation": {
            "description": "Returns the transpose of the matrix.\n\n        Does *not* conjugate!  For the complex conjugate transpose, use ``.H``.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "getfield",
          "signature": "getfield(dtype, offset=0)",
          "documentation": {
            "description": "a.getfield(dtype, offset=0)\n\n    Returns a field of the given array as a certain type.\n\n    A field is a view of the array data with a given data-type. The values in\n    the view are determined by the given type and the offset into the current\n    array in bytes. The offset needs to be such that the view dtype fits in the\n    array dtype; for example an array of dtype complex128 has 16-byte elements.\n    If taking a view with a 32-bit integer (4 bytes), the offset needs to be\n    between 0 and 12 bytes.",
            "parameters": {
              "offset": {
                "type": "int",
                "description": "Number of bytes to skip before beginning the element view."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "item",
          "signature": "item(*args)",
          "documentation": {
            "description": "a.item(*args)\n\n    Copy an element of an array to a standard Python scalar and return it.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "itemset",
          "signature": "itemset(*args)",
          "documentation": {
            "description": "a.itemset(*args)\n\n    Insert scalar into an array (scalar is cast to array's dtype, if possible)\n\n    There must be at least 1 argument, and define the last argument\n    as *item*.  Then, ``a.itemset(*args)`` is equivalent to but faster\n    than ``a[args] = item``.  The item should be a scalar value and `args`\n    must select a single item in the array `a`.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "max",
          "signature": "max(self, axis=None, out=None)",
          "documentation": {
            "description": "Return the maximum value along an axis.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "mean",
          "signature": "mean(self, axis=None, dtype=None, out=None)",
          "documentation": {
            "description": "Returns the average of the matrix elements along the given axis.\n\n        Refer to `numpy.mean` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": ">>> x = np.matrix(np.arange(12).reshape((3, 4)))\n        >>> x\n        matrix([[ 0,  1,  2,  3],\n                [ 4,  5,  6,  7],\n                [ 8,  9, 10, 11]])\n        >>> x.mean()\n        5.5\n        >>> x.mean(0)\n        matrix([[4., 5., 6., 7.]])\n        >>> x.mean(1)\n        matrix([[ 1.5],\n                [ 5.5],\n                [ 9.5]])",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "min",
          "signature": "min(self, axis=None, out=None)",
          "documentation": {
            "description": "Return the minimum value along an axis.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "newbyteorder",
          "signature": "newbyteorder(new_order='S', /)",
          "documentation": {
            "description": "arr.newbyteorder(new_order='S', /)\n\n    Return the array with the same data viewed with a different byte order.\n\n    Equivalent to::\n\n        arr.view(arr.dtype.newbytorder(new_order))\n\n    Changes are also made in all fields and sub-arrays of the array data\n    type.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "nonzero",
          "signature": "nonzero()",
          "documentation": {
            "description": "a.nonzero()\n\n    Return the indices of the elements that are non-zero.\n\n    Refer to `numpy.nonzero` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "numpy.nonzero : equivalent function",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "partition",
          "signature": "partition(kth, axis=-1, kind='introselect', order=None)",
          "documentation": {
            "description": "a.partition(kth, axis=-1, kind='introselect', order=None)\n\n    Rearranges the elements in the array in such a way that the value of the\n    element in kth position is in the position it would be in a sorted array.\n    All elements smaller than the kth element are moved before this element and\n    all equal or greater are moved behind it. The ordering of the elements in\n    the two partitions is undefined.\n\n    .. versionadded:: 1.8.0",
            "parameters": {
              "axis": {
                "type": "int",
                "description": "Axis along which to sort. Default is -1, which means sort along the\n        last axis."
              },
              "kind": {
                "type": "{'introselect'}",
                "description": "Selection algorithm. Default is 'introselect'."
              },
              "order": {
                "type": "str or list of str",
                "description": "When `a` is an array with fields defined, this argument specifies\n        which fields to compare first, second, etc. A single field can\n        be specified as a string, and not all fields need to be specified,\n        but unspecified fields will still be used, in the order in which\n        they come up in the dtype, to break ties."
              },
              "argpartition": {
                "type": "Indirect partition.",
                "description": ""
              },
              "sort": {
                "type": "Full sort.",
                "description": ""
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "prod",
          "signature": "prod(self, axis=None, dtype=None, out=None)",
          "documentation": {
            "description": "Return the product of the array elements over the given axis.\n\n        Refer to `prod` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": ">>> x = np.matrix(np.arange(12).reshape((3,4))); x\n        matrix([[ 0,  1,  2,  3],\n                [ 4,  5,  6,  7],\n                [ 8,  9, 10, 11]])\n        >>> x.prod()\n        0\n        >>> x.prod(0)\n        matrix([[  0,  45, 120, 231]])\n        >>> x.prod(1)\n        matrix([[   0],\n                [ 840],\n                [7920]])",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "ptp",
          "signature": "ptp(self, axis=None, out=None)",
          "documentation": {
            "description": "Peak-to-peak (maximum - minimum) value along the given axis.\n\n        Refer to `numpy.ptp` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": ">>> x = np.matrix(np.arange(12).reshape((3,4))); x\n        matrix([[ 0,  1,  2,  3],\n                [ 4,  5,  6,  7],\n                [ 8,  9, 10, 11]])\n        >>> x.ptp()\n        11\n        >>> x.ptp(0)\n        matrix([[8, 8, 8, 8]])\n        >>> x.ptp(1)\n        matrix([[3],\n                [3],\n                [3]])",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "put",
          "signature": "put(indices, values, mode='raise')",
          "documentation": {
            "description": "a.put(indices, values, mode='raise')\n\n    Set ``a.flat[n] = values[n]`` for all `n` in indices.\n\n    Refer to `numpy.put` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "numpy.put : equivalent function",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "ravel",
          "signature": "ravel(self, order='C')",
          "documentation": {
            "description": "Return a flattened matrix.\n\n        Refer to `numpy.ravel` for more documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "repeat",
          "signature": "repeat(repeats, axis=None)",
          "documentation": {
            "description": "a.repeat(repeats, axis=None)\n\n    Repeat elements of an array.\n\n    Refer to `numpy.repeat` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "numpy.repeat : equivalent function",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "reshape",
          "signature": "reshape(shape, order='C')",
          "documentation": {
            "description": "a.reshape(shape, order='C')\n\n    Returns an array containing the same data with a new shape.\n\n    Refer to `numpy.reshape` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "Unlike the free function `numpy.reshape`, this method on `ndarray` allows\n    the elements of the shape parameter to be passed in as separate arguments.\n    For example, ``a.reshape(10, 11)`` is equivalent to\n    ``a.reshape((10, 11))``.",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "resize",
          "signature": "resize(new_shape, refcheck=True)",
          "documentation": {
            "description": "a.resize(new_shape, refcheck=True)\n\n    Change shape and size of array in-place.",
            "parameters": {
              "refcheck": {
                "type": "bool",
                "description": "If False, reference count will not be checked. Default is True."
              },
              "ValueError": {
                "type": "cannot resize an array that references or is referenced ...",
                "description": "Unless `refcheck` is False:\n\n    >>> a.resize((1, 1), refcheck=False)\n    >>> a\n    array([[0]])\n    >>> c\n    array([[0]])"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "round",
          "signature": "round(decimals=0, out=None)",
          "documentation": {
            "description": "a.round(decimals=0, out=None)\n\n    Return `a` with each element rounded to the given number of decimals.\n\n    Refer to `numpy.around` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "numpy.around : equivalent function",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "searchsorted",
          "signature": "searchsorted(v, side='left', sorter=None)",
          "documentation": {
            "description": "a.searchsorted(v, side='left', sorter=None)\n\n    Find indices where elements of v should be inserted in a to maintain order.\n\n    For full documentation, see `numpy.searchsorted`",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "numpy.searchsorted : equivalent function",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "setfield",
          "signature": "setfield(val, dtype, offset=0)",
          "documentation": {
            "description": "a.setfield(val, dtype, offset=0)\n\n    Put a value into a specified place in a field defined by a data-type.\n\n    Place `val` into `a`'s field defined by `dtype` and beginning `offset`\n    bytes into the field.",
            "parameters": {
              "dtype": {
                "type": "dtype object",
                "description": "Data-type of the field in which to place `val`."
              },
              "offset": {
                "type": "int",
                "description": "The number of bytes into the field at which to place `val`."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "setflags",
          "signature": "setflags(write=None, align=None, uic=None)",
          "documentation": {
            "description": "a.setflags(write=None, align=None, uic=None)\n\n    Set array flags WRITEABLE, ALIGNED, WRITEBACKIFCOPY,\n    respectively.\n\n    These Boolean-valued flags affect how numpy interprets the memory\n    area used by `a` (see Notes below). The ALIGNED flag can only\n    be set to True if the data is actually aligned according to the type.\n    The WRITEBACKIFCOPY and flag can never be set\n    to True. The flag WRITEABLE can only be set to True if the array owns its\n    own memory, or the ultimate owner of the memory exposes a writeable buffer\n    interface, or is a string. (The exception for string is made so that\n    unpickling can be done without copying memory.)",
            "parameters": {
              "align": {
                "type": "bool",
                "description": "Describes whether or not `a` is aligned properly for its type."
              },
              "uic": {
                "type": "bool",
                "description": "Describes whether or not `a` is a copy of another \"base\" array."
              },
              "C_CONTIGUOUS": {
                "type": "True",
                "description": ""
              },
              "F_CONTIGUOUS": {
                "type": "False",
                "description": ""
              },
              "OWNDATA": {
                "type": "True",
                "description": ""
              },
              "WRITEABLE": {
                "type": "False",
                "description": ""
              },
              "ALIGNED": {
                "type": "False",
                "description": ""
              },
              "WRITEBACKIFCOPY": {
                "type": "False",
                "description": ">>> y.setflags(uic=1)\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>"
              },
              "ValueError": {
                "type": "cannot set WRITEBACKIFCOPY flag to True",
                "description": ""
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sort",
          "signature": "sort(axis=-1, kind=None, order=None)",
          "documentation": {
            "description": "a.sort(axis=-1, kind=None, order=None)\n\n    Sort an array in-place. Refer to `numpy.sort` for full documentation.",
            "parameters": {
              "kind": {
                "type": "{'quicksort'",
                "description": ", 'mergesort', 'heapsort', 'stable'}, optional\n        Sorting algorithm. The default is 'quicksort'. Note that both 'stable'\n        and 'mergesort' use timsort under the covers and, in general, the\n        actual implementation will vary with datatype. The 'mergesort' option\n        is retained for backwards compatibility.\n\n        .. versionchanged:: 1.15.0\n           The 'stable' option was added."
              },
              "order": {
                "type": "str or list of str",
                "description": "When `a` is an array with fields defined, this argument specifies\n        which fields to compare first, second, etc.  A single field can\n        be specified as a string, and not all fields need be specified,\n        but unspecified fields will still be used, in the order in which\n        they come up in the dtype, to break ties."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "squeeze",
          "signature": "squeeze(self, axis=None)",
          "documentation": {
            "description": "Return a possibly reshaped matrix.\n\n        Refer to `numpy.squeeze` for more documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "std",
          "signature": "std(self, axis=None, dtype=None, out=None, ddof=0)",
          "documentation": {
            "description": "Return the standard deviation of the array elements along the given axis.\n\n        Refer to `numpy.std` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": ">>> x = np.matrix(np.arange(12).reshape((3, 4)))\n        >>> x\n        matrix([[ 0,  1,  2,  3],\n                [ 4,  5,  6,  7],\n                [ 8,  9, 10, 11]])\n        >>> x.std()\n        3.4520525295346629 # may vary\n        >>> x.std(0)\n        matrix([[ 3.26598632,  3.26598632,  3.26598632,  3.26598632]]) # may vary\n        >>> x.std(1)\n        matrix([[ 1.11803399],\n                [ 1.11803399],\n                [ 1.11803399]])",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sum",
          "signature": "sum(self, axis=None, dtype=None, out=None)",
          "documentation": {
            "description": "Returns the sum of the matrix elements, along the given axis.\n\n        Refer to `numpy.sum` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": ">>> x = np.matrix([[1, 2], [4, 3]])\n        >>> x.sum()\n        10\n        >>> x.sum(axis=1)\n        matrix([[3],\n                [7]])\n        >>> x.sum(axis=1, dtype='float')\n        matrix([[3.],\n                [7.]])\n        >>> out = np.zeros((2, 1), dtype='float')\n        >>> x.sum(axis=1, dtype='float', out=np.asmatrix(out))\n        matrix([[3.],\n                [7.]])",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "swapaxes",
          "signature": "swapaxes(axis1, axis2)",
          "documentation": {
            "description": "a.swapaxes(axis1, axis2)\n\n    Return a view of the array with `axis1` and `axis2` interchanged.\n\n    Refer to `numpy.swapaxes` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "numpy.swapaxes : equivalent function",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "take",
          "signature": "take(indices, axis=None, out=None, mode='raise')",
          "documentation": {
            "description": "a.take(indices, axis=None, out=None, mode='raise')\n\n    Return an array formed from the elements of `a` at the given indices.\n\n    Refer to `numpy.take` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "numpy.take : equivalent function",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "tobytes",
          "signature": "tobytes(order='C')",
          "documentation": {
            "description": "a.tobytes(order='C')\n\n    Construct Python bytes containing the raw data bytes in the array.\n\n    Constructs Python bytes showing a copy of the raw contents of\n    data memory. The bytes object is produced in C-order by default.\n    This behavior is controlled by the ``order`` parameter.\n\n    .. versionadded:: 1.9.0",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "tofile",
          "signature": "tofile(fid, sep=\"\", format=\"%s\")",
          "documentation": {
            "description": "a.tofile(fid, sep=\"\", format=\"%s\")\n\n    Write array to a file as text or binary (default).\n\n    Data is always written in 'C' order, independent of the order of `a`.\n    The data produced by this method can be recovered using the function\n    fromfile().",
            "parameters": {
              "sep": {
                "type": "str",
                "description": "Separator between array items for text output.\n        If \"\" (empty), a binary file is written, equivalent to\n        ``file.write(a.tobytes())``."
              },
              "format": {
                "type": "str",
                "description": "Format string for text file output.\n        Each entry in the array is formatted to text by first converting\n        it to the closest Python type, and then using \"format\" % item."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "tolist",
          "signature": "tolist(self)",
          "documentation": {
            "description": "Return the matrix as a (possibly nested) list.\n\n        See `ndarray.tolist` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": ">>> x = np.matrix(np.arange(12).reshape((3,4))); x\n        matrix([[ 0,  1,  2,  3],\n                [ 4,  5,  6,  7],\n                [ 8,  9, 10, 11]])\n        >>> x.tolist()\n        [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "tostring",
          "signature": "tostring(order='C')",
          "documentation": {
            "description": "a.tostring(order='C')\n\n    A compatibility alias for `tobytes`, with exactly the same behavior.\n\n    Despite its name, it returns `bytes` not `str`\\ s.\n\n    .. deprecated:: 1.19.0",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "trace",
          "signature": "trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)",
          "documentation": {
            "description": "a.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)\n\n    Return the sum along diagonals of the array.\n\n    Refer to `numpy.trace` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "numpy.trace : equivalent function",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "transpose",
          "signature": "transpose(*axes)",
          "documentation": {
            "description": "a.transpose(*axes)\n\n    Returns a view of the array with axes transposed.\n\n    Refer to `numpy.transpose` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "var",
          "signature": "var(self, axis=None, dtype=None, out=None, ddof=0)",
          "documentation": {
            "description": "Returns the variance of the matrix elements, along the given axis.\n\n        Refer to `numpy.var` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": ">>> x = np.matrix(np.arange(12).reshape((3, 4)))\n        >>> x\n        matrix([[ 0,  1,  2,  3],\n                [ 4,  5,  6,  7],\n                [ 8,  9, 10, 11]])\n        >>> x.var()\n        11.916666666666666\n        >>> x.var(0)\n        matrix([[ 10.66666667,  10.66666667,  10.66666667,  10.66666667]]) # may vary\n        >>> x.var(1)\n        matrix([[1.25],\n                [1.25],\n                [1.25]])",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "view",
          "signature": "view([dtype][, type])",
          "documentation": {
            "description": "a.view([dtype][, type])\n\n    New view of array with the same data.\n\n    .. note::\n        Passing None for ``dtype`` is different from omitting the parameter,\n        since the former invokes ``dtype(None)`` which is an alias for\n        ``dtype('float_')``.",
            "parameters": {
              "type": {
                "type": "Python type",
                "description": "Type of the returned view, e.g., ndarray or matrix.  Again, omission\n        of the parameter results in type preservation."
              },
              "ValueError": {
                "type": "To change to a dtype of a different size",
                "description": ", the last axis must be contiguous\n    >>> z = y.copy()\n    >>> z.view(dtype=[('width', np.int16), ('length', np.int16)])\n    array([[(1, 3)],\n           [(4, 6)]], dtype=[('width', '<i2'), ('length', '<i2')])\n\n    However, views that change dtype are totally fine for arrays with a\n    contiguous last axis, even if the rest of the axes are not C-contiguous:\n\n    >>> x = np.arange(2 * 3 * 4, dtype=np.int8).reshape(2, 3, 4)\n    >>> x.transpose(1, 0, 2).view(np.int16)\n    array([[[ 256,  770],\n            [3340, 3854]],\n    <BLANKLINE>\n           [[1284, 1798],\n            [4368, 4882]],\n    <BLANKLINE>\n           [[2312, 2826],\n            [5396, 5910]]], dtype=int16)"
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    }
  ]
}