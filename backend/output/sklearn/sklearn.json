{
  "description": "Configure global settings and get information about the working environment.",
  "functions": [
    {
      "name": "clone",
      "signature": "clone(estimator, *, safe=True)",
      "documentation": {
        "description": "Construct a new unfitted estimator with the same parameters.\n\n    Clone does a deep copy of the model in an estimator\n    without actually copying attached data. It returns a new estimator\n    with the same parameters that has not been fitted on any data.\n\n    .. versionchanged:: 1.3\n        Delegates to `estimator.__sklearn_clone__` if the method exists.\n\n    Parameters\n    ----------\n    estimator : {list, tuple, set} of estimator instance or a single             estimator instance\n        The estimator or group of estimators to be cloned.\n    safe : bool, default=True\n        If safe is False, clone will fall back to a deep copy on objects\n        that are not estimators. Ignored if `estimator.__sklearn_clone__`\n        exists.\n\n    Returns\n    -------\n    estimator : object\n        The deep copy of the input, an estimator if input is an estimator.\n\n    Notes\n    -----\n    If the estimator's `random_state` parameter is an integer (or if the\n    estimator doesn't have a `random_state` parameter), an *exact clone* is\n    returned: the clone and the original estimator will give the exact same\n    results. Otherwise, *statistical clone* is returned: the clone might\n    return different results from the original estimator. More details can be\n    found in :ref:`randomness`.",
        "parameters": {
          "estimator": {
            "type": "doesn't have a `random_state` parameter), an *exact clone* is",
            "description": ""
          },
          "The": {
            "type": "deep copy of the input, an estimator if input is an estimator.",
            "description": "Notes\n-----"
          },
          "safe": {
            "type": "bool, default=True",
            "description": ""
          },
          "If": {
            "type": "the estimator's `random_state` parameter is an integer (or if the",
            "description": ""
          },
          "that": {
            "type": "are not estimators. Ignored if `estimator.__sklearn_clone__`",
            "description": "exists.\nReturns\n-------"
          },
          "returned": {
            "type": "the clone and the original estimator will give the exact same",
            "description": "results. Otherwise, *statistical clone* is returned: the clone might"
          },
          "return": {
            "type": "different results from the original estimator. More details can be",
            "description": ""
          },
          "found": {
            "type": "in :ref:`randomness`.",
            "description": "Examples\n--------\n>>> from sklearn.base import clone\n>>> from sklearn.linear_model import LogisticRegression\n>>> X = [[-1, 0], [0, 1], [0, -1], [1, 0]]\n>>> y = [0, 0, 1, 1]\n>>> classifier = LogisticRegression().fit(X, y)\n>>> cloned_classifier = clone(classifier)\n>>> hasattr(classifier, \"classes_\")\nTrue\n>>> hasattr(cloned_classifier, \"classes_\")\nFalse\n>>> classifier is cloned_classifier\nFalse"
          }
        },
        "returns": "different results from the original estimator. More details can be\n    found in :ref:`randomness`.\n\n    Examples\n    --------\n    >>> from sklearn.base import clone\n    >>> from sklearn.linear_model import LogisticRegression\n    >>> X = [[-1, 0], [0, 1], [0, -1], [1, 0]]\n    >>> y = [0, 0, 1, 1]\n    >>> classifier = LogisticRegression().fit(X, y)\n    >>> cloned_classifier = clone(classifier)\n    >>> hasattr(classifier, \"classes_\")\n    True\n    >>> hasattr(cloned_classifier, \"classes_\")\n    False\n    >>> classifier is cloned_classifier\n    False",
        "raises": "",
        "see_also": "",
        "notes": "-----\n    If the estimator's `random_state` parameter is an integer (or if the\n    estimator doesn't have a `random_state` parameter), an *exact clone* is\n    returned: the clone and the original estimator will give the exact same\n    results. Otherwise, *statistical clone* is returned: the clone might\n    return different results from the original estimator. More details can be\n    found in :ref:`randomness`.\n\n    Examples\n    --------\n    >>> from sklearn.base import clone\n    >>> from sklearn.linear_model import LogisticRegression\n    >>> X = [[-1, 0], [0, 1], [0, -1], [1, 0]]\n    >>> y = [0, 0, 1, 1]\n    >>> classifier = LogisticRegression().fit(X, y)\n    >>> cloned_classifier = clone(classifier)\n    >>> hasattr(classifier, \"classes_\")\n    True\n    >>> hasattr(cloned_classifier, \"classes_\")\n    False\n    >>> classifier is cloned_classifier\n    False",
        "examples": "--------\n    >>> from sklearn.base import clone\n    >>> from sklearn.linear_model import LogisticRegression\n    >>> X = [[-1, 0], [0, 1], [0, -1], [1, 0]]\n    >>> y = [0, 0, 1, 1]\n    >>> classifier = LogisticRegression().fit(X, y)\n    >>> cloned_classifier = clone(classifier)\n    >>> hasattr(classifier, \"classes_\")\n    True\n    >>> hasattr(cloned_classifier, \"classes_\")\n    False\n    >>> classifier is cloned_classifier\n    False"
      }
    },
    {
      "name": "config_context",
      "signature": "config_context(*, assume_finite=None, working_memory=None, print_changed_only=None, display=None, pairwise_dist_chunk_size=None, enable_cython_pairwise_dist=None, array_api_dispatch=None, transform_output=None, enable_metadata_routing=None, skip_parameter_validation=None)",
      "documentation": {
        "description": "Context manager for global scikit-learn configuration.\n\n    Parameters\n    ----------\n    assume_finite : bool, default=None\n        If True, validation for finiteness will be skipped,\n        saving time, but leading to potential crashes. If\n        False, validation for finiteness will be performed,\n        avoiding error. If None, the existing value won't change.\n        The default value is False.\n\n    working_memory : int, default=None\n        If set, scikit-learn will attempt to limit the size of temporary arrays\n        to this number of MiB (per job when parallelised), often saving both\n        computation time and memory on expensive operations that can be\n        performed in chunks. If None, the existing value won't change.\n        The default value is 1024.\n\n    print_changed_only : bool, default=None\n        If True, only the parameters that were set to non-default\n        values will be printed when printing an estimator. For example,\n        ``print(SVC())`` while True will only print 'SVC()', but would print\n        'SVC(C=1.0, cache_size=200, ...)' with all the non-changed parameters\n        when False. If None, the existing value won't change.\n        The default value is True.\n\n        .. versionchanged:: 0.23\n           Default changed from False to True.\n\n    display : {'text', 'diagram'}, default=None\n        If 'diagram', estimators will be displayed as a diagram in a Jupyter\n        lab or notebook context. If 'text', estimators will be displayed as\n        text. If None, the existing value won't change.\n        The default value is 'diagram'.\n\n        .. versionadded:: 0.23\n\n    pairwise_dist_chunk_size : int, default=None\n        The number of row vectors per chunk for the accelerated pairwise-\n        distances reduction backend. Default is 256 (suitable for most of\n        modern laptops' caches and architectures).\n\n        Intended for easier benchmarking and testing of scikit-learn internals.\n        End users are not expected to benefit from customizing this configuration\n        setting.\n\n        .. versionadded:: 1.1\n\n    enable_cython_pairwise_dist : bool, default=None\n        Use the accelerated pairwise-distances reduction backend when\n        possible. Global default: True.\n\n        Intended for easier benchmarking and testing of scikit-learn internals.\n        End users are not expected to benefit from customizing this configuration\n        setting.\n\n        .. versionadded:: 1.1\n\n    array_api_dispatch : bool, default=None\n        Use Array API dispatching when inputs follow the Array API standard.\n        Default is False.\n\n        See the :ref:`User Guide <array_api>` for more details.\n\n        .. versionadded:: 1.2\n\n    transform_output : str, default=None\n        Configure output of `transform` and `fit_transform`.\n\n        See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`\n        for an example on how to use the API.\n\n        - `\"default\"`: Default output format of a transformer\n        - `\"pandas\"`: DataFrame output\n        - `\"polars\"`: Polars output\n        - `None`: Transform configuration is unchanged\n\n        .. versionadded:: 1.2\n        .. versionadded:: 1.4\n            `\"polars\"` option was added.\n\n    enable_metadata_routing : bool, default=None\n        Enable metadata routing. By default this feature is disabled.\n\n        Refer to :ref:`metadata routing user guide <metadata_routing>` for more\n        details.\n\n        - `True`: Metadata routing is enabled\n        - `False`: Metadata routing is disabled, use the old syntax.\n        - `None`: Configuration is unchanged\n\n        .. versionadded:: 1.3\n\n    skip_parameter_validation : bool, default=None\n        If `True`, disable the validation of the hyper-parameters' types and values in\n        the fit method of estimators and for arguments passed to public helper\n        functions. It can save time in some situations but can lead to low level\n        crashes and exceptions with confusing error messages.\n\n        Note that for data parameters, such as `X` and `y`, only type validation is\n        skipped but validation with `check_array` will continue to run.\n\n        .. versionadded:: 1.3\n\n    Yields\n    ------\n    None.\n\n    See Also\n    --------\n    set_config : Set global scikit-learn configuration.\n    get_config : Retrieve current values of the global configuration.\n\n    Notes\n    -----\n    All settings, not just those presently modified, will be returned to\n    their previous values when the context manager is exited.",
        "parameters": {
          "assume_finite": {
            "type": "bool, default=None",
            "description": ""
          },
          "If": {
            "type": "`True`, disable the validation of the hyper-parameters' types and values in",
            "description": ""
          },
          "saving": {
            "type": "time, but leading to potential crashes. If",
            "description": "False, validation for finiteness will be performed,"
          },
          "avoiding": {
            "type": "error. If None, the existing value won't change.",
            "description": ""
          },
          "The": {
            "type": "number of row vectors per chunk for the accelerated pairwise-",
            "description": ""
          },
          "working_memory": {
            "type": "int, default=None",
            "description": ""
          },
          "to": {
            "type": "this number of MiB (per job when parallelised), often saving both",
            "description": ""
          },
          "computation": {
            "type": "time and memory on expensive operations that can be",
            "description": ""
          },
          "performed": {
            "type": "in chunks. If None, the existing value won't change.",
            "description": ""
          },
          "print_changed_only": {
            "type": "bool, default=None",
            "description": ""
          },
          "values": {
            "type": "will be printed when printing an estimator. For example,",
            "description": "``print(SVC())`` while True will only print 'SVC()', but would print\n'SVC(C=1.0, cache_size=200, ...)' with all the non-changed parameters"
          },
          "when": {
            "type": "False. If None, the existing value won't change.",
            "description": ""
          },
          "Default": {
            "type": "is False.",
            "description": ""
          },
          "display": {
            "type": "{'text', 'diagram'}, default=None",
            "description": ""
          },
          "lab": {
            "type": "or notebook context. If 'text', estimators will be displayed as",
            "description": "text. If None, the existing value won't change."
          },
          "pairwise_dist_chunk_size": {
            "type": "int, default=None",
            "description": ""
          },
          "distances": {
            "type": "reduction backend. Default is 256 (suitable for most of",
            "description": ""
          },
          "modern": {
            "type": "laptops' caches and architectures).",
            "description": ""
          },
          "Intended": {
            "type": "for easier benchmarking and testing of scikit-learn internals.",
            "description": ""
          },
          "End": {
            "type": "users are not expected to benefit from customizing this configuration",
            "description": "setting.\n.. versionadded:: 1.1"
          },
          "enable_cython_pairwise_dist": {
            "type": "bool, default=None",
            "description": ""
          },
          "Use": {
            "type": "Array API dispatching when inputs follow the Array API standard.",
            "description": ""
          },
          "array_api_dispatch": {
            "type": "bool, default=None",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "transform_output": {
            "type": "str, default=None",
            "description": ""
          },
          "Configure": {
            "type": "output of `transform` and `fit_transform`.",
            "description": ""
          },
          "for": {
            "type": "an example on how to use the API.",
            "description": "- `\"default\"`: Default output format of a transformer\n- `\"pandas\"`: DataFrame output\n- `\"polars\"`: Polars output\n- `None`: Transform configuration is unchanged\n.. versionadded:: 1.2\n.. versionadded:: 1.4\n`\"polars\"` option was added."
          },
          "enable_metadata_routing": {
            "type": "bool, default=None",
            "description": ""
          },
          "Enable": {
            "type": "metadata routing. By default this feature is disabled.",
            "description": ""
          },
          "Refer": {
            "type": "to :ref:`metadata routing user guide <metadata_routing>` for more",
            "description": "details.\n- `True`: Metadata routing is enabled\n- `False`: Metadata routing is disabled, use the old syntax.\n- `None`: Configuration is unchanged\n.. versionadded:: 1.3"
          },
          "skip_parameter_validation": {
            "type": "bool, default=None",
            "description": ""
          },
          "the": {
            "type": "fit method of estimators and for arguments passed to public helper",
            "description": "functions. It can save time in some situations but can lead to low level"
          },
          "crashes": {
            "type": "and exceptions with confusing error messages.",
            "description": ""
          },
          "Note": {
            "type": "that for data parameters, such as `X` and `y`, only type validation is",
            "description": ""
          },
          "skipped": {
            "type": "but validation with `check_array` will continue to run.",
            "description": ".. versionadded:: 1.3\nYields\n------\nNone."
          },
          "set_config": {
            "type": "Set global scikit",
            "description": "learn configuration."
          },
          "get_config": {
            "type": "Retrieve current values of the global configuration.",
            "description": "Notes\n-----"
          },
          "All": {
            "type": "settings, not just those presently modified, will be returned to",
            "description": ""
          },
          "their": {
            "type": "previous values when the context manager is exited.",
            "description": "Examples\n--------\n>>> import sklearn\n>>> from sklearn.utils.validation import assert_all_finite\n>>> with sklearn.config_context(assume_finite=True):\n...     assert_all_finite([float('nan')])\n>>> with sklearn.config_context(assume_finite=True):\n...     with sklearn.config_context(assume_finite=False):\n...         assert_all_finite([float('nan')])"
          },
          "Traceback": {
            "type": "most recent call last",
            "description": "..."
          },
          "ValueError": {
            "type": "Input contains NaN...",
            "description": ""
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    set_config : Set global scikit-learn configuration.\n    get_config : Retrieve current values of the global configuration.\n\n    Notes\n    -----\n    All settings, not just those presently modified, will be returned to\n    their previous values when the context manager is exited.\n\n    Examples\n    --------\n    >>> import sklearn\n    >>> from sklearn.utils.validation import assert_all_finite\n    >>> with sklearn.config_context(assume_finite=True):\n    ...     assert_all_finite([float('nan')])\n    >>> with sklearn.config_context(assume_finite=True):\n    ...     with sklearn.config_context(assume_finite=False):\n    ...         assert_all_finite([float('nan')])\n    Traceback (most recent call last):\n    ...\n    ValueError: Input contains NaN...",
        "notes": "that for data parameters, such as `X` and `y`, only type validation is\n        skipped but validation with `check_array` will continue to run.\n\n        .. versionadded:: 1.3\n\n    Yields\n    ------\n    None.\n\n    See Also\n    --------\n    set_config : Set global scikit-learn configuration.\n    get_config : Retrieve current values of the global configuration.\n\n    Notes\n    -----\n    All settings, not just those presently modified, will be returned to\n    their previous values when the context manager is exited.\n\n    Examples\n    --------\n    >>> import sklearn\n    >>> from sklearn.utils.validation import assert_all_finite\n    >>> with sklearn.config_context(assume_finite=True):\n    ...     assert_all_finite([float('nan')])\n    >>> with sklearn.config_context(assume_finite=True):\n    ...     with sklearn.config_context(assume_finite=False):\n    ...         assert_all_finite([float('nan')])\n    Traceback (most recent call last):\n    ...\n    ValueError: Input contains NaN...",
        "examples": "--------\n    >>> import sklearn\n    >>> from sklearn.utils.validation import assert_all_finite\n    >>> with sklearn.config_context(assume_finite=True):\n    ...     assert_all_finite([float('nan')])\n    >>> with sklearn.config_context(assume_finite=True):\n    ...     with sklearn.config_context(assume_finite=False):\n    ...         assert_all_finite([float('nan')])\n    Traceback (most recent call last):\n    ...\n    ValueError: Input contains NaN..."
      }
    },
    {
      "name": "get_config",
      "signature": "get_config()",
      "documentation": {
        "description": "Retrieve current values for configuration set by :func:`set_config`.\n\n    Returns\n    -------\n    config : dict\n        Keys are parameter names that can be passed to :func:`set_config`.\n\n    See Also\n    --------\n    config_context : Context manager for global scikit-learn configuration.\n    set_config : Set global scikit-learn configuration.",
        "parameters": {},
        "returns": "-------\n    config : dict\n        Keys are parameter names that can be passed to :func:`set_config`.\n\n    See Also\n    --------\n    config_context : Context manager for global scikit-learn configuration.\n    set_config : Set global scikit-learn configuration.\n\n    Examples\n    --------\n    >>> import sklearn\n    >>> config = sklearn.get_config()\n    >>> config.keys()\n    dict_keys([...])",
        "raises": "",
        "see_also": "--------\n    config_context : Context manager for global scikit-learn configuration.\n    set_config : Set global scikit-learn configuration.\n\n    Examples\n    --------\n    >>> import sklearn\n    >>> config = sklearn.get_config()\n    >>> config.keys()\n    dict_keys([...])",
        "notes": "",
        "examples": "--------\n    >>> import sklearn\n    >>> config = sklearn.get_config()\n    >>> config.keys()\n    dict_keys([...])"
      }
    },
    {
      "name": "set_config",
      "signature": "set_config(assume_finite=None, working_memory=None, print_changed_only=None, display=None, pairwise_dist_chunk_size=None, enable_cython_pairwise_dist=None, array_api_dispatch=None, transform_output=None, enable_metadata_routing=None, skip_parameter_validation=None)",
      "documentation": {
        "description": "Set global scikit-learn configuration.\n\n    .. versionadded:: 0.19\n\n    Parameters\n    ----------\n    assume_finite : bool, default=None\n        If True, validation for finiteness will be skipped,\n        saving time, but leading to potential crashes. If\n        False, validation for finiteness will be performed,\n        avoiding error.  Global default: False.\n\n        .. versionadded:: 0.19\n\n    working_memory : int, default=None\n        If set, scikit-learn will attempt to limit the size of temporary arrays\n        to this number of MiB (per job when parallelised), often saving both\n        computation time and memory on expensive operations that can be\n        performed in chunks. Global default: 1024.\n\n        .. versionadded:: 0.20\n\n    print_changed_only : bool, default=None\n        If True, only the parameters that were set to non-default\n        values will be printed when printing an estimator. For example,\n        ``print(SVC())`` while True will only print 'SVC()' while the default\n        behaviour would be to print 'SVC(C=1.0, cache_size=200, ...)' with\n        all the non-changed parameters.\n\n        .. versionadded:: 0.21\n\n    display : {'text', 'diagram'}, default=None\n        If 'diagram', estimators will be displayed as a diagram in a Jupyter\n        lab or notebook context. If 'text', estimators will be displayed as\n        text. Default is 'diagram'.\n\n        .. versionadded:: 0.23\n\n    pairwise_dist_chunk_size : int, default=None\n        The number of row vectors per chunk for the accelerated pairwise-\n        distances reduction backend. Default is 256 (suitable for most of\n        modern laptops' caches and architectures).\n\n        Intended for easier benchmarking and testing of scikit-learn internals.\n        End users are not expected to benefit from customizing this configuration\n        setting.\n\n        .. versionadded:: 1.1\n\n    enable_cython_pairwise_dist : bool, default=None\n        Use the accelerated pairwise-distances reduction backend when\n        possible. Global default: True.\n\n        Intended for easier benchmarking and testing of scikit-learn internals.\n        End users are not expected to benefit from customizing this configuration\n        setting.\n\n        .. versionadded:: 1.1\n\n    array_api_dispatch : bool, default=None\n        Use Array API dispatching when inputs follow the Array API standard.\n        Default is False.\n\n        See the :ref:`User Guide <array_api>` for more details.\n\n        .. versionadded:: 1.2\n\n    transform_output : str, default=None\n        Configure output of `transform` and `fit_transform`.\n\n        See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`\n        for an example on how to use the API.\n\n        - `\"default\"`: Default output format of a transformer\n        - `\"pandas\"`: DataFrame output\n        - `\"polars\"`: Polars output\n        - `None`: Transform configuration is unchanged\n\n        .. versionadded:: 1.2\n        .. versionadded:: 1.4\n            `\"polars\"` option was added.\n\n    enable_metadata_routing : bool, default=None\n        Enable metadata routing. By default this feature is disabled.\n\n        Refer to :ref:`metadata routing user guide <metadata_routing>` for more\n        details.\n\n        - `True`: Metadata routing is enabled\n        - `False`: Metadata routing is disabled, use the old syntax.\n        - `None`: Configuration is unchanged\n\n        .. versionadded:: 1.3\n\n    skip_parameter_validation : bool, default=None\n        If `True`, disable the validation of the hyper-parameters' types and values in\n        the fit method of estimators and for arguments passed to public helper\n        functions. It can save time in some situations but can lead to low level\n        crashes and exceptions with confusing error messages.\n\n        Note that for data parameters, such as `X` and `y`, only type validation is\n        skipped but validation with `check_array` will continue to run.\n\n        .. versionadded:: 1.3\n\n    See Also\n    --------\n    config_context : Context manager for global scikit-learn configuration.\n    get_config : Retrieve current values of the global configuration.",
        "parameters": {
          "assume_finite": {
            "type": "bool, default=None",
            "description": ""
          },
          "If": {
            "type": "`True`, disable the validation of the hyper-parameters' types and values in",
            "description": ""
          },
          "saving": {
            "type": "time, but leading to potential crashes. If",
            "description": "False, validation for finiteness will be performed,"
          },
          "avoiding": {
            "type": "error.  Global default: False.",
            "description": ".. versionadded:: 0.19"
          },
          "working_memory": {
            "type": "int, default=None",
            "description": ""
          },
          "to": {
            "type": "this number of MiB (per job when parallelised), often saving both",
            "description": ""
          },
          "computation": {
            "type": "time and memory on expensive operations that can be",
            "description": ""
          },
          "performed": {
            "type": "in chunks. Global default: 1024.",
            "description": ".. versionadded:: 0.20"
          },
          "print_changed_only": {
            "type": "bool, default=None",
            "description": ""
          },
          "values": {
            "type": "will be printed when printing an estimator. For example,",
            "description": "``print(SVC())`` while True will only print 'SVC()' while the default"
          },
          "behaviour": {
            "type": "would be to print 'SVC(C=1.0, cache_size=200, ...)' with",
            "description": ""
          },
          "all": {
            "type": "the non-changed parameters.",
            "description": ".. versionadded:: 0.21"
          },
          "display": {
            "type": "{'text', 'diagram'}, default=None",
            "description": ""
          },
          "lab": {
            "type": "or notebook context. If 'text', estimators will be displayed as",
            "description": "text. Default is 'diagram'.\n.. versionadded:: 0.23"
          },
          "pairwise_dist_chunk_size": {
            "type": "int, default=None",
            "description": ""
          },
          "The": {
            "type": "number of row vectors per chunk for the accelerated pairwise-",
            "description": ""
          },
          "distances": {
            "type": "reduction backend. Default is 256 (suitable for most of",
            "description": ""
          },
          "modern": {
            "type": "laptops' caches and architectures).",
            "description": ""
          },
          "Intended": {
            "type": "for easier benchmarking and testing of scikit-learn internals.",
            "description": ""
          },
          "End": {
            "type": "users are not expected to benefit from customizing this configuration",
            "description": "setting.\n.. versionadded:: 1.1"
          },
          "enable_cython_pairwise_dist": {
            "type": "bool, default=None",
            "description": ""
          },
          "Use": {
            "type": "Array API dispatching when inputs follow the Array API standard.",
            "description": ""
          },
          "array_api_dispatch": {
            "type": "bool, default=None",
            "description": ""
          },
          "Default": {
            "type": "is False.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "transform_output": {
            "type": "str, default=None",
            "description": ""
          },
          "Configure": {
            "type": "output of `transform` and `fit_transform`.",
            "description": ""
          },
          "for": {
            "type": "an example on how to use the API.",
            "description": "- `\"default\"`: Default output format of a transformer\n- `\"pandas\"`: DataFrame output\n- `\"polars\"`: Polars output\n- `None`: Transform configuration is unchanged\n.. versionadded:: 1.2\n.. versionadded:: 1.4\n`\"polars\"` option was added."
          },
          "enable_metadata_routing": {
            "type": "bool, default=None",
            "description": ""
          },
          "Enable": {
            "type": "metadata routing. By default this feature is disabled.",
            "description": ""
          },
          "Refer": {
            "type": "to :ref:`metadata routing user guide <metadata_routing>` for more",
            "description": "details.\n- `True`: Metadata routing is enabled\n- `False`: Metadata routing is disabled, use the old syntax.\n- `None`: Configuration is unchanged\n.. versionadded:: 1.3"
          },
          "skip_parameter_validation": {
            "type": "bool, default=None",
            "description": ""
          },
          "the": {
            "type": "fit method of estimators and for arguments passed to public helper",
            "description": "functions. It can save time in some situations but can lead to low level"
          },
          "crashes": {
            "type": "and exceptions with confusing error messages.",
            "description": ""
          },
          "Note": {
            "type": "that for data parameters, such as `X` and `y`, only type validation is",
            "description": ""
          },
          "skipped": {
            "type": "but validation with `check_array` will continue to run.",
            "description": ".. versionadded:: 1.3"
          },
          "config_context": {
            "type": "Context manager for global scikit",
            "description": "learn configuration."
          },
          "get_config": {
            "type": "Retrieve current values of the global configuration.",
            "description": "Examples\n--------\n>>> from sklearn import set_config\n>>> set_config(display='diagram')  # doctest: +SKIP"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    config_context : Context manager for global scikit-learn configuration.\n    get_config : Retrieve current values of the global configuration.\n\n    Examples\n    --------\n    >>> from sklearn import set_config\n    >>> set_config(display='diagram')  # doctest: +SKIP",
        "notes": "that for data parameters, such as `X` and `y`, only type validation is\n        skipped but validation with `check_array` will continue to run.\n\n        .. versionadded:: 1.3\n\n    See Also\n    --------\n    config_context : Context manager for global scikit-learn configuration.\n    get_config : Retrieve current values of the global configuration.\n\n    Examples\n    --------\n    >>> from sklearn import set_config\n    >>> set_config(display='diagram')  # doctest: +SKIP",
        "examples": "--------\n    >>> from sklearn import set_config\n    >>> set_config(display='diagram')  # doctest: +SKIP"
      }
    },
    {
      "name": "show_versions",
      "signature": "show_versions()",
      "documentation": {
        "description": "Print useful debugging information\"\n\n    .. versionadded:: 0.20",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn import show_versions\n    >>> show_versions()  # doctest: +SKIP"
      }
    }
  ],
  "classes": []
}