{
  "description": "Models based on neural networks.",
  "functions": [],
  "classes": [
    {
      "name": "BernoulliRBM",
      "documentation": {
        "description": "Bernoulli Restricted Boltzmann Machine (RBM).\n\n    A Restricted Boltzmann Machine with binary visible units and\n    binary hidden units. Parameters are estimated using Stochastic Maximum\n    Likelihood (SML), also known as Persistent Contrastive Divergence (PCD)\n    [2].\n\n    The time complexity of this implementation is ``O(d ** 2)`` assuming\n    d ~ n_features ~ n_components.\n\n    Read more in the :ref:`User Guide <rbm>`.\n\n    Parameters\n    ----------\n    n_components : int, default=256\n        Number of binary hidden units.\n\n    learning_rate : float, default=0.1\n        The learning rate for weight updates. It is *highly* recommended\n        to tune this hyper-parameter. Reasonable values are in the\n        10**[0., -3.] range.\n\n    batch_size : int, default=10\n        Number of examples per minibatch.\n\n    n_iter : int, default=10\n        Number of iterations/sweeps over the training dataset to perform\n        during training.\n\n    verbose : int, default=0\n        The verbosity level. The default, zero, means silent mode. Range\n        of values is [0, inf].\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for:\n\n        - Gibbs sampling from visible and hidden layers.\n\n        - Initializing components, sampling from layers during fit.\n\n        - Corrupting the data when scoring samples.\n\n        Pass an int for reproducible results across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Attributes\n    ----------\n    intercept_hidden_ : array-like of shape (n_components,)\n        Biases of the hidden units.\n\n    intercept_visible_ : array-like of shape (n_features,)\n        Biases of the visible units.\n\n    components_ : array-like of shape (n_components, n_features)\n        Weight matrix, where `n_features` is the number of\n        visible units and `n_components` is the number of hidden units.\n\n    h_samples_ : array-like of shape (batch_size, n_components)\n        Hidden Activation sampled from the model distribution,\n        where `batch_size` is the number of examples per minibatch and\n        `n_components` is the number of hidden units.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    See Also\n    --------\n    sklearn.neural_network.MLPRegressor : Multi-layer Perceptron regressor.\n    sklearn.neural_network.MLPClassifier : Multi-layer Perceptron classifier.\n    sklearn.decomposition.PCA : An unsupervised linear dimensionality\n        reduction model.\n\n    References\n    ----------\n\n    [1] Hinton, G. E., Osindero, S. and Teh, Y. A fast learning algorithm for\n        deep belief nets. Neural Computation 18, pp 1527-1554.\n        https://www.cs.toronto.edu/~hinton/absps/fastnc.pdf\n\n    [2] Tieleman, T. Training Restricted Boltzmann Machines using\n        Approximations to the Likelihood Gradient. International Conference\n        on Machine Learning (ICML) 2008",
        "parameters": {
          "n_components": {
            "type": "int, default=256",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`.",
            "description": ".. versionadded:: 0.24"
          },
          "learning_rate": {
            "type": "float, default=0.1",
            "description": ""
          },
          "The": {
            "type": "verbosity level. The default, zero, means silent mode. Range",
            "description": ""
          },
          "to": {
            "type": "tune this hyper-parameter. Reasonable values are in the",
            "description": "10**[0., -3.] range."
          },
          "batch_size": {
            "type": "int, default=10",
            "description": ""
          },
          "n_iter": {
            "type": "int, default=10",
            "description": ""
          },
          "during": {
            "type": "training.",
            "description": ""
          },
          "verbose": {
            "type": "int, default=0",
            "description": ""
          },
          "of": {
            "type": "values is [0, inf].",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for:",
            "description": "- Gibbs sampling from visible and hidden layers.\n- Initializing components, sampling from layers during fit.\n- Corrupting the data when scoring samples."
          },
          "Pass": {
            "type": "an int for reproducible results across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------\nsklearn.neural_network.MLPRegressor : Multi-layer Perceptron regressor.\nsklearn.neural_network.MLPClassifier : Multi-layer Perceptron classifier.\nsklearn.decomposition.PCA : An unsupervised linear dimensionality"
          },
          "intercept_hidden_": {
            "type": "array",
            "description": "like of shape (n_components,)"
          },
          "Biases": {
            "type": "of the visible units.",
            "description": ""
          },
          "intercept_visible_": {
            "type": "array",
            "description": "like of shape (n_features,)"
          },
          "components_": {
            "type": "array",
            "description": "like of shape (n_components, n_features)"
          },
          "Weight": {
            "type": "matrix, where `n_features` is the number of",
            "description": ""
          },
          "visible": {
            "type": "units and `n_components` is the number of hidden units.",
            "description": ""
          },
          "h_samples_": {
            "type": "array",
            "description": "like of shape (batch_size, n_components)"
          },
          "Hidden": {
            "type": "Activation sampled from the model distribution,",
            "description": ""
          },
          "where": {
            "type": "`batch_size` is the number of examples per minibatch and",
            "description": "`n_components` is the number of hidden units."
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "reduction": {
            "type": "model.",
            "description": "References\n----------\n[1] Hinton, G. E., Osindero, S. and Teh, Y. A fast learning algorithm for"
          },
          "deep": {
            "type": "belief nets. Neural Computation 18, pp 1527-1554.",
            "description": ""
          },
          "https": {
            "type": "//www.cs.toronto.edu/~hinton/absps/fastnc.pdf",
            "description": "[2] Tieleman, T. Training Restricted Boltzmann Machines using"
          },
          "Approximations": {
            "type": "to the Likelihood Gradient. International Conference",
            "description": ""
          },
          "on": {
            "type": "Machine Learning (ICML) 2008",
            "description": "Examples\n--------\n>>> import numpy as np\n>>> from sklearn.neural_network import BernoulliRBM\n>>> X = np.array([[0, 0, 0], [0, 1, 1], [1, 0, 1], [1, 1, 1]])\n>>> model = BernoulliRBM(n_components=2)\n>>> model.fit(X)"
          },
          "BernoulliRBM": {
            "type": "n_components=2",
            "description": ""
          },
          "For": {
            "type": "a more detailed example usage, see",
            "description": ":ref:`sphx_glr_auto_examples_neural_networks_plot_rbm_logistic_classification.py`."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    sklearn.neural_network.MLPRegressor : Multi-layer Perceptron regressor.\n    sklearn.neural_network.MLPClassifier : Multi-layer Perceptron classifier.\n    sklearn.decomposition.PCA : An unsupervised linear dimensionality\n        reduction model.\n\n    References\n    ----------\n\n    [1] Hinton, G. E., Osindero, S. and Teh, Y. A fast learning algorithm for\n        deep belief nets. Neural Computation 18, pp 1527-1554.\n        https://www.cs.toronto.edu/~hinton/absps/fastnc.pdf\n\n    [2] Tieleman, T. Training Restricted Boltzmann Machines using\n        Approximations to the Likelihood Gradient. International Conference\n        on Machine Learning (ICML) 2008\n\n    Examples\n    --------\n\n    >>> import numpy as np\n    >>> from sklearn.neural_network import BernoulliRBM\n    >>> X = np.array([[0, 0, 0], [0, 1, 1], [1, 0, 1], [1, 1, 1]])\n    >>> model = BernoulliRBM(n_components=2)\n    >>> model.fit(X)\n    BernoulliRBM(n_components=2)\n\n    For a more detailed example usage, see\n    :ref:`sphx_glr_auto_examples_neural_networks_plot_rbm_logistic_classification.py`.",
        "notes": "",
        "examples": "--------\n\n    >>> import numpy as np\n    >>> from sklearn.neural_network import BernoulliRBM\n    >>> X = np.array([[0, 0, 0], [0, 1, 1], [1, 0, 1], [1, 1, 1]])\n    >>> model = BernoulliRBM(n_components=2)\n    >>> model.fit(X)\n    BernoulliRBM(n_components=2)\n\n    For a more detailed example usage, see\n    :ref:`sphx_glr_auto_examples_neural_networks_plot_rbm_logistic_classification.py`."
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y=None)",
          "documentation": {
            "description": "Fit the model to the data X.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            Training data.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None\n            Target values (None for unsupervised transformations).",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "Training": {
                "type": "data.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs), default=None"
              },
              "Target": {
                "type": "values (None for unsupervised transformations).",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "BernoulliRBM",
                "description": ""
              },
              "The": {
                "type": "fitted model.",
                "description": ""
              }
            },
            "returns": "-------\n        self : BernoulliRBM\n            The fitted model.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit_transform",
          "signature": "fit_transform(self, X, y=None, **fit_params)",
          "documentation": {
            "description": "Fit to data, then transform it.\n\n        Fits transformer to `X` and `y` with optional parameters `fit_params`\n        and returns a transformed version of `X`.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Input samples.\n\n        y :  array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None\n            Target values (None for unsupervised transformations).\n\n        **fit_params : dict\n            Additional fit parameters.",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Input": {
                "type": "samples.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs),                 default=None"
              },
              "Target": {
                "type": "values (None for unsupervised transformations).",
                "description": "**fit_params : dict"
              },
              "Additional": {
                "type": "fit parameters.",
                "description": "Returns\n-------"
              },
              "X_new": {
                "type": "ndarray array of shape (n_samples, n_features_new)",
                "description": ""
              },
              "Transformed": {
                "type": "array.",
                "description": ""
              }
            },
            "returns": "-------\n        X_new : ndarray array of shape (n_samples, n_features_new)\n            Transformed array.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_feature_names_out",
          "signature": "get_feature_names_out(self, input_features=None)",
          "documentation": {
            "description": "Get output feature names for transformation.\n\n        The feature names out will prefixed by the lowercased class name. For\n        example, if the transformer outputs 3 features, then the feature names\n        out are: `[\"class_name0\", \"class_name1\", \"class_name2\"]`.\n\n        Parameters\n        ----------\n        input_features : array-like of str or None, default=None\n            Only used to validate feature names with the names seen in `fit`.",
            "parameters": {
              "input_features": {
                "type": "array",
                "description": "like of str or None, default=None"
              },
              "Only": {
                "type": "used to validate feature names with the names seen in `fit`.",
                "description": "Returns\n-------"
              },
              "feature_names_out": {
                "type": "ndarray of str objects",
                "description": ""
              },
              "Transformed": {
                "type": "feature names.",
                "description": ""
              }
            },
            "returns": "-------\n        feature_names_out : ndarray of str objects\n            Transformed feature names.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRequest\n            A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "gibbs",
          "signature": "gibbs(self, v)",
          "documentation": {
            "description": "Perform one Gibbs sampling step.\n\n        Parameters\n        ----------\n        v : ndarray of shape (n_samples, n_features)\n            Values of the visible layer to start from.",
            "parameters": {
              "v": {
                "type": "ndarray of shape (n_samples, n_features)",
                "description": ""
              },
              "Values": {
                "type": "of the visible layer after one Gibbs step.",
                "description": ""
              },
              "v_new": {
                "type": "ndarray of shape (n_samples, n_features)",
                "description": ""
              }
            },
            "returns": "-------\n        v_new : ndarray of shape (n_samples, n_features)\n            Values of the visible layer after one Gibbs step.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "partial_fit",
          "signature": "partial_fit(self, X, y=None)",
          "documentation": {
            "description": "Fit the model to the partial segment of the data X.\n\n        Parameters\n        ----------\n        X : ndarray of shape (n_samples, n_features)\n            Training data.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None\n            Target values (None for unsupervised transformations).",
            "parameters": {
              "X": {
                "type": "ndarray of shape (n_samples, n_features)",
                "description": ""
              },
              "Training": {
                "type": "data.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs), default=None"
              },
              "Target": {
                "type": "values (None for unsupervised transformations).",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "BernoulliRBM",
                "description": ""
              },
              "The": {
                "type": "fitted model.",
                "description": ""
              }
            },
            "returns": "-------\n        self : BernoulliRBM\n            The fitted model.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score_samples",
          "signature": "score_samples(self, X)",
          "documentation": {
            "description": "Compute the pseudo-likelihood of X.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            Values of the visible layer. Must be all-boolean (not checked).\n\n        Returns\n        -------\n        pseudo_likelihood : ndarray of shape (n_samples,)\n            Value of the pseudo-likelihood (proxy for likelihood).",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "Values": {
                "type": "of the visible layer. Must be all-boolean (not checked).",
                "description": "Returns\n-------"
              },
              "pseudo_likelihood": {
                "type": "ndarray of shape (n_samples,)",
                "description": ""
              },
              "Value": {
                "type": "of the pseudo-likelihood (proxy for likelihood).",
                "description": "Notes\n-----"
              },
              "This": {
                "type": "method is not deterministic: it computes a quantity called the",
                "description": ""
              },
              "free": {
                "type": "energy on X, then on a randomly corrupted version of X, and",
                "description": ""
              },
              "returns": {
                "type": "the log of the logistic function of the difference.",
                "description": ""
              }
            },
            "returns": "-------\n        pseudo_likelihood : ndarray of shape (n_samples,)\n            Value of the pseudo-likelihood (proxy for likelihood).\n\n        Notes\n        -----\n        This method is not deterministic: it computes a quantity called the\n        free energy on X, then on a randomly corrupted version of X, and",
            "raises": "",
            "see_also": "",
            "notes": "-----\n        This method is not deterministic: it computes a quantity called the\n        free energy on X, then on a randomly corrupted version of X, and\n        returns the log of the logistic function of the difference.",
            "examples": ""
          }
        },
        {
          "name": "set_output",
          "signature": "set_output(self, *, transform=None)",
          "documentation": {
            "description": "Set output container.\n\n        See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`\n        for an example on how to use the API.\n\n        Parameters\n        ----------\n        transform : {\"default\", \"pandas\", \"polars\"}, default=None\n            Configure output of `transform` and `fit_transform`.\n\n            - `\"default\"`: Default output format of a transformer\n            - `\"pandas\"`: DataFrame output\n            - `\"polars\"`: Polars output\n            - `None`: Transform configuration is unchanged\n\n            .. versionadded:: 1.4\n                `\"polars\"` option was added.",
            "parameters": {
              "transform": {
                "type": "{\"default\", \"pandas\", \"polars\"}, default=None",
                "description": ""
              },
              "Configure": {
                "type": "output of `transform` and `fit_transform`.",
                "description": "- `\"default\"`: Default output format of a transformer\n- `\"pandas\"`: DataFrame output\n- `\"polars\"`: Polars output\n- `None`: Transform configuration is unchanged\n.. versionadded:: 1.4\n`\"polars\"` option was added.\nReturns\n-------"
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "Estimator": {
                "type": "instance.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "transform",
          "signature": "transform(self, X)",
          "documentation": {
            "description": "Compute the hidden layer activation probabilities, P(h=1|v=X).\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The data to be transformed.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "data to be transformed.",
                "description": "Returns\n-------"
              },
              "h": {
                "type": "ndarray of shape (n_samples, n_components)",
                "description": ""
              },
              "Latent": {
                "type": "representations of the data.",
                "description": ""
              }
            },
            "returns": "-------\n        h : ndarray of shape (n_samples, n_components)\n            Latent representations of the data.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "MLPClassifier",
      "documentation": {
        "description": "Multi-layer Perceptron classifier.\n\n    This model optimizes the log-loss function using LBFGS or stochastic\n    gradient descent.\n\n    .. versionadded:: 0.18\n\n    Parameters\n    ----------\n    hidden_layer_sizes : array-like of shape(n_layers - 2,), default=(100,)\n        The ith element represents the number of neurons in the ith\n        hidden layer.\n\n    activation : {'identity', 'logistic', 'tanh', 'relu'}, default='relu'\n        Activation function for the hidden layer.\n\n        - 'identity', no-op activation, useful to implement linear bottleneck,\n          returns f(x) = x\n\n        - 'logistic', the logistic sigmoid function,\n          returns f(x) = 1 / (1 + exp(-x)).\n\n        - 'tanh', the hyperbolic tan function,\n          returns f(x) = tanh(x).\n\n        - 'relu', the rectified linear unit function,\n          returns f(x) = max(0, x)\n\n    solver : {'lbfgs', 'sgd', 'adam'}, default='adam'\n        The solver for weight optimization.\n\n        - 'lbfgs' is an optimizer in the family of quasi-Newton methods.\n\n        - 'sgd' refers to stochastic gradient descent.\n\n        - 'adam' refers to a stochastic gradient-based optimizer proposed\n          by Kingma, Diederik, and Jimmy Ba\n\n        For a comparison between Adam optimizer and SGD, see\n        :ref:`sphx_glr_auto_examples_neural_networks_plot_mlp_training_curves.py`.\n\n        Note: The default solver 'adam' works pretty well on relatively\n        large datasets (with thousands of training samples or more) in terms of\n        both training time and validation score.\n        For small datasets, however, 'lbfgs' can converge faster and perform\n        better.\n\n    alpha : float, default=0.0001\n        Strength of the L2 regularization term. The L2 regularization term\n        is divided by the sample size when added to the loss.\n\n        For an example usage and visualization of varying regularization, see\n        :ref:`sphx_glr_auto_examples_neural_networks_plot_mlp_alpha.py`.\n\n    batch_size : int, default='auto'\n        Size of minibatches for stochastic optimizers.\n        If the solver is 'lbfgs', the classifier will not use minibatch.\n        When set to \"auto\", `batch_size=min(200, n_samples)`.\n\n    learning_rate : {'constant', 'invscaling', 'adaptive'}, default='constant'\n        Learning rate schedule for weight updates.\n\n        - 'constant' is a constant learning rate given by\n          'learning_rate_init'.\n\n        - 'invscaling' gradually decreases the learning rate at each\n          time step 't' using an inverse scaling exponent of 'power_t'.\n          effective_learning_rate = learning_rate_init / pow(t, power_t)\n\n        - 'adaptive' keeps the learning rate constant to\n          'learning_rate_init' as long as training loss keeps decreasing.\n          Each time two consecutive epochs fail to decrease training loss by at\n          least tol, or fail to increase validation score by at least tol if\n          'early_stopping' is on, the current learning rate is divided by 5.\n\n        Only used when ``solver='sgd'``.\n\n    learning_rate_init : float, default=0.001\n        The initial learning rate used. It controls the step-size\n        in updating the weights. Only used when solver='sgd' or 'adam'.\n\n    power_t : float, default=0.5\n        The exponent for inverse scaling learning rate.\n        It is used in updating effective learning rate when the learning_rate\n        is set to 'invscaling'. Only used when solver='sgd'.\n\n    max_iter : int, default=200\n        Maximum number of iterations. The solver iterates until convergence\n        (determined by 'tol') or this number of iterations. For stochastic\n        solvers ('sgd', 'adam'), note that this determines the number of epochs\n        (how many times each data point will be used), not the number of\n        gradient steps.\n\n    shuffle : bool, default=True\n        Whether to shuffle samples in each iteration. Only used when\n        solver='sgd' or 'adam'.\n\n    random_state : int, RandomState instance, default=None\n        Determines random number generation for weights and bias\n        initialization, train-test split if early stopping is used, and batch\n        sampling when solver='sgd' or 'adam'.\n        Pass an int for reproducible results across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    tol : float, default=1e-4\n        Tolerance for the optimization. When the loss or score is not improving\n        by at least ``tol`` for ``n_iter_no_change`` consecutive iterations,\n        unless ``learning_rate`` is set to 'adaptive', convergence is\n        considered to be reached and training stops.\n\n    verbose : bool, default=False\n        Whether to print progress messages to stdout.\n\n    warm_start : bool, default=False\n        When set to True, reuse the solution of the previous\n        call to fit as initialization, otherwise, just erase the\n        previous solution. See :term:`the Glossary <warm_start>`.\n\n    momentum : float, default=0.9\n        Momentum for gradient descent update. Should be between 0 and 1. Only\n        used when solver='sgd'.\n\n    nesterovs_momentum : bool, default=True\n        Whether to use Nesterov's momentum. Only used when solver='sgd' and\n        momentum > 0.\n\n    early_stopping : bool, default=False\n        Whether to use early stopping to terminate training when validation\n        score is not improving. If set to true, it will automatically set\n        aside 10% of training data as validation and terminate training when\n        validation score is not improving by at least ``tol`` for\n        ``n_iter_no_change`` consecutive epochs. The split is stratified,\n        except in a multilabel setting.\n        If early stopping is False, then the training stops when the training\n        loss does not improve by more than tol for n_iter_no_change consecutive\n        passes over the training set.\n        Only effective when solver='sgd' or 'adam'.\n\n    validation_fraction : float, default=0.1\n        The proportion of training data to set aside as validation set for\n        early stopping. Must be between 0 and 1.\n        Only used if early_stopping is True.\n\n    beta_1 : float, default=0.9\n        Exponential decay rate for estimates of first moment vector in adam,\n        should be in [0, 1). Only used when solver='adam'.\n\n    beta_2 : float, default=0.999\n        Exponential decay rate for estimates of second moment vector in adam,\n        should be in [0, 1). Only used when solver='adam'.\n\n    epsilon : float, default=1e-8\n        Value for numerical stability in adam. Only used when solver='adam'.\n\n    n_iter_no_change : int, default=10\n        Maximum number of epochs to not meet ``tol`` improvement.\n        Only effective when solver='sgd' or 'adam'.\n\n        .. versionadded:: 0.20\n\n    max_fun : int, default=15000\n        Only used when solver='lbfgs'. Maximum number of loss function calls.\n        The solver iterates until convergence (determined by 'tol'), number\n        of iterations reaches max_iter, or this number of loss function calls.\n        Note that number of loss function calls will be greater than or equal\n        to the number of iterations for the `MLPClassifier`.\n\n        .. versionadded:: 0.22\n\n    Attributes\n    ----------\n    classes_ : ndarray or list of ndarray of shape (n_classes,)\n        Class labels for each output.\n\n    loss_ : float\n        The current loss computed with the loss function.\n\n    best_loss_ : float or None\n        The minimum loss reached by the solver throughout fitting.\n        If `early_stopping=True`, this attribute is set to `None`. Refer to\n        the `best_validation_score_` fitted attribute instead.\n\n    loss_curve_ : list of shape (`n_iter_`,)\n        The ith element in the list represents the loss at the ith iteration.\n\n    validation_scores_ : list of shape (`n_iter_`,) or None\n        The score at each iteration on a held-out validation set. The score\n        reported is the accuracy score. Only available if `early_stopping=True`,\n        otherwise the attribute is set to `None`.\n\n    best_validation_score_ : float or None\n        The best validation score (i.e. accuracy score) that triggered the\n        early stopping. Only available if `early_stopping=True`, otherwise the\n        attribute is set to `None`.\n\n    t_ : int\n        The number of training samples seen by the solver during fitting.\n\n    coefs_ : list of shape (n_layers - 1,)\n        The ith element in the list represents the weight matrix corresponding\n        to layer i.\n\n    intercepts_ : list of shape (n_layers - 1,)\n        The ith element in the list represents the bias vector corresponding to\n        layer i + 1.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_iter_ : int\n        The number of iterations the solver has run.\n\n    n_layers_ : int\n        Number of layers.\n\n    n_outputs_ : int\n        Number of outputs.\n\n    out_activation_ : str\n        Name of the output activation function.\n\n    See Also\n    --------\n    MLPRegressor : Multi-layer Perceptron regressor.\n    BernoulliRBM : Bernoulli Restricted Boltzmann Machine (RBM).\n\n    Notes\n    -----\n    MLPClassifier trains iteratively since at each time step\n    the partial derivatives of the loss function with respect to the model\n    parameters are computed to update the parameters.\n\n    It can also have a regularization term added to the loss function\n    that shrinks model parameters to prevent overfitting.\n\n    This implementation works with data represented as dense numpy arrays or\n    sparse scipy arrays of floating point values.\n\n    References\n    ----------\n    Hinton, Geoffrey E. \"Connectionist learning procedures.\"\n    Artificial intelligence 40.1 (1989): 185-234.\n\n    Glorot, Xavier, and Yoshua Bengio.\n    \"Understanding the difficulty of training deep feedforward neural networks.\"\n    International Conference on Artificial Intelligence and Statistics. 2010.\n\n    :arxiv:`He, Kaiming, et al (2015). \"Delving deep into rectifiers:\n    Surpassing human-level performance on imagenet classification.\" <1502.01852>`\n\n    :arxiv:`Kingma, Diederik, and Jimmy Ba (2014)\n    \"Adam: A method for stochastic optimization.\" <1412.6980>`",
        "parameters": {
          "hidden_layer_sizes": {
            "type": "array",
            "description": "like of shape(n_layers - 2,), default=(100,)"
          },
          "The": {
            "type": "number of iterations the solver has run.",
            "description": ""
          },
          "hidden": {
            "type": "layer.",
            "description": ""
          },
          "activation": {
            "type": "{'identity', 'logistic', 'tanh', 'relu'}, default='relu'",
            "description": ""
          },
          "Activation": {
            "type": "function for the hidden layer.",
            "description": "- 'identity', no-op activation, useful to implement linear bottleneck,"
          },
          "returns": {
            "type": "f(x) = max(0, x)",
            "description": ""
          },
          "solver": {
            "type": "{'lbfgs', 'sgd', 'adam'}, default='adam'",
            "description": ""
          },
          "by": {
            "type": "at least ``tol`` for ``n_iter_no_change`` consecutive iterations,",
            "description": ""
          },
          "For": {
            "type": "an example usage and visualization of varying regularization, see",
            "description": ":ref:`sphx_glr_auto_examples_neural_networks_plot_mlp_alpha.py`."
          },
          "Note": {
            "type": "that number of loss function calls will be greater than or equal",
            "description": ""
          },
          "large": {
            "type": "datasets (with thousands of training samples or more) in terms of",
            "description": ""
          },
          "both": {
            "type": "training time and validation score.",
            "description": ""
          },
          "alpha": {
            "type": "float, default=0.0001",
            "description": ""
          },
          "Strength": {
            "type": "of the L2 regularization term. The L2 regularization term",
            "description": ""
          },
          "is": {
            "type": "set to 'invscaling'. Only used when solver='sgd'.",
            "description": ""
          },
          "batch_size": {
            "type": "int, default='auto'",
            "description": ""
          },
          "Size": {
            "type": "of minibatches for stochastic optimizers.",
            "description": ""
          },
          "If": {
            "type": "`early_stopping=True`, this attribute is set to `None`. Refer to",
            "description": ""
          },
          "When": {
            "type": "set to True, reuse the solution of the previous",
            "description": ""
          },
          "learning_rate": {
            "type": "{'constant', 'invscaling', 'adaptive'}, default='constant'",
            "description": ""
          },
          "Learning": {
            "type": "rate schedule for weight updates.",
            "description": "- 'constant' is a constant learning rate given by\n'learning_rate_init'.\n- 'invscaling' gradually decreases the learning rate at each"
          },
          "time": {
            "type": "step 't' using an inverse scaling exponent of 'power_t'.",
            "description": ""
          },
          "effective_learning_rate": {
            "type": "= learning_rate_init / pow(t, power_t)",
            "description": "- 'adaptive' keeps the learning rate constant to\n'learning_rate_init' as long as training loss keeps decreasing."
          },
          "Each": {
            "type": "time two consecutive epochs fail to decrease training loss by at",
            "description": ""
          },
          "least": {
            "type": "tol, or fail to increase validation score by at least tol if",
            "description": "'early_stopping' is on, the current learning rate is divided by 5."
          },
          "Only": {
            "type": "used when solver='lbfgs'. Maximum number of loss function calls.",
            "description": ""
          },
          "learning_rate_init": {
            "type": "float, default=0.001",
            "description": ""
          },
          "in": {
            "type": "updating the weights. Only used when solver='sgd' or 'adam'.",
            "description": ""
          },
          "power_t": {
            "type": "float, default=0.5",
            "description": ""
          },
          "It": {
            "type": "is used in updating effective learning rate when the learning_rate",
            "description": ""
          },
          "max_iter": {
            "type": "int, default=200",
            "description": ""
          },
          "Maximum": {
            "type": "number of epochs to not meet ``tol`` improvement.",
            "description": ""
          },
          "solvers": {
            "type": "'sgd', 'adam'",
            "description": ", note that this determines the number of epochs\n(how many times each data point will be used), not the number of"
          },
          "gradient": {
            "type": "steps.",
            "description": ""
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": ""
          },
          "Whether": {
            "type": "to use early stopping to terminate training when validation",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for weights and bias",
            "description": "initialization, train-test split if early stopping is used, and batch"
          },
          "sampling": {
            "type": "when solver='sgd' or 'adam'.",
            "description": ""
          },
          "Pass": {
            "type": "an int for reproducible results across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "tol": {
            "type": "float, default=1e",
            "description": "4"
          },
          "Tolerance": {
            "type": "for the optimization. When the loss or score is not improving",
            "description": ""
          },
          "unless": {
            "type": "``learning_rate`` is set to 'adaptive', convergence is",
            "description": ""
          },
          "considered": {
            "type": "to be reached and training stops.",
            "description": ""
          },
          "verbose": {
            "type": "bool, default=False",
            "description": ""
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": ""
          },
          "call": {
            "type": "to fit as initialization, otherwise, just erase the",
            "description": ""
          },
          "previous": {
            "type": "solution. See :term:`the Glossary <warm_start>`.",
            "description": ""
          },
          "momentum": {
            "type": "> 0.",
            "description": ""
          },
          "Momentum": {
            "type": "for gradient descent update. Should be between 0 and 1. Only",
            "description": ""
          },
          "used": {
            "type": "when solver='sgd'.",
            "description": ""
          },
          "nesterovs_momentum": {
            "type": "bool, default=True",
            "description": ""
          },
          "early_stopping": {
            "type": "bool, default=False",
            "description": ""
          },
          "score": {
            "type": "is not improving. If set to true, it will automatically set",
            "description": ""
          },
          "aside": {
            "type": "10% of training data as validation and terminate training when",
            "description": ""
          },
          "validation": {
            "type": "score is not improving by at least ``tol`` for",
            "description": "``n_iter_no_change`` consecutive epochs. The split is stratified,"
          },
          "except": {
            "type": "in a multilabel setting.",
            "description": ""
          },
          "loss": {
            "type": "does not improve by more than tol for n_iter_no_change consecutive",
            "description": ""
          },
          "passes": {
            "type": "over the training set.",
            "description": ""
          },
          "validation_fraction": {
            "type": "float, default=0.1",
            "description": ""
          },
          "early": {
            "type": "stopping. Only available if `early_stopping=True`, otherwise the",
            "description": ""
          },
          "beta_1": {
            "type": "float, default=0.9",
            "description": ""
          },
          "Exponential": {
            "type": "decay rate for estimates of second moment vector in adam,",
            "description": ""
          },
          "should": {
            "type": "be in [0, 1). Only used when solver='adam'.",
            "description": ""
          },
          "beta_2": {
            "type": "float, default=0.999",
            "description": ""
          },
          "epsilon": {
            "type": "float, default=1e",
            "description": "8"
          },
          "Value": {
            "type": "for numerical stability in adam. Only used when solver='adam'.",
            "description": ""
          },
          "n_iter_no_change": {
            "type": "int, default=10",
            "description": ""
          },
          "max_fun": {
            "type": "int, default=15000",
            "description": ""
          },
          "of": {
            "type": "iterations reaches max_iter, or this number of loss function calls.",
            "description": ""
          },
          "to": {
            "type": "layer i.",
            "description": ""
          },
          "classes_": {
            "type": "ndarray or list of ndarray of shape (n_classes,)",
            "description": ""
          },
          "Class": {
            "type": "labels for each output.",
            "description": ""
          },
          "loss_": {
            "type": "float",
            "description": ""
          },
          "best_loss_": {
            "type": "float or None",
            "description": ""
          },
          "the": {
            "type": "partial derivatives of the loss function with respect to the model",
            "description": ""
          },
          "loss_curve_": {
            "type": "list of shape (`n_iter_`,)",
            "description": ""
          },
          "validation_scores_": {
            "type": "list of shape (`n_iter_`,) or None",
            "description": ""
          },
          "reported": {
            "type": "is the accuracy score. Only available if `early_stopping=True`,",
            "description": ""
          },
          "otherwise": {
            "type": "the attribute is set to `None`.",
            "description": ""
          },
          "best_validation_score_": {
            "type": "float or None",
            "description": ""
          },
          "attribute": {
            "type": "is set to `None`.",
            "description": ""
          },
          "t_": {
            "type": "int",
            "description": ""
          },
          "coefs_": {
            "type": "list of shape (n_layers",
            "description": "1,)"
          },
          "intercepts_": {
            "type": "list of shape (n_layers",
            "description": "1,)"
          },
          "layer": {
            "type": "i + 1.",
            "description": ""
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of outputs.",
            "description": ""
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": ""
          },
          "n_layers_": {
            "type": "int",
            "description": ""
          },
          "n_outputs_": {
            "type": "int",
            "description": ""
          },
          "out_activation_": {
            "type": "str",
            "description": ""
          },
          "Name": {
            "type": "of the output activation function.",
            "description": ""
          },
          "MLPRegressor": {
            "type": "Multi",
            "description": "layer Perceptron regressor."
          },
          "BernoulliRBM": {
            "type": "Bernoulli Restricted Boltzmann Machine (RBM).",
            "description": "Notes\n-----"
          },
          "MLPClassifier": {
            "type": "trains iteratively since at each time step",
            "description": ""
          }
        },
        "returns": "f(x) = x\n\n        - 'logistic', the logistic sigmoid function,",
        "raises": "",
        "see_also": "--------\n    MLPRegressor : Multi-layer Perceptron regressor.\n    BernoulliRBM : Bernoulli Restricted Boltzmann Machine (RBM).\n\n    Notes\n    -----\n    MLPClassifier trains iteratively since at each time step\n    the partial derivatives of the loss function with respect to the model\n    parameters are computed to update the parameters.\n\n    It can also have a regularization term added to the loss function\n    that shrinks model parameters to prevent overfitting.\n\n    This implementation works with data represented as dense numpy arrays or\n    sparse scipy arrays of floating point values.\n\n    References\n    ----------\n    Hinton, Geoffrey E. \"Connectionist learning procedures.\"\n    Artificial intelligence 40.1 (1989): 185-234.\n\n    Glorot, Xavier, and Yoshua Bengio.\n    \"Understanding the difficulty of training deep feedforward neural networks.\"\n    International Conference on Artificial Intelligence and Statistics. 2010.\n\n    :arxiv:`He, Kaiming, et al (2015). \"Delving deep into rectifiers:\n    Surpassing human-level performance on imagenet classification.\" <1502.01852>`\n\n    :arxiv:`Kingma, Diederik, and Jimmy Ba (2014)\n    \"Adam: A method for stochastic optimization.\" <1412.6980>`\n\n    Examples\n    --------\n    >>> from sklearn.neural_network import MLPClassifier\n    >>> from sklearn.datasets import make_classification\n    >>> from sklearn.model_selection import train_test_split\n    >>> X, y = make_classification(n_samples=100, random_state=1)\n    >>> X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y,\n    ...                                                     random_state=1)\n    >>> clf = MLPClassifier(random_state=1, max_iter=300).fit(X_train, y_train)\n    >>> clf.predict_proba(X_test[:1])\n    array([[0.038..., 0.961...]])\n    >>> clf.predict(X_test[:5, :])\n    array([1, 0, 1, 0, 1])\n    >>> clf.score(X_test, y_test)\n    0.8...",
        "notes": "that number of loss function calls will be greater than or equal\n        to the number of iterations for the `MLPClassifier`.\n\n        .. versionadded:: 0.22\n\n    Attributes\n    ----------\n    classes_ : ndarray or list of ndarray of shape (n_classes,)\n        Class labels for each output.\n\n    loss_ : float\n        The current loss computed with the loss function.\n\n    best_loss_ : float or None\n        The minimum loss reached by the solver throughout fitting.\n        If `early_stopping=True`, this attribute is set to `None`. Refer to\n        the `best_validation_score_` fitted attribute instead.\n\n    loss_curve_ : list of shape (`n_iter_`,)\n        The ith element in the list represents the loss at the ith iteration.\n\n    validation_scores_ : list of shape (`n_iter_`,) or None\n        The score at each iteration on a held-out validation set. The score\n        reported is the accuracy score. Only available if `early_stopping=True`,\n        otherwise the attribute is set to `None`.\n\n    best_validation_score_ : float or None\n        The best validation score (i.e. accuracy score) that triggered the\n        early stopping. Only available if `early_stopping=True`, otherwise the\n        attribute is set to `None`.\n\n    t_ : int\n        The number of training samples seen by the solver during fitting.\n\n    coefs_ : list of shape (n_layers - 1,)\n        The ith element in the list represents the weight matrix corresponding\n        to layer i.\n\n    intercepts_ : list of shape (n_layers - 1,)\n        The ith element in the list represents the bias vector corresponding to\n        layer i + 1.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_iter_ : int\n        The number of iterations the solver has run.\n\n    n_layers_ : int\n        Number of layers.\n\n    n_outputs_ : int\n        Number of outputs.\n\n    out_activation_ : str\n        Name of the output activation function.\n\n    See Also\n    --------\n    MLPRegressor : Multi-layer Perceptron regressor.\n    BernoulliRBM : Bernoulli Restricted Boltzmann Machine (RBM).\n\n    Notes\n    -----\n    MLPClassifier trains iteratively since at each time step\n    the partial derivatives of the loss function with respect to the model\n    parameters are computed to update the parameters.\n\n    It can also have a regularization term added to the loss function\n    that shrinks model parameters to prevent overfitting.\n\n    This implementation works with data represented as dense numpy arrays or\n    sparse scipy arrays of floating point values.\n\n    References\n    ----------\n    Hinton, Geoffrey E. \"Connectionist learning procedures.\"\n    Artificial intelligence 40.1 (1989): 185-234.\n\n    Glorot, Xavier, and Yoshua Bengio.\n    \"Understanding the difficulty of training deep feedforward neural networks.\"\n    International Conference on Artificial Intelligence and Statistics. 2010.\n\n    :arxiv:`He, Kaiming, et al (2015). \"Delving deep into rectifiers:\n    Surpassing human-level performance on imagenet classification.\" <1502.01852>`\n\n    :arxiv:`Kingma, Diederik, and Jimmy Ba (2014)\n    \"Adam: A method for stochastic optimization.\" <1412.6980>`\n\n    Examples\n    --------\n    >>> from sklearn.neural_network import MLPClassifier\n    >>> from sklearn.datasets import make_classification\n    >>> from sklearn.model_selection import train_test_split\n    >>> X, y = make_classification(n_samples=100, random_state=1)\n    >>> X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y,\n    ...                                                     random_state=1)\n    >>> clf = MLPClassifier(random_state=1, max_iter=300).fit(X_train, y_train)\n    >>> clf.predict_proba(X_test[:1])\n    array([[0.038..., 0.961...]])\n    >>> clf.predict(X_test[:5, :])\n    array([1, 0, 1, 0, 1])\n    >>> clf.score(X_test, y_test)\n    0.8...",
        "examples": "--------\n    >>> from sklearn.neural_network import MLPClassifier\n    >>> from sklearn.datasets import make_classification\n    >>> from sklearn.model_selection import train_test_split\n    >>> X, y = make_classification(n_samples=100, random_state=1)\n    >>> X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y,\n    ...                                                     random_state=1)\n    >>> clf = MLPClassifier(random_state=1, max_iter=300).fit(X_train, y_train)\n    >>> clf.predict_proba(X_test[:1])\n    array([[0.038..., 0.961...]])\n    >>> clf.predict(X_test[:5, :])\n    array([1, 0, 1, 0, 1])\n    >>> clf.score(X_test, y_test)\n    0.8..."
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y)",
          "documentation": {
            "description": "Fit the model to data matrix X and target(s) y.\n\n        Parameters\n        ----------\n        X : ndarray or sparse matrix of shape (n_samples, n_features)\n            The input data.\n\n        y : ndarray of shape (n_samples,) or (n_samples, n_outputs)\n            The target values (class labels in classification, real numbers in\n            regression).",
            "parameters": {
              "X": {
                "type": "ndarray or sparse matrix of shape (n_samples, n_features)",
                "description": ""
              },
              "The": {
                "type": "target values (class labels in classification, real numbers in",
                "description": "regression).\nReturns\n-------"
              },
              "y": {
                "type": "ndarray of shape (n_samples,) or (n_samples, n_outputs)",
                "description": ""
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "Returns": {
                "type": "a trained MLP model.",
                "description": ""
              }
            },
            "returns": "-------\n        self : object",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRequest\n            A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "partial_fit",
          "signature": "partial_fit(self, X, y, classes=None)",
          "documentation": {
            "description": "Update the model with a single iteration over the given data.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input data.\n\n        y : array-like of shape (n_samples,)\n            The target values.\n\n        classes : array of shape (n_classes,), default=None\n            Classes across all calls to partial_fit.\n            Can be obtained via `np.unique(y_all)`, where y_all is the\n            target vector of the entire dataset.\n            This argument is required for the first call to partial_fit\n            and can be omitted in the subsequent calls.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "target values.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "classes": {
                "type": "array of shape (n_classes,), default=None",
                "description": ""
              },
              "Classes": {
                "type": "across all calls to partial_fit.",
                "description": ""
              },
              "Can": {
                "type": "be obtained via `np.unique(y_all)`, where y_all is the",
                "description": ""
              },
              "target": {
                "type": "vector of the entire dataset.",
                "description": ""
              },
              "This": {
                "type": "argument is required for the first call to partial_fit",
                "description": ""
              },
              "and": {
                "type": "can be omitted in the subsequent calls.",
                "description": ""
              },
              "Note": {
                "type": "that y doesn't need to contain all labels in `classes`.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "Trained": {
                "type": "MLP model.",
                "description": ""
              }
            },
            "returns": "-------\n        self : object\n            Trained MLP model.",
            "raises": "",
            "see_also": "",
            "notes": "that y doesn't need to contain all labels in `classes`.\n\n        Returns\n        -------\n        self : object\n            Trained MLP model.",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "documentation": {
            "description": "Predict using the multi-layer perceptron classifier.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input data.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted classes.",
                "description": ""
              },
              "y": {
                "type": "ndarray, shape (n_samples,) or (n_samples, n_classes)",
                "description": ""
              }
            },
            "returns": "-------\n        y : ndarray, shape (n_samples,) or (n_samples, n_classes)\n            The predicted classes.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_log_proba",
          "signature": "predict_log_proba(self, X)",
          "documentation": {
            "description": "Return the log of probability estimates.\n\n        Parameters\n        ----------\n        X : ndarray of shape (n_samples, n_features)\n            The input data.",
            "parameters": {
              "X": {
                "type": "ndarray of shape (n_samples, n_features)",
                "description": ""
              },
              "The": {
                "type": "predicted log-probability of the sample for each class",
                "description": ""
              },
              "log_y_prob": {
                "type": "ndarray of shape (n_samples, n_classes)",
                "description": ""
              },
              "in": {
                "type": "the model, where classes are ordered as they are in",
                "description": "`self.classes_`. Equivalent to `log(predict_proba(X))`."
              }
            },
            "returns": "-------\n        log_y_prob : ndarray of shape (n_samples, n_classes)\n            The predicted log-probability of the sample for each class\n            in the model, where classes are ordered as they are in\n            `self.classes_`. Equivalent to `log(predict_proba(X))`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_proba",
          "signature": "predict_proba(self, X)",
          "documentation": {
            "description": "Probability estimates.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input data.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted probability of the sample for each class in the",
                "description": "model, where classes are ordered as they are in `self.classes_`."
              },
              "y_prob": {
                "type": "ndarray of shape (n_samples, n_classes)",
                "description": ""
              }
            },
            "returns": "-------\n        y_prob : ndarray of shape (n_samples, n_classes)\n            The predicted probability of the sample for each class in the\n            model, where classes are ordered as they are in `self.classes_`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "labels for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ""
              },
              "Mean": {
                "type": "accuracy of ``self.predict(X)`` w.r.t. `y`.",
                "description": ""
              }
            },
            "returns": "the mean accuracy on the given test data and labels.\n\n        In multi-label classification, this is the subset accuracy\n        which is a harsh metric since you require for each sample that\n        each label set be correctly predicted.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True labels for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_partial_fit_request",
          "signature": "set_partial_fit_request(self: sklearn.neural_network._multilayer_perceptron.MLPClassifier, *, classes: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.neural_network._multilayer_perceptron.MLPClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``partial_fit`` method.",
            "parameters": {
              "classes": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``classes`` parameter in ``partial_fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``partial_fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``partial_fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        classes : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``classes`` parameter in ``partial_fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.neural_network._multilayer_perceptron.MLPClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.neural_network._multilayer_perceptron.MLPClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "MLPRegressor",
      "documentation": {
        "description": "Multi-layer Perceptron regressor.\n\n    This model optimizes the squared error using LBFGS or stochastic gradient\n    descent.\n\n    .. versionadded:: 0.18\n\n    Parameters\n    ----------\n    hidden_layer_sizes : array-like of shape(n_layers - 2,), default=(100,)\n        The ith element represents the number of neurons in the ith\n        hidden layer.\n\n    activation : {'identity', 'logistic', 'tanh', 'relu'}, default='relu'\n        Activation function for the hidden layer.\n\n        - 'identity', no-op activation, useful to implement linear bottleneck,\n          returns f(x) = x\n\n        - 'logistic', the logistic sigmoid function,\n          returns f(x) = 1 / (1 + exp(-x)).\n\n        - 'tanh', the hyperbolic tan function,\n          returns f(x) = tanh(x).\n\n        - 'relu', the rectified linear unit function,\n          returns f(x) = max(0, x)\n\n    solver : {'lbfgs', 'sgd', 'adam'}, default='adam'\n        The solver for weight optimization.\n\n        - 'lbfgs' is an optimizer in the family of quasi-Newton methods.\n\n        - 'sgd' refers to stochastic gradient descent.\n\n        - 'adam' refers to a stochastic gradient-based optimizer proposed by\n          Kingma, Diederik, and Jimmy Ba\n\n        For a comparison between Adam optimizer and SGD, see\n        :ref:`sphx_glr_auto_examples_neural_networks_plot_mlp_training_curves.py`.\n\n        Note: The default solver 'adam' works pretty well on relatively\n        large datasets (with thousands of training samples or more) in terms of\n        both training time and validation score.\n        For small datasets, however, 'lbfgs' can converge faster and perform\n        better.\n\n    alpha : float, default=0.0001\n        Strength of the L2 regularization term. The L2 regularization term\n        is divided by the sample size when added to the loss.\n\n    batch_size : int, default='auto'\n        Size of minibatches for stochastic optimizers.\n        If the solver is 'lbfgs', the regressor will not use minibatch.\n        When set to \"auto\", `batch_size=min(200, n_samples)`.\n\n    learning_rate : {'constant', 'invscaling', 'adaptive'}, default='constant'\n        Learning rate schedule for weight updates.\n\n        - 'constant' is a constant learning rate given by\n          'learning_rate_init'.\n\n        - 'invscaling' gradually decreases the learning rate ``learning_rate_``\n          at each time step 't' using an inverse scaling exponent of 'power_t'.\n          effective_learning_rate = learning_rate_init / pow(t, power_t)\n\n        - 'adaptive' keeps the learning rate constant to\n          'learning_rate_init' as long as training loss keeps decreasing.\n          Each time two consecutive epochs fail to decrease training loss by at\n          least tol, or fail to increase validation score by at least tol if\n          'early_stopping' is on, the current learning rate is divided by 5.\n\n        Only used when solver='sgd'.\n\n    learning_rate_init : float, default=0.001\n        The initial learning rate used. It controls the step-size\n        in updating the weights. Only used when solver='sgd' or 'adam'.\n\n    power_t : float, default=0.5\n        The exponent for inverse scaling learning rate.\n        It is used in updating effective learning rate when the learning_rate\n        is set to 'invscaling'. Only used when solver='sgd'.\n\n    max_iter : int, default=200\n        Maximum number of iterations. The solver iterates until convergence\n        (determined by 'tol') or this number of iterations. For stochastic\n        solvers ('sgd', 'adam'), note that this determines the number of epochs\n        (how many times each data point will be used), not the number of\n        gradient steps.\n\n    shuffle : bool, default=True\n        Whether to shuffle samples in each iteration. Only used when\n        solver='sgd' or 'adam'.\n\n    random_state : int, RandomState instance, default=None\n        Determines random number generation for weights and bias\n        initialization, train-test split if early stopping is used, and batch\n        sampling when solver='sgd' or 'adam'.\n        Pass an int for reproducible results across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    tol : float, default=1e-4\n        Tolerance for the optimization. When the loss or score is not improving\n        by at least ``tol`` for ``n_iter_no_change`` consecutive iterations,\n        unless ``learning_rate`` is set to 'adaptive', convergence is\n        considered to be reached and training stops.\n\n    verbose : bool, default=False\n        Whether to print progress messages to stdout.\n\n    warm_start : bool, default=False\n        When set to True, reuse the solution of the previous\n        call to fit as initialization, otherwise, just erase the\n        previous solution. See :term:`the Glossary <warm_start>`.\n\n    momentum : float, default=0.9\n        Momentum for gradient descent update. Should be between 0 and 1. Only\n        used when solver='sgd'.\n\n    nesterovs_momentum : bool, default=True\n        Whether to use Nesterov's momentum. Only used when solver='sgd' and\n        momentum > 0.\n\n    early_stopping : bool, default=False\n        Whether to use early stopping to terminate training when validation\n        score is not improving. If set to True, it will automatically set\n        aside ``validation_fraction`` of training data as validation and\n        terminate training when validation score is not improving by at\n        least ``tol`` for ``n_iter_no_change`` consecutive epochs.\n        Only effective when solver='sgd' or 'adam'.\n\n    validation_fraction : float, default=0.1\n        The proportion of training data to set aside as validation set for\n        early stopping. Must be between 0 and 1.\n        Only used if early_stopping is True.\n\n    beta_1 : float, default=0.9\n        Exponential decay rate for estimates of first moment vector in adam,\n        should be in [0, 1). Only used when solver='adam'.\n\n    beta_2 : float, default=0.999\n        Exponential decay rate for estimates of second moment vector in adam,\n        should be in [0, 1). Only used when solver='adam'.\n\n    epsilon : float, default=1e-8\n        Value for numerical stability in adam. Only used when solver='adam'.\n\n    n_iter_no_change : int, default=10\n        Maximum number of epochs to not meet ``tol`` improvement.\n        Only effective when solver='sgd' or 'adam'.\n\n        .. versionadded:: 0.20\n\n    max_fun : int, default=15000\n        Only used when solver='lbfgs'. Maximum number of function calls.\n        The solver iterates until convergence (determined by ``tol``), number\n        of iterations reaches max_iter, or this number of function calls.\n        Note that number of function calls will be greater than or equal to\n        the number of iterations for the MLPRegressor.\n\n        .. versionadded:: 0.22\n\n    Attributes\n    ----------\n    loss_ : float\n        The current loss computed with the loss function.\n\n    best_loss_ : float\n        The minimum loss reached by the solver throughout fitting.\n        If `early_stopping=True`, this attribute is set to `None`. Refer to\n        the `best_validation_score_` fitted attribute instead.\n        Only accessible when solver='sgd' or 'adam'.\n\n    loss_curve_ : list of shape (`n_iter_`,)\n        Loss value evaluated at the end of each training step.\n        The ith element in the list represents the loss at the ith iteration.\n        Only accessible when solver='sgd' or 'adam'.\n\n    validation_scores_ : list of shape (`n_iter_`,) or None\n        The score at each iteration on a held-out validation set. The score\n        reported is the R2 score. Only available if `early_stopping=True`,\n        otherwise the attribute is set to `None`.\n        Only accessible when solver='sgd' or 'adam'.\n\n    best_validation_score_ : float or None\n        The best validation score (i.e. R2 score) that triggered the\n        early stopping. Only available if `early_stopping=True`, otherwise the\n        attribute is set to `None`.\n        Only accessible when solver='sgd' or 'adam'.\n\n    t_ : int\n        The number of training samples seen by the solver during fitting.\n        Mathematically equals `n_iters * X.shape[0]`, it means\n        `time_step` and it is used by optimizer's learning rate scheduler.\n\n    coefs_ : list of shape (n_layers - 1,)\n        The ith element in the list represents the weight matrix corresponding\n        to layer i.\n\n    intercepts_ : list of shape (n_layers - 1,)\n        The ith element in the list represents the bias vector corresponding to\n        layer i + 1.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_iter_ : int\n        The number of iterations the solver has run.\n\n    n_layers_ : int\n        Number of layers.\n\n    n_outputs_ : int\n        Number of outputs.\n\n    out_activation_ : str\n        Name of the output activation function.\n\n    See Also\n    --------\n    BernoulliRBM : Bernoulli Restricted Boltzmann Machine (RBM).\n    MLPClassifier : Multi-layer Perceptron classifier.\n    sklearn.linear_model.SGDRegressor : Linear model fitted by minimizing\n        a regularized empirical loss with SGD.\n\n    Notes\n    -----\n    MLPRegressor trains iteratively since at each time step\n    the partial derivatives of the loss function with respect to the model\n    parameters are computed to update the parameters.\n\n    It can also have a regularization term added to the loss function\n    that shrinks model parameters to prevent overfitting.\n\n    This implementation works with data represented as dense and sparse numpy\n    arrays of floating point values.\n\n    References\n    ----------\n    Hinton, Geoffrey E. \"Connectionist learning procedures.\"\n    Artificial intelligence 40.1 (1989): 185-234.\n\n    Glorot, Xavier, and Yoshua Bengio.\n    \"Understanding the difficulty of training deep feedforward neural networks.\"\n    International Conference on Artificial Intelligence and Statistics. 2010.\n\n    :arxiv:`He, Kaiming, et al (2015). \"Delving deep into rectifiers:\n    Surpassing human-level performance on imagenet classification.\" <1502.01852>`\n\n    :arxiv:`Kingma, Diederik, and Jimmy Ba (2014)\n    \"Adam: A method for stochastic optimization.\" <1412.6980>`",
        "parameters": {
          "hidden_layer_sizes": {
            "type": "array",
            "description": "like of shape(n_layers - 2,), default=(100,)"
          },
          "The": {
            "type": "number of iterations the solver has run.",
            "description": ""
          },
          "hidden": {
            "type": "layer.",
            "description": ""
          },
          "activation": {
            "type": "{'identity', 'logistic', 'tanh', 'relu'}, default='relu'",
            "description": ""
          },
          "Activation": {
            "type": "function for the hidden layer.",
            "description": "- 'identity', no-op activation, useful to implement linear bottleneck,"
          },
          "returns": {
            "type": "f(x) = max(0, x)",
            "description": ""
          },
          "solver": {
            "type": "{'lbfgs', 'sgd', 'adam'}, default='adam'",
            "description": ""
          },
          "For": {
            "type": "small datasets, however, 'lbfgs' can converge faster and perform",
            "description": "better."
          },
          "Note": {
            "type": "that number of function calls will be greater than or equal to",
            "description": ""
          },
          "large": {
            "type": "datasets (with thousands of training samples or more) in terms of",
            "description": ""
          },
          "both": {
            "type": "training time and validation score.",
            "description": ""
          },
          "alpha": {
            "type": "float, default=0.0001",
            "description": ""
          },
          "Strength": {
            "type": "of the L2 regularization term. The L2 regularization term",
            "description": ""
          },
          "is": {
            "type": "set to 'invscaling'. Only used when solver='sgd'.",
            "description": ""
          },
          "batch_size": {
            "type": "int, default='auto'",
            "description": ""
          },
          "Size": {
            "type": "of minibatches for stochastic optimizers.",
            "description": ""
          },
          "If": {
            "type": "`early_stopping=True`, this attribute is set to `None`. Refer to",
            "description": ""
          },
          "When": {
            "type": "set to True, reuse the solution of the previous",
            "description": ""
          },
          "learning_rate": {
            "type": "{'constant', 'invscaling', 'adaptive'}, default='constant'",
            "description": ""
          },
          "Learning": {
            "type": "rate schedule for weight updates.",
            "description": "- 'constant' is a constant learning rate given by\n'learning_rate_init'.\n- 'invscaling' gradually decreases the learning rate ``learning_rate_``"
          },
          "at": {
            "type": "each time step 't' using an inverse scaling exponent of 'power_t'.",
            "description": ""
          },
          "effective_learning_rate": {
            "type": "= learning_rate_init / pow(t, power_t)",
            "description": "- 'adaptive' keeps the learning rate constant to\n'learning_rate_init' as long as training loss keeps decreasing."
          },
          "Each": {
            "type": "time two consecutive epochs fail to decrease training loss by at",
            "description": ""
          },
          "least": {
            "type": "``tol`` for ``n_iter_no_change`` consecutive epochs.",
            "description": ""
          },
          "Only": {
            "type": "accessible when solver='sgd' or 'adam'.",
            "description": ""
          },
          "learning_rate_init": {
            "type": "float, default=0.001",
            "description": ""
          },
          "in": {
            "type": "updating the weights. Only used when solver='sgd' or 'adam'.",
            "description": ""
          },
          "power_t": {
            "type": "float, default=0.5",
            "description": ""
          },
          "It": {
            "type": "is used in updating effective learning rate when the learning_rate",
            "description": ""
          },
          "max_iter": {
            "type": "int, default=200",
            "description": ""
          },
          "Maximum": {
            "type": "number of epochs to not meet ``tol`` improvement.",
            "description": ""
          },
          "solvers": {
            "type": "'sgd', 'adam'",
            "description": ", note that this determines the number of epochs\n(how many times each data point will be used), not the number of"
          },
          "gradient": {
            "type": "steps.",
            "description": ""
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": ""
          },
          "Whether": {
            "type": "to use early stopping to terminate training when validation",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for weights and bias",
            "description": "initialization, train-test split if early stopping is used, and batch"
          },
          "sampling": {
            "type": "when solver='sgd' or 'adam'.",
            "description": ""
          },
          "Pass": {
            "type": "an int for reproducible results across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "tol": {
            "type": "float, default=1e",
            "description": "4"
          },
          "Tolerance": {
            "type": "for the optimization. When the loss or score is not improving",
            "description": ""
          },
          "by": {
            "type": "at least ``tol`` for ``n_iter_no_change`` consecutive iterations,",
            "description": ""
          },
          "unless": {
            "type": "``learning_rate`` is set to 'adaptive', convergence is",
            "description": ""
          },
          "considered": {
            "type": "to be reached and training stops.",
            "description": ""
          },
          "verbose": {
            "type": "bool, default=False",
            "description": ""
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": ""
          },
          "call": {
            "type": "to fit as initialization, otherwise, just erase the",
            "description": ""
          },
          "previous": {
            "type": "solution. See :term:`the Glossary <warm_start>`.",
            "description": ""
          },
          "momentum": {
            "type": "> 0.",
            "description": ""
          },
          "Momentum": {
            "type": "for gradient descent update. Should be between 0 and 1. Only",
            "description": ""
          },
          "used": {
            "type": "when solver='sgd'.",
            "description": ""
          },
          "nesterovs_momentum": {
            "type": "bool, default=True",
            "description": ""
          },
          "early_stopping": {
            "type": "bool, default=False",
            "description": ""
          },
          "score": {
            "type": "is not improving. If set to True, it will automatically set",
            "description": ""
          },
          "aside": {
            "type": "``validation_fraction`` of training data as validation and",
            "description": ""
          },
          "terminate": {
            "type": "training when validation score is not improving by at",
            "description": ""
          },
          "validation_fraction": {
            "type": "float, default=0.1",
            "description": ""
          },
          "early": {
            "type": "stopping. Only available if `early_stopping=True`, otherwise the",
            "description": ""
          },
          "beta_1": {
            "type": "float, default=0.9",
            "description": ""
          },
          "Exponential": {
            "type": "decay rate for estimates of second moment vector in adam,",
            "description": ""
          },
          "should": {
            "type": "be in [0, 1). Only used when solver='adam'.",
            "description": ""
          },
          "beta_2": {
            "type": "float, default=0.999",
            "description": ""
          },
          "epsilon": {
            "type": "float, default=1e",
            "description": "8"
          },
          "Value": {
            "type": "for numerical stability in adam. Only used when solver='adam'.",
            "description": ""
          },
          "n_iter_no_change": {
            "type": "int, default=10",
            "description": ""
          },
          "max_fun": {
            "type": "int, default=15000",
            "description": ""
          },
          "of": {
            "type": "iterations reaches max_iter, or this number of function calls.",
            "description": ""
          },
          "the": {
            "type": "partial derivatives of the loss function with respect to the model",
            "description": ""
          },
          "loss_": {
            "type": "float",
            "description": ""
          },
          "best_loss_": {
            "type": "float",
            "description": ""
          },
          "loss_curve_": {
            "type": "list of shape (`n_iter_`,)",
            "description": ""
          },
          "Loss": {
            "type": "value evaluated at the end of each training step.",
            "description": ""
          },
          "validation_scores_": {
            "type": "list of shape (`n_iter_`,) or None",
            "description": ""
          },
          "reported": {
            "type": "is the R2 score. Only available if `early_stopping=True`,",
            "description": ""
          },
          "otherwise": {
            "type": "the attribute is set to `None`.",
            "description": ""
          },
          "best_validation_score_": {
            "type": "float or None",
            "description": ""
          },
          "attribute": {
            "type": "is set to `None`.",
            "description": ""
          },
          "t_": {
            "type": "int",
            "description": ""
          },
          "Mathematically": {
            "type": "equals `n_iters * X.shape[0]`, it means",
            "description": "`time_step` and it is used by optimizer's learning rate scheduler."
          },
          "coefs_": {
            "type": "list of shape (n_layers",
            "description": "1,)"
          },
          "to": {
            "type": "layer i.",
            "description": ""
          },
          "intercepts_": {
            "type": "list of shape (n_layers",
            "description": "1,)"
          },
          "layer": {
            "type": "i + 1.",
            "description": ""
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of outputs.",
            "description": ""
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": ""
          },
          "n_layers_": {
            "type": "int",
            "description": ""
          },
          "n_outputs_": {
            "type": "int",
            "description": ""
          },
          "out_activation_": {
            "type": "str",
            "description": ""
          },
          "Name": {
            "type": "of the output activation function.",
            "description": ""
          },
          "BernoulliRBM": {
            "type": "Bernoulli Restricted Boltzmann Machine (RBM).",
            "description": ""
          },
          "MLPClassifier": {
            "type": "Multi",
            "description": "layer Perceptron classifier.\nsklearn.linear_model.SGDRegressor : Linear model fitted by minimizing"
          },
          "a": {
            "type": "regularized empirical loss with SGD.",
            "description": "Notes\n-----"
          },
          "MLPRegressor": {
            "type": "trains iteratively since at each time step",
            "description": ""
          }
        },
        "returns": "f(x) = x\n\n        - 'logistic', the logistic sigmoid function,",
        "raises": "",
        "see_also": "--------\n    BernoulliRBM : Bernoulli Restricted Boltzmann Machine (RBM).\n    MLPClassifier : Multi-layer Perceptron classifier.\n    sklearn.linear_model.SGDRegressor : Linear model fitted by minimizing\n        a regularized empirical loss with SGD.\n\n    Notes\n    -----\n    MLPRegressor trains iteratively since at each time step\n    the partial derivatives of the loss function with respect to the model\n    parameters are computed to update the parameters.\n\n    It can also have a regularization term added to the loss function\n    that shrinks model parameters to prevent overfitting.\n\n    This implementation works with data represented as dense and sparse numpy\n    arrays of floating point values.\n\n    References\n    ----------\n    Hinton, Geoffrey E. \"Connectionist learning procedures.\"\n    Artificial intelligence 40.1 (1989): 185-234.\n\n    Glorot, Xavier, and Yoshua Bengio.\n    \"Understanding the difficulty of training deep feedforward neural networks.\"\n    International Conference on Artificial Intelligence and Statistics. 2010.\n\n    :arxiv:`He, Kaiming, et al (2015). \"Delving deep into rectifiers:\n    Surpassing human-level performance on imagenet classification.\" <1502.01852>`\n\n    :arxiv:`Kingma, Diederik, and Jimmy Ba (2014)\n    \"Adam: A method for stochastic optimization.\" <1412.6980>`\n\n    Examples\n    --------\n    >>> from sklearn.neural_network import MLPRegressor\n    >>> from sklearn.datasets import make_regression\n    >>> from sklearn.model_selection import train_test_split\n    >>> X, y = make_regression(n_samples=200, n_features=20, random_state=1)\n    >>> X_train, X_test, y_train, y_test = train_test_split(X, y,\n    ...                                                     random_state=1)\n    >>> regr = MLPRegressor(random_state=1, max_iter=2000, tol=0.1)\n    >>> regr.fit(X_train, y_train)\n    MLPRegressor(max_iter=2000, random_state=1, tol=0.1)\n    >>> regr.predict(X_test[:2])\n    array([  28..., -290...])\n    >>> regr.score(X_test, y_test)\n    0.98...",
        "notes": "that number of function calls will be greater than or equal to\n        the number of iterations for the MLPRegressor.\n\n        .. versionadded:: 0.22\n\n    Attributes\n    ----------\n    loss_ : float\n        The current loss computed with the loss function.\n\n    best_loss_ : float\n        The minimum loss reached by the solver throughout fitting.\n        If `early_stopping=True`, this attribute is set to `None`. Refer to\n        the `best_validation_score_` fitted attribute instead.\n        Only accessible when solver='sgd' or 'adam'.\n\n    loss_curve_ : list of shape (`n_iter_`,)\n        Loss value evaluated at the end of each training step.\n        The ith element in the list represents the loss at the ith iteration.\n        Only accessible when solver='sgd' or 'adam'.\n\n    validation_scores_ : list of shape (`n_iter_`,) or None\n        The score at each iteration on a held-out validation set. The score\n        reported is the R2 score. Only available if `early_stopping=True`,\n        otherwise the attribute is set to `None`.\n        Only accessible when solver='sgd' or 'adam'.\n\n    best_validation_score_ : float or None\n        The best validation score (i.e. R2 score) that triggered the\n        early stopping. Only available if `early_stopping=True`, otherwise the\n        attribute is set to `None`.\n        Only accessible when solver='sgd' or 'adam'.\n\n    t_ : int\n        The number of training samples seen by the solver during fitting.\n        Mathematically equals `n_iters * X.shape[0]`, it means\n        `time_step` and it is used by optimizer's learning rate scheduler.\n\n    coefs_ : list of shape (n_layers - 1,)\n        The ith element in the list represents the weight matrix corresponding\n        to layer i.\n\n    intercepts_ : list of shape (n_layers - 1,)\n        The ith element in the list represents the bias vector corresponding to\n        layer i + 1.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_iter_ : int\n        The number of iterations the solver has run.\n\n    n_layers_ : int\n        Number of layers.\n\n    n_outputs_ : int\n        Number of outputs.\n\n    out_activation_ : str\n        Name of the output activation function.\n\n    See Also\n    --------\n    BernoulliRBM : Bernoulli Restricted Boltzmann Machine (RBM).\n    MLPClassifier : Multi-layer Perceptron classifier.\n    sklearn.linear_model.SGDRegressor : Linear model fitted by minimizing\n        a regularized empirical loss with SGD.\n\n    Notes\n    -----\n    MLPRegressor trains iteratively since at each time step\n    the partial derivatives of the loss function with respect to the model\n    parameters are computed to update the parameters.\n\n    It can also have a regularization term added to the loss function\n    that shrinks model parameters to prevent overfitting.\n\n    This implementation works with data represented as dense and sparse numpy\n    arrays of floating point values.\n\n    References\n    ----------\n    Hinton, Geoffrey E. \"Connectionist learning procedures.\"\n    Artificial intelligence 40.1 (1989): 185-234.\n\n    Glorot, Xavier, and Yoshua Bengio.\n    \"Understanding the difficulty of training deep feedforward neural networks.\"\n    International Conference on Artificial Intelligence and Statistics. 2010.\n\n    :arxiv:`He, Kaiming, et al (2015). \"Delving deep into rectifiers:\n    Surpassing human-level performance on imagenet classification.\" <1502.01852>`\n\n    :arxiv:`Kingma, Diederik, and Jimmy Ba (2014)\n    \"Adam: A method for stochastic optimization.\" <1412.6980>`\n\n    Examples\n    --------\n    >>> from sklearn.neural_network import MLPRegressor\n    >>> from sklearn.datasets import make_regression\n    >>> from sklearn.model_selection import train_test_split\n    >>> X, y = make_regression(n_samples=200, n_features=20, random_state=1)\n    >>> X_train, X_test, y_train, y_test = train_test_split(X, y,\n    ...                                                     random_state=1)\n    >>> regr = MLPRegressor(random_state=1, max_iter=2000, tol=0.1)\n    >>> regr.fit(X_train, y_train)\n    MLPRegressor(max_iter=2000, random_state=1, tol=0.1)\n    >>> regr.predict(X_test[:2])\n    array([  28..., -290...])\n    >>> regr.score(X_test, y_test)\n    0.98...",
        "examples": "--------\n    >>> from sklearn.neural_network import MLPRegressor\n    >>> from sklearn.datasets import make_regression\n    >>> from sklearn.model_selection import train_test_split\n    >>> X, y = make_regression(n_samples=200, n_features=20, random_state=1)\n    >>> X_train, X_test, y_train, y_test = train_test_split(X, y,\n    ...                                                     random_state=1)\n    >>> regr = MLPRegressor(random_state=1, max_iter=2000, tol=0.1)\n    >>> regr.fit(X_train, y_train)\n    MLPRegressor(max_iter=2000, random_state=1, tol=0.1)\n    >>> regr.predict(X_test[:2])\n    array([  28..., -290...])\n    >>> regr.score(X_test, y_test)\n    0.98..."
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y)",
          "documentation": {
            "description": "Fit the model to data matrix X and target(s) y.\n\n        Parameters\n        ----------\n        X : ndarray or sparse matrix of shape (n_samples, n_features)\n            The input data.\n\n        y : ndarray of shape (n_samples,) or (n_samples, n_outputs)\n            The target values (class labels in classification, real numbers in\n            regression).",
            "parameters": {
              "X": {
                "type": "ndarray or sparse matrix of shape (n_samples, n_features)",
                "description": ""
              },
              "The": {
                "type": "target values (class labels in classification, real numbers in",
                "description": "regression).\nReturns\n-------"
              },
              "y": {
                "type": "ndarray of shape (n_samples,) or (n_samples, n_outputs)",
                "description": ""
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "Returns": {
                "type": "a trained MLP model.",
                "description": ""
              }
            },
            "returns": "-------\n        self : object",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRequest\n            A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "partial_fit",
          "signature": "partial_fit(self, X, y)",
          "documentation": {
            "description": "Update the model with a single iteration over the given data.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input data.\n\n        y : ndarray of shape (n_samples,)\n            The target values.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "target values.",
                "description": "Returns\n-------"
              },
              "y": {
                "type": "ndarray of shape (n_samples,)",
                "description": ""
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "Trained": {
                "type": "MLP model.",
                "description": ""
              }
            },
            "returns": "-------\n        self : object\n            Trained MLP model.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "documentation": {
            "description": "Predict using the multi-layer perceptron model.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input data.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted values.",
                "description": ""
              },
              "y": {
                "type": "ndarray of shape (n_samples, n_outputs)",
                "description": ""
              }
            },
            "returns": "-------\n        y : ndarray of shape (n_samples, n_outputs)\n            The predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Return the coefficient of determination of the prediction.\n\n        The coefficient of determination :math:`R^2` is defined as\n        :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\n        sum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\n        is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\n        The best possible score is 1.0 and it can be negative (because the\n        model can be arbitrarily worse). A constant model that always predicts\n        the expected value of `y`, disregarding the input features, would get\n        a :math:`R^2` score of 0.0.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples. For some estimators this may be a precomputed\n            kernel matrix or a list of generic objects instead with shape\n            ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n            is the number of samples used in the fitting for the estimator.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True values for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples. For some estimators this may be a precomputed",
                "description": ""
              },
              "kernel": {
                "type": "matrix or a list of generic objects instead with shape",
                "description": "``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``"
              },
              "is": {
                "type": "the number of samples used in the fitting for the estimator.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "values for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ":math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\nNotes\n-----"
              },
              "The": {
                "type": "math:`R^2` score used when calling ``score`` on a regressor uses",
                "description": "``multioutput='uniform_average'`` from version 0.23 to keep consistent"
              },
              "with": {
                "type": "default value of :func:`~sklearn.metrics.r2_score`.",
                "description": ""
              },
              "This": {
                "type": "influences the ``score`` method of all the multioutput",
                "description": ""
              },
              "regressors": {
                "type": "(except for",
                "description": ":class:`~sklearn.multioutput.MultiOutputRegressor`)."
              }
            },
            "returns": "-------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\n\n        Notes\n        -----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "raises": "",
            "see_also": "",
            "notes": "-----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.neural_network._multilayer_perceptron.MLPRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.neural_network._multilayer_perceptron.MLPRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        }
      ]
    }
  ]
}