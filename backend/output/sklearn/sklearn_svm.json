{
  "description": "Support vector machine algorithms.",
  "functions": [
    {
      "name": "LinearSVC",
      "signature": "LinearSVC(penalty='l2', loss='squared_hinge', *, dual='auto', tol=0.0001, C=1.0, multi_class='ovr', fit_intercept=True, intercept_scaling=1, class_weight=None, verbose=0, random_state=None, max_iter=1000)",
      "docstring": {
        "description": "Linear Support Vector Classification.\n\nSimilar to SVC with parameter kernel='linear', but implemented in terms of\nliblinear rather than libsvm, so it has more flexibility in the choice of\npenalties and loss functions and should scale better to large numbers of\nsamples.\n\nThe main differences between :class:`~sklearn.svm.LinearSVC` and\n:class:`~sklearn.svm.SVC` lie in the loss function used by default, and in\nthe handling of intercept regularization between those two implementations.\n\nThis class supports both dense and sparse input and the multiclass support\nis handled according to a one-vs-the-rest scheme.\n\nRead more in the :ref:`User Guide <svm_classification>`.",
        "parameters": {
          "penalty": {
            "type": "{'l1', 'l2'}, default='l2'",
            "description": "Specifies the norm used in the penalization. The 'l2'\n    penalty is the standard used in SVC. The 'l1' leads to ``coef_``\n    vectors that are sparse."
          },
          "loss": {
            "type": "{'hinge', 'squared_hinge'}, default='squared_hinge'",
            "description": "Specifies the loss function. 'hinge' is the standard SVM loss\n    (used e.g. by the SVC class) while 'squared_hinge' is the\n    square of the hinge loss. The combination of ``penalty='l1'``\n    and ``loss='hinge'`` is not supported."
          },
          "dual": {
            "type": "\"auto\" or bool, default=\"auto\"",
            "description": "Select the algorithm to either solve the dual or primal\n    optimization problem. Prefer dual=False when n_samples > n_features.\n    `dual=\"auto\"` will choose the value of the parameter automatically,\n    based on the values of `n_samples`, `n_features`, `loss`, `multi_class`\n    and `penalty`. If `n_samples` < `n_features` and optimizer supports\n    chosen `loss`, `multi_class` and `penalty`, then dual will be set to True,\n    otherwise it will be set to False.\n\n    .. versionchanged:: 1.3\n       The `\"auto\"` option is added in version 1.3 and will be the default\n       in version 1.5."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "Tolerance for stopping criteria."
          },
          "C": {
            "type": "float, default=1.0",
            "description": "Regularization parameter. The strength of the regularization is\n    inversely proportional to C. Must be strictly positive.\n    For an intuitive visualization of the effects of scaling\n    the regularization parameter C, see\n    :ref:`sphx_glr_auto_examples_svm_plot_svm_scale_c.py`."
          },
          "multi_class": {
            "type": "{'ovr', 'crammer_singer'}, default='ovr'",
            "description": "Determines the multi-class strategy if `y` contains more than\n    two classes.\n    ``\"ovr\"`` trains n_classes one-vs-rest classifiers, while\n    ``\"crammer_singer\"`` optimizes a joint objective over all classes.\n    While `crammer_singer` is interesting from a theoretical perspective\n    as it is consistent, it is seldom used in practice as it rarely leads\n    to better accuracy and is more expensive to compute.\n    If ``\"crammer_singer\"`` is chosen, the options loss, penalty and dual\n    will be ignored."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether or not to fit an intercept. If set to True, the feature vector\n    is extended to include an intercept term: `[x_1, ..., x_n, 1]`, where\n    1 corresponds to the intercept. If set to False, no intercept will be\n    used in calculations (i.e. data is expected to be already centered)."
          },
          "intercept_scaling": {
            "type": "float, default=1.0",
            "description": "When `fit_intercept` is True, the instance vector x becomes ``[x_1,\n    ..., x_n, intercept_scaling]``, i.e. a \"synthetic\" feature with a\n    constant value equal to `intercept_scaling` is appended to the instance\n    vector. The intercept becomes intercept_scaling * synthetic feature\n    weight. Note that liblinear internally penalizes the intercept,\n    treating it like any other term in the feature vector. To reduce the\n    impact of the regularization on the intercept, the `intercept_scaling`\n    parameter can be set to a value greater than 1; the higher the value of\n    `intercept_scaling`, the lower the impact of regularization on it.\n    Then, the weights become `[w_x_1, ..., w_x_n,\n    w_intercept*intercept_scaling]`, where `w_x_1, ..., w_x_n` represent\n    the feature weights and the intercept weight is scaled by\n    `intercept_scaling`. This scaling allows the intercept term to have a\n    different regularization behavior compared to the other features."
          },
          "class_weight": {
            "type": "dict or 'balanced', default=None",
            "description": "Set the parameter C of class i to ``class_weight[i]*C`` for\n    SVC. If not given, all classes are supposed to have\n    weight one.\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "Enable verbose output. Note that this setting takes advantage of a\n    per-process runtime setting in liblinear that, if enabled, may not work\n    properly in a multithreaded context."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Controls the pseudo random number generation for shuffling the data for\n    the dual coordinate descent (if ``dual=True``). When ``dual=False`` the\n    underlying implementation of :class:`LinearSVC` is not random and\n    ``random_state`` has no effect on the results.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of iterations to be run.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features) if n_classes == 2             else (n_classes, n_features)",
            "description": "Weights assigned to the features (coefficients in the primal\n    problem).\n\n    ``coef_`` is a readonly property derived from ``raw_coef_`` that\n    follows the internal memory layout of liblinear."
          },
          "intercept_": {
            "type": "ndarray of shape (1,) if n_classes == 2 else (n_classes,)",
            "description": "Constants in decision function."
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,)",
            "description": "The unique classes labels."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "Maximum number of iterations run across all classes."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "SVC : Implementation of Support Vector Machine classifier using libsvm:\n    the kernel can be non-linear but its SMO algorithm does not\n    scale to large number of samples as LinearSVC does.\n\n    Furthermore SVC multi-class mode is implemented using one\n    vs one scheme while LinearSVC uses one vs the rest. It is\n    possible to implement one vs the rest with SVC by using the\n    :class:`~sklearn.multiclass.OneVsRestClassifier` wrapper.\n\n    Finally SVC can fit dense data without memory copy if the input\n    is C-contiguous. Sparse data will still incur memory copy though.\n\nsklearn.linear_model.SGDClassifier : SGDClassifier can optimize the same\n    cost function as LinearSVC\n    by adjusting the penalty and loss parameters. In addition it requires\n    less memory, allows incremental (online) learning, and implements\n    various loss functions and regularization regimes.",
        "notes": "The underlying C implementation uses a random number generator to\nselect features when fitting the model. It is thus not uncommon\nto have slightly different results for the same input data. If\nthat happens, try with a smaller ``tol`` parameter.\n\nThe underlying implementation, liblinear, uses a sparse internal\nrepresentation for the data that will incur a memory copy.\n\nPredict output may not match that of standalone liblinear in certain\ncases. See :ref:`differences from liblinear <liblinear_differences>`\nin the narrative documentation.\n\nReferences\n----------\n`LIBLINEAR: A Library for Large Linear Classification\n<https://www.csie.ntu.edu.tw/~cjlin/liblinear/>`__",
        "examples": ">>> from sklearn.svm import LinearSVC\n>>> from sklearn.pipeline import make_pipeline\n>>> from sklearn.preprocessing import StandardScaler\n>>> from sklearn.datasets import make_classification\n>>> X, y = make_classification(n_features=4, random_state=0)\n>>> clf = make_pipeline(StandardScaler(),\n...                     LinearSVC(random_state=0, tol=1e-5))\n>>> clf.fit(X, y)\nPipeline(steps=[('standardscaler', StandardScaler()),\n                ('linearsvc', LinearSVC(random_state=0, tol=1e-05))])\n\n>>> print(clf.named_steps['linearsvc'].coef_)\n[[0.141...   0.526... 0.679... 0.493...]]\n\n>>> print(clf.named_steps['linearsvc'].intercept_)\n[0.1693...]\n>>> print(clf.predict([[0, 0, 0, 0]]))\n[1]"
      }
    },
    {
      "name": "LinearSVR",
      "signature": "LinearSVR(*, epsilon=0.0, tol=0.0001, C=1.0, loss='epsilon_insensitive', fit_intercept=True, intercept_scaling=1.0, dual='auto', verbose=0, random_state=None, max_iter=1000)",
      "docstring": {
        "description": "Linear Support Vector Regression.\n\nSimilar to SVR with parameter kernel='linear', but implemented in terms of\nliblinear rather than libsvm, so it has more flexibility in the choice of\npenalties and loss functions and should scale better to large numbers of\nsamples.\n\nThe main differences between :class:`~sklearn.svm.LinearSVR` and\n:class:`~sklearn.svm.SVR` lie in the loss function used by default, and in\nthe handling of intercept regularization between those two implementations.\n\nThis class supports both dense and sparse input.\n\nRead more in the :ref:`User Guide <svm_regression>`.\n\n.. versionadded:: 0.16",
        "parameters": {
          "epsilon": {
            "type": "float, default=0.0",
            "description": "Epsilon parameter in the epsilon-insensitive loss function. Note\n    that the value of this parameter depends on the scale of the target\n    variable y. If unsure, set ``epsilon=0``."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "Tolerance for stopping criteria."
          },
          "C": {
            "type": "float, default=1.0",
            "description": "Regularization parameter. The strength of the regularization is\n    inversely proportional to C. Must be strictly positive."
          },
          "loss": {
            "type": "{'epsilon_insensitive', 'squared_epsilon_insensitive'},             default='epsilon_insensitive'",
            "description": "Specifies the loss function. The epsilon-insensitive loss\n    (standard SVR) is the L1 loss, while the squared epsilon-insensitive\n    loss ('squared_epsilon_insensitive') is the L2 loss."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether or not to fit an intercept. If set to True, the feature vector\n    is extended to include an intercept term: `[x_1, ..., x_n, 1]`, where\n    1 corresponds to the intercept. If set to False, no intercept will be\n    used in calculations (i.e. data is expected to be already centered)."
          },
          "intercept_scaling": {
            "type": "float, default=1.0",
            "description": "When `fit_intercept` is True, the instance vector x becomes `[x_1, ...,\n    x_n, intercept_scaling]`, i.e. a \"synthetic\" feature with a constant\n    value equal to `intercept_scaling` is appended to the instance vector.\n    The intercept becomes intercept_scaling * synthetic feature weight.\n    Note that liblinear internally penalizes the intercept, treating it\n    like any other term in the feature vector. To reduce the impact of the\n    regularization on the intercept, the `intercept_scaling` parameter can\n    be set to a value greater than 1; the higher the value of\n    `intercept_scaling`, the lower the impact of regularization on it.\n    Then, the weights become `[w_x_1, ..., w_x_n,\n    w_intercept*intercept_scaling]`, where `w_x_1, ..., w_x_n` represent\n    the feature weights and the intercept weight is scaled by\n    `intercept_scaling`. This scaling allows the intercept term to have a\n    different regularization behavior compared to the other features."
          },
          "dual": {
            "type": "\"auto\" or bool, default=\"auto\"",
            "description": "Select the algorithm to either solve the dual or primal\n    optimization problem. Prefer dual=False when n_samples > n_features.\n    `dual=\"auto\"` will choose the value of the parameter automatically,\n    based on the values of `n_samples`, `n_features` and `loss`. If\n    `n_samples` < `n_features` and optimizer supports chosen `loss`,\n    then dual will be set to True, otherwise it will be set to False.\n\n    .. versionchanged:: 1.3\n       The `\"auto\"` option is added in version 1.3 and will be the default\n       in version 1.5."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "Enable verbose output. Note that this setting takes advantage of a\n    per-process runtime setting in liblinear that, if enabled, may not work\n    properly in a multithreaded context."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Controls the pseudo random number generation for shuffling the data.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of iterations to be run.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (n_features) if n_classes == 2             else (n_classes, n_features)",
            "description": "Weights assigned to the features (coefficients in the primal\n    problem).\n\n    `coef_` is a readonly property derived from `raw_coef_` that\n    follows the internal memory layout of liblinear."
          },
          "intercept_": {
            "type": "ndarray of shape (1) if n_classes == 2 else (n_classes)",
            "description": "Constants in decision function."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "Maximum number of iterations run across all classes."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "LinearSVC : Implementation of Support Vector Machine classifier using the\n    same library as this class (liblinear).\n\nSVR : Implementation of Support Vector Machine regression using libsvm:\n    the kernel can be non-linear but its SMO algorithm does not scale to\n    large number of samples as :class:`~sklearn.svm.LinearSVR` does.\n\nsklearn.linear_model.SGDRegressor : SGDRegressor can optimize the same cost\n    function as LinearSVR\n    by adjusting the penalty and loss parameters. In addition it requires\n    less memory, allows incremental (online) learning, and implements\n    various loss functions and regularization regimes.",
        "notes": "",
        "examples": ">>> from sklearn.svm import LinearSVR\n>>> from sklearn.pipeline import make_pipeline\n>>> from sklearn.preprocessing import StandardScaler\n>>> from sklearn.datasets import make_regression\n>>> X, y = make_regression(n_features=4, random_state=0)\n>>> regr = make_pipeline(StandardScaler(),\n...                      LinearSVR(random_state=0, tol=1e-5))\n>>> regr.fit(X, y)\nPipeline(steps=[('standardscaler', StandardScaler()),\n                ('linearsvr', LinearSVR(random_state=0, tol=1e-05))])\n\n>>> print(regr.named_steps['linearsvr'].coef_)\n[18.582... 27.023... 44.357... 64.522...]\n>>> print(regr.named_steps['linearsvr'].intercept_)\n[-4...]\n>>> print(regr.predict([[0, 0, 0, 0]]))\n[-2.384...]"
      }
    },
    {
      "name": "NuSVC",
      "signature": "NuSVC(*, nu=0.5, kernel='rbf', degree=3, gamma='scale', coef0=0.0, shrinking=True, probability=False, tol=0.001, cache_size=200, class_weight=None, verbose=False, max_iter=-1, decision_function_shape='ovr', break_ties=False, random_state=None)",
      "docstring": {
        "description": "Nu-Support Vector Classification.\n\nSimilar to SVC but uses a parameter to control the number of support\nvectors.\n\nThe implementation is based on libsvm.\n\nRead more in the :ref:`User Guide <svm_classification>`.",
        "parameters": {
          "nu": {
            "type": "float, default=0.5",
            "description": "An upper bound on the fraction of margin errors (see :ref:`User Guide\n    <nu_svc>`) and a lower bound of the fraction of support vectors.\n    Should be in the interval (0, 1]."
          },
          "kernel": {
            "type": "{'linear', 'poly', 'rbf', 'sigmoid', 'precomputed'} or callable,          default='rbf'",
            "description": "Specifies the kernel type to be used in the algorithm.\n    If none is given, 'rbf' will be used. If a callable is given it is\n    used to precompute the kernel matrix. For an intuitive\n    visualization of different kernel types see\n    :ref:`sphx_glr_auto_examples_svm_plot_svm_kernels.py`."
          },
          "degree": {
            "type": "int, default=3",
            "description": "Degree of the polynomial kernel function ('poly').\n    Must be non-negative. Ignored by all other kernels."
          },
          "gamma": {
            "type": "{'scale', 'auto'} or float, default='scale'",
            "description": "Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.\n\n    - if ``gamma='scale'`` (default) is passed then it uses\n      1 / (n_features * X.var()) as value of gamma,\n    - if 'auto', uses 1 / n_features\n    - if float, must be non-negative.\n\n    .. versionchanged:: 0.22\n       The default value of ``gamma`` changed from 'auto' to 'scale'."
          },
          "coef0": {
            "type": "float, default=0.0",
            "description": "Independent term in kernel function.\n    It is only significant in 'poly' and 'sigmoid'."
          },
          "shrinking": {
            "type": "bool, default=True",
            "description": "Whether to use the shrinking heuristic.\n    See the :ref:`User Guide <shrinking_svm>`."
          },
          "probability": {
            "type": "bool, default=False",
            "description": "Whether to enable probability estimates. This must be enabled prior\n    to calling `fit`, will slow down that method as it internally uses\n    5-fold cross-validation, and `predict_proba` may be inconsistent with\n    `predict`. Read more in the :ref:`User Guide <scores_probabilities>`."
          },
          "tol": {
            "type": "float, default=1e-3",
            "description": "Tolerance for stopping criterion."
          },
          "cache_size": {
            "type": "float, default=200",
            "description": "Specify the size of the kernel cache (in MB)."
          },
          "class_weight": {
            "type": "{dict, 'balanced'}, default=None",
            "description": "Set the parameter C of class i to class_weight[i]*C for\n    SVC. If not given, all classes are supposed to have\n    weight one. The \"balanced\" mode uses the values of y to automatically\n    adjust weights inversely proportional to class frequencies as\n    ``n_samples / (n_classes * np.bincount(y))``."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Enable verbose output. Note that this setting takes advantage of a\n    per-process runtime setting in libsvm that, if enabled, may not work\n    properly in a multithreaded context."
          },
          "max_iter": {
            "type": "int, default=-1",
            "description": "Hard limit on iterations within solver, or -1 for no limit."
          },
          "decision_function_shape": {
            "type": "{'ovo', 'ovr'}, default='ovr'",
            "description": "Whether to return a one-vs-rest ('ovr') decision function of shape\n    (n_samples, n_classes) as all other classifiers, or the original\n    one-vs-one ('ovo') decision function of libsvm which has shape\n    (n_samples, n_classes * (n_classes - 1) / 2). However, one-vs-one\n    ('ovo') is always used as multi-class strategy. The parameter is\n    ignored for binary classification.\n\n    .. versionchanged:: 0.19\n        decision_function_shape is 'ovr' by default.\n\n    .. versionadded:: 0.17\n       *decision_function_shape='ovr'* is recommended.\n\n    .. versionchanged:: 0.17\n       Deprecated *decision_function_shape='ovo' and None*."
          },
          "break_ties": {
            "type": "bool, default=False",
            "description": "If true, ``decision_function_shape='ovr'``, and number of classes > 2,\n    :term:`predict` will break ties according to the confidence values of\n    :term:`decision_function`; otherwise the first class among the tied\n    classes is returned. Please note that breaking ties comes at a\n    relatively high computational cost compared to a simple predict.\n    See :ref:`sphx_glr_auto_examples_svm_plot_svm_tie_breaking.py` for an\n    example of its usage with ``decision_function_shape='ovr'``.\n\n    .. versionadded:: 0.22"
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Controls the pseudo random number generation for shuffling the data for\n    probability estimates. Ignored when `probability` is False.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`.\n\nAttributes\n----------"
          },
          "class_weight_": {
            "type": "ndarray of shape (n_classes,)",
            "description": "Multipliers of parameter C of each class.\n    Computed based on the ``class_weight`` parameter."
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,)",
            "description": "The unique classes labels."
          },
          "coef_": {
            "type": "ndarray of shape (n_classes * (n_classes -1) / 2, n_features)",
            "description": "Weights assigned to the features (coefficients in the primal\n    problem). This is only available in the case of a linear kernel.\n\n    `coef_` is readonly property derived from `dual_coef_` and\n    `support_vectors_`."
          },
          "dual_coef_": {
            "type": "ndarray of shape (n_classes - 1, n_SV)",
            "description": "Dual coefficients of the support vector in the decision\n    function (see :ref:`sgd_mathematical_formulation`), multiplied by\n    their targets.\n    For multiclass, coefficient for all 1-vs-1 classifiers.\n    The layout of the coefficients in the multiclass case is somewhat\n    non-trivial. See the :ref:`multi-class section of the User Guide\n    <svm_multi_class>` for details."
          },
          "fit_status_": {
            "type": "int",
            "description": "0 if correctly fitted, 1 if the algorithm did not converge."
          },
          "intercept_": {
            "type": "ndarray of shape (n_classes * (n_classes - 1) / 2,)",
            "description": "Constants in decision function."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "ndarray of shape (n_classes * (n_classes - 1) // 2,)",
            "description": "Number of iterations run by the optimization routine to fit the model.\n    The shape of this attribute depends on the number of models optimized\n    which in turn depends on the number of classes.\n\n    .. versionadded:: 1.1"
          },
          "support_": {
            "type": "ndarray of shape (n_SV,)",
            "description": "Indices of support vectors."
          },
          "support_vectors_": {
            "type": "ndarray of shape (n_SV, n_features)",
            "description": "Support vectors."
          },
          "n_support_": {
            "type": "ndarray of shape (n_classes,), dtype=int32",
            "description": "Number of support vectors for each class."
          },
          "probA_": {
            "type": "ndarray of shape (n_classes * (n_classes - 1) / 2,)",
            "description": ""
          },
          "probB_": {
            "type": "ndarray of shape (n_classes * (n_classes - 1) / 2,)",
            "description": "If `probability=True`, it corresponds to the parameters learned in\n    Platt scaling to produce probability estimates from decision values.\n    If `probability=False`, it's an empty array. Platt scaling uses the\n    logistic function\n    ``1 / (1 + exp(decision_value * probA_ + probB_))``\n    where ``probA_`` and ``probB_`` are learned from the dataset [2]_. For\n    more information on the multiclass case and training procedure see\n    section 8 of [1]_."
          },
          "shape_fit_": {
            "type": "tuple of int of shape (n_dimensions_of_X,)",
            "description": "Array dimensions of training vector ``X``."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "SVC : Support Vector Machine for classification using libsvm.\n\nLinearSVC : Scalable linear Support Vector Machine for classification using\n    liblinear.\n\nReferences\n----------\n.. [1] `LIBSVM: A Library for Support Vector Machines\n    <http://www.csie.ntu.edu.tw/~cjlin/papers/libsvm.pdf>`_\n\n.. [2] `Platt, John (1999). \"Probabilistic Outputs for Support Vector\n    Machines and Comparisons to Regularized Likelihood Methods\"\n    <https://citeseerx.ist.psu.edu/doc_view/pid/42e5ed832d4310ce4378c44d05570439df28a393>`_",
        "notes": "",
        "examples": ">>> import numpy as np\n>>> X = np.array([[-1, -1], [-2, -1], [1, 1], [2, 1]])\n>>> y = np.array([1, 1, 2, 2])\n>>> from sklearn.pipeline import make_pipeline\n>>> from sklearn.preprocessing import StandardScaler\n>>> from sklearn.svm import NuSVC\n>>> clf = make_pipeline(StandardScaler(), NuSVC())\n>>> clf.fit(X, y)\nPipeline(steps=[('standardscaler', StandardScaler()), ('nusvc', NuSVC())])\n>>> print(clf.predict([[-0.8, -1]]))\n[1]"
      }
    },
    {
      "name": "NuSVR",
      "signature": "NuSVR(*, nu=0.5, C=1.0, kernel='rbf', degree=3, gamma='scale', coef0=0.0, shrinking=True, tol=0.001, cache_size=200, verbose=False, max_iter=-1)",
      "docstring": {
        "description": "Nu Support Vector Regression.\n\nSimilar to NuSVC, for regression, uses a parameter nu to control\nthe number of support vectors. However, unlike NuSVC, where nu\nreplaces C, here nu replaces the parameter epsilon of epsilon-SVR.\n\nThe implementation is based on libsvm.\n\nRead more in the :ref:`User Guide <svm_regression>`.",
        "parameters": {
          "nu": {
            "type": "float, default=0.5",
            "description": "An upper bound on the fraction of training errors and a lower bound of\n    the fraction of support vectors. Should be in the interval (0, 1].  By\n    default 0.5 will be taken."
          },
          "C": {
            "type": "float, default=1.0",
            "description": "Penalty parameter C of the error term. For an intuitive visualization\n    of the effects of scaling the regularization parameter C, see\n    :ref:`sphx_glr_auto_examples_svm_plot_svm_scale_c.py`."
          },
          "kernel": {
            "type": "{'linear', 'poly', 'rbf', 'sigmoid', 'precomputed'} or callable,          default='rbf'",
            "description": "Specifies the kernel type to be used in the algorithm.\n     If none is given, 'rbf' will be used. If a callable is given it is\n     used to precompute the kernel matrix.\n     For an intuitive visualization of different kernel types see\n     See :ref:`sphx_glr_auto_examples_svm_plot_svm_regression.py`"
          },
          "degree": {
            "type": "int, default=3",
            "description": "Degree of the polynomial kernel function ('poly').\n    Must be non-negative. Ignored by all other kernels."
          },
          "gamma": {
            "type": "{'scale', 'auto'} or float, default='scale'",
            "description": "Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.\n\n    - if ``gamma='scale'`` (default) is passed then it uses\n      1 / (n_features * X.var()) as value of gamma,\n    - if 'auto', uses 1 / n_features\n    - if float, must be non-negative.\n\n    .. versionchanged:: 0.22\n       The default value of ``gamma`` changed from 'auto' to 'scale'."
          },
          "coef0": {
            "type": "float, default=0.0",
            "description": "Independent term in kernel function.\n    It is only significant in 'poly' and 'sigmoid'."
          },
          "shrinking": {
            "type": "bool, default=True",
            "description": "Whether to use the shrinking heuristic.\n    See the :ref:`User Guide <shrinking_svm>`."
          },
          "tol": {
            "type": "float, default=1e-3",
            "description": "Tolerance for stopping criterion."
          },
          "cache_size": {
            "type": "float, default=200",
            "description": "Specify the size of the kernel cache (in MB)."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Enable verbose output. Note that this setting takes advantage of a\n    per-process runtime setting in libsvm that, if enabled, may not work\n    properly in a multithreaded context."
          },
          "max_iter": {
            "type": "int, default=-1",
            "description": "Hard limit on iterations within solver, or -1 for no limit.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features)",
            "description": "Weights assigned to the features (coefficients in the primal\n    problem). This is only available in the case of a linear kernel.\n\n    `coef_` is readonly property derived from `dual_coef_` and\n    `support_vectors_`."
          },
          "dual_coef_": {
            "type": "ndarray of shape (1, n_SV)",
            "description": "Coefficients of the support vector in the decision function."
          },
          "fit_status_": {
            "type": "int",
            "description": "0 if correctly fitted, 1 otherwise (will raise warning)"
          },
          "intercept_": {
            "type": "ndarray of shape (1,)",
            "description": "Constants in decision function."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations run by the optimization routine to fit the model.\n\n    .. versionadded:: 1.1"
          },
          "n_support_": {
            "type": "ndarray of shape (1,), dtype=int32",
            "description": "Number of support vectors."
          },
          "shape_fit_": {
            "type": "tuple of int of shape (n_dimensions_of_X,)",
            "description": "Array dimensions of training vector ``X``."
          },
          "support_": {
            "type": "ndarray of shape (n_SV,)",
            "description": "Indices of support vectors."
          },
          "support_vectors_": {
            "type": "ndarray of shape (n_SV, n_features)",
            "description": "Support vectors."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "NuSVC : Support Vector Machine for classification implemented with libsvm\n    with a parameter to control the number of support vectors.\n\nSVR : Epsilon Support Vector Machine for regression implemented with\n    libsvm.\n\nReferences\n----------\n.. [1] `LIBSVM: A Library for Support Vector Machines\n    <http://www.csie.ntu.edu.tw/~cjlin/papers/libsvm.pdf>`_\n\n.. [2] `Platt, John (1999). \"Probabilistic Outputs for Support Vector\n    Machines and Comparisons to Regularized Likelihood Methods\"\n    <https://citeseerx.ist.psu.edu/doc_view/pid/42e5ed832d4310ce4378c44d05570439df28a393>`_",
        "notes": "",
        "examples": ">>> from sklearn.svm import NuSVR\n>>> from sklearn.pipeline import make_pipeline\n>>> from sklearn.preprocessing import StandardScaler\n>>> import numpy as np\n>>> n_samples, n_features = 10, 5\n>>> np.random.seed(0)\n>>> y = np.random.randn(n_samples)\n>>> X = np.random.randn(n_samples, n_features)\n>>> regr = make_pipeline(StandardScaler(), NuSVR(C=1.0, nu=0.1))\n>>> regr.fit(X, y)\nPipeline(steps=[('standardscaler', StandardScaler()),\n                ('nusvr', NuSVR(nu=0.1))])"
      }
    },
    {
      "name": "OneClassSVM",
      "signature": "OneClassSVM(*, kernel='rbf', degree=3, gamma='scale', coef0=0.0, tol=0.001, nu=0.5, shrinking=True, cache_size=200, verbose=False, max_iter=-1)",
      "docstring": {
        "description": "Unsupervised Outlier Detection.\n\nEstimate the support of a high-dimensional distribution.\n\nThe implementation is based on libsvm.\n\nRead more in the :ref:`User Guide <outlier_detection>`.",
        "parameters": {
          "kernel": {
            "type": "{'linear', 'poly', 'rbf', 'sigmoid', 'precomputed'} or callable,          default='rbf'",
            "description": "Specifies the kernel type to be used in the algorithm.\n     If none is given, 'rbf' will be used. If a callable is given it is\n     used to precompute the kernel matrix."
          },
          "degree": {
            "type": "int, default=3",
            "description": "Degree of the polynomial kernel function ('poly').\n    Must be non-negative. Ignored by all other kernels."
          },
          "gamma": {
            "type": "{'scale', 'auto'} or float, default='scale'",
            "description": "Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.\n\n    - if ``gamma='scale'`` (default) is passed then it uses\n      1 / (n_features * X.var()) as value of gamma,\n    - if 'auto', uses 1 / n_features\n    - if float, must be non-negative.\n\n    .. versionchanged:: 0.22\n       The default value of ``gamma`` changed from 'auto' to 'scale'."
          },
          "coef0": {
            "type": "float, default=0.0",
            "description": "Independent term in kernel function.\n    It is only significant in 'poly' and 'sigmoid'."
          },
          "tol": {
            "type": "float, default=1e-3",
            "description": "Tolerance for stopping criterion."
          },
          "nu": {
            "type": "float, default=0.5",
            "description": "An upper bound on the fraction of training\n    errors and a lower bound of the fraction of support\n    vectors. Should be in the interval (0, 1]. By default 0.5\n    will be taken."
          },
          "shrinking": {
            "type": "bool, default=True",
            "description": "Whether to use the shrinking heuristic.\n    See the :ref:`User Guide <shrinking_svm>`."
          },
          "cache_size": {
            "type": "float, default=200",
            "description": "Specify the size of the kernel cache (in MB)."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Enable verbose output. Note that this setting takes advantage of a\n    per-process runtime setting in libsvm that, if enabled, may not work\n    properly in a multithreaded context."
          },
          "max_iter": {
            "type": "int, default=-1",
            "description": "Hard limit on iterations within solver, or -1 for no limit.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features)",
            "description": "Weights assigned to the features (coefficients in the primal\n    problem). This is only available in the case of a linear kernel.\n\n    `coef_` is readonly property derived from `dual_coef_` and\n    `support_vectors_`."
          },
          "dual_coef_": {
            "type": "ndarray of shape (1, n_SV)",
            "description": "Coefficients of the support vectors in the decision function."
          },
          "fit_status_": {
            "type": "int",
            "description": "0 if correctly fitted, 1 otherwise (will raise warning)"
          },
          "intercept_": {
            "type": "ndarray of shape (1,)",
            "description": "Constant in the decision function."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations run by the optimization routine to fit the model.\n\n    .. versionadded:: 1.1"
          },
          "n_support_": {
            "type": "ndarray of shape (n_classes,), dtype=int32",
            "description": "Number of support vectors for each class."
          },
          "offset_": {
            "type": "float",
            "description": "Offset used to define the decision function from the raw scores.\n    We have the relation: decision_function = score_samples - `offset_`.\n    The offset is the opposite of `intercept_` and is provided for\n    consistency with other outlier detection algorithms.\n\n    .. versionadded:: 0.20"
          },
          "shape_fit_": {
            "type": "tuple of int of shape (n_dimensions_of_X,)",
            "description": "Array dimensions of training vector ``X``."
          },
          "support_": {
            "type": "ndarray of shape (n_SV,)",
            "description": "Indices of support vectors."
          },
          "support_vectors_": {
            "type": "ndarray of shape (n_SV, n_features)",
            "description": "Support vectors."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "sklearn.linear_model.SGDOneClassSVM : Solves linear One-Class SVM using\n    Stochastic Gradient Descent.\nsklearn.neighbors.LocalOutlierFactor : Unsupervised Outlier Detection using\n    Local Outlier Factor (LOF).\nsklearn.ensemble.IsolationForest : Isolation Forest Algorithm.",
        "notes": "",
        "examples": ">>> from sklearn.svm import OneClassSVM\n>>> X = [[0], [0.44], [0.45], [0.46], [1]]\n>>> clf = OneClassSVM(gamma='auto').fit(X)\n>>> clf.predict(X)\narray([-1,  1,  1,  1, -1])\n>>> clf.score_samples(X)\narray([1.7798..., 2.0547..., 2.0556..., 2.0561..., 1.7332...])\n\nFor a more extended example,\nsee :ref:`sphx_glr_auto_examples_applications_plot_species_distribution_modeling.py`"
      }
    },
    {
      "name": "SVC",
      "signature": "SVC(*, C=1.0, kernel='rbf', degree=3, gamma='scale', coef0=0.0, shrinking=True, probability=False, tol=0.001, cache_size=200, class_weight=None, verbose=False, max_iter=-1, decision_function_shape='ovr', break_ties=False, random_state=None)",
      "docstring": {
        "description": "C-Support Vector Classification.\n\nThe implementation is based on libsvm. The fit time scales at least\nquadratically with the number of samples and may be impractical\nbeyond tens of thousands of samples. For large datasets\nconsider using :class:`~sklearn.svm.LinearSVC` or\n:class:`~sklearn.linear_model.SGDClassifier` instead, possibly after a\n:class:`~sklearn.kernel_approximation.Nystroem` transformer or\nother :ref:`kernel_approximation`.\n\nThe multiclass support is handled according to a one-vs-one scheme.\n\nFor details on the precise mathematical formulation of the provided\nkernel functions and how `gamma`, `coef0` and `degree` affect each\nother, see the corresponding section in the narrative documentation:\n:ref:`svm_kernels`.\n\nTo learn how to tune SVC's hyperparameters, see the following example:\n:ref:`sphx_glr_auto_examples_model_selection_plot_nested_cross_validation_iris.py`\n\nRead more in the :ref:`User Guide <svm_classification>`.",
        "parameters": {
          "C": {
            "type": "float, default=1.0",
            "description": "Regularization parameter. The strength of the regularization is\n    inversely proportional to C. Must be strictly positive. The penalty\n    is a squared l2 penalty. For an intuitive visualization of the effects\n    of scaling the regularization parameter C, see\n    :ref:`sphx_glr_auto_examples_svm_plot_svm_scale_c.py`."
          },
          "kernel": {
            "type": "{'linear', 'poly', 'rbf', 'sigmoid', 'precomputed'} or callable,          default='rbf'",
            "description": "Specifies the kernel type to be used in the algorithm. If\n    none is given, 'rbf' will be used. If a callable is given it is used to\n    pre-compute the kernel matrix from data matrices; that matrix should be\n    an array of shape ``(n_samples, n_samples)``. For an intuitive\n    visualization of different kernel types see\n    :ref:`sphx_glr_auto_examples_svm_plot_svm_kernels.py`."
          },
          "degree": {
            "type": "int, default=3",
            "description": "Degree of the polynomial kernel function ('poly').\n    Must be non-negative. Ignored by all other kernels."
          },
          "gamma": {
            "type": "{'scale', 'auto'} or float, default='scale'",
            "description": "Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.\n\n    - if ``gamma='scale'`` (default) is passed then it uses\n      1 / (n_features * X.var()) as value of gamma,\n    - if 'auto', uses 1 / n_features\n    - if float, must be non-negative.\n\n    .. versionchanged:: 0.22\n       The default value of ``gamma`` changed from 'auto' to 'scale'."
          },
          "coef0": {
            "type": "float, default=0.0",
            "description": "Independent term in kernel function.\n    It is only significant in 'poly' and 'sigmoid'."
          },
          "shrinking": {
            "type": "bool, default=True",
            "description": "Whether to use the shrinking heuristic.\n    See the :ref:`User Guide <shrinking_svm>`."
          },
          "probability": {
            "type": "bool, default=False",
            "description": "Whether to enable probability estimates. This must be enabled prior\n    to calling `fit`, will slow down that method as it internally uses\n    5-fold cross-validation, and `predict_proba` may be inconsistent with\n    `predict`. Read more in the :ref:`User Guide <scores_probabilities>`."
          },
          "tol": {
            "type": "float, default=1e-3",
            "description": "Tolerance for stopping criterion."
          },
          "cache_size": {
            "type": "float, default=200",
            "description": "Specify the size of the kernel cache (in MB)."
          },
          "class_weight": {
            "type": "dict or 'balanced', default=None",
            "description": "Set the parameter C of class i to class_weight[i]*C for\n    SVC. If not given, all classes are supposed to have\n    weight one.\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Enable verbose output. Note that this setting takes advantage of a\n    per-process runtime setting in libsvm that, if enabled, may not work\n    properly in a multithreaded context."
          },
          "max_iter": {
            "type": "int, default=-1",
            "description": "Hard limit on iterations within solver, or -1 for no limit."
          },
          "decision_function_shape": {
            "type": "{'ovo', 'ovr'}, default='ovr'",
            "description": "Whether to return a one-vs-rest ('ovr') decision function of shape\n    (n_samples, n_classes) as all other classifiers, or the original\n    one-vs-one ('ovo') decision function of libsvm which has shape\n    (n_samples, n_classes * (n_classes - 1) / 2). However, note that\n    internally, one-vs-one ('ovo') is always used as a multi-class strategy\n    to train models; an ovr matrix is only constructed from the ovo matrix.\n    The parameter is ignored for binary classification.\n\n    .. versionchanged:: 0.19\n        decision_function_shape is 'ovr' by default.\n\n    .. versionadded:: 0.17\n       *decision_function_shape='ovr'* is recommended.\n\n    .. versionchanged:: 0.17\n       Deprecated *decision_function_shape='ovo' and None*."
          },
          "break_ties": {
            "type": "bool, default=False",
            "description": "If true, ``decision_function_shape='ovr'``, and number of classes > 2,\n    :term:`predict` will break ties according to the confidence values of\n    :term:`decision_function`; otherwise the first class among the tied\n    classes is returned. Please note that breaking ties comes at a\n    relatively high computational cost compared to a simple predict. See\n    :ref:`sphx_glr_auto_examples_svm_plot_svm_tie_breaking.py` for an\n    example of its usage with ``decision_function_shape='ovr'``.\n\n    .. versionadded:: 0.22"
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Controls the pseudo random number generation for shuffling the data for\n    probability estimates. Ignored when `probability` is False.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`.\n\nAttributes\n----------"
          },
          "class_weight_": {
            "type": "ndarray of shape (n_classes,)",
            "description": "Multipliers of parameter C for each class.\n    Computed based on the ``class_weight`` parameter."
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,)",
            "description": "The classes labels."
          },
          "coef_": {
            "type": "ndarray of shape (n_classes * (n_classes - 1) / 2, n_features)",
            "description": "Weights assigned to the features (coefficients in the primal\n    problem). This is only available in the case of a linear kernel.\n\n    `coef_` is a readonly property derived from `dual_coef_` and\n    `support_vectors_`."
          },
          "dual_coef_": {
            "type": "ndarray of shape (n_classes -1, n_SV)",
            "description": "Dual coefficients of the support vector in the decision\n    function (see :ref:`sgd_mathematical_formulation`), multiplied by\n    their targets.\n    For multiclass, coefficient for all 1-vs-1 classifiers.\n    The layout of the coefficients in the multiclass case is somewhat\n    non-trivial. See the :ref:`multi-class section of the User Guide\n    <svm_multi_class>` for details."
          },
          "fit_status_": {
            "type": "int",
            "description": "0 if correctly fitted, 1 otherwise (will raise warning)"
          },
          "intercept_": {
            "type": "ndarray of shape (n_classes * (n_classes - 1) / 2,)",
            "description": "Constants in decision function."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "ndarray of shape (n_classes * (n_classes - 1) // 2,)",
            "description": "Number of iterations run by the optimization routine to fit the model.\n    The shape of this attribute depends on the number of models optimized\n    which in turn depends on the number of classes.\n\n    .. versionadded:: 1.1"
          },
          "support_": {
            "type": "ndarray of shape (n_SV)",
            "description": "Indices of support vectors."
          },
          "support_vectors_": {
            "type": "ndarray of shape (n_SV, n_features)",
            "description": "Support vectors. An empty array if kernel is precomputed."
          },
          "n_support_": {
            "type": "ndarray of shape (n_classes,), dtype=int32",
            "description": "Number of support vectors for each class."
          },
          "probA_": {
            "type": "ndarray of shape (n_classes * (n_classes - 1) / 2)",
            "description": ""
          },
          "probB_": {
            "type": "ndarray of shape (n_classes * (n_classes - 1) / 2)",
            "description": "If `probability=True`, it corresponds to the parameters learned in\n    Platt scaling to produce probability estimates from decision values.\n    If `probability=False`, it's an empty array. Platt scaling uses the\n    logistic function\n    ``1 / (1 + exp(decision_value * probA_ + probB_))``\n    where ``probA_`` and ``probB_`` are learned from the dataset [2]_. For\n    more information on the multiclass case and training procedure see\n    section 8 of [1]_."
          },
          "shape_fit_": {
            "type": "tuple of int of shape (n_dimensions_of_X,)",
            "description": "Array dimensions of training vector ``X``."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "SVR : Support Vector Machine for Regression implemented using libsvm.\n\nLinearSVC : Scalable Linear Support Vector Machine for classification\n    implemented using liblinear. Check the See Also section of\n    LinearSVC for more comparison element.\n\nReferences\n----------\n.. [1] `LIBSVM: A Library for Support Vector Machines\n    <http://www.csie.ntu.edu.tw/~cjlin/papers/libsvm.pdf>`_\n\n.. [2] `Platt, John (1999). \"Probabilistic Outputs for Support Vector\n    Machines and Comparisons to Regularized Likelihood Methods\"\n    <https://citeseerx.ist.psu.edu/doc_view/pid/42e5ed832d4310ce4378c44d05570439df28a393>`_",
        "notes": "",
        "examples": ">>> import numpy as np\n>>> from sklearn.pipeline import make_pipeline\n>>> from sklearn.preprocessing import StandardScaler\n>>> X = np.array([[-1, -1], [-2, -1], [1, 1], [2, 1]])\n>>> y = np.array([1, 1, 2, 2])\n>>> from sklearn.svm import SVC\n>>> clf = make_pipeline(StandardScaler(), SVC(gamma='auto'))\n>>> clf.fit(X, y)\nPipeline(steps=[('standardscaler', StandardScaler()),\n                ('svc', SVC(gamma='auto'))])\n\n>>> print(clf.predict([[-0.8, -1]]))\n[1]\n\nFor a comaprison of the SVC with other classifiers see:\n:ref:`sphx_glr_auto_examples_classification_plot_classification_probability.py`."
      }
    },
    {
      "name": "SVR",
      "signature": "SVR(*, kernel='rbf', degree=3, gamma='scale', coef0=0.0, tol=0.001, C=1.0, epsilon=0.1, shrinking=True, cache_size=200, verbose=False, max_iter=-1)",
      "docstring": {
        "description": "Epsilon-Support Vector Regression.\n\nThe free parameters in the model are C and epsilon.\n\nThe implementation is based on libsvm. The fit time complexity\nis more than quadratic with the number of samples which makes it hard\nto scale to datasets with more than a couple of 10000 samples. For large\ndatasets consider using :class:`~sklearn.svm.LinearSVR` or\n:class:`~sklearn.linear_model.SGDRegressor` instead, possibly after a\n:class:`~sklearn.kernel_approximation.Nystroem` transformer or\nother :ref:`kernel_approximation`.\n\nRead more in the :ref:`User Guide <svm_regression>`.",
        "parameters": {
          "kernel": {
            "type": "{'linear', 'poly', 'rbf', 'sigmoid', 'precomputed'} or callable,          default='rbf'",
            "description": "Specifies the kernel type to be used in the algorithm.\n     If none is given, 'rbf' will be used. If a callable is given it is\n     used to precompute the kernel matrix.\n     For an intuitive visualization of different kernel types\n     see :ref:`sphx_glr_auto_examples_svm_plot_svm_regression.py`"
          },
          "degree": {
            "type": "int, default=3",
            "description": "Degree of the polynomial kernel function ('poly').\n    Must be non-negative. Ignored by all other kernels."
          },
          "gamma": {
            "type": "{'scale', 'auto'} or float, default='scale'",
            "description": "Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.\n\n    - if ``gamma='scale'`` (default) is passed then it uses\n      1 / (n_features * X.var()) as value of gamma,\n    - if 'auto', uses 1 / n_features\n    - if float, must be non-negative.\n\n    .. versionchanged:: 0.22\n       The default value of ``gamma`` changed from 'auto' to 'scale'."
          },
          "coef0": {
            "type": "float, default=0.0",
            "description": "Independent term in kernel function.\n    It is only significant in 'poly' and 'sigmoid'."
          },
          "tol": {
            "type": "float, default=1e-3",
            "description": "Tolerance for stopping criterion."
          },
          "C": {
            "type": "float, default=1.0",
            "description": "Regularization parameter. The strength of the regularization is\n    inversely proportional to C. Must be strictly positive.\n    The penalty is a squared l2. For an intuitive visualization of the\n    effects of scaling the regularization parameter C, see\n    :ref:`sphx_glr_auto_examples_svm_plot_svm_scale_c.py`."
          },
          "epsilon": {
            "type": "float, default=0.1",
            "description": "Epsilon in the epsilon-SVR model. It specifies the epsilon-tube\n     within which no penalty is associated in the training loss function\n     with points predicted within a distance epsilon from the actual\n     value. Must be non-negative."
          },
          "shrinking": {
            "type": "bool, default=True",
            "description": "Whether to use the shrinking heuristic.\n    See the :ref:`User Guide <shrinking_svm>`."
          },
          "cache_size": {
            "type": "float, default=200",
            "description": "Specify the size of the kernel cache (in MB)."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Enable verbose output. Note that this setting takes advantage of a\n    per-process runtime setting in libsvm that, if enabled, may not work\n    properly in a multithreaded context."
          },
          "max_iter": {
            "type": "int, default=-1",
            "description": "Hard limit on iterations within solver, or -1 for no limit.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features)",
            "description": "Weights assigned to the features (coefficients in the primal\n    problem). This is only available in the case of a linear kernel.\n\n    `coef_` is readonly property derived from `dual_coef_` and\n    `support_vectors_`."
          },
          "dual_coef_": {
            "type": "ndarray of shape (1, n_SV)",
            "description": "Coefficients of the support vector in the decision function."
          },
          "fit_status_": {
            "type": "int",
            "description": "0 if correctly fitted, 1 otherwise (will raise warning)"
          },
          "intercept_": {
            "type": "ndarray of shape (1,)",
            "description": "Constants in decision function."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations run by the optimization routine to fit the model.\n\n    .. versionadded:: 1.1"
          },
          "n_support_": {
            "type": "ndarray of shape (1,), dtype=int32",
            "description": "Number of support vectors."
          },
          "shape_fit_": {
            "type": "tuple of int of shape (n_dimensions_of_X,)",
            "description": "Array dimensions of training vector ``X``."
          },
          "support_": {
            "type": "ndarray of shape (n_SV,)",
            "description": "Indices of support vectors."
          },
          "support_vectors_": {
            "type": "ndarray of shape (n_SV, n_features)",
            "description": "Support vectors."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "NuSVR : Support Vector Machine for regression implemented using libsvm\n    using a parameter to control the number of support vectors.\n\nLinearSVR : Scalable Linear Support Vector Machine for regression\n    implemented using liblinear.\n\nReferences\n----------\n.. [1] `LIBSVM: A Library for Support Vector Machines\n    <http://www.csie.ntu.edu.tw/~cjlin/papers/libsvm.pdf>`_\n\n.. [2] `Platt, John (1999). \"Probabilistic Outputs for Support Vector\n    Machines and Comparisons to Regularized Likelihood Methods\"\n    <https://citeseerx.ist.psu.edu/doc_view/pid/42e5ed832d4310ce4378c44d05570439df28a393>`_",
        "notes": "",
        "examples": ">>> from sklearn.svm import SVR\n>>> from sklearn.pipeline import make_pipeline\n>>> from sklearn.preprocessing import StandardScaler\n>>> import numpy as np\n>>> n_samples, n_features = 10, 5\n>>> rng = np.random.RandomState(0)\n>>> y = rng.randn(n_samples)\n>>> X = rng.randn(n_samples, n_features)\n>>> regr = make_pipeline(StandardScaler(), SVR(C=1.0, epsilon=0.2))\n>>> regr.fit(X, y)\nPipeline(steps=[('standardscaler', StandardScaler()),\n                ('svr', SVR(epsilon=0.2))])"
      }
    },
    {
      "name": "l1_min_c",
      "signature": "l1_min_c(X, y, *, loss='squared_hinge', fit_intercept=True, intercept_scaling=1.0)",
      "docstring": {
        "description": "Return the lowest bound for C.\n\nThe lower bound for C is computed such that for C in (l1_min_C, infinity)\nthe model is guaranteed not to be empty. This applies to l1 penalized\nclassifiers, such as LinearSVC with penalty='l1' and\nlinear_model.LogisticRegression with penalty='l1'.\n\nThis value is valid if class_weight parameter in fit() is not set.",
        "parameters": {
          "X": {
            "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
            "description": "Training vector, where `n_samples` is the number of samples and\n    `n_features` is the number of features."
          },
          "y": {
            "type": "array-like of shape (n_samples,)",
            "description": "Target vector relative to X."
          },
          "loss": {
            "type": "{'squared_hinge', 'log'}, default='squared_hinge'",
            "description": "Specifies the loss function.\n    With 'squared_hinge' it is the squared hinge loss (a.k.a. L2 loss).\n    With 'log' it is the loss of logistic regression models."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Specifies if the intercept should be fitted by the model.\n    It must match the fit() method parameter."
          },
          "intercept_scaling": {
            "type": "float, default=1.0",
            "description": "When fit_intercept is True, instance vector x becomes\n    [x, intercept_scaling],\n    i.e. a \"synthetic\" feature with constant value equals to\n    intercept_scaling is appended to the instance vector.\n    It must match the fit() method parameter."
          }
        },
        "returns": "l1_min_c : float\n    Minimum value for C.",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ">>> from sklearn.svm import l1_min_c\n>>> from sklearn.datasets import make_classification\n>>> X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n>>> print(f\"{l1_min_c(X, y, loss='squared_hinge', fit_intercept=True):.4f}\")\n0.0044"
      }
    }
  ],
  "classes": [
    {
      "name": "LinearSVC",
      "docstring": {
        "description": "Linear Support Vector Classification.\n\nSimilar to SVC with parameter kernel='linear', but implemented in terms of\nliblinear rather than libsvm, so it has more flexibility in the choice of\npenalties and loss functions and should scale better to large numbers of\nsamples.\n\nThe main differences between :class:`~sklearn.svm.LinearSVC` and\n:class:`~sklearn.svm.SVC` lie in the loss function used by default, and in\nthe handling of intercept regularization between those two implementations.\n\nThis class supports both dense and sparse input and the multiclass support\nis handled according to a one-vs-the-rest scheme.\n\nRead more in the :ref:`User Guide <svm_classification>`.",
        "parameters": {
          "penalty": {
            "type": "{'l1', 'l2'}, default='l2'",
            "description": "Specifies the norm used in the penalization. The 'l2'\n    penalty is the standard used in SVC. The 'l1' leads to ``coef_``\n    vectors that are sparse."
          },
          "loss": {
            "type": "{'hinge', 'squared_hinge'}, default='squared_hinge'",
            "description": "Specifies the loss function. 'hinge' is the standard SVM loss\n    (used e.g. by the SVC class) while 'squared_hinge' is the\n    square of the hinge loss. The combination of ``penalty='l1'``\n    and ``loss='hinge'`` is not supported."
          },
          "dual": {
            "type": "\"auto\" or bool, default=\"auto\"",
            "description": "Select the algorithm to either solve the dual or primal\n    optimization problem. Prefer dual=False when n_samples > n_features.\n    `dual=\"auto\"` will choose the value of the parameter automatically,\n    based on the values of `n_samples`, `n_features`, `loss`, `multi_class`\n    and `penalty`. If `n_samples` < `n_features` and optimizer supports\n    chosen `loss`, `multi_class` and `penalty`, then dual will be set to True,\n    otherwise it will be set to False.\n\n    .. versionchanged:: 1.3\n       The `\"auto\"` option is added in version 1.3 and will be the default\n       in version 1.5."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "Tolerance for stopping criteria."
          },
          "C": {
            "type": "float, default=1.0",
            "description": "Regularization parameter. The strength of the regularization is\n    inversely proportional to C. Must be strictly positive.\n    For an intuitive visualization of the effects of scaling\n    the regularization parameter C, see\n    :ref:`sphx_glr_auto_examples_svm_plot_svm_scale_c.py`."
          },
          "multi_class": {
            "type": "{'ovr', 'crammer_singer'}, default='ovr'",
            "description": "Determines the multi-class strategy if `y` contains more than\n    two classes.\n    ``\"ovr\"`` trains n_classes one-vs-rest classifiers, while\n    ``\"crammer_singer\"`` optimizes a joint objective over all classes.\n    While `crammer_singer` is interesting from a theoretical perspective\n    as it is consistent, it is seldom used in practice as it rarely leads\n    to better accuracy and is more expensive to compute.\n    If ``\"crammer_singer\"`` is chosen, the options loss, penalty and dual\n    will be ignored."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether or not to fit an intercept. If set to True, the feature vector\n    is extended to include an intercept term: `[x_1, ..., x_n, 1]`, where\n    1 corresponds to the intercept. If set to False, no intercept will be\n    used in calculations (i.e. data is expected to be already centered)."
          },
          "intercept_scaling": {
            "type": "float, default=1.0",
            "description": "When `fit_intercept` is True, the instance vector x becomes ``[x_1,\n    ..., x_n, intercept_scaling]``, i.e. a \"synthetic\" feature with a\n    constant value equal to `intercept_scaling` is appended to the instance\n    vector. The intercept becomes intercept_scaling * synthetic feature\n    weight. Note that liblinear internally penalizes the intercept,\n    treating it like any other term in the feature vector. To reduce the\n    impact of the regularization on the intercept, the `intercept_scaling`\n    parameter can be set to a value greater than 1; the higher the value of\n    `intercept_scaling`, the lower the impact of regularization on it.\n    Then, the weights become `[w_x_1, ..., w_x_n,\n    w_intercept*intercept_scaling]`, where `w_x_1, ..., w_x_n` represent\n    the feature weights and the intercept weight is scaled by\n    `intercept_scaling`. This scaling allows the intercept term to have a\n    different regularization behavior compared to the other features."
          },
          "class_weight": {
            "type": "dict or 'balanced', default=None",
            "description": "Set the parameter C of class i to ``class_weight[i]*C`` for\n    SVC. If not given, all classes are supposed to have\n    weight one.\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "Enable verbose output. Note that this setting takes advantage of a\n    per-process runtime setting in liblinear that, if enabled, may not work\n    properly in a multithreaded context."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Controls the pseudo random number generation for shuffling the data for\n    the dual coordinate descent (if ``dual=True``). When ``dual=False`` the\n    underlying implementation of :class:`LinearSVC` is not random and\n    ``random_state`` has no effect on the results.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of iterations to be run.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features) if n_classes == 2             else (n_classes, n_features)",
            "description": "Weights assigned to the features (coefficients in the primal\n    problem).\n\n    ``coef_`` is a readonly property derived from ``raw_coef_`` that\n    follows the internal memory layout of liblinear."
          },
          "intercept_": {
            "type": "ndarray of shape (1,) if n_classes == 2 else (n_classes,)",
            "description": "Constants in decision function."
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,)",
            "description": "The unique classes labels."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "Maximum number of iterations run across all classes."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "SVC : Implementation of Support Vector Machine classifier using libsvm:\n    the kernel can be non-linear but its SMO algorithm does not\n    scale to large number of samples as LinearSVC does.\n\n    Furthermore SVC multi-class mode is implemented using one\n    vs one scheme while LinearSVC uses one vs the rest. It is\n    possible to implement one vs the rest with SVC by using the\n    :class:`~sklearn.multiclass.OneVsRestClassifier` wrapper.\n\n    Finally SVC can fit dense data without memory copy if the input\n    is C-contiguous. Sparse data will still incur memory copy though.\n\nsklearn.linear_model.SGDClassifier : SGDClassifier can optimize the same\n    cost function as LinearSVC\n    by adjusting the penalty and loss parameters. In addition it requires\n    less memory, allows incremental (online) learning, and implements\n    various loss functions and regularization regimes.",
        "notes": "The underlying C implementation uses a random number generator to\nselect features when fitting the model. It is thus not uncommon\nto have slightly different results for the same input data. If\nthat happens, try with a smaller ``tol`` parameter.\n\nThe underlying implementation, liblinear, uses a sparse internal\nrepresentation for the data that will incur a memory copy.\n\nPredict output may not match that of standalone liblinear in certain\ncases. See :ref:`differences from liblinear <liblinear_differences>`\nin the narrative documentation.\n\nReferences\n----------\n`LIBLINEAR: A Library for Large Linear Classification\n<https://www.csie.ntu.edu.tw/~cjlin/liblinear/>`__",
        "examples": ">>> from sklearn.svm import LinearSVC\n>>> from sklearn.pipeline import make_pipeline\n>>> from sklearn.preprocessing import StandardScaler\n>>> from sklearn.datasets import make_classification\n>>> X, y = make_classification(n_features=4, random_state=0)\n>>> clf = make_pipeline(StandardScaler(),\n...                     LinearSVC(random_state=0, tol=1e-5))\n>>> clf.fit(X, y)\nPipeline(steps=[('standardscaler', StandardScaler()),\n                ('linearsvc', LinearSVC(random_state=0, tol=1e-05))])\n\n>>> print(clf.named_steps['linearsvc'].coef_)\n[[0.141...   0.526... 0.679... 0.493...]]\n\n>>> print(clf.named_steps['linearsvc'].intercept_)\n[0.1693...]\n>>> print(clf.predict([[0, 0, 0, 0]]))\n[1]"
      },
      "methods": [
        {
          "name": "decision_function",
          "signature": "decision_function(self, X)",
          "docstring": {
            "description": "Predict confidence scores for samples.\n\nThe confidence score for a sample is proportional to the signed\ndistance of that sample to the hyperplane.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The data matrix for which we want to get the confidence scores."
              }
            },
            "returns": "scores : ndarray of shape (n_samples,) or (n_samples, n_classes)\n    Confidence scores per `(n_samples, n_classes)` combination. In the\n    binary case, confidence score for `self.classes_[1]` where >0 means\n    this class would be predicted.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "densify",
          "signature": "densify(self)",
          "docstring": {
            "description": "Convert coefficient matrix to dense array format.\n\nConverts the ``coef_`` member (back) to a numpy.ndarray. This is the\ndefault format of ``coef_`` and is required for fitting, so calling\nthis method is only required on models that have previously been\nsparsified; otherwise, it is a no-op.",
            "parameters": {},
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Fit the model according to the given training data.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training vector, where `n_samples` is the number of samples and\n    `n_features` is the number of features."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Target vector relative to X."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Array of weights that are assigned to individual\n    samples. If not provided,\n    then each sample is given unit weight.\n\n    .. versionadded:: 0.18"
              }
            },
            "returns": "self : object\n    An instance of the estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict class labels for samples in X.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The data matrix for which we want to get the predictions."
              }
            },
            "returns": "y_pred : ndarray of shape (n_samples,)\n    Vector containing the class labels for each sample.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the mean accuracy on the given test data and labels.\n\nIn multi-label classification, this is the subset accuracy\nwhich is a harsh metric since you require for each sample that\neach label set be correctly predicted.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True labels for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.svm._classes.LinearSVC, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.svm._classes.LinearSVC",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.svm._classes.LinearSVC, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.svm._classes.LinearSVC",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sparsify",
          "signature": "sparsify(self)",
          "docstring": {
            "description": "Convert coefficient matrix to sparse format.\n\nConverts the ``coef_`` member to a scipy.sparse matrix, which for\nL1-regularized models can be much more memory- and storage-efficient\nthan the usual numpy.ndarray representation.\n\nThe ``intercept_`` member is not converted.",
            "parameters": {},
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "For non-sparse models, i.e. when there are not many zeros in ``coef_``,\nthis may actually *increase* memory usage, so use this method with\ncare. A rule of thumb is that the number of zero elements, which can\nbe computed with ``(coef_ == 0).sum()``, must be more than 50% for this\nto provide significant benefits.\n\nAfter calling this method, further fitting with the partial_fit\nmethod (if any) will not work until you call densify.",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "LinearSVR",
      "docstring": {
        "description": "Linear Support Vector Regression.\n\nSimilar to SVR with parameter kernel='linear', but implemented in terms of\nliblinear rather than libsvm, so it has more flexibility in the choice of\npenalties and loss functions and should scale better to large numbers of\nsamples.\n\nThe main differences between :class:`~sklearn.svm.LinearSVR` and\n:class:`~sklearn.svm.SVR` lie in the loss function used by default, and in\nthe handling of intercept regularization between those two implementations.\n\nThis class supports both dense and sparse input.\n\nRead more in the :ref:`User Guide <svm_regression>`.\n\n.. versionadded:: 0.16",
        "parameters": {
          "epsilon": {
            "type": "float, default=0.0",
            "description": "Epsilon parameter in the epsilon-insensitive loss function. Note\n    that the value of this parameter depends on the scale of the target\n    variable y. If unsure, set ``epsilon=0``."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "Tolerance for stopping criteria."
          },
          "C": {
            "type": "float, default=1.0",
            "description": "Regularization parameter. The strength of the regularization is\n    inversely proportional to C. Must be strictly positive."
          },
          "loss": {
            "type": "{'epsilon_insensitive', 'squared_epsilon_insensitive'},             default='epsilon_insensitive'",
            "description": "Specifies the loss function. The epsilon-insensitive loss\n    (standard SVR) is the L1 loss, while the squared epsilon-insensitive\n    loss ('squared_epsilon_insensitive') is the L2 loss."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether or not to fit an intercept. If set to True, the feature vector\n    is extended to include an intercept term: `[x_1, ..., x_n, 1]`, where\n    1 corresponds to the intercept. If set to False, no intercept will be\n    used in calculations (i.e. data is expected to be already centered)."
          },
          "intercept_scaling": {
            "type": "float, default=1.0",
            "description": "When `fit_intercept` is True, the instance vector x becomes `[x_1, ...,\n    x_n, intercept_scaling]`, i.e. a \"synthetic\" feature with a constant\n    value equal to `intercept_scaling` is appended to the instance vector.\n    The intercept becomes intercept_scaling * synthetic feature weight.\n    Note that liblinear internally penalizes the intercept, treating it\n    like any other term in the feature vector. To reduce the impact of the\n    regularization on the intercept, the `intercept_scaling` parameter can\n    be set to a value greater than 1; the higher the value of\n    `intercept_scaling`, the lower the impact of regularization on it.\n    Then, the weights become `[w_x_1, ..., w_x_n,\n    w_intercept*intercept_scaling]`, where `w_x_1, ..., w_x_n` represent\n    the feature weights and the intercept weight is scaled by\n    `intercept_scaling`. This scaling allows the intercept term to have a\n    different regularization behavior compared to the other features."
          },
          "dual": {
            "type": "\"auto\" or bool, default=\"auto\"",
            "description": "Select the algorithm to either solve the dual or primal\n    optimization problem. Prefer dual=False when n_samples > n_features.\n    `dual=\"auto\"` will choose the value of the parameter automatically,\n    based on the values of `n_samples`, `n_features` and `loss`. If\n    `n_samples` < `n_features` and optimizer supports chosen `loss`,\n    then dual will be set to True, otherwise it will be set to False.\n\n    .. versionchanged:: 1.3\n       The `\"auto\"` option is added in version 1.3 and will be the default\n       in version 1.5."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "Enable verbose output. Note that this setting takes advantage of a\n    per-process runtime setting in liblinear that, if enabled, may not work\n    properly in a multithreaded context."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Controls the pseudo random number generation for shuffling the data.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of iterations to be run.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (n_features) if n_classes == 2             else (n_classes, n_features)",
            "description": "Weights assigned to the features (coefficients in the primal\n    problem).\n\n    `coef_` is a readonly property derived from `raw_coef_` that\n    follows the internal memory layout of liblinear."
          },
          "intercept_": {
            "type": "ndarray of shape (1) if n_classes == 2 else (n_classes)",
            "description": "Constants in decision function."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "Maximum number of iterations run across all classes."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "LinearSVC : Implementation of Support Vector Machine classifier using the\n    same library as this class (liblinear).\n\nSVR : Implementation of Support Vector Machine regression using libsvm:\n    the kernel can be non-linear but its SMO algorithm does not scale to\n    large number of samples as :class:`~sklearn.svm.LinearSVR` does.\n\nsklearn.linear_model.SGDRegressor : SGDRegressor can optimize the same cost\n    function as LinearSVR\n    by adjusting the penalty and loss parameters. In addition it requires\n    less memory, allows incremental (online) learning, and implements\n    various loss functions and regularization regimes.",
        "notes": "",
        "examples": ">>> from sklearn.svm import LinearSVR\n>>> from sklearn.pipeline import make_pipeline\n>>> from sklearn.preprocessing import StandardScaler\n>>> from sklearn.datasets import make_regression\n>>> X, y = make_regression(n_features=4, random_state=0)\n>>> regr = make_pipeline(StandardScaler(),\n...                      LinearSVR(random_state=0, tol=1e-5))\n>>> regr.fit(X, y)\nPipeline(steps=[('standardscaler', StandardScaler()),\n                ('linearsvr', LinearSVR(random_state=0, tol=1e-05))])\n\n>>> print(regr.named_steps['linearsvr'].coef_)\n[18.582... 27.023... 44.357... 64.522...]\n>>> print(regr.named_steps['linearsvr'].intercept_)\n[-4...]\n>>> print(regr.predict([[0, 0, 0, 0]]))\n[-2.384...]"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Fit the model according to the given training data.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training vector, where `n_samples` is the number of samples and\n    `n_features` is the number of features."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Target vector relative to X."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Array of weights that are assigned to individual\n    samples. If not provided,\n    then each sample is given unit weight.\n\n    .. versionadded:: 0.18"
              }
            },
            "returns": "self : object\n    An instance of the estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.svm._classes.LinearSVR, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.svm._classes.LinearSVR",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.svm._classes.LinearSVR, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.svm._classes.LinearSVR",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "NuSVC",
      "docstring": {
        "description": "Nu-Support Vector Classification.\n\nSimilar to SVC but uses a parameter to control the number of support\nvectors.\n\nThe implementation is based on libsvm.\n\nRead more in the :ref:`User Guide <svm_classification>`.",
        "parameters": {
          "nu": {
            "type": "float, default=0.5",
            "description": "An upper bound on the fraction of margin errors (see :ref:`User Guide\n    <nu_svc>`) and a lower bound of the fraction of support vectors.\n    Should be in the interval (0, 1]."
          },
          "kernel": {
            "type": "{'linear', 'poly', 'rbf', 'sigmoid', 'precomputed'} or callable,          default='rbf'",
            "description": "Specifies the kernel type to be used in the algorithm.\n    If none is given, 'rbf' will be used. If a callable is given it is\n    used to precompute the kernel matrix. For an intuitive\n    visualization of different kernel types see\n    :ref:`sphx_glr_auto_examples_svm_plot_svm_kernels.py`."
          },
          "degree": {
            "type": "int, default=3",
            "description": "Degree of the polynomial kernel function ('poly').\n    Must be non-negative. Ignored by all other kernels."
          },
          "gamma": {
            "type": "{'scale', 'auto'} or float, default='scale'",
            "description": "Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.\n\n    - if ``gamma='scale'`` (default) is passed then it uses\n      1 / (n_features * X.var()) as value of gamma,\n    - if 'auto', uses 1 / n_features\n    - if float, must be non-negative.\n\n    .. versionchanged:: 0.22\n       The default value of ``gamma`` changed from 'auto' to 'scale'."
          },
          "coef0": {
            "type": "float, default=0.0",
            "description": "Independent term in kernel function.\n    It is only significant in 'poly' and 'sigmoid'."
          },
          "shrinking": {
            "type": "bool, default=True",
            "description": "Whether to use the shrinking heuristic.\n    See the :ref:`User Guide <shrinking_svm>`."
          },
          "probability": {
            "type": "bool, default=False",
            "description": "Whether to enable probability estimates. This must be enabled prior\n    to calling `fit`, will slow down that method as it internally uses\n    5-fold cross-validation, and `predict_proba` may be inconsistent with\n    `predict`. Read more in the :ref:`User Guide <scores_probabilities>`."
          },
          "tol": {
            "type": "float, default=1e-3",
            "description": "Tolerance for stopping criterion."
          },
          "cache_size": {
            "type": "float, default=200",
            "description": "Specify the size of the kernel cache (in MB)."
          },
          "class_weight": {
            "type": "{dict, 'balanced'}, default=None",
            "description": "Set the parameter C of class i to class_weight[i]*C for\n    SVC. If not given, all classes are supposed to have\n    weight one. The \"balanced\" mode uses the values of y to automatically\n    adjust weights inversely proportional to class frequencies as\n    ``n_samples / (n_classes * np.bincount(y))``."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Enable verbose output. Note that this setting takes advantage of a\n    per-process runtime setting in libsvm that, if enabled, may not work\n    properly in a multithreaded context."
          },
          "max_iter": {
            "type": "int, default=-1",
            "description": "Hard limit on iterations within solver, or -1 for no limit."
          },
          "decision_function_shape": {
            "type": "{'ovo', 'ovr'}, default='ovr'",
            "description": "Whether to return a one-vs-rest ('ovr') decision function of shape\n    (n_samples, n_classes) as all other classifiers, or the original\n    one-vs-one ('ovo') decision function of libsvm which has shape\n    (n_samples, n_classes * (n_classes - 1) / 2). However, one-vs-one\n    ('ovo') is always used as multi-class strategy. The parameter is\n    ignored for binary classification.\n\n    .. versionchanged:: 0.19\n        decision_function_shape is 'ovr' by default.\n\n    .. versionadded:: 0.17\n       *decision_function_shape='ovr'* is recommended.\n\n    .. versionchanged:: 0.17\n       Deprecated *decision_function_shape='ovo' and None*."
          },
          "break_ties": {
            "type": "bool, default=False",
            "description": "If true, ``decision_function_shape='ovr'``, and number of classes > 2,\n    :term:`predict` will break ties according to the confidence values of\n    :term:`decision_function`; otherwise the first class among the tied\n    classes is returned. Please note that breaking ties comes at a\n    relatively high computational cost compared to a simple predict.\n    See :ref:`sphx_glr_auto_examples_svm_plot_svm_tie_breaking.py` for an\n    example of its usage with ``decision_function_shape='ovr'``.\n\n    .. versionadded:: 0.22"
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Controls the pseudo random number generation for shuffling the data for\n    probability estimates. Ignored when `probability` is False.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`.\n\nAttributes\n----------"
          },
          "class_weight_": {
            "type": "ndarray of shape (n_classes,)",
            "description": "Multipliers of parameter C of each class.\n    Computed based on the ``class_weight`` parameter."
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,)",
            "description": "The unique classes labels."
          },
          "coef_": {
            "type": "ndarray of shape (n_classes * (n_classes -1) / 2, n_features)",
            "description": "Weights assigned to the features (coefficients in the primal\n    problem). This is only available in the case of a linear kernel.\n\n    `coef_` is readonly property derived from `dual_coef_` and\n    `support_vectors_`."
          },
          "dual_coef_": {
            "type": "ndarray of shape (n_classes - 1, n_SV)",
            "description": "Dual coefficients of the support vector in the decision\n    function (see :ref:`sgd_mathematical_formulation`), multiplied by\n    their targets.\n    For multiclass, coefficient for all 1-vs-1 classifiers.\n    The layout of the coefficients in the multiclass case is somewhat\n    non-trivial. See the :ref:`multi-class section of the User Guide\n    <svm_multi_class>` for details."
          },
          "fit_status_": {
            "type": "int",
            "description": "0 if correctly fitted, 1 if the algorithm did not converge."
          },
          "intercept_": {
            "type": "ndarray of shape (n_classes * (n_classes - 1) / 2,)",
            "description": "Constants in decision function."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "ndarray of shape (n_classes * (n_classes - 1) // 2,)",
            "description": "Number of iterations run by the optimization routine to fit the model.\n    The shape of this attribute depends on the number of models optimized\n    which in turn depends on the number of classes.\n\n    .. versionadded:: 1.1"
          },
          "support_": {
            "type": "ndarray of shape (n_SV,)",
            "description": "Indices of support vectors."
          },
          "support_vectors_": {
            "type": "ndarray of shape (n_SV, n_features)",
            "description": "Support vectors."
          },
          "n_support_": {
            "type": "ndarray of shape (n_classes,), dtype=int32",
            "description": "Number of support vectors for each class."
          },
          "probA_": {
            "type": "ndarray of shape (n_classes * (n_classes - 1) / 2,)",
            "description": ""
          },
          "probB_": {
            "type": "ndarray of shape (n_classes * (n_classes - 1) / 2,)",
            "description": "If `probability=True`, it corresponds to the parameters learned in\n    Platt scaling to produce probability estimates from decision values.\n    If `probability=False`, it's an empty array. Platt scaling uses the\n    logistic function\n    ``1 / (1 + exp(decision_value * probA_ + probB_))``\n    where ``probA_`` and ``probB_`` are learned from the dataset [2]_. For\n    more information on the multiclass case and training procedure see\n    section 8 of [1]_."
          },
          "shape_fit_": {
            "type": "tuple of int of shape (n_dimensions_of_X,)",
            "description": "Array dimensions of training vector ``X``."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "SVC : Support Vector Machine for classification using libsvm.\n\nLinearSVC : Scalable linear Support Vector Machine for classification using\n    liblinear.\n\nReferences\n----------\n.. [1] `LIBSVM: A Library for Support Vector Machines\n    <http://www.csie.ntu.edu.tw/~cjlin/papers/libsvm.pdf>`_\n\n.. [2] `Platt, John (1999). \"Probabilistic Outputs for Support Vector\n    Machines and Comparisons to Regularized Likelihood Methods\"\n    <https://citeseerx.ist.psu.edu/doc_view/pid/42e5ed832d4310ce4378c44d05570439df28a393>`_",
        "notes": "",
        "examples": ">>> import numpy as np\n>>> X = np.array([[-1, -1], [-2, -1], [1, 1], [2, 1]])\n>>> y = np.array([1, 1, 2, 2])\n>>> from sklearn.pipeline import make_pipeline\n>>> from sklearn.preprocessing import StandardScaler\n>>> from sklearn.svm import NuSVC\n>>> clf = make_pipeline(StandardScaler(), NuSVC())\n>>> clf.fit(X, y)\nPipeline(steps=[('standardscaler', StandardScaler()), ('nusvc', NuSVC())])\n>>> print(clf.predict([[-0.8, -1]]))\n[1]"
      },
      "methods": [
        {
          "name": "decision_function",
          "signature": "decision_function(self, X)",
          "docstring": {
            "description": "Evaluate the decision function for the samples in X.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "The input samples."
              }
            },
            "returns": "X : ndarray of shape (n_samples, n_classes * (n_classes-1) / 2)\n    Returns the decision function of the sample for each class\n    in the model.\n    If decision_function_shape='ovr', the shape is (n_samples,\n    n_classes).",
            "raises": "",
            "see_also": "",
            "notes": "If decision_function_shape='ovo', the function values are proportional\nto the distance of the samples X to the separating hyperplane. If the\nexact distances are required, divide the function values by the norm of\nthe weight vector (``coef_``). See also `this question\n<https://stats.stackexchange.com/questions/14876/\ninterpreting-distance-from-hyperplane-in-svm>`_ for further details.\nIf decision_function_shape='ovr', the decision function is a monotonic\ntransformation of ovo decision function.",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Fit the SVM model according to the given training data.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)                 or (n_samples, n_samples)",
                "description": "Training vectors, where `n_samples` is the number of samples\n    and `n_features` is the number of features.\n    For kernel=\"precomputed\", the expected shape of X is\n    (n_samples, n_samples)."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Target values (class labels in classification, real numbers in\n    regression)."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Per-sample weights. Rescale C per sample. Higher weights\n    force the classifier to put more emphasis on these points."
              }
            },
            "returns": "self : object\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "If X and y are not C-ordered and contiguous arrays of np.float64 and\nX is not a scipy.sparse.csr_matrix, X and/or y may be copied.\n\nIf X is a dense array, then the other methods will not support sparse\nmatrices as input.",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Perform classification on samples in X.\n\nFor an one-class model, +1 or -1 is returned.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features) or                 (n_samples_test, n_samples_train)",
                "description": "For kernel=\"precomputed\", the expected shape of X is\n    (n_samples_test, n_samples_train)."
              }
            },
            "returns": "y_pred : ndarray of shape (n_samples,)\n    Class labels for samples in X.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_log_proba",
          "signature": "predict_log_proba(self, X)",
          "docstring": {
            "description": "Compute log probabilities of possible outcomes for samples in X.\n\nThe model need to have probability information computed at training\ntime: fit with attribute `probability` set to True.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features) or                 (n_samples_test, n_samples_train)",
                "description": "For kernel=\"precomputed\", the expected shape of X is\n    (n_samples_test, n_samples_train)."
              }
            },
            "returns": "T : ndarray of shape (n_samples, n_classes)\n    Returns the log-probabilities of the sample for each class in\n    the model. The columns correspond to the classes in sorted\n    order, as they appear in the attribute :term:`classes_`.",
            "raises": "",
            "see_also": "",
            "notes": "The probability model is created using cross validation, so\nthe results can be slightly different than those obtained by\npredict. Also, it will produce meaningless results on very small\ndatasets.",
            "examples": ""
          }
        },
        {
          "name": "predict_proba",
          "signature": "predict_proba(self, X)",
          "docstring": {
            "description": "Compute probabilities of possible outcomes for samples in X.\n\nThe model needs to have probability information computed at training\ntime: fit with attribute `probability` set to True.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "For kernel=\"precomputed\", the expected shape of X is\n    (n_samples_test, n_samples_train)."
              }
            },
            "returns": "T : ndarray of shape (n_samples, n_classes)\n    Returns the probability of the sample for each class in\n    the model. The columns correspond to the classes in sorted\n    order, as they appear in the attribute :term:`classes_`.",
            "raises": "",
            "see_also": "",
            "notes": "The probability model is created using cross validation, so\nthe results can be slightly different than those obtained by\npredict. Also, it will produce meaningless results on very small\ndatasets.",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the mean accuracy on the given test data and labels.\n\nIn multi-label classification, this is the subset accuracy\nwhich is a harsh metric since you require for each sample that\neach label set be correctly predicted.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True labels for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.svm._classes.NuSVC, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.svm._classes.NuSVC",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.svm._classes.NuSVC, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.svm._classes.NuSVC",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "NuSVR",
      "docstring": {
        "description": "Nu Support Vector Regression.\n\nSimilar to NuSVC, for regression, uses a parameter nu to control\nthe number of support vectors. However, unlike NuSVC, where nu\nreplaces C, here nu replaces the parameter epsilon of epsilon-SVR.\n\nThe implementation is based on libsvm.\n\nRead more in the :ref:`User Guide <svm_regression>`.",
        "parameters": {
          "nu": {
            "type": "float, default=0.5",
            "description": "An upper bound on the fraction of training errors and a lower bound of\n    the fraction of support vectors. Should be in the interval (0, 1].  By\n    default 0.5 will be taken."
          },
          "C": {
            "type": "float, default=1.0",
            "description": "Penalty parameter C of the error term. For an intuitive visualization\n    of the effects of scaling the regularization parameter C, see\n    :ref:`sphx_glr_auto_examples_svm_plot_svm_scale_c.py`."
          },
          "kernel": {
            "type": "{'linear', 'poly', 'rbf', 'sigmoid', 'precomputed'} or callable,          default='rbf'",
            "description": "Specifies the kernel type to be used in the algorithm.\n     If none is given, 'rbf' will be used. If a callable is given it is\n     used to precompute the kernel matrix.\n     For an intuitive visualization of different kernel types see\n     See :ref:`sphx_glr_auto_examples_svm_plot_svm_regression.py`"
          },
          "degree": {
            "type": "int, default=3",
            "description": "Degree of the polynomial kernel function ('poly').\n    Must be non-negative. Ignored by all other kernels."
          },
          "gamma": {
            "type": "{'scale', 'auto'} or float, default='scale'",
            "description": "Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.\n\n    - if ``gamma='scale'`` (default) is passed then it uses\n      1 / (n_features * X.var()) as value of gamma,\n    - if 'auto', uses 1 / n_features\n    - if float, must be non-negative.\n\n    .. versionchanged:: 0.22\n       The default value of ``gamma`` changed from 'auto' to 'scale'."
          },
          "coef0": {
            "type": "float, default=0.0",
            "description": "Independent term in kernel function.\n    It is only significant in 'poly' and 'sigmoid'."
          },
          "shrinking": {
            "type": "bool, default=True",
            "description": "Whether to use the shrinking heuristic.\n    See the :ref:`User Guide <shrinking_svm>`."
          },
          "tol": {
            "type": "float, default=1e-3",
            "description": "Tolerance for stopping criterion."
          },
          "cache_size": {
            "type": "float, default=200",
            "description": "Specify the size of the kernel cache (in MB)."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Enable verbose output. Note that this setting takes advantage of a\n    per-process runtime setting in libsvm that, if enabled, may not work\n    properly in a multithreaded context."
          },
          "max_iter": {
            "type": "int, default=-1",
            "description": "Hard limit on iterations within solver, or -1 for no limit.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features)",
            "description": "Weights assigned to the features (coefficients in the primal\n    problem). This is only available in the case of a linear kernel.\n\n    `coef_` is readonly property derived from `dual_coef_` and\n    `support_vectors_`."
          },
          "dual_coef_": {
            "type": "ndarray of shape (1, n_SV)",
            "description": "Coefficients of the support vector in the decision function."
          },
          "fit_status_": {
            "type": "int",
            "description": "0 if correctly fitted, 1 otherwise (will raise warning)"
          },
          "intercept_": {
            "type": "ndarray of shape (1,)",
            "description": "Constants in decision function."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations run by the optimization routine to fit the model.\n\n    .. versionadded:: 1.1"
          },
          "n_support_": {
            "type": "ndarray of shape (1,), dtype=int32",
            "description": "Number of support vectors."
          },
          "shape_fit_": {
            "type": "tuple of int of shape (n_dimensions_of_X,)",
            "description": "Array dimensions of training vector ``X``."
          },
          "support_": {
            "type": "ndarray of shape (n_SV,)",
            "description": "Indices of support vectors."
          },
          "support_vectors_": {
            "type": "ndarray of shape (n_SV, n_features)",
            "description": "Support vectors."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "NuSVC : Support Vector Machine for classification implemented with libsvm\n    with a parameter to control the number of support vectors.\n\nSVR : Epsilon Support Vector Machine for regression implemented with\n    libsvm.\n\nReferences\n----------\n.. [1] `LIBSVM: A Library for Support Vector Machines\n    <http://www.csie.ntu.edu.tw/~cjlin/papers/libsvm.pdf>`_\n\n.. [2] `Platt, John (1999). \"Probabilistic Outputs for Support Vector\n    Machines and Comparisons to Regularized Likelihood Methods\"\n    <https://citeseerx.ist.psu.edu/doc_view/pid/42e5ed832d4310ce4378c44d05570439df28a393>`_",
        "notes": "",
        "examples": ">>> from sklearn.svm import NuSVR\n>>> from sklearn.pipeline import make_pipeline\n>>> from sklearn.preprocessing import StandardScaler\n>>> import numpy as np\n>>> n_samples, n_features = 10, 5\n>>> np.random.seed(0)\n>>> y = np.random.randn(n_samples)\n>>> X = np.random.randn(n_samples, n_features)\n>>> regr = make_pipeline(StandardScaler(), NuSVR(C=1.0, nu=0.1))\n>>> regr.fit(X, y)\nPipeline(steps=[('standardscaler', StandardScaler()),\n                ('nusvr', NuSVR(nu=0.1))])"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Fit the SVM model according to the given training data.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)                 or (n_samples, n_samples)",
                "description": "Training vectors, where `n_samples` is the number of samples\n    and `n_features` is the number of features.\n    For kernel=\"precomputed\", the expected shape of X is\n    (n_samples, n_samples)."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Target values (class labels in classification, real numbers in\n    regression)."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Per-sample weights. Rescale C per sample. Higher weights\n    force the classifier to put more emphasis on these points."
              }
            },
            "returns": "self : object\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "If X and y are not C-ordered and contiguous arrays of np.float64 and\nX is not a scipy.sparse.csr_matrix, X and/or y may be copied.\n\nIf X is a dense array, then the other methods will not support sparse\nmatrices as input.",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Perform regression on samples in X.\n\nFor an one-class model, +1 (inlier) or -1 (outlier) is returned.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "For kernel=\"precomputed\", the expected shape of X is\n    (n_samples_test, n_samples_train)."
              }
            },
            "returns": "y_pred : ndarray of shape (n_samples,)\n    The predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.svm._classes.NuSVR, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.svm._classes.NuSVR",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.svm._classes.NuSVR, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.svm._classes.NuSVR",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "OneClassSVM",
      "docstring": {
        "description": "Unsupervised Outlier Detection.\n\nEstimate the support of a high-dimensional distribution.\n\nThe implementation is based on libsvm.\n\nRead more in the :ref:`User Guide <outlier_detection>`.",
        "parameters": {
          "kernel": {
            "type": "{'linear', 'poly', 'rbf', 'sigmoid', 'precomputed'} or callable,          default='rbf'",
            "description": "Specifies the kernel type to be used in the algorithm.\n     If none is given, 'rbf' will be used. If a callable is given it is\n     used to precompute the kernel matrix."
          },
          "degree": {
            "type": "int, default=3",
            "description": "Degree of the polynomial kernel function ('poly').\n    Must be non-negative. Ignored by all other kernels."
          },
          "gamma": {
            "type": "{'scale', 'auto'} or float, default='scale'",
            "description": "Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.\n\n    - if ``gamma='scale'`` (default) is passed then it uses\n      1 / (n_features * X.var()) as value of gamma,\n    - if 'auto', uses 1 / n_features\n    - if float, must be non-negative.\n\n    .. versionchanged:: 0.22\n       The default value of ``gamma`` changed from 'auto' to 'scale'."
          },
          "coef0": {
            "type": "float, default=0.0",
            "description": "Independent term in kernel function.\n    It is only significant in 'poly' and 'sigmoid'."
          },
          "tol": {
            "type": "float, default=1e-3",
            "description": "Tolerance for stopping criterion."
          },
          "nu": {
            "type": "float, default=0.5",
            "description": "An upper bound on the fraction of training\n    errors and a lower bound of the fraction of support\n    vectors. Should be in the interval (0, 1]. By default 0.5\n    will be taken."
          },
          "shrinking": {
            "type": "bool, default=True",
            "description": "Whether to use the shrinking heuristic.\n    See the :ref:`User Guide <shrinking_svm>`."
          },
          "cache_size": {
            "type": "float, default=200",
            "description": "Specify the size of the kernel cache (in MB)."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Enable verbose output. Note that this setting takes advantage of a\n    per-process runtime setting in libsvm that, if enabled, may not work\n    properly in a multithreaded context."
          },
          "max_iter": {
            "type": "int, default=-1",
            "description": "Hard limit on iterations within solver, or -1 for no limit.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features)",
            "description": "Weights assigned to the features (coefficients in the primal\n    problem). This is only available in the case of a linear kernel.\n\n    `coef_` is readonly property derived from `dual_coef_` and\n    `support_vectors_`."
          },
          "dual_coef_": {
            "type": "ndarray of shape (1, n_SV)",
            "description": "Coefficients of the support vectors in the decision function."
          },
          "fit_status_": {
            "type": "int",
            "description": "0 if correctly fitted, 1 otherwise (will raise warning)"
          },
          "intercept_": {
            "type": "ndarray of shape (1,)",
            "description": "Constant in the decision function."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations run by the optimization routine to fit the model.\n\n    .. versionadded:: 1.1"
          },
          "n_support_": {
            "type": "ndarray of shape (n_classes,), dtype=int32",
            "description": "Number of support vectors for each class."
          },
          "offset_": {
            "type": "float",
            "description": "Offset used to define the decision function from the raw scores.\n    We have the relation: decision_function = score_samples - `offset_`.\n    The offset is the opposite of `intercept_` and is provided for\n    consistency with other outlier detection algorithms.\n\n    .. versionadded:: 0.20"
          },
          "shape_fit_": {
            "type": "tuple of int of shape (n_dimensions_of_X,)",
            "description": "Array dimensions of training vector ``X``."
          },
          "support_": {
            "type": "ndarray of shape (n_SV,)",
            "description": "Indices of support vectors."
          },
          "support_vectors_": {
            "type": "ndarray of shape (n_SV, n_features)",
            "description": "Support vectors."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "sklearn.linear_model.SGDOneClassSVM : Solves linear One-Class SVM using\n    Stochastic Gradient Descent.\nsklearn.neighbors.LocalOutlierFactor : Unsupervised Outlier Detection using\n    Local Outlier Factor (LOF).\nsklearn.ensemble.IsolationForest : Isolation Forest Algorithm.",
        "notes": "",
        "examples": ">>> from sklearn.svm import OneClassSVM\n>>> X = [[0], [0.44], [0.45], [0.46], [1]]\n>>> clf = OneClassSVM(gamma='auto').fit(X)\n>>> clf.predict(X)\narray([-1,  1,  1,  1, -1])\n>>> clf.score_samples(X)\narray([1.7798..., 2.0547..., 2.0556..., 2.0561..., 1.7332...])\n\nFor a more extended example,\nsee :ref:`sphx_glr_auto_examples_applications_plot_species_distribution_modeling.py`"
      },
      "methods": [
        {
          "name": "decision_function",
          "signature": "decision_function(self, X)",
          "docstring": {
            "description": "Signed distance to the separating hyperplane.\n\nSigned distance is positive for an inlier and negative for an outlier.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "The data matrix."
              }
            },
            "returns": "dec : ndarray of shape (n_samples,)\n    Returns the decision function of the samples.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y=None, sample_weight=None)",
          "docstring": {
            "description": "Detect the soft boundary of the set of samples X.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Set of samples, where `n_samples` is the number of samples and\n    `n_features` is the number of features."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present for API consistency by convention."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Per-sample weights. Rescale C per sample. Higher weights\n    force the classifier to put more emphasis on these points."
              }
            },
            "returns": "self : object\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "If X is not a C-ordered contiguous array it is copied.",
            "examples": ""
          }
        },
        {
          "name": "fit_predict",
          "signature": "fit_predict(self, X, y=None, **kwargs)",
          "docstring": {
            "description": "Perform fit on X and returns labels for X.\n\nReturns -1 for outliers and 1 for inliers.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present for API consistency by convention."
              },
              "**kwargs": {
                "type": "dict",
                "description": "Arguments to be passed to ``fit``.\n\n    .. versionadded:: 1.4"
              }
            },
            "returns": "y : ndarray of shape (n_samples,)\n    1 for inliers, -1 for outliers.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Perform classification on samples in X.\n\nFor a one-class model, +1 or -1 is returned.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features) or                 (n_samples_test, n_samples_train)",
                "description": "For kernel=\"precomputed\", the expected shape of X is\n    (n_samples_test, n_samples_train)."
              }
            },
            "returns": "y_pred : ndarray of shape (n_samples,)\n    Class labels for samples in X.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score_samples",
          "signature": "score_samples(self, X)",
          "docstring": {
            "description": "Raw scoring function of the samples.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "The data matrix."
              }
            },
            "returns": "score_samples : ndarray of shape (n_samples,)\n    Returns the (unshifted) scoring function of the samples.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.svm._classes.OneClassSVM, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.svm._classes.OneClassSVM",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "SVC",
      "docstring": {
        "description": "C-Support Vector Classification.\n\nThe implementation is based on libsvm. The fit time scales at least\nquadratically with the number of samples and may be impractical\nbeyond tens of thousands of samples. For large datasets\nconsider using :class:`~sklearn.svm.LinearSVC` or\n:class:`~sklearn.linear_model.SGDClassifier` instead, possibly after a\n:class:`~sklearn.kernel_approximation.Nystroem` transformer or\nother :ref:`kernel_approximation`.\n\nThe multiclass support is handled according to a one-vs-one scheme.\n\nFor details on the precise mathematical formulation of the provided\nkernel functions and how `gamma`, `coef0` and `degree` affect each\nother, see the corresponding section in the narrative documentation:\n:ref:`svm_kernels`.\n\nTo learn how to tune SVC's hyperparameters, see the following example:\n:ref:`sphx_glr_auto_examples_model_selection_plot_nested_cross_validation_iris.py`\n\nRead more in the :ref:`User Guide <svm_classification>`.",
        "parameters": {
          "C": {
            "type": "float, default=1.0",
            "description": "Regularization parameter. The strength of the regularization is\n    inversely proportional to C. Must be strictly positive. The penalty\n    is a squared l2 penalty. For an intuitive visualization of the effects\n    of scaling the regularization parameter C, see\n    :ref:`sphx_glr_auto_examples_svm_plot_svm_scale_c.py`."
          },
          "kernel": {
            "type": "{'linear', 'poly', 'rbf', 'sigmoid', 'precomputed'} or callable,          default='rbf'",
            "description": "Specifies the kernel type to be used in the algorithm. If\n    none is given, 'rbf' will be used. If a callable is given it is used to\n    pre-compute the kernel matrix from data matrices; that matrix should be\n    an array of shape ``(n_samples, n_samples)``. For an intuitive\n    visualization of different kernel types see\n    :ref:`sphx_glr_auto_examples_svm_plot_svm_kernels.py`."
          },
          "degree": {
            "type": "int, default=3",
            "description": "Degree of the polynomial kernel function ('poly').\n    Must be non-negative. Ignored by all other kernels."
          },
          "gamma": {
            "type": "{'scale', 'auto'} or float, default='scale'",
            "description": "Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.\n\n    - if ``gamma='scale'`` (default) is passed then it uses\n      1 / (n_features * X.var()) as value of gamma,\n    - if 'auto', uses 1 / n_features\n    - if float, must be non-negative.\n\n    .. versionchanged:: 0.22\n       The default value of ``gamma`` changed from 'auto' to 'scale'."
          },
          "coef0": {
            "type": "float, default=0.0",
            "description": "Independent term in kernel function.\n    It is only significant in 'poly' and 'sigmoid'."
          },
          "shrinking": {
            "type": "bool, default=True",
            "description": "Whether to use the shrinking heuristic.\n    See the :ref:`User Guide <shrinking_svm>`."
          },
          "probability": {
            "type": "bool, default=False",
            "description": "Whether to enable probability estimates. This must be enabled prior\n    to calling `fit`, will slow down that method as it internally uses\n    5-fold cross-validation, and `predict_proba` may be inconsistent with\n    `predict`. Read more in the :ref:`User Guide <scores_probabilities>`."
          },
          "tol": {
            "type": "float, default=1e-3",
            "description": "Tolerance for stopping criterion."
          },
          "cache_size": {
            "type": "float, default=200",
            "description": "Specify the size of the kernel cache (in MB)."
          },
          "class_weight": {
            "type": "dict or 'balanced', default=None",
            "description": "Set the parameter C of class i to class_weight[i]*C for\n    SVC. If not given, all classes are supposed to have\n    weight one.\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Enable verbose output. Note that this setting takes advantage of a\n    per-process runtime setting in libsvm that, if enabled, may not work\n    properly in a multithreaded context."
          },
          "max_iter": {
            "type": "int, default=-1",
            "description": "Hard limit on iterations within solver, or -1 for no limit."
          },
          "decision_function_shape": {
            "type": "{'ovo', 'ovr'}, default='ovr'",
            "description": "Whether to return a one-vs-rest ('ovr') decision function of shape\n    (n_samples, n_classes) as all other classifiers, or the original\n    one-vs-one ('ovo') decision function of libsvm which has shape\n    (n_samples, n_classes * (n_classes - 1) / 2). However, note that\n    internally, one-vs-one ('ovo') is always used as a multi-class strategy\n    to train models; an ovr matrix is only constructed from the ovo matrix.\n    The parameter is ignored for binary classification.\n\n    .. versionchanged:: 0.19\n        decision_function_shape is 'ovr' by default.\n\n    .. versionadded:: 0.17\n       *decision_function_shape='ovr'* is recommended.\n\n    .. versionchanged:: 0.17\n       Deprecated *decision_function_shape='ovo' and None*."
          },
          "break_ties": {
            "type": "bool, default=False",
            "description": "If true, ``decision_function_shape='ovr'``, and number of classes > 2,\n    :term:`predict` will break ties according to the confidence values of\n    :term:`decision_function`; otherwise the first class among the tied\n    classes is returned. Please note that breaking ties comes at a\n    relatively high computational cost compared to a simple predict. See\n    :ref:`sphx_glr_auto_examples_svm_plot_svm_tie_breaking.py` for an\n    example of its usage with ``decision_function_shape='ovr'``.\n\n    .. versionadded:: 0.22"
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Controls the pseudo random number generation for shuffling the data for\n    probability estimates. Ignored when `probability` is False.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`.\n\nAttributes\n----------"
          },
          "class_weight_": {
            "type": "ndarray of shape (n_classes,)",
            "description": "Multipliers of parameter C for each class.\n    Computed based on the ``class_weight`` parameter."
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,)",
            "description": "The classes labels."
          },
          "coef_": {
            "type": "ndarray of shape (n_classes * (n_classes - 1) / 2, n_features)",
            "description": "Weights assigned to the features (coefficients in the primal\n    problem). This is only available in the case of a linear kernel.\n\n    `coef_` is a readonly property derived from `dual_coef_` and\n    `support_vectors_`."
          },
          "dual_coef_": {
            "type": "ndarray of shape (n_classes -1, n_SV)",
            "description": "Dual coefficients of the support vector in the decision\n    function (see :ref:`sgd_mathematical_formulation`), multiplied by\n    their targets.\n    For multiclass, coefficient for all 1-vs-1 classifiers.\n    The layout of the coefficients in the multiclass case is somewhat\n    non-trivial. See the :ref:`multi-class section of the User Guide\n    <svm_multi_class>` for details."
          },
          "fit_status_": {
            "type": "int",
            "description": "0 if correctly fitted, 1 otherwise (will raise warning)"
          },
          "intercept_": {
            "type": "ndarray of shape (n_classes * (n_classes - 1) / 2,)",
            "description": "Constants in decision function."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "ndarray of shape (n_classes * (n_classes - 1) // 2,)",
            "description": "Number of iterations run by the optimization routine to fit the model.\n    The shape of this attribute depends on the number of models optimized\n    which in turn depends on the number of classes.\n\n    .. versionadded:: 1.1"
          },
          "support_": {
            "type": "ndarray of shape (n_SV)",
            "description": "Indices of support vectors."
          },
          "support_vectors_": {
            "type": "ndarray of shape (n_SV, n_features)",
            "description": "Support vectors. An empty array if kernel is precomputed."
          },
          "n_support_": {
            "type": "ndarray of shape (n_classes,), dtype=int32",
            "description": "Number of support vectors for each class."
          },
          "probA_": {
            "type": "ndarray of shape (n_classes * (n_classes - 1) / 2)",
            "description": ""
          },
          "probB_": {
            "type": "ndarray of shape (n_classes * (n_classes - 1) / 2)",
            "description": "If `probability=True`, it corresponds to the parameters learned in\n    Platt scaling to produce probability estimates from decision values.\n    If `probability=False`, it's an empty array. Platt scaling uses the\n    logistic function\n    ``1 / (1 + exp(decision_value * probA_ + probB_))``\n    where ``probA_`` and ``probB_`` are learned from the dataset [2]_. For\n    more information on the multiclass case and training procedure see\n    section 8 of [1]_."
          },
          "shape_fit_": {
            "type": "tuple of int of shape (n_dimensions_of_X,)",
            "description": "Array dimensions of training vector ``X``."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "SVR : Support Vector Machine for Regression implemented using libsvm.\n\nLinearSVC : Scalable Linear Support Vector Machine for classification\n    implemented using liblinear. Check the See Also section of\n    LinearSVC for more comparison element.\n\nReferences\n----------\n.. [1] `LIBSVM: A Library for Support Vector Machines\n    <http://www.csie.ntu.edu.tw/~cjlin/papers/libsvm.pdf>`_\n\n.. [2] `Platt, John (1999). \"Probabilistic Outputs for Support Vector\n    Machines and Comparisons to Regularized Likelihood Methods\"\n    <https://citeseerx.ist.psu.edu/doc_view/pid/42e5ed832d4310ce4378c44d05570439df28a393>`_",
        "notes": "",
        "examples": ">>> import numpy as np\n>>> from sklearn.pipeline import make_pipeline\n>>> from sklearn.preprocessing import StandardScaler\n>>> X = np.array([[-1, -1], [-2, -1], [1, 1], [2, 1]])\n>>> y = np.array([1, 1, 2, 2])\n>>> from sklearn.svm import SVC\n>>> clf = make_pipeline(StandardScaler(), SVC(gamma='auto'))\n>>> clf.fit(X, y)\nPipeline(steps=[('standardscaler', StandardScaler()),\n                ('svc', SVC(gamma='auto'))])\n\n>>> print(clf.predict([[-0.8, -1]]))\n[1]\n\nFor a comaprison of the SVC with other classifiers see:\n:ref:`sphx_glr_auto_examples_classification_plot_classification_probability.py`."
      },
      "methods": [
        {
          "name": "decision_function",
          "signature": "decision_function(self, X)",
          "docstring": {
            "description": "Evaluate the decision function for the samples in X.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "The input samples."
              }
            },
            "returns": "X : ndarray of shape (n_samples, n_classes * (n_classes-1) / 2)\n    Returns the decision function of the sample for each class\n    in the model.\n    If decision_function_shape='ovr', the shape is (n_samples,\n    n_classes).",
            "raises": "",
            "see_also": "",
            "notes": "If decision_function_shape='ovo', the function values are proportional\nto the distance of the samples X to the separating hyperplane. If the\nexact distances are required, divide the function values by the norm of\nthe weight vector (``coef_``). See also `this question\n<https://stats.stackexchange.com/questions/14876/\ninterpreting-distance-from-hyperplane-in-svm>`_ for further details.\nIf decision_function_shape='ovr', the decision function is a monotonic\ntransformation of ovo decision function.",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Fit the SVM model according to the given training data.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)                 or (n_samples, n_samples)",
                "description": "Training vectors, where `n_samples` is the number of samples\n    and `n_features` is the number of features.\n    For kernel=\"precomputed\", the expected shape of X is\n    (n_samples, n_samples)."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Target values (class labels in classification, real numbers in\n    regression)."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Per-sample weights. Rescale C per sample. Higher weights\n    force the classifier to put more emphasis on these points."
              }
            },
            "returns": "self : object\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "If X and y are not C-ordered and contiguous arrays of np.float64 and\nX is not a scipy.sparse.csr_matrix, X and/or y may be copied.\n\nIf X is a dense array, then the other methods will not support sparse\nmatrices as input.",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Perform classification on samples in X.\n\nFor an one-class model, +1 or -1 is returned.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features) or                 (n_samples_test, n_samples_train)",
                "description": "For kernel=\"precomputed\", the expected shape of X is\n    (n_samples_test, n_samples_train)."
              }
            },
            "returns": "y_pred : ndarray of shape (n_samples,)\n    Class labels for samples in X.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_log_proba",
          "signature": "predict_log_proba(self, X)",
          "docstring": {
            "description": "Compute log probabilities of possible outcomes for samples in X.\n\nThe model need to have probability information computed at training\ntime: fit with attribute `probability` set to True.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features) or                 (n_samples_test, n_samples_train)",
                "description": "For kernel=\"precomputed\", the expected shape of X is\n    (n_samples_test, n_samples_train)."
              }
            },
            "returns": "T : ndarray of shape (n_samples, n_classes)\n    Returns the log-probabilities of the sample for each class in\n    the model. The columns correspond to the classes in sorted\n    order, as they appear in the attribute :term:`classes_`.",
            "raises": "",
            "see_also": "",
            "notes": "The probability model is created using cross validation, so\nthe results can be slightly different than those obtained by\npredict. Also, it will produce meaningless results on very small\ndatasets.",
            "examples": ""
          }
        },
        {
          "name": "predict_proba",
          "signature": "predict_proba(self, X)",
          "docstring": {
            "description": "Compute probabilities of possible outcomes for samples in X.\n\nThe model needs to have probability information computed at training\ntime: fit with attribute `probability` set to True.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "For kernel=\"precomputed\", the expected shape of X is\n    (n_samples_test, n_samples_train)."
              }
            },
            "returns": "T : ndarray of shape (n_samples, n_classes)\n    Returns the probability of the sample for each class in\n    the model. The columns correspond to the classes in sorted\n    order, as they appear in the attribute :term:`classes_`.",
            "raises": "",
            "see_also": "",
            "notes": "The probability model is created using cross validation, so\nthe results can be slightly different than those obtained by\npredict. Also, it will produce meaningless results on very small\ndatasets.",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the mean accuracy on the given test data and labels.\n\nIn multi-label classification, this is the subset accuracy\nwhich is a harsh metric since you require for each sample that\neach label set be correctly predicted.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True labels for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.svm._classes.SVC, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.svm._classes.SVC",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.svm._classes.SVC, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.svm._classes.SVC",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "SVR",
      "docstring": {
        "description": "Epsilon-Support Vector Regression.\n\nThe free parameters in the model are C and epsilon.\n\nThe implementation is based on libsvm. The fit time complexity\nis more than quadratic with the number of samples which makes it hard\nto scale to datasets with more than a couple of 10000 samples. For large\ndatasets consider using :class:`~sklearn.svm.LinearSVR` or\n:class:`~sklearn.linear_model.SGDRegressor` instead, possibly after a\n:class:`~sklearn.kernel_approximation.Nystroem` transformer or\nother :ref:`kernel_approximation`.\n\nRead more in the :ref:`User Guide <svm_regression>`.",
        "parameters": {
          "kernel": {
            "type": "{'linear', 'poly', 'rbf', 'sigmoid', 'precomputed'} or callable,          default='rbf'",
            "description": "Specifies the kernel type to be used in the algorithm.\n     If none is given, 'rbf' will be used. If a callable is given it is\n     used to precompute the kernel matrix.\n     For an intuitive visualization of different kernel types\n     see :ref:`sphx_glr_auto_examples_svm_plot_svm_regression.py`"
          },
          "degree": {
            "type": "int, default=3",
            "description": "Degree of the polynomial kernel function ('poly').\n    Must be non-negative. Ignored by all other kernels."
          },
          "gamma": {
            "type": "{'scale', 'auto'} or float, default='scale'",
            "description": "Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.\n\n    - if ``gamma='scale'`` (default) is passed then it uses\n      1 / (n_features * X.var()) as value of gamma,\n    - if 'auto', uses 1 / n_features\n    - if float, must be non-negative.\n\n    .. versionchanged:: 0.22\n       The default value of ``gamma`` changed from 'auto' to 'scale'."
          },
          "coef0": {
            "type": "float, default=0.0",
            "description": "Independent term in kernel function.\n    It is only significant in 'poly' and 'sigmoid'."
          },
          "tol": {
            "type": "float, default=1e-3",
            "description": "Tolerance for stopping criterion."
          },
          "C": {
            "type": "float, default=1.0",
            "description": "Regularization parameter. The strength of the regularization is\n    inversely proportional to C. Must be strictly positive.\n    The penalty is a squared l2. For an intuitive visualization of the\n    effects of scaling the regularization parameter C, see\n    :ref:`sphx_glr_auto_examples_svm_plot_svm_scale_c.py`."
          },
          "epsilon": {
            "type": "float, default=0.1",
            "description": "Epsilon in the epsilon-SVR model. It specifies the epsilon-tube\n     within which no penalty is associated in the training loss function\n     with points predicted within a distance epsilon from the actual\n     value. Must be non-negative."
          },
          "shrinking": {
            "type": "bool, default=True",
            "description": "Whether to use the shrinking heuristic.\n    See the :ref:`User Guide <shrinking_svm>`."
          },
          "cache_size": {
            "type": "float, default=200",
            "description": "Specify the size of the kernel cache (in MB)."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Enable verbose output. Note that this setting takes advantage of a\n    per-process runtime setting in libsvm that, if enabled, may not work\n    properly in a multithreaded context."
          },
          "max_iter": {
            "type": "int, default=-1",
            "description": "Hard limit on iterations within solver, or -1 for no limit.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features)",
            "description": "Weights assigned to the features (coefficients in the primal\n    problem). This is only available in the case of a linear kernel.\n\n    `coef_` is readonly property derived from `dual_coef_` and\n    `support_vectors_`."
          },
          "dual_coef_": {
            "type": "ndarray of shape (1, n_SV)",
            "description": "Coefficients of the support vector in the decision function."
          },
          "fit_status_": {
            "type": "int",
            "description": "0 if correctly fitted, 1 otherwise (will raise warning)"
          },
          "intercept_": {
            "type": "ndarray of shape (1,)",
            "description": "Constants in decision function."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations run by the optimization routine to fit the model.\n\n    .. versionadded:: 1.1"
          },
          "n_support_": {
            "type": "ndarray of shape (1,), dtype=int32",
            "description": "Number of support vectors."
          },
          "shape_fit_": {
            "type": "tuple of int of shape (n_dimensions_of_X,)",
            "description": "Array dimensions of training vector ``X``."
          },
          "support_": {
            "type": "ndarray of shape (n_SV,)",
            "description": "Indices of support vectors."
          },
          "support_vectors_": {
            "type": "ndarray of shape (n_SV, n_features)",
            "description": "Support vectors."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "NuSVR : Support Vector Machine for regression implemented using libsvm\n    using a parameter to control the number of support vectors.\n\nLinearSVR : Scalable Linear Support Vector Machine for regression\n    implemented using liblinear.\n\nReferences\n----------\n.. [1] `LIBSVM: A Library for Support Vector Machines\n    <http://www.csie.ntu.edu.tw/~cjlin/papers/libsvm.pdf>`_\n\n.. [2] `Platt, John (1999). \"Probabilistic Outputs for Support Vector\n    Machines and Comparisons to Regularized Likelihood Methods\"\n    <https://citeseerx.ist.psu.edu/doc_view/pid/42e5ed832d4310ce4378c44d05570439df28a393>`_",
        "notes": "",
        "examples": ">>> from sklearn.svm import SVR\n>>> from sklearn.pipeline import make_pipeline\n>>> from sklearn.preprocessing import StandardScaler\n>>> import numpy as np\n>>> n_samples, n_features = 10, 5\n>>> rng = np.random.RandomState(0)\n>>> y = rng.randn(n_samples)\n>>> X = rng.randn(n_samples, n_features)\n>>> regr = make_pipeline(StandardScaler(), SVR(C=1.0, epsilon=0.2))\n>>> regr.fit(X, y)\nPipeline(steps=[('standardscaler', StandardScaler()),\n                ('svr', SVR(epsilon=0.2))])"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Fit the SVM model according to the given training data.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)                 or (n_samples, n_samples)",
                "description": "Training vectors, where `n_samples` is the number of samples\n    and `n_features` is the number of features.\n    For kernel=\"precomputed\", the expected shape of X is\n    (n_samples, n_samples)."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Target values (class labels in classification, real numbers in\n    regression)."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Per-sample weights. Rescale C per sample. Higher weights\n    force the classifier to put more emphasis on these points."
              }
            },
            "returns": "self : object\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "If X and y are not C-ordered and contiguous arrays of np.float64 and\nX is not a scipy.sparse.csr_matrix, X and/or y may be copied.\n\nIf X is a dense array, then the other methods will not support sparse\nmatrices as input.",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Perform regression on samples in X.\n\nFor an one-class model, +1 (inlier) or -1 (outlier) is returned.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "For kernel=\"precomputed\", the expected shape of X is\n    (n_samples_test, n_samples_train)."
              }
            },
            "returns": "y_pred : ndarray of shape (n_samples,)\n    The predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.svm._classes.SVR, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.svm._classes.SVR",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.svm._classes.SVR, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.svm._classes.SVR",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    }
  ],
  "constants": []
}