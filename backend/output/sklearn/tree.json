{
  "description": "Decision tree based models for classification and regression.",
  "functions": [
    {
      "name": "export_graphviz",
      "signature": "export_graphviz(decision_tree, out_file=None, *, max_depth=None, feature_names=None, class_names=None, label='all', filled=False, leaves_parallel=False, impurity=True, node_ids=False, proportion=False, rotate=False, rounded=False, special_characters=False, precision=3, fontname='helvetica')",
      "documentation": {
        "description": "Export a decision tree in DOT format.\n\n    This function generates a GraphViz representation of the decision tree,\n    which is then written into `out_file`. Once exported, graphical renderings\n    can be generated using, for example::\n\n        $ dot -Tps tree.dot -o tree.ps      (PostScript format)\n        $ dot -Tpng tree.dot -o tree.png    (PNG format)\n\n    The sample counts that are shown are weighted with any sample_weights that\n    might be present.\n\n    Read more in the :ref:`User Guide <tree>`.\n\n    Parameters\n    ----------\n    decision_tree : object\n        The decision tree estimator to be exported to GraphViz.\n\n    out_file : object or str, default=None\n        Handle or name of the output file. If ``None``, the result is\n        returned as a string.\n\n        .. versionchanged:: 0.20\n            Default of out_file changed from \"tree.dot\" to None.\n\n    max_depth : int, default=None\n        The maximum depth of the representation. If None, the tree is fully\n        generated.\n\n    feature_names : array-like of shape (n_features,), default=None\n        An array containing the feature names.\n        If None, generic names will be used (\"x[0]\", \"x[1]\", ...).\n\n    class_names : array-like of shape (n_classes,) or bool, default=None\n        Names of each of the target classes in ascending numerical order.\n        Only relevant for classification and not supported for multi-output.\n        If ``True``, shows a symbolic representation of the class name.\n\n    label : {'all', 'root', 'none'}, default='all'\n        Whether to show informative labels for impurity, etc.\n        Options include 'all' to show at every node, 'root' to show only at\n        the top root node, or 'none' to not show at any node.\n\n    filled : bool, default=False\n        When set to ``True``, paint nodes to indicate majority class for\n        classification, extremity of values for regression, or purity of node\n        for multi-output.\n\n    leaves_parallel : bool, default=False\n        When set to ``True``, draw all leaf nodes at the bottom of the tree.\n\n    impurity : bool, default=True\n        When set to ``True``, show the impurity at each node.\n\n    node_ids : bool, default=False\n        When set to ``True``, show the ID number on each node.\n\n    proportion : bool, default=False\n        When set to ``True``, change the display of 'values' and/or 'samples'\n        to be proportions and percentages respectively.\n\n    rotate : bool, default=False\n        When set to ``True``, orient tree left to right rather than top-down.\n\n    rounded : bool, default=False\n        When set to ``True``, draw node boxes with rounded corners.\n\n    special_characters : bool, default=False\n        When set to ``False``, ignore special characters for PostScript\n        compatibility.\n\n    precision : int, default=3\n        Number of digits of precision for floating point in the values of\n        impurity, threshold and value attributes of each node.\n\n    fontname : str, default='helvetica'\n        Name of font used to render text.\n\n    Returns\n    -------\n    dot_data : str\n        String representation of the input tree in GraphViz dot format.\n        Only returned if ``out_file`` is None.\n\n        .. versionadded:: 0.18",
        "parameters": {
          "decision_tree": {
            "type": "object",
            "description": ""
          },
          "The": {
            "type": "maximum depth of the representation. If None, the tree is fully",
            "description": "generated."
          },
          "out_file": {
            "type": "object or str, default=None",
            "description": ""
          },
          "Handle": {
            "type": "or name of the output file. If ``None``, the result is",
            "description": ""
          },
          "returned": {
            "type": "as a string.",
            "description": ".. versionchanged:: 0.20"
          },
          "Default": {
            "type": "of out_file changed from \"tree.dot\" to None.",
            "description": ""
          },
          "max_depth": {
            "type": "int, default=None",
            "description": ""
          },
          "feature_names": {
            "type": "array",
            "description": "like of shape (n_features,), default=None"
          },
          "An": {
            "type": "array containing the feature names.",
            "description": ""
          },
          "If": {
            "type": "``True``, shows a symbolic representation of the class name.",
            "description": ""
          },
          "class_names": {
            "type": "array",
            "description": "like of shape (n_classes,) or bool, default=None"
          },
          "Names": {
            "type": "of each of the target classes in ascending numerical order.",
            "description": ""
          },
          "Only": {
            "type": "returned if ``out_file`` is None.",
            "description": ".. versionadded:: 0.18\nExamples\n--------\n>>> from sklearn.datasets import load_iris\n>>> from sklearn import tree\n>>> clf = tree.DecisionTreeClassifier()\n>>> iris = load_iris()\n>>> clf = clf.fit(iris.data, iris.target)\n>>> tree.export_graphviz(clf)\n'digraph Tree {..."
          },
          "label": {
            "type": "{'all', 'root', 'none'}, default='all'",
            "description": ""
          },
          "Whether": {
            "type": "to show informative labels for impurity, etc.",
            "description": ""
          },
          "Options": {
            "type": "include 'all' to show at every node, 'root' to show only at",
            "description": ""
          },
          "the": {
            "type": "top root node, or 'none' to not show at any node.",
            "description": ""
          },
          "filled": {
            "type": "bool, default=False",
            "description": ""
          },
          "When": {
            "type": "set to ``False``, ignore special characters for PostScript",
            "description": "compatibility."
          },
          "for": {
            "type": "multi-output.",
            "description": ""
          },
          "leaves_parallel": {
            "type": "bool, default=False",
            "description": ""
          },
          "impurity": {
            "type": "bool, default=True",
            "description": ""
          },
          "node_ids": {
            "type": "bool, default=False",
            "description": ""
          },
          "proportion": {
            "type": "bool, default=False",
            "description": ""
          },
          "to": {
            "type": "be proportions and percentages respectively.",
            "description": ""
          },
          "rotate": {
            "type": "bool, default=False",
            "description": ""
          },
          "rounded": {
            "type": "bool, default=False",
            "description": ""
          },
          "special_characters": {
            "type": "bool, default=False",
            "description": ""
          },
          "precision": {
            "type": "int, default=3",
            "description": ""
          },
          "Number": {
            "type": "of digits of precision for floating point in the values of",
            "description": "impurity, threshold and value attributes of each node."
          },
          "fontname": {
            "type": "str, default='helvetica'",
            "description": ""
          },
          "Name": {
            "type": "of font used to render text.",
            "description": "Returns\n-------"
          },
          "dot_data": {
            "type": "str",
            "description": ""
          },
          "String": {
            "type": "representation of the input tree in GraphViz dot format.",
            "description": ""
          }
        },
        "returns": "-------\n    dot_data : str\n        String representation of the input tree in GraphViz dot format.\n        Only returned if ``out_file`` is None.\n\n        .. versionadded:: 0.18\n\n    Examples\n    --------\n    >>> from sklearn.datasets import load_iris\n    >>> from sklearn import tree\n\n    >>> clf = tree.DecisionTreeClassifier()\n    >>> iris = load_iris()\n\n    >>> clf = clf.fit(iris.data, iris.target)\n    >>> tree.export_graphviz(clf)\n    'digraph Tree {...",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import load_iris\n    >>> from sklearn import tree\n\n    >>> clf = tree.DecisionTreeClassifier()\n    >>> iris = load_iris()\n\n    >>> clf = clf.fit(iris.data, iris.target)\n    >>> tree.export_graphviz(clf)\n    'digraph Tree {..."
      }
    },
    {
      "name": "export_text",
      "signature": "export_text(decision_tree, *, feature_names=None, class_names=None, max_depth=10, spacing=3, decimals=2, show_weights=False)",
      "documentation": {
        "description": "Build a text report showing the rules of a decision tree.\n\n    Note that backwards compatibility may not be supported.\n\n    Parameters\n    ----------\n    decision_tree : object\n        The decision tree estimator to be exported.\n        It can be an instance of\n        DecisionTreeClassifier or DecisionTreeRegressor.\n\n    feature_names : array-like of shape (n_features,), default=None\n        An array containing the feature names.\n        If None generic names will be used (\"feature_0\", \"feature_1\", ...).\n\n    class_names : array-like of shape (n_classes,), default=None\n        Names of each of the target classes in ascending numerical order.\n        Only relevant for classification and not supported for multi-output.\n\n        - if `None`, the class names are delegated to `decision_tree.classes_`;\n        - otherwise, `class_names` will be used as class names instead of\n          `decision_tree.classes_`. The length of `class_names` must match\n          the length of `decision_tree.classes_`.\n\n        .. versionadded:: 1.3\n\n    max_depth : int, default=10\n        Only the first max_depth levels of the tree are exported.\n        Truncated branches will be marked with \"...\".\n\n    spacing : int, default=3\n        Number of spaces between edges. The higher it is, the wider the result.\n\n    decimals : int, default=2\n        Number of decimal digits to display.\n\n    show_weights : bool, default=False\n        If true the classification weights will be exported on each leaf.\n        The classification weights are the number of samples each class.\n\n    Returns\n    -------\n    report : str\n        Text summary of all the rules in the decision tree.",
        "parameters": {
          "decision_tree": {
            "type": "object",
            "description": ""
          },
          "The": {
            "type": "classification weights are the number of samples each class.",
            "description": "Returns\n-------"
          },
          "It": {
            "type": "can be an instance of",
            "description": ""
          },
          "DecisionTreeClassifier": {
            "type": "or DecisionTreeRegressor.",
            "description": ""
          },
          "feature_names": {
            "type": "array",
            "description": "like of shape (n_features,), default=None"
          },
          "An": {
            "type": "array containing the feature names.",
            "description": ""
          },
          "If": {
            "type": "true the classification weights will be exported on each leaf.",
            "description": ""
          },
          "class_names": {
            "type": "array",
            "description": "like of shape (n_classes,), default=None"
          },
          "Names": {
            "type": "of each of the target classes in ascending numerical order.",
            "description": ""
          },
          "Only": {
            "type": "the first max_depth levels of the tree are exported.",
            "description": ""
          },
          "the": {
            "type": "length of `decision_tree.classes_`.",
            "description": ".. versionadded:: 1.3"
          },
          "max_depth": {
            "type": "int, default=10",
            "description": ""
          },
          "Truncated": {
            "type": "branches will be marked with \"...\".",
            "description": ""
          },
          "spacing": {
            "type": "int, default=3",
            "description": ""
          },
          "Number": {
            "type": "of decimal digits to display.",
            "description": ""
          },
          "decimals": {
            "type": "int, default=2",
            "description": ""
          },
          "show_weights": {
            "type": "bool, default=False",
            "description": ""
          },
          "report": {
            "type": "str",
            "description": ""
          },
          "Text": {
            "type": "summary of all the rules in the decision tree.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import load_iris\n>>> from sklearn.tree import DecisionTreeClassifier\n>>> from sklearn.tree import export_text\n>>> iris = load_iris()\n>>> X = iris['data']\n>>> y = iris['target']\n>>> decision_tree = DecisionTreeClassifier(random_state=0, max_depth=2)\n>>> decision_tree = decision_tree.fit(X, y)\n>>> r = export_text(decision_tree, feature_names=iris['feature_names'])\n>>> print(r)\n|--- petal width (cm) <= 0.80\n|   |--- class: 0\n|--- petal width (cm) >  0.80\n|   |--- petal width (cm) <= 1.75\n|   |   |--- class: 1\n|   |--- petal width (cm) >  1.75\n|   |   |--- class: 2"
          }
        },
        "returns": "-------\n    report : str\n        Text summary of all the rules in the decision tree.\n\n    Examples\n    --------\n\n    >>> from sklearn.datasets import load_iris\n    >>> from sklearn.tree import DecisionTreeClassifier\n    >>> from sklearn.tree import export_text\n    >>> iris = load_iris()\n    >>> X = iris['data']\n    >>> y = iris['target']\n    >>> decision_tree = DecisionTreeClassifier(random_state=0, max_depth=2)\n    >>> decision_tree = decision_tree.fit(X, y)\n    >>> r = export_text(decision_tree, feature_names=iris['feature_names'])\n    >>> print(r)\n    |--- petal width (cm) <= 0.80\n    |   |--- class: 0\n    |--- petal width (cm) >  0.80\n    |   |--- petal width (cm) <= 1.75\n    |   |   |--- class: 1\n    |   |--- petal width (cm) >  1.75\n    |   |   |--- class: 2",
        "raises": "",
        "see_also": "",
        "notes": "that backwards compatibility may not be supported.\n\n    Parameters\n    ----------\n    decision_tree : object\n        The decision tree estimator to be exported.\n        It can be an instance of\n        DecisionTreeClassifier or DecisionTreeRegressor.\n\n    feature_names : array-like of shape (n_features,), default=None\n        An array containing the feature names.\n        If None generic names will be used (\"feature_0\", \"feature_1\", ...).\n\n    class_names : array-like of shape (n_classes,), default=None\n        Names of each of the target classes in ascending numerical order.\n        Only relevant for classification and not supported for multi-output.\n\n        - if `None`, the class names are delegated to `decision_tree.classes_`;\n        - otherwise, `class_names` will be used as class names instead of\n          `decision_tree.classes_`. The length of `class_names` must match\n          the length of `decision_tree.classes_`.\n\n        .. versionadded:: 1.3\n\n    max_depth : int, default=10\n        Only the first max_depth levels of the tree are exported.\n        Truncated branches will be marked with \"...\".\n\n    spacing : int, default=3\n        Number of spaces between edges. The higher it is, the wider the result.\n\n    decimals : int, default=2\n        Number of decimal digits to display.\n\n    show_weights : bool, default=False\n        If true the classification weights will be exported on each leaf.\n        The classification weights are the number of samples each class.\n\n    Returns\n    -------\n    report : str\n        Text summary of all the rules in the decision tree.\n\n    Examples\n    --------\n\n    >>> from sklearn.datasets import load_iris\n    >>> from sklearn.tree import DecisionTreeClassifier\n    >>> from sklearn.tree import export_text\n    >>> iris = load_iris()\n    >>> X = iris['data']\n    >>> y = iris['target']\n    >>> decision_tree = DecisionTreeClassifier(random_state=0, max_depth=2)\n    >>> decision_tree = decision_tree.fit(X, y)\n    >>> r = export_text(decision_tree, feature_names=iris['feature_names'])\n    >>> print(r)\n    |--- petal width (cm) <= 0.80\n    |   |--- class: 0\n    |--- petal width (cm) >  0.80\n    |   |--- petal width (cm) <= 1.75\n    |   |   |--- class: 1\n    |   |--- petal width (cm) >  1.75\n    |   |   |--- class: 2",
        "examples": "--------\n\n    >>> from sklearn.datasets import load_iris\n    >>> from sklearn.tree import DecisionTreeClassifier\n    >>> from sklearn.tree import export_text\n    >>> iris = load_iris()\n    >>> X = iris['data']\n    >>> y = iris['target']\n    >>> decision_tree = DecisionTreeClassifier(random_state=0, max_depth=2)\n    >>> decision_tree = decision_tree.fit(X, y)\n    >>> r = export_text(decision_tree, feature_names=iris['feature_names'])\n    >>> print(r)\n    |--- petal width (cm) <= 0.80\n    |   |--- class: 0\n    |--- petal width (cm) >  0.80\n    |   |--- petal width (cm) <= 1.75\n    |   |   |--- class: 1\n    |   |--- petal width (cm) >  1.75\n    |   |   |--- class: 2"
      }
    },
    {
      "name": "plot_tree",
      "signature": "plot_tree(decision_tree, *, max_depth=None, feature_names=None, class_names=None, label='all', filled=False, impurity=True, node_ids=False, proportion=False, rounded=False, precision=3, ax=None, fontsize=None)",
      "documentation": {
        "description": "Plot a decision tree.\n\n    The sample counts that are shown are weighted with any sample_weights that\n    might be present.\n\n    The visualization is fit automatically to the size of the axis.\n    Use the ``figsize`` or ``dpi`` arguments of ``plt.figure``  to control\n    the size of the rendering.\n\n    Read more in the :ref:`User Guide <tree>`.\n\n    .. versionadded:: 0.21\n\n    Parameters\n    ----------\n    decision_tree : decision tree regressor or classifier\n        The decision tree to be plotted.\n\n    max_depth : int, default=None\n        The maximum depth of the representation. If None, the tree is fully\n        generated.\n\n    feature_names : array-like of str, default=None\n        Names of each of the features.\n        If None, generic names will be used (\"x[0]\", \"x[1]\", ...).\n\n    class_names : array-like of str or True, default=None\n        Names of each of the target classes in ascending numerical order.\n        Only relevant for classification and not supported for multi-output.\n        If ``True``, shows a symbolic representation of the class name.\n\n    label : {'all', 'root', 'none'}, default='all'\n        Whether to show informative labels for impurity, etc.\n        Options include 'all' to show at every node, 'root' to show only at\n        the top root node, or 'none' to not show at any node.\n\n    filled : bool, default=False\n        When set to ``True``, paint nodes to indicate majority class for\n        classification, extremity of values for regression, or purity of node\n        for multi-output.\n\n    impurity : bool, default=True\n        When set to ``True``, show the impurity at each node.\n\n    node_ids : bool, default=False\n        When set to ``True``, show the ID number on each node.\n\n    proportion : bool, default=False\n        When set to ``True``, change the display of 'values' and/or 'samples'\n        to be proportions and percentages respectively.\n\n    rounded : bool, default=False\n        When set to ``True``, draw node boxes with rounded corners and use\n        Helvetica fonts instead of Times-Roman.\n\n    precision : int, default=3\n        Number of digits of precision for floating point in the values of\n        impurity, threshold and value attributes of each node.\n\n    ax : matplotlib axis, default=None\n        Axes to plot to. If None, use current axis. Any previous content\n        is cleared.\n\n    fontsize : int, default=None\n        Size of text font. If None, determined automatically to fit figure.\n\n    Returns\n    -------\n    annotations : list of artists\n        List containing the artists for the annotation boxes making up the\n        tree.",
        "parameters": {
          "decision_tree": {
            "type": "decision tree regressor or classifier",
            "description": ""
          },
          "The": {
            "type": "maximum depth of the representation. If None, the tree is fully",
            "description": "generated."
          },
          "max_depth": {
            "type": "int, default=None",
            "description": ""
          },
          "feature_names": {
            "type": "array",
            "description": "like of str, default=None"
          },
          "Names": {
            "type": "of each of the target classes in ascending numerical order.",
            "description": ""
          },
          "If": {
            "type": "``True``, shows a symbolic representation of the class name.",
            "description": ""
          },
          "class_names": {
            "type": "array",
            "description": "like of str or True, default=None"
          },
          "Only": {
            "type": "relevant for classification and not supported for multi-output.",
            "description": ""
          },
          "label": {
            "type": "{'all', 'root', 'none'}, default='all'",
            "description": ""
          },
          "Whether": {
            "type": "to show informative labels for impurity, etc.",
            "description": ""
          },
          "Options": {
            "type": "include 'all' to show at every node, 'root' to show only at",
            "description": ""
          },
          "the": {
            "type": "top root node, or 'none' to not show at any node.",
            "description": ""
          },
          "filled": {
            "type": "bool, default=False",
            "description": ""
          },
          "When": {
            "type": "set to ``True``, draw node boxes with rounded corners and use",
            "description": ""
          },
          "for": {
            "type": "multi-output.",
            "description": ""
          },
          "impurity": {
            "type": "bool, default=True",
            "description": ""
          },
          "node_ids": {
            "type": "bool, default=False",
            "description": ""
          },
          "proportion": {
            "type": "bool, default=False",
            "description": ""
          },
          "to": {
            "type": "be proportions and percentages respectively.",
            "description": ""
          },
          "rounded": {
            "type": "bool, default=False",
            "description": ""
          },
          "Helvetica": {
            "type": "fonts instead of Times-Roman.",
            "description": ""
          },
          "precision": {
            "type": "int, default=3",
            "description": ""
          },
          "Number": {
            "type": "of digits of precision for floating point in the values of",
            "description": "impurity, threshold and value attributes of each node."
          },
          "ax": {
            "type": "matplotlib axis, default=None",
            "description": ""
          },
          "Axes": {
            "type": "to plot to. If None, use current axis. Any previous content",
            "description": ""
          },
          "is": {
            "type": "cleared.",
            "description": ""
          },
          "fontsize": {
            "type": "int, default=None",
            "description": ""
          },
          "Size": {
            "type": "of text font. If None, determined automatically to fit figure.",
            "description": "Returns\n-------"
          },
          "annotations": {
            "type": "list of artists",
            "description": ""
          },
          "List": {
            "type": "containing the artists for the annotation boxes making up the",
            "description": "tree.\nExamples\n--------\n>>> from sklearn.datasets import load_iris\n>>> from sklearn import tree\n>>> clf = tree.DecisionTreeClassifier(random_state=0)\n>>> iris = load_iris()\n>>> clf = clf.fit(iris.data, iris.target)\n>>> tree.plot_tree(clf)\n[...]"
          }
        },
        "returns": "-------\n    annotations : list of artists\n        List containing the artists for the annotation boxes making up the\n        tree.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import load_iris\n    >>> from sklearn import tree\n\n    >>> clf = tree.DecisionTreeClassifier(random_state=0)\n    >>> iris = load_iris()\n\n    >>> clf = clf.fit(iris.data, iris.target)\n    >>> tree.plot_tree(clf)\n    [...]",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import load_iris\n    >>> from sklearn import tree\n\n    >>> clf = tree.DecisionTreeClassifier(random_state=0)\n    >>> iris = load_iris()\n\n    >>> clf = clf.fit(iris.data, iris.target)\n    >>> tree.plot_tree(clf)\n    [...]"
      }
    }
  ],
  "classes": [
    {
      "name": "BaseDecisionTree",
      "documentation": {
        "description": "Base class for decision trees.\n\n    Warning: This class should not be used directly.\n    Use derived classes instead.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "apply",
          "signature": "apply(self, X, check_input=True)",
          "documentation": {
            "description": "Return the index of the leaf that each sample is predicted as.\n\n        .. versionadded:: 0.17\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples. Internally, it will be converted to",
                "description": "``dtype=np.float32`` and if a sparse matrix is provided"
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "X_leaves": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "For": {
                "type": "each datapoint x in X, return the index of the leaf x",
                "description": ""
              },
              "ends": {
                "type": "up in. Leaves are numbered within",
                "description": "``[0; self.tree_.node_count)``, possibly with gaps in the\nnumbering."
              }
            },
            "returns": "-------\n        X_leaves : array-like of shape (n_samples,)\n            For each datapoint x in X, return the index of the leaf x\n            ends up in. Leaves are numbered within\n            ``[0; self.tree_.node_count)``, possibly with gaps in the\n            numbering.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cost_complexity_pruning_path",
          "signature": "cost_complexity_pruning_path(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Compute the pruning path during Minimal Cost-Complexity Pruning.\n\n        See :ref:`minimal_cost_complexity_pruning` for details on the pruning\n        process.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csc_matrix``.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            The target values (class labels) as integers or strings.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted. Splits\n            that would create child nodes with net zero or negative weight are\n            ignored while searching for a split in each node. Splits are also\n            ignored if they would result in any single class carrying a\n            negative weight in either child node.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "target values (class labels) as integers or strings.",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csc_matrix``.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted. Splits",
                "description": ""
              },
              "that": {
                "type": "would create child nodes with net zero or negative weight are",
                "description": ""
              },
              "ignored": {
                "type": "if they would result in any single class carrying a",
                "description": ""
              },
              "negative": {
                "type": "weight in either child node.",
                "description": "Returns\n-------"
              },
              "ccp_path": {
                "type": ":class:`~sklearn.utils.Bunch`",
                "description": "Dictionary-like object, with the following attributes."
              },
              "ccp_alphas": {
                "type": "ndarray",
                "description": ""
              },
              "Effective": {
                "type": "alphas of subtree during pruning.",
                "description": ""
              },
              "impurities": {
                "type": "ndarray",
                "description": ""
              },
              "Sum": {
                "type": "of the impurities of the subtree leaves for the",
                "description": ""
              },
              "corresponding": {
                "type": "alpha value in ``ccp_alphas``.",
                "description": ""
              }
            },
            "returns": "-------\n        ccp_path : :class:`~sklearn.utils.Bunch`\n            Dictionary-like object, with the following attributes.\n\n            ccp_alphas : ndarray\n                Effective alphas of subtree during pruning.\n\n            impurities : ndarray\n                Sum of the impurities of the subtree leaves for the\n                corresponding alpha value in ``ccp_alphas``.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "decision_path",
          "signature": "decision_path(self, X, check_input=True)",
          "documentation": {
            "description": "Return the decision path in the tree.\n\n        .. versionadded:: 0.18\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.\n\n        Returns\n        -------\n        indicator : sparse matrix of shape (n_samples, n_nodes)",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples. Internally, it will be converted to",
                "description": "``dtype=np.float32`` and if a sparse matrix is provided"
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "indicator": {
                "type": "sparse matrix of shape (n_samples, n_nodes)",
                "description": ""
              },
              "Return": {
                "type": "a node indicator CSR matrix where non zero elements",
                "description": ""
              },
              "indicates": {
                "type": "that the samples goes through the nodes.",
                "description": ""
              }
            },
            "returns": "a node indicator CSR matrix where non zero elements\n            indicates that the samples goes through the nodes.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_depth",
          "signature": "get_depth(self)",
          "documentation": {
            "description": "Return the depth of the decision tree.\n\n        The depth of a tree is the maximum distance between the root\n        and any leaf.",
            "parameters": {},
            "returns": "-------\n        self.tree_.max_depth : int\n            The maximum depth of the tree.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRequest\n            A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_n_leaves",
          "signature": "get_n_leaves(self)",
          "documentation": {
            "description": "Return the number of leaves of the decision tree.",
            "parameters": {},
            "returns": "-------\n        self.tree_.n_leaves : int\n            Number of leaves.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X, check_input=True)",
          "documentation": {
            "description": "Predict class or regression value for X.\n\n        For a classification model, the predicted class for each sample in X is\n        returned. For a regression model, the predicted value based on X is\n        returned.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted classes, or the predict values.",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              }
            },
            "returns": "-------\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            The predicted classes, or the predict values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "DecisionTreeClassifier",
      "documentation": {
        "description": "A decision tree classifier.\n\n    Read more in the :ref:`User Guide <tree>`.\n\n    Parameters\n    ----------\n    criterion : {\"gini\", \"entropy\", \"log_loss\"}, default=\"gini\"\n        The function to measure the quality of a split. Supported criteria are\n        \"gini\" for the Gini impurity and \"log_loss\" and \"entropy\" both for the\n        Shannon information gain, see :ref:`tree_mathematical_formulation`.\n\n    splitter : {\"best\", \"random\"}, default=\"best\"\n        The strategy used to choose the split at each node. Supported\n        strategies are \"best\" to choose the best split and \"random\" to choose\n        the best random split.\n\n    max_depth : int, default=None\n        The maximum depth of the tree. If None, then nodes are expanded until\n        all leaves are pure or until all leaves contain less than\n        min_samples_split samples.\n\n    min_samples_split : int or float, default=2\n        The minimum number of samples required to split an internal node:\n\n        - If int, then consider `min_samples_split` as the minimum number.\n        - If float, then `min_samples_split` is a fraction and\n          `ceil(min_samples_split * n_samples)` are the minimum\n          number of samples for each split.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_samples_leaf : int or float, default=1\n        The minimum number of samples required to be at a leaf node.\n        A split point at any depth will only be considered if it leaves at\n        least ``min_samples_leaf`` training samples in each of the left and\n        right branches.  This may have the effect of smoothing the model,\n        especially in regression.\n\n        - If int, then consider `min_samples_leaf` as the minimum number.\n        - If float, then `min_samples_leaf` is a fraction and\n          `ceil(min_samples_leaf * n_samples)` are the minimum\n          number of samples for each node.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_weight_fraction_leaf : float, default=0.0\n        The minimum weighted fraction of the sum total of weights (of all\n        the input samples) required to be at a leaf node. Samples have\n        equal weight when sample_weight is not provided.\n\n    max_features : int, float or {\"sqrt\", \"log2\"}, default=None\n        The number of features to consider when looking for the best split:\n\n        - If int, then consider `max_features` features at each split.\n        - If float, then `max_features` is a fraction and\n          `max(1, int(max_features * n_features_in_))` features are considered at\n          each split.\n        - If \"sqrt\", then `max_features=sqrt(n_features)`.\n        - If \"log2\", then `max_features=log2(n_features)`.\n        - If None, then `max_features=n_features`.\n\n        .. note::\n\n            The search for a split does not stop until at least one\n            valid partition of the node samples is found, even if it requires to\n            effectively inspect more than ``max_features`` features.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls the randomness of the estimator. The features are always\n        randomly permuted at each split, even if ``splitter`` is set to\n        ``\"best\"``. When ``max_features < n_features``, the algorithm will\n        select ``max_features`` at random at each split before finding the best\n        split among them. But the best found split may vary across different\n        runs, even if ``max_features=n_features``. That is the case, if the\n        improvement of the criterion is identical for several splits and one\n        split has to be selected at random. To obtain a deterministic behaviour\n        during fitting, ``random_state`` has to be fixed to an integer.\n        See :term:`Glossary <random_state>` for details.\n\n    max_leaf_nodes : int, default=None\n        Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        If None then unlimited number of leaf nodes.\n\n    min_impurity_decrease : float, default=0.0\n        A node will be split if this split induces a decrease of the impurity\n        greater than or equal to this value.\n\n        The weighted impurity decrease equation is the following::\n\n            N_t / N * (impurity - N_t_R / N_t * right_impurity\n                                - N_t_L / N_t * left_impurity)\n\n        where ``N`` is the total number of samples, ``N_t`` is the number of\n        samples at the current node, ``N_t_L`` is the number of samples in the\n        left child, and ``N_t_R`` is the number of samples in the right child.\n\n        ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n        if ``sample_weight`` is passed.\n\n        .. versionadded:: 0.19\n\n    class_weight : dict, list of dict or \"balanced\", default=None\n        Weights associated with classes in the form ``{class_label: weight}``.\n        If None, all classes are supposed to have weight one. For\n        multi-output problems, a list of dicts can be provided in the same\n        order as the columns of y.\n\n        Note that for multioutput (including multilabel) weights should be\n        defined for each class of every column in its own dict. For example,\n        for four-class multilabel classification weights should be\n        [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of\n        [{1:1}, {2:5}, {3:1}, {4:1}].\n\n        The \"balanced\" mode uses the values of y to automatically adjust\n        weights inversely proportional to class frequencies in the input data\n        as ``n_samples / (n_classes * np.bincount(y))``\n\n        For multi-output, the weights of each column of y will be multiplied.\n\n        Note that these weights will be multiplied with sample_weight (passed\n        through the fit method) if sample_weight is specified.\n\n    ccp_alpha : non-negative float, default=0.0\n        Complexity parameter used for Minimal Cost-Complexity Pruning. The\n        subtree with the largest cost complexity that is smaller than\n        ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n        :ref:`minimal_cost_complexity_pruning` for details. See\n        :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n        for an example of such pruning.\n\n        .. versionadded:: 0.22\n\n    monotonic_cst : array-like of int of shape (n_features), default=None\n        Indicates the monotonicity constraint to enforce on each feature.\n          - 1: monotonic increase\n          - 0: no constraint\n          - -1: monotonic decrease\n\n        If monotonic_cst is None, no constraints are applied.\n\n        Monotonicity constraints are not supported for:\n          - multiclass classifications (i.e. when `n_classes > 2`),\n          - multioutput classifications (i.e. when `n_outputs_ > 1`),\n          - classifications trained on data with missing values.\n\n        The constraints hold over the probability of the positive class.\n\n        Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n        .. versionadded:: 1.4\n\n    Attributes\n    ----------\n    classes_ : ndarray of shape (n_classes,) or list of ndarray\n        The classes labels (single output problem),\n        or a list of arrays of class labels (multi-output problem).\n\n    feature_importances_ : ndarray of shape (n_features,)\n        The impurity-based feature importances.\n        The higher, the more important the feature.\n        The importance of a feature is computed as the (normalized)\n        total reduction of the criterion brought by that feature.  It is also\n        known as the Gini importance [4]_.\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    max_features_ : int\n        The inferred value of max_features.\n\n    n_classes_ : int or list of int\n        The number of classes (for single output problems),\n        or a list containing the number of classes for each\n        output (for multi-output problems).\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_outputs_ : int\n        The number of outputs when ``fit`` is performed.\n\n    tree_ : Tree instance\n        The underlying Tree object. Please refer to\n        ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n        :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n        for basic usage of these attributes.\n\n    See Also\n    --------\n    DecisionTreeRegressor : A decision tree regressor.\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    The :meth:`predict` method operates using the :func:`numpy.argmax`\n    function on the outputs of :meth:`predict_proba`. This means that in\n    case the highest predicted probabilities are tied, the classifier will\n    predict the tied class with the lowest index in :term:`classes_`.\n\n    References\n    ----------\n\n    .. [1] https://en.wikipedia.org/wiki/Decision_tree_learning\n\n    .. [2] L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification\n           and Regression Trees\", Wadsworth, Belmont, CA, 1984.\n\n    .. [3] T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical\n           Learning\", Springer, 2009.\n\n    .. [4] L. Breiman, and A. Cutler, \"Random Forests\",\n           https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm",
        "parameters": {
          "criterion": {
            "type": "{\"gini\", \"entropy\", \"log_loss\"}, default=\"gini\"",
            "description": ""
          },
          "The": {
            "type": "meth:`predict` method operates using the :func:`numpy.argmax`",
            "description": ""
          },
          "Shannon": {
            "type": "information gain, see :ref:`tree_mathematical_formulation`.",
            "description": ""
          },
          "splitter": {
            "type": "{\"best\", \"random\"}, default=\"best\"",
            "description": ""
          },
          "strategies": {
            "type": "are \"best\" to choose the best split and \"random\" to choose",
            "description": ""
          },
          "the": {
            "type": "input samples) required to be at a leaf node. Samples have",
            "description": ""
          },
          "max_depth": {
            "type": "int, default=None",
            "description": ""
          },
          "all": {
            "type": "leaves are pure or until all leaves contain less than",
            "description": ""
          },
          "min_samples_split": {
            "type": "int or float, default=2",
            "description": ""
          },
          "number": {
            "type": "of samples for each node.",
            "description": ".. versionchanged:: 0.18"
          },
          "Added": {
            "type": "float values for fractions.",
            "description": ""
          },
          "min_samples_leaf": {
            "type": "int or float, default=1",
            "description": ""
          },
          "A": {
            "type": "node will be split if this split induces a decrease of the impurity",
            "description": ""
          },
          "least": {
            "type": "``min_samples_leaf`` training samples in each of the left and",
            "description": ""
          },
          "right": {
            "type": "branches.  This may have the effect of smoothing the model,",
            "description": ""
          },
          "especially": {
            "type": "in regression.",
            "description": "- If int, then consider `min_samples_leaf` as the minimum number.\n- If float, then `min_samples_leaf` is a fraction and\n`ceil(min_samples_leaf * n_samples)` are the minimum"
          },
          "min_weight_fraction_leaf": {
            "type": "float, default=0.0",
            "description": ""
          },
          "equal": {
            "type": "weight when sample_weight is not provided.",
            "description": ""
          },
          "max_features": {
            "type": "int, float or {\"sqrt\", \"log2\"}, default=None",
            "description": ""
          },
          "each": {
            "type": "split.",
            "description": "- If \"sqrt\", then `max_features=sqrt(n_features)`.\n- If \"log2\", then `max_features=log2(n_features)`.\n- If None, then `max_features=n_features`.\n.. note::"
          },
          "valid": {
            "type": "partition of the node samples is found, even if it requires to",
            "description": ""
          },
          "effectively": {
            "type": "inspect more than ``max_features`` features.",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Controls": {
            "type": "the randomness of the estimator. The features are always",
            "description": ""
          },
          "randomly": {
            "type": "permuted at each split, even if ``splitter`` is set to",
            "description": "``\"best\"``. When ``max_features < n_features``, the algorithm will"
          },
          "select": {
            "type": "``max_features`` at random at each split before finding the best",
            "description": ""
          },
          "split": {
            "type": "has to be selected at random. To obtain a deterministic behaviour",
            "description": ""
          },
          "improvement": {
            "type": "of the criterion is identical for several splits and one",
            "description": ""
          },
          "during": {
            "type": "fitting, ``random_state`` has to be fixed to an integer.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "max_leaf_nodes": {
            "type": "int, default=None",
            "description": ""
          },
          "Grow": {
            "type": "a tree with ``max_leaf_nodes`` in best-first fashion.",
            "description": ""
          },
          "Best": {
            "type": "nodes are defined as relative reduction in impurity.",
            "description": ""
          },
          "If": {
            "type": "monotonic_cst is None, no constraints are applied.",
            "description": ""
          },
          "min_impurity_decrease": {
            "type": "float, default=0.0",
            "description": ""
          },
          "greater": {
            "type": "than or equal to this value.",
            "description": ""
          },
          "N_t": {
            "type": "/ N * (impurity - N_t_R / N_t * right_impurity",
            "description": "- N_t_L / N_t * left_impurity)"
          },
          "where": {
            "type": "``N`` is the total number of samples, ``N_t`` is the number of",
            "description": ""
          },
          "samples": {
            "type": "at the current node, ``N_t_L`` is the number of samples in the",
            "description": ""
          },
          "left": {
            "type": "child, and ``N_t_R`` is the number of samples in the right child.",
            "description": "``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,"
          },
          "if": {
            "type": "``sample_weight`` is passed.",
            "description": ".. versionadded:: 0.19"
          },
          "class_weight": {
            "type": "dict, list of dict or \"balanced\", default=None",
            "description": ""
          },
          "Weights": {
            "type": "associated with classes in the form ``{class_label: weight}``.",
            "description": ""
          },
          "order": {
            "type": "as the columns of y.",
            "description": ""
          },
          "Note": {
            "type": "that these weights will be multiplied with sample_weight (passed",
            "description": ""
          },
          "defined": {
            "type": "for each class of every column in its own dict. For example,",
            "description": ""
          },
          "for": {
            "type": "basic usage of these attributes.",
            "description": ""
          },
          "weights": {
            "type": "inversely proportional to class frequencies in the input data",
            "description": ""
          },
          "as": {
            "type": "``n_samples / (n_classes * np.bincount(y))``",
            "description": ""
          },
          "For": {
            "type": "multi-output, the weights of each column of y will be multiplied.",
            "description": ""
          },
          "through": {
            "type": "the fit method) if sample_weight is specified.",
            "description": ""
          },
          "ccp_alpha": {
            "type": "non",
            "description": "negative float, default=0.0"
          },
          "Complexity": {
            "type": "parameter used for Minimal Cost-Complexity Pruning. The",
            "description": ""
          },
          "subtree": {
            "type": "with the largest cost complexity that is smaller than",
            "description": "``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n:ref:`minimal_cost_complexity_pruning` for details. See\n:ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`"
          },
          "monotonic_cst": {
            "type": "array",
            "description": "like of int of shape (n_features), default=None"
          },
          "Indicates": {
            "type": "the monotonicity constraint to enforce on each feature.",
            "description": "- 1: monotonic increase\n- 0: no constraint\n- -1: monotonic decrease"
          },
          "Monotonicity": {
            "type": "constraints are not supported for:",
            "description": "- multiclass classifications (i.e. when `n_classes > 2`),\n- multioutput classifications (i.e. when `n_outputs_ > 1`),\n- classifications trained on data with missing values."
          },
          "Read": {
            "type": "more in the :ref:`User Guide <monotonic_cst_gbdt>`.",
            "description": ".. versionadded:: 1.4\nAttributes\n----------"
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,) or list of ndarray",
            "description": ""
          },
          "or": {
            "type": "a list containing the number of classes for each",
            "description": ""
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": ""
          },
          "total": {
            "type": "reduction of the criterion brought by that feature.  It is also",
            "description": ""
          },
          "known": {
            "type": "as the Gini importance [4]_.",
            "description": ""
          },
          "Warning": {
            "type": "impurity",
            "description": "based feature importances can be misleading for"
          },
          "high": {
            "type": "cardinality features (many unique values). See",
            "description": ":func:`sklearn.inspection.permutation_importance` as an alternative."
          },
          "max_features_": {
            "type": "int",
            "description": ""
          },
          "n_classes_": {
            "type": "int or list of int",
            "description": ""
          },
          "output": {
            "type": "for multi-output problems",
            "description": "."
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`.",
            "description": ".. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "n_outputs_": {
            "type": "int",
            "description": ""
          },
          "tree_": {
            "type": "Tree instance",
            "description": ""
          },
          "DecisionTreeRegressor": {
            "type": "A decision tree regressor.",
            "description": "Notes\n-----"
          },
          "unpruned": {
            "type": "trees which can potentially be very large on some data sets. To",
            "description": ""
          },
          "reduce": {
            "type": "memory consumption, the complexity and size of the trees should be",
            "description": ""
          },
          "controlled": {
            "type": "by setting those parameter values.",
            "description": ""
          },
          "function": {
            "type": "on the outputs of :meth:`predict_proba`. This means that in",
            "description": ""
          },
          "case": {
            "type": "the highest predicted probabilities are tied, the classifier will",
            "description": ""
          },
          "predict": {
            "type": "the tied class with the lowest index in :term:`classes_`.",
            "description": "References\n----------\n.. [1] https://en.wikipedia.org/wiki/Decision_tree_learning\n.. [2] L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification"
          },
          "and": {
            "type": "Regression Trees\", Wadsworth, Belmont, CA, 1984.",
            "description": ".. [3] T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical\nLearning\", Springer, 2009.\n.. [4] L. Breiman, and A. Cutler, \"Random Forests\","
          },
          "https": {
            "type": "//www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm",
            "description": "Examples\n--------\n>>> from sklearn.datasets import load_iris\n>>> from sklearn.model_selection import cross_val_score\n>>> from sklearn.tree import DecisionTreeClassifier\n>>> clf = DecisionTreeClassifier(random_state=0)\n>>> iris = load_iris()\n>>> cross_val_score(clf, iris.data, iris.target, cv=10)\n...                             # doctest: +SKIP\n...\narray([ 1.     ,  0.93...,  0.86...,  0.93...,  0.93...,\n0.93...,  0.93...,  1.     ,  0.93...,  1.      ])"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    DecisionTreeRegressor : A decision tree regressor.\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    The :meth:`predict` method operates using the :func:`numpy.argmax`\n    function on the outputs of :meth:`predict_proba`. This means that in\n    case the highest predicted probabilities are tied, the classifier will\n    predict the tied class with the lowest index in :term:`classes_`.\n\n    References\n    ----------\n\n    .. [1] https://en.wikipedia.org/wiki/Decision_tree_learning\n\n    .. [2] L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification\n           and Regression Trees\", Wadsworth, Belmont, CA, 1984.\n\n    .. [3] T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical\n           Learning\", Springer, 2009.\n\n    .. [4] L. Breiman, and A. Cutler, \"Random Forests\",\n           https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm\n\n    Examples\n    --------\n    >>> from sklearn.datasets import load_iris\n    >>> from sklearn.model_selection import cross_val_score\n    >>> from sklearn.tree import DecisionTreeClassifier\n    >>> clf = DecisionTreeClassifier(random_state=0)\n    >>> iris = load_iris()\n    >>> cross_val_score(clf, iris.data, iris.target, cv=10)\n    ...                             # doctest: +SKIP\n    ...\n    array([ 1.     ,  0.93...,  0.86...,  0.93...,  0.93...,\n            0.93...,  0.93...,  1.     ,  0.93...,  1.      ])",
        "notes": "that for multioutput (including multilabel) weights should be\n        defined for each class of every column in its own dict. For example,\n        for four-class multilabel classification weights should be\n        [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of\n        [{1:1}, {2:5}, {3:1}, {4:1}].\n\n        The \"balanced\" mode uses the values of y to automatically adjust\n        weights inversely proportional to class frequencies in the input data\n        as ``n_samples / (n_classes * np.bincount(y))``\n\n        For multi-output, the weights of each column of y will be multiplied.",
        "examples": "--------\n    >>> from sklearn.datasets import load_iris\n    >>> from sklearn.model_selection import cross_val_score\n    >>> from sklearn.tree import DecisionTreeClassifier\n    >>> clf = DecisionTreeClassifier(random_state=0)\n    >>> iris = load_iris()\n    >>> cross_val_score(clf, iris.data, iris.target, cv=10)\n    ...                             # doctest: +SKIP\n    ...\n    array([ 1.     ,  0.93...,  0.86...,  0.93...,  0.93...,\n            0.93...,  0.93...,  1.     ,  0.93...,  1.      ])"
      },
      "methods": [
        {
          "name": "apply",
          "signature": "apply(self, X, check_input=True)",
          "documentation": {
            "description": "Return the index of the leaf that each sample is predicted as.\n\n        .. versionadded:: 0.17\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples. Internally, it will be converted to",
                "description": "``dtype=np.float32`` and if a sparse matrix is provided"
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "X_leaves": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "For": {
                "type": "each datapoint x in X, return the index of the leaf x",
                "description": ""
              },
              "ends": {
                "type": "up in. Leaves are numbered within",
                "description": "``[0; self.tree_.node_count)``, possibly with gaps in the\nnumbering."
              }
            },
            "returns": "-------\n        X_leaves : array-like of shape (n_samples,)\n            For each datapoint x in X, return the index of the leaf x\n            ends up in. Leaves are numbered within\n            ``[0; self.tree_.node_count)``, possibly with gaps in the\n            numbering.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cost_complexity_pruning_path",
          "signature": "cost_complexity_pruning_path(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Compute the pruning path during Minimal Cost-Complexity Pruning.\n\n        See :ref:`minimal_cost_complexity_pruning` for details on the pruning\n        process.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csc_matrix``.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            The target values (class labels) as integers or strings.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted. Splits\n            that would create child nodes with net zero or negative weight are\n            ignored while searching for a split in each node. Splits are also\n            ignored if they would result in any single class carrying a\n            negative weight in either child node.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "target values (class labels) as integers or strings.",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csc_matrix``.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted. Splits",
                "description": ""
              },
              "that": {
                "type": "would create child nodes with net zero or negative weight are",
                "description": ""
              },
              "ignored": {
                "type": "if they would result in any single class carrying a",
                "description": ""
              },
              "negative": {
                "type": "weight in either child node.",
                "description": "Returns\n-------"
              },
              "ccp_path": {
                "type": ":class:`~sklearn.utils.Bunch`",
                "description": "Dictionary-like object, with the following attributes."
              },
              "ccp_alphas": {
                "type": "ndarray",
                "description": ""
              },
              "Effective": {
                "type": "alphas of subtree during pruning.",
                "description": ""
              },
              "impurities": {
                "type": "ndarray",
                "description": ""
              },
              "Sum": {
                "type": "of the impurities of the subtree leaves for the",
                "description": ""
              },
              "corresponding": {
                "type": "alpha value in ``ccp_alphas``.",
                "description": ""
              }
            },
            "returns": "-------\n        ccp_path : :class:`~sklearn.utils.Bunch`\n            Dictionary-like object, with the following attributes.\n\n            ccp_alphas : ndarray\n                Effective alphas of subtree during pruning.\n\n            impurities : ndarray\n                Sum of the impurities of the subtree leaves for the\n                corresponding alpha value in ``ccp_alphas``.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "decision_path",
          "signature": "decision_path(self, X, check_input=True)",
          "documentation": {
            "description": "Return the decision path in the tree.\n\n        .. versionadded:: 0.18\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.\n\n        Returns\n        -------\n        indicator : sparse matrix of shape (n_samples, n_nodes)",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples. Internally, it will be converted to",
                "description": "``dtype=np.float32`` and if a sparse matrix is provided"
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "indicator": {
                "type": "sparse matrix of shape (n_samples, n_nodes)",
                "description": ""
              },
              "Return": {
                "type": "a node indicator CSR matrix where non zero elements",
                "description": ""
              },
              "indicates": {
                "type": "that the samples goes through the nodes.",
                "description": ""
              }
            },
            "returns": "a node indicator CSR matrix where non zero elements\n            indicates that the samples goes through the nodes.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None, check_input=True)",
          "documentation": {
            "description": "Build a decision tree classifier from the training set (X, y).\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csc_matrix``.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            The target values (class labels) as integers or strings.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted. Splits\n            that would create child nodes with net zero or negative weight are\n            ignored while searching for a split in each node. Splits are also\n            ignored if they would result in any single class carrying a\n            negative weight in either child node.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "target values (class labels) as integers or strings.",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csc_matrix``.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted. Splits",
                "description": ""
              },
              "that": {
                "type": "would create child nodes with net zero or negative weight are",
                "description": ""
              },
              "ignored": {
                "type": "if they would result in any single class carrying a",
                "description": ""
              },
              "negative": {
                "type": "weight in either child node.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "self": {
                "type": "DecisionTreeClassifier",
                "description": ""
              },
              "Fitted": {
                "type": "estimator.",
                "description": ""
              }
            },
            "returns": "-------\n        self : DecisionTreeClassifier\n            Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_depth",
          "signature": "get_depth(self)",
          "documentation": {
            "description": "Return the depth of the decision tree.\n\n        The depth of a tree is the maximum distance between the root\n        and any leaf.",
            "parameters": {},
            "returns": "-------\n        self.tree_.max_depth : int\n            The maximum depth of the tree.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRequest\n            A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_n_leaves",
          "signature": "get_n_leaves(self)",
          "documentation": {
            "description": "Return the number of leaves of the decision tree.",
            "parameters": {},
            "returns": "-------\n        self.tree_.n_leaves : int\n            Number of leaves.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X, check_input=True)",
          "documentation": {
            "description": "Predict class or regression value for X.\n\n        For a classification model, the predicted class for each sample in X is\n        returned. For a regression model, the predicted value based on X is\n        returned.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted classes, or the predict values.",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              }
            },
            "returns": "-------\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            The predicted classes, or the predict values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_log_proba",
          "signature": "predict_log_proba(self, X)",
          "documentation": {
            "description": "Predict class log-probabilities of the input samples X.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "class log-probabilities of the input samples. The order of the",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "proba": {
                "type": "ndarray of shape (n_samples, n_classes) or list of n_outputs             such arrays if n_outputs > 1",
                "description": ""
              },
              "classes": {
                "type": "corresponds to that in the attribute :term:`classes_`.",
                "description": ""
              }
            },
            "returns": "-------\n        proba : ndarray of shape (n_samples, n_classes) or list of n_outputs             such arrays if n_outputs > 1\n            The class log-probabilities of the input samples. The order of the\n            classes corresponds to that in the attribute :term:`classes_`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_proba",
          "signature": "predict_proba(self, X, check_input=True)",
          "documentation": {
            "description": "Predict class probabilities of the input samples X.\n\n        The predicted class probability is the fraction of samples of the same\n        class in a leaf.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "class probabilities of the input samples. The order of the",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "proba": {
                "type": "ndarray of shape (n_samples, n_classes) or list of n_outputs             such arrays if n_outputs > 1",
                "description": ""
              },
              "classes": {
                "type": "corresponds to that in the attribute :term:`classes_`.",
                "description": ""
              }
            },
            "returns": "-------\n        proba : ndarray of shape (n_samples, n_classes) or list of n_outputs             such arrays if n_outputs > 1\n            The class probabilities of the input samples. The order of the\n            classes corresponds to that in the attribute :term:`classes_`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "labels for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ""
              },
              "Mean": {
                "type": "accuracy of ``self.predict(X)`` w.r.t. `y`.",
                "description": ""
              }
            },
            "returns": "the mean accuracy on the given test data and labels.\n\n        In multi-label classification, this is the subset accuracy\n        which is a harsh metric since you require for each sample that\n        each label set be correctly predicted.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True labels for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.tree._classes.DecisionTreeClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.tree._classes.DecisionTreeClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.tree._classes.DecisionTreeClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.tree._classes.DecisionTreeClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "DecisionTreeRegressor",
      "documentation": {
        "description": "A decision tree regressor.\n\n    Read more in the :ref:`User Guide <tree>`.\n\n    Parameters\n    ----------\n    criterion : {\"squared_error\", \"friedman_mse\", \"absolute_error\",             \"poisson\"}, default=\"squared_error\"\n        The function to measure the quality of a split. Supported criteria\n        are \"squared_error\" for the mean squared error, which is equal to\n        variance reduction as feature selection criterion and minimizes the L2\n        loss using the mean of each terminal node, \"friedman_mse\", which uses\n        mean squared error with Friedman's improvement score for potential\n        splits, \"absolute_error\" for the mean absolute error, which minimizes\n        the L1 loss using the median of each terminal node, and \"poisson\" which\n        uses reduction in the half mean Poisson deviance to find splits.\n\n        .. versionadded:: 0.18\n           Mean Absolute Error (MAE) criterion.\n\n        .. versionadded:: 0.24\n            Poisson deviance criterion.\n\n    splitter : {\"best\", \"random\"}, default=\"best\"\n        The strategy used to choose the split at each node. Supported\n        strategies are \"best\" to choose the best split and \"random\" to choose\n        the best random split.\n\n    max_depth : int, default=None\n        The maximum depth of the tree. If None, then nodes are expanded until\n        all leaves are pure or until all leaves contain less than\n        min_samples_split samples.\n\n        For an example of how ``max_depth`` influences the model, see\n        :ref:`sphx_glr_auto_examples_tree_plot_tree_regression.py`.\n\n    min_samples_split : int or float, default=2\n        The minimum number of samples required to split an internal node:\n\n        - If int, then consider `min_samples_split` as the minimum number.\n        - If float, then `min_samples_split` is a fraction and\n          `ceil(min_samples_split * n_samples)` are the minimum\n          number of samples for each split.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_samples_leaf : int or float, default=1\n        The minimum number of samples required to be at a leaf node.\n        A split point at any depth will only be considered if it leaves at\n        least ``min_samples_leaf`` training samples in each of the left and\n        right branches.  This may have the effect of smoothing the model,\n        especially in regression.\n\n        - If int, then consider `min_samples_leaf` as the minimum number.\n        - If float, then `min_samples_leaf` is a fraction and\n          `ceil(min_samples_leaf * n_samples)` are the minimum\n          number of samples for each node.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_weight_fraction_leaf : float, default=0.0\n        The minimum weighted fraction of the sum total of weights (of all\n        the input samples) required to be at a leaf node. Samples have\n        equal weight when sample_weight is not provided.\n\n    max_features : int, float or {\"sqrt\", \"log2\"}, default=None\n        The number of features to consider when looking for the best split:\n\n        - If int, then consider `max_features` features at each split.\n        - If float, then `max_features` is a fraction and\n          `max(1, int(max_features * n_features_in_))` features are considered at each\n          split.\n        - If \"sqrt\", then `max_features=sqrt(n_features)`.\n        - If \"log2\", then `max_features=log2(n_features)`.\n        - If None, then `max_features=n_features`.\n\n        Note: the search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls the randomness of the estimator. The features are always\n        randomly permuted at each split, even if ``splitter`` is set to\n        ``\"best\"``. When ``max_features < n_features``, the algorithm will\n        select ``max_features`` at random at each split before finding the best\n        split among them. But the best found split may vary across different\n        runs, even if ``max_features=n_features``. That is the case, if the\n        improvement of the criterion is identical for several splits and one\n        split has to be selected at random. To obtain a deterministic behaviour\n        during fitting, ``random_state`` has to be fixed to an integer.\n        See :term:`Glossary <random_state>` for details.\n\n    max_leaf_nodes : int, default=None\n        Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        If None then unlimited number of leaf nodes.\n\n    min_impurity_decrease : float, default=0.0\n        A node will be split if this split induces a decrease of the impurity\n        greater than or equal to this value.\n\n        The weighted impurity decrease equation is the following::\n\n            N_t / N * (impurity - N_t_R / N_t * right_impurity\n                                - N_t_L / N_t * left_impurity)\n\n        where ``N`` is the total number of samples, ``N_t`` is the number of\n        samples at the current node, ``N_t_L`` is the number of samples in the\n        left child, and ``N_t_R`` is the number of samples in the right child.\n\n        ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n        if ``sample_weight`` is passed.\n\n        .. versionadded:: 0.19\n\n    ccp_alpha : non-negative float, default=0.0\n        Complexity parameter used for Minimal Cost-Complexity Pruning. The\n        subtree with the largest cost complexity that is smaller than\n        ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n        :ref:`minimal_cost_complexity_pruning` for details. See\n        :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n        for an example of such pruning.\n\n        .. versionadded:: 0.22\n\n    monotonic_cst : array-like of int of shape (n_features), default=None\n        Indicates the monotonicity constraint to enforce on each feature.\n          - 1: monotonic increase\n          - 0: no constraint\n          - -1: monotonic decrease\n\n        If monotonic_cst is None, no constraints are applied.\n\n        Monotonicity constraints are not supported for:\n          - multioutput regressions (i.e. when `n_outputs_ > 1`),\n          - regressions trained on data with missing values.\n\n        Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n        .. versionadded:: 1.4\n\n    Attributes\n    ----------\n    feature_importances_ : ndarray of shape (n_features,)\n        The feature importances.\n        The higher, the more important the feature.\n        The importance of a feature is computed as the\n        (normalized) total reduction of the criterion brought\n        by that feature. It is also known as the Gini importance [4]_.\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    max_features_ : int\n        The inferred value of max_features.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_outputs_ : int\n        The number of outputs when ``fit`` is performed.\n\n    tree_ : Tree instance\n        The underlying Tree object. Please refer to\n        ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n        :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n        for basic usage of these attributes.\n\n    See Also\n    --------\n    DecisionTreeClassifier : A decision tree classifier.\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    References\n    ----------\n\n    .. [1] https://en.wikipedia.org/wiki/Decision_tree_learning\n\n    .. [2] L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification\n           and Regression Trees\", Wadsworth, Belmont, CA, 1984.\n\n    .. [3] T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical\n           Learning\", Springer, 2009.\n\n    .. [4] L. Breiman, and A. Cutler, \"Random Forests\",\n           https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm",
        "parameters": {
          "criterion": {
            "type": "{\"squared_error\", \"friedman_mse\", \"absolute_error\",             \"poisson\"}, default=\"squared_error\"",
            "description": ""
          },
          "The": {
            "type": "default values for the parameters controlling the size of the trees",
            "description": "(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and"
          },
          "are": {
            "type": "\"squared_error\" for the mean squared error, which is equal to",
            "description": ""
          },
          "variance": {
            "type": "reduction as feature selection criterion and minimizes the L2",
            "description": ""
          },
          "loss": {
            "type": "using the mean of each terminal node, \"friedman_mse\", which uses",
            "description": ""
          },
          "mean": {
            "type": "squared error with Friedman's improvement score for potential",
            "description": "splits, \"absolute_error\" for the mean absolute error, which minimizes"
          },
          "the": {
            "type": "input samples) required to be at a leaf node. Samples have",
            "description": ""
          },
          "uses": {
            "type": "reduction in the half mean Poisson deviance to find splits.",
            "description": ".. versionadded:: 0.18"
          },
          "Mean": {
            "type": "Absolute Error (MAE) criterion.",
            "description": ".. versionadded:: 0.24"
          },
          "Poisson": {
            "type": "deviance criterion.",
            "description": ""
          },
          "splitter": {
            "type": "{\"best\", \"random\"}, default=\"best\"",
            "description": ""
          },
          "strategies": {
            "type": "are \"best\" to choose the best split and \"random\" to choose",
            "description": ""
          },
          "max_depth": {
            "type": "int, default=None",
            "description": ""
          },
          "all": {
            "type": "leaves are pure or until all leaves contain less than",
            "description": ""
          },
          "min_samples_split": {
            "type": "int or float, default=2",
            "description": ""
          },
          "For": {
            "type": "an example of how ``max_depth`` influences the model, see",
            "description": ":ref:`sphx_glr_auto_examples_tree_plot_tree_regression.py`."
          },
          "number": {
            "type": "of samples for each node.",
            "description": ".. versionchanged:: 0.18"
          },
          "Added": {
            "type": "float values for fractions.",
            "description": ""
          },
          "min_samples_leaf": {
            "type": "int or float, default=1",
            "description": ""
          },
          "A": {
            "type": "node will be split if this split induces a decrease of the impurity",
            "description": ""
          },
          "least": {
            "type": "``min_samples_leaf`` training samples in each of the left and",
            "description": ""
          },
          "right": {
            "type": "branches.  This may have the effect of smoothing the model,",
            "description": ""
          },
          "especially": {
            "type": "in regression.",
            "description": "- If int, then consider `min_samples_leaf` as the minimum number.\n- If float, then `min_samples_leaf` is a fraction and\n`ceil(min_samples_leaf * n_samples)` are the minimum"
          },
          "min_weight_fraction_leaf": {
            "type": "float, default=0.0",
            "description": ""
          },
          "equal": {
            "type": "weight when sample_weight is not provided.",
            "description": ""
          },
          "max_features": {
            "type": "int, float or {\"sqrt\", \"log2\"}, default=None",
            "description": ""
          },
          "Note": {
            "type": "the search for a split does not stop until at least one",
            "description": ""
          },
          "valid": {
            "type": "partition of the node samples is found, even if it requires to",
            "description": ""
          },
          "effectively": {
            "type": "inspect more than ``max_features`` features.",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Controls": {
            "type": "the randomness of the estimator. The features are always",
            "description": ""
          },
          "randomly": {
            "type": "permuted at each split, even if ``splitter`` is set to",
            "description": "``\"best\"``. When ``max_features < n_features``, the algorithm will"
          },
          "select": {
            "type": "``max_features`` at random at each split before finding the best",
            "description": ""
          },
          "split": {
            "type": "has to be selected at random. To obtain a deterministic behaviour",
            "description": ""
          },
          "improvement": {
            "type": "of the criterion is identical for several splits and one",
            "description": ""
          },
          "during": {
            "type": "fitting, ``random_state`` has to be fixed to an integer.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "max_leaf_nodes": {
            "type": "int, default=None",
            "description": ""
          },
          "Grow": {
            "type": "a tree with ``max_leaf_nodes`` in best-first fashion.",
            "description": ""
          },
          "Best": {
            "type": "nodes are defined as relative reduction in impurity.",
            "description": ""
          },
          "If": {
            "type": "monotonic_cst is None, no constraints are applied.",
            "description": ""
          },
          "min_impurity_decrease": {
            "type": "float, default=0.0",
            "description": ""
          },
          "greater": {
            "type": "than or equal to this value.",
            "description": ""
          },
          "N_t": {
            "type": "/ N * (impurity - N_t_R / N_t * right_impurity",
            "description": "- N_t_L / N_t * left_impurity)"
          },
          "where": {
            "type": "``N`` is the total number of samples, ``N_t`` is the number of",
            "description": ""
          },
          "samples": {
            "type": "at the current node, ``N_t_L`` is the number of samples in the",
            "description": ""
          },
          "left": {
            "type": "child, and ``N_t_R`` is the number of samples in the right child.",
            "description": "``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,"
          },
          "if": {
            "type": "``sample_weight`` is passed.",
            "description": ".. versionadded:: 0.19"
          },
          "ccp_alpha": {
            "type": "non",
            "description": "negative float, default=0.0"
          },
          "Complexity": {
            "type": "parameter used for Minimal Cost-Complexity Pruning. The",
            "description": ""
          },
          "subtree": {
            "type": "with the largest cost complexity that is smaller than",
            "description": "``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n:ref:`minimal_cost_complexity_pruning` for details. See\n:ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`"
          },
          "for": {
            "type": "basic usage of these attributes.",
            "description": ""
          },
          "monotonic_cst": {
            "type": "array",
            "description": "like of int of shape (n_features), default=None"
          },
          "Indicates": {
            "type": "the monotonicity constraint to enforce on each feature.",
            "description": "- 1: monotonic increase\n- 0: no constraint\n- -1: monotonic decrease"
          },
          "Monotonicity": {
            "type": "constraints are not supported for:",
            "description": "- multioutput regressions (i.e. when `n_outputs_ > 1`),\n- regressions trained on data with missing values."
          },
          "Read": {
            "type": "more in the :ref:`User Guide <monotonic_cst_gbdt>`.",
            "description": ".. versionadded:: 1.4\nAttributes\n----------"
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": ""
          },
          "by": {
            "type": "that feature. It is also known as the Gini importance [4]_.",
            "description": ""
          },
          "Warning": {
            "type": "impurity",
            "description": "based feature importances can be misleading for"
          },
          "high": {
            "type": "cardinality features (many unique values). See",
            "description": ":func:`sklearn.inspection.permutation_importance` as an alternative."
          },
          "max_features_": {
            "type": "int",
            "description": ""
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`.",
            "description": ".. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "n_outputs_": {
            "type": "int",
            "description": ""
          },
          "tree_": {
            "type": "Tree instance",
            "description": ""
          },
          "DecisionTreeClassifier": {
            "type": "A decision tree classifier.",
            "description": "Notes\n-----"
          },
          "unpruned": {
            "type": "trees which can potentially be very large on some data sets. To",
            "description": ""
          },
          "reduce": {
            "type": "memory consumption, the complexity and size of the trees should be",
            "description": ""
          },
          "controlled": {
            "type": "by setting those parameter values.",
            "description": "References\n----------\n.. [1] https://en.wikipedia.org/wiki/Decision_tree_learning\n.. [2] L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification"
          },
          "and": {
            "type": "Regression Trees\", Wadsworth, Belmont, CA, 1984.",
            "description": ".. [3] T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical\nLearning\", Springer, 2009.\n.. [4] L. Breiman, and A. Cutler, \"Random Forests\","
          },
          "https": {
            "type": "//www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm",
            "description": "Examples\n--------\n>>> from sklearn.datasets import load_diabetes\n>>> from sklearn.model_selection import cross_val_score\n>>> from sklearn.tree import DecisionTreeRegressor\n>>> X, y = load_diabetes(return_X_y=True)\n>>> regressor = DecisionTreeRegressor(random_state=0)\n>>> cross_val_score(regressor, X, y, cv=10)\n...                    # doctest: +SKIP\n...\narray([-0.39..., -0.46...,  0.02...,  0.06..., -0.50...,\n0.16...,  0.11..., -0.73..., -0.30..., -0.00...])"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    DecisionTreeClassifier : A decision tree classifier.\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    References\n    ----------\n\n    .. [1] https://en.wikipedia.org/wiki/Decision_tree_learning\n\n    .. [2] L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification\n           and Regression Trees\", Wadsworth, Belmont, CA, 1984.\n\n    .. [3] T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical\n           Learning\", Springer, 2009.\n\n    .. [4] L. Breiman, and A. Cutler, \"Random Forests\",\n           https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm\n\n    Examples\n    --------\n    >>> from sklearn.datasets import load_diabetes\n    >>> from sklearn.model_selection import cross_val_score\n    >>> from sklearn.tree import DecisionTreeRegressor\n    >>> X, y = load_diabetes(return_X_y=True)\n    >>> regressor = DecisionTreeRegressor(random_state=0)\n    >>> cross_val_score(regressor, X, y, cv=10)\n    ...                    # doctest: +SKIP\n    ...\n    array([-0.39..., -0.46...,  0.02...,  0.06..., -0.50...,\n           0.16...,  0.11..., -0.73..., -0.30..., -0.00...])",
        "notes": "the search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls the randomness of the estimator. The features are always\n        randomly permuted at each split, even if ``splitter`` is set to\n        ``\"best\"``. When ``max_features < n_features``, the algorithm will\n        select ``max_features`` at random at each split before finding the best\n        split among them. But the best found split may vary across different\n        runs, even if ``max_features=n_features``. That is the case, if the\n        improvement of the criterion is identical for several splits and one\n        split has to be selected at random. To obtain a deterministic behaviour\n        during fitting, ``random_state`` has to be fixed to an integer.\n        See :term:`Glossary <random_state>` for details.\n\n    max_leaf_nodes : int, default=None\n        Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        If None then unlimited number of leaf nodes.\n\n    min_impurity_decrease : float, default=0.0\n        A node will be split if this split induces a decrease of the impurity\n        greater than or equal to this value.\n\n        The weighted impurity decrease equation is the following::\n\n            N_t / N * (impurity - N_t_R / N_t * right_impurity\n                                - N_t_L / N_t * left_impurity)\n\n        where ``N`` is the total number of samples, ``N_t`` is the number of\n        samples at the current node, ``N_t_L`` is the number of samples in the\n        left child, and ``N_t_R`` is the number of samples in the right child.\n\n        ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n        if ``sample_weight`` is passed.\n\n        .. versionadded:: 0.19\n\n    ccp_alpha : non-negative float, default=0.0\n        Complexity parameter used for Minimal Cost-Complexity Pruning. The\n        subtree with the largest cost complexity that is smaller than\n        ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n        :ref:`minimal_cost_complexity_pruning` for details. See\n        :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n        for an example of such pruning.\n\n        .. versionadded:: 0.22\n\n    monotonic_cst : array-like of int of shape (n_features), default=None\n        Indicates the monotonicity constraint to enforce on each feature.\n          - 1: monotonic increase\n          - 0: no constraint\n          - -1: monotonic decrease\n\n        If monotonic_cst is None, no constraints are applied.\n\n        Monotonicity constraints are not supported for:\n          - multioutput regressions (i.e. when `n_outputs_ > 1`),\n          - regressions trained on data with missing values.\n\n        Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n        .. versionadded:: 1.4\n\n    Attributes\n    ----------\n    feature_importances_ : ndarray of shape (n_features,)\n        The feature importances.\n        The higher, the more important the feature.\n        The importance of a feature is computed as the\n        (normalized) total reduction of the criterion brought\n        by that feature. It is also known as the Gini importance [4]_.\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    max_features_ : int\n        The inferred value of max_features.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_outputs_ : int\n        The number of outputs when ``fit`` is performed.\n\n    tree_ : Tree instance\n        The underlying Tree object. Please refer to\n        ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n        :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n        for basic usage of these attributes.\n\n    See Also\n    --------\n    DecisionTreeClassifier : A decision tree classifier.\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    References\n    ----------\n\n    .. [1] https://en.wikipedia.org/wiki/Decision_tree_learning\n\n    .. [2] L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification\n           and Regression Trees\", Wadsworth, Belmont, CA, 1984.\n\n    .. [3] T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical\n           Learning\", Springer, 2009.\n\n    .. [4] L. Breiman, and A. Cutler, \"Random Forests\",\n           https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm\n\n    Examples\n    --------\n    >>> from sklearn.datasets import load_diabetes\n    >>> from sklearn.model_selection import cross_val_score\n    >>> from sklearn.tree import DecisionTreeRegressor\n    >>> X, y = load_diabetes(return_X_y=True)\n    >>> regressor = DecisionTreeRegressor(random_state=0)\n    >>> cross_val_score(regressor, X, y, cv=10)\n    ...                    # doctest: +SKIP\n    ...\n    array([-0.39..., -0.46...,  0.02...,  0.06..., -0.50...,\n           0.16...,  0.11..., -0.73..., -0.30..., -0.00...])",
        "examples": "--------\n    >>> from sklearn.datasets import load_diabetes\n    >>> from sklearn.model_selection import cross_val_score\n    >>> from sklearn.tree import DecisionTreeRegressor\n    >>> X, y = load_diabetes(return_X_y=True)\n    >>> regressor = DecisionTreeRegressor(random_state=0)\n    >>> cross_val_score(regressor, X, y, cv=10)\n    ...                    # doctest: +SKIP\n    ...\n    array([-0.39..., -0.46...,  0.02...,  0.06..., -0.50...,\n           0.16...,  0.11..., -0.73..., -0.30..., -0.00...])"
      },
      "methods": [
        {
          "name": "apply",
          "signature": "apply(self, X, check_input=True)",
          "documentation": {
            "description": "Return the index of the leaf that each sample is predicted as.\n\n        .. versionadded:: 0.17\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples. Internally, it will be converted to",
                "description": "``dtype=np.float32`` and if a sparse matrix is provided"
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "X_leaves": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "For": {
                "type": "each datapoint x in X, return the index of the leaf x",
                "description": ""
              },
              "ends": {
                "type": "up in. Leaves are numbered within",
                "description": "``[0; self.tree_.node_count)``, possibly with gaps in the\nnumbering."
              }
            },
            "returns": "-------\n        X_leaves : array-like of shape (n_samples,)\n            For each datapoint x in X, return the index of the leaf x\n            ends up in. Leaves are numbered within\n            ``[0; self.tree_.node_count)``, possibly with gaps in the\n            numbering.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cost_complexity_pruning_path",
          "signature": "cost_complexity_pruning_path(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Compute the pruning path during Minimal Cost-Complexity Pruning.\n\n        See :ref:`minimal_cost_complexity_pruning` for details on the pruning\n        process.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csc_matrix``.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            The target values (class labels) as integers or strings.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted. Splits\n            that would create child nodes with net zero or negative weight are\n            ignored while searching for a split in each node. Splits are also\n            ignored if they would result in any single class carrying a\n            negative weight in either child node.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "target values (class labels) as integers or strings.",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csc_matrix``.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted. Splits",
                "description": ""
              },
              "that": {
                "type": "would create child nodes with net zero or negative weight are",
                "description": ""
              },
              "ignored": {
                "type": "if they would result in any single class carrying a",
                "description": ""
              },
              "negative": {
                "type": "weight in either child node.",
                "description": "Returns\n-------"
              },
              "ccp_path": {
                "type": ":class:`~sklearn.utils.Bunch`",
                "description": "Dictionary-like object, with the following attributes."
              },
              "ccp_alphas": {
                "type": "ndarray",
                "description": ""
              },
              "Effective": {
                "type": "alphas of subtree during pruning.",
                "description": ""
              },
              "impurities": {
                "type": "ndarray",
                "description": ""
              },
              "Sum": {
                "type": "of the impurities of the subtree leaves for the",
                "description": ""
              },
              "corresponding": {
                "type": "alpha value in ``ccp_alphas``.",
                "description": ""
              }
            },
            "returns": "-------\n        ccp_path : :class:`~sklearn.utils.Bunch`\n            Dictionary-like object, with the following attributes.\n\n            ccp_alphas : ndarray\n                Effective alphas of subtree during pruning.\n\n            impurities : ndarray\n                Sum of the impurities of the subtree leaves for the\n                corresponding alpha value in ``ccp_alphas``.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "decision_path",
          "signature": "decision_path(self, X, check_input=True)",
          "documentation": {
            "description": "Return the decision path in the tree.\n\n        .. versionadded:: 0.18\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.\n\n        Returns\n        -------\n        indicator : sparse matrix of shape (n_samples, n_nodes)",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples. Internally, it will be converted to",
                "description": "``dtype=np.float32`` and if a sparse matrix is provided"
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "indicator": {
                "type": "sparse matrix of shape (n_samples, n_nodes)",
                "description": ""
              },
              "Return": {
                "type": "a node indicator CSR matrix where non zero elements",
                "description": ""
              },
              "indicates": {
                "type": "that the samples goes through the nodes.",
                "description": ""
              }
            },
            "returns": "a node indicator CSR matrix where non zero elements\n            indicates that the samples goes through the nodes.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None, check_input=True)",
          "documentation": {
            "description": "Build a decision tree regressor from the training set (X, y).\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csc_matrix``.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            The target values (real numbers). Use ``dtype=np.float64`` and\n            ``order='C'`` for maximum efficiency.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted. Splits\n            that would create child nodes with net zero or negative weight are\n            ignored while searching for a split in each node.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "target values (real numbers). Use ``dtype=np.float64`` and",
                "description": "``order='C'`` for maximum efficiency."
              },
              "to": {
                "type": "a sparse ``csc_matrix``.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted. Splits",
                "description": ""
              },
              "that": {
                "type": "would create child nodes with net zero or negative weight are",
                "description": ""
              },
              "ignored": {
                "type": "while searching for a split in each node.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "self": {
                "type": "DecisionTreeRegressor",
                "description": ""
              },
              "Fitted": {
                "type": "estimator.",
                "description": ""
              }
            },
            "returns": "-------\n        self : DecisionTreeRegressor\n            Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_depth",
          "signature": "get_depth(self)",
          "documentation": {
            "description": "Return the depth of the decision tree.\n\n        The depth of a tree is the maximum distance between the root\n        and any leaf.",
            "parameters": {},
            "returns": "-------\n        self.tree_.max_depth : int\n            The maximum depth of the tree.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRequest\n            A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_n_leaves",
          "signature": "get_n_leaves(self)",
          "documentation": {
            "description": "Return the number of leaves of the decision tree.",
            "parameters": {},
            "returns": "-------\n        self.tree_.n_leaves : int\n            Number of leaves.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X, check_input=True)",
          "documentation": {
            "description": "Predict class or regression value for X.\n\n        For a classification model, the predicted class for each sample in X is\n        returned. For a regression model, the predicted value based on X is\n        returned.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted classes, or the predict values.",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              }
            },
            "returns": "-------\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            The predicted classes, or the predict values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Return the coefficient of determination of the prediction.\n\n        The coefficient of determination :math:`R^2` is defined as\n        :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\n        sum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\n        is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\n        The best possible score is 1.0 and it can be negative (because the\n        model can be arbitrarily worse). A constant model that always predicts\n        the expected value of `y`, disregarding the input features, would get\n        a :math:`R^2` score of 0.0.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples. For some estimators this may be a precomputed\n            kernel matrix or a list of generic objects instead with shape\n            ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n            is the number of samples used in the fitting for the estimator.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True values for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples. For some estimators this may be a precomputed",
                "description": ""
              },
              "kernel": {
                "type": "matrix or a list of generic objects instead with shape",
                "description": "``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``"
              },
              "is": {
                "type": "the number of samples used in the fitting for the estimator.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "values for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ":math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\nNotes\n-----"
              },
              "The": {
                "type": "math:`R^2` score used when calling ``score`` on a regressor uses",
                "description": "``multioutput='uniform_average'`` from version 0.23 to keep consistent"
              },
              "with": {
                "type": "default value of :func:`~sklearn.metrics.r2_score`.",
                "description": ""
              },
              "This": {
                "type": "influences the ``score`` method of all the multioutput",
                "description": ""
              },
              "regressors": {
                "type": "(except for",
                "description": ":class:`~sklearn.multioutput.MultiOutputRegressor`)."
              }
            },
            "returns": "-------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\n\n        Notes\n        -----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "raises": "",
            "see_also": "",
            "notes": "-----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.tree._classes.DecisionTreeRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.tree._classes.DecisionTreeRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.tree._classes.DecisionTreeRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.tree._classes.DecisionTreeRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "ExtraTreeClassifier",
      "documentation": {
        "description": "An extremely randomized tree classifier.\n\n    Extra-trees differ from classic decision trees in the way they are built.\n    When looking for the best split to separate the samples of a node into two\n    groups, random splits are drawn for each of the `max_features` randomly\n    selected features and the best split among those is chosen. When\n    `max_features` is set 1, this amounts to building a totally random\n    decision tree.\n\n    Warning: Extra-trees should only be used within ensemble methods.\n\n    Read more in the :ref:`User Guide <tree>`.\n\n    Parameters\n    ----------\n    criterion : {\"gini\", \"entropy\", \"log_loss\"}, default=\"gini\"\n        The function to measure the quality of a split. Supported criteria are\n        \"gini\" for the Gini impurity and \"log_loss\" and \"entropy\" both for the\n        Shannon information gain, see :ref:`tree_mathematical_formulation`.\n\n    splitter : {\"random\", \"best\"}, default=\"random\"\n        The strategy used to choose the split at each node. Supported\n        strategies are \"best\" to choose the best split and \"random\" to choose\n        the best random split.\n\n    max_depth : int, default=None\n        The maximum depth of the tree. If None, then nodes are expanded until\n        all leaves are pure or until all leaves contain less than\n        min_samples_split samples.\n\n    min_samples_split : int or float, default=2\n        The minimum number of samples required to split an internal node:\n\n        - If int, then consider `min_samples_split` as the minimum number.\n        - If float, then `min_samples_split` is a fraction and\n          `ceil(min_samples_split * n_samples)` are the minimum\n          number of samples for each split.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_samples_leaf : int or float, default=1\n        The minimum number of samples required to be at a leaf node.\n        A split point at any depth will only be considered if it leaves at\n        least ``min_samples_leaf`` training samples in each of the left and\n        right branches.  This may have the effect of smoothing the model,\n        especially in regression.\n\n        - If int, then consider `min_samples_leaf` as the minimum number.\n        - If float, then `min_samples_leaf` is a fraction and\n          `ceil(min_samples_leaf * n_samples)` are the minimum\n          number of samples for each node.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_weight_fraction_leaf : float, default=0.0\n        The minimum weighted fraction of the sum total of weights (of all\n        the input samples) required to be at a leaf node. Samples have\n        equal weight when sample_weight is not provided.\n\n    max_features : int, float, {\"sqrt\", \"log2\"} or None, default=\"sqrt\"\n        The number of features to consider when looking for the best split:\n\n        - If int, then consider `max_features` features at each split.\n        - If float, then `max_features` is a fraction and\n          `max(1, int(max_features * n_features_in_))` features are considered at\n          each split.\n        - If \"sqrt\", then `max_features=sqrt(n_features)`.\n        - If \"log2\", then `max_features=log2(n_features)`.\n        - If None, then `max_features=n_features`.\n\n        .. versionchanged:: 1.1\n            The default of `max_features` changed from `\"auto\"` to `\"sqrt\"`.\n\n        Note: the search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features.\n\n    random_state : int, RandomState instance or None, default=None\n        Used to pick randomly the `max_features` used at each split.\n        See :term:`Glossary <random_state>` for details.\n\n    max_leaf_nodes : int, default=None\n        Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        If None then unlimited number of leaf nodes.\n\n    min_impurity_decrease : float, default=0.0\n        A node will be split if this split induces a decrease of the impurity\n        greater than or equal to this value.\n\n        The weighted impurity decrease equation is the following::\n\n            N_t / N * (impurity - N_t_R / N_t * right_impurity\n                                - N_t_L / N_t * left_impurity)\n\n        where ``N`` is the total number of samples, ``N_t`` is the number of\n        samples at the current node, ``N_t_L`` is the number of samples in the\n        left child, and ``N_t_R`` is the number of samples in the right child.\n\n        ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n        if ``sample_weight`` is passed.\n\n        .. versionadded:: 0.19\n\n    class_weight : dict, list of dict or \"balanced\", default=None\n        Weights associated with classes in the form ``{class_label: weight}``.\n        If None, all classes are supposed to have weight one. For\n        multi-output problems, a list of dicts can be provided in the same\n        order as the columns of y.\n\n        Note that for multioutput (including multilabel) weights should be\n        defined for each class of every column in its own dict. For example,\n        for four-class multilabel classification weights should be\n        [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of\n        [{1:1}, {2:5}, {3:1}, {4:1}].\n\n        The \"balanced\" mode uses the values of y to automatically adjust\n        weights inversely proportional to class frequencies in the input data\n        as ``n_samples / (n_classes * np.bincount(y))``\n\n        For multi-output, the weights of each column of y will be multiplied.\n\n        Note that these weights will be multiplied with sample_weight (passed\n        through the fit method) if sample_weight is specified.\n\n    ccp_alpha : non-negative float, default=0.0\n        Complexity parameter used for Minimal Cost-Complexity Pruning. The\n        subtree with the largest cost complexity that is smaller than\n        ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n        :ref:`minimal_cost_complexity_pruning` for details. See\n        :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n        for an example of such pruning.\n\n        .. versionadded:: 0.22\n\n    monotonic_cst : array-like of int of shape (n_features), default=None\n        Indicates the monotonicity constraint to enforce on each feature.\n          - 1: monotonic increase\n          - 0: no constraint\n          - -1: monotonic decrease\n\n        If monotonic_cst is None, no constraints are applied.\n\n        Monotonicity constraints are not supported for:\n          - multiclass classifications (i.e. when `n_classes > 2`),\n          - multioutput classifications (i.e. when `n_outputs_ > 1`),\n          - classifications trained on data with missing values.\n\n        The constraints hold over the probability of the positive class.\n\n        Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n        .. versionadded:: 1.4\n\n    Attributes\n    ----------\n    classes_ : ndarray of shape (n_classes,) or list of ndarray\n        The classes labels (single output problem),\n        or a list of arrays of class labels (multi-output problem).\n\n    max_features_ : int\n        The inferred value of max_features.\n\n    n_classes_ : int or list of int\n        The number of classes (for single output problems),\n        or a list containing the number of classes for each\n        output (for multi-output problems).\n\n    feature_importances_ : ndarray of shape (n_features,)\n        The impurity-based feature importances.\n        The higher, the more important the feature.\n        The importance of a feature is computed as the (normalized)\n        total reduction of the criterion brought by that feature.  It is also\n        known as the Gini importance.\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_outputs_ : int\n        The number of outputs when ``fit`` is performed.\n\n    tree_ : Tree instance\n        The underlying Tree object. Please refer to\n        ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n        :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n        for basic usage of these attributes.\n\n    See Also\n    --------\n    ExtraTreeRegressor : An extremely randomized tree regressor.\n    sklearn.ensemble.ExtraTreesClassifier : An extra-trees classifier.\n    sklearn.ensemble.ExtraTreesRegressor : An extra-trees regressor.\n    sklearn.ensemble.RandomForestClassifier : A random forest classifier.\n    sklearn.ensemble.RandomForestRegressor : A random forest regressor.\n    sklearn.ensemble.RandomTreesEmbedding : An ensemble of\n        totally random trees.\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    References\n    ----------\n\n    .. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\",\n           Machine Learning, 63(1), 3-42, 2006.",
        "parameters": {
          "criterion": {
            "type": "{\"gini\", \"entropy\", \"log_loss\"}, default=\"gini\"",
            "description": ""
          },
          "The": {
            "type": "default values for the parameters controlling the size of the trees",
            "description": "(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and"
          },
          "Shannon": {
            "type": "information gain, see :ref:`tree_mathematical_formulation`.",
            "description": ""
          },
          "splitter": {
            "type": "{\"random\", \"best\"}, default=\"random\"",
            "description": ""
          },
          "strategies": {
            "type": "are \"best\" to choose the best split and \"random\" to choose",
            "description": ""
          },
          "the": {
            "type": "input samples) required to be at a leaf node. Samples have",
            "description": ""
          },
          "max_depth": {
            "type": "int, default=None",
            "description": ""
          },
          "all": {
            "type": "leaves are pure or until all leaves contain less than",
            "description": ""
          },
          "min_samples_split": {
            "type": "int or float, default=2",
            "description": ""
          },
          "number": {
            "type": "of samples for each node.",
            "description": ".. versionchanged:: 0.18"
          },
          "Added": {
            "type": "float values for fractions.",
            "description": ""
          },
          "min_samples_leaf": {
            "type": "int or float, default=1",
            "description": ""
          },
          "A": {
            "type": "node will be split if this split induces a decrease of the impurity",
            "description": ""
          },
          "least": {
            "type": "``min_samples_leaf`` training samples in each of the left and",
            "description": ""
          },
          "right": {
            "type": "branches.  This may have the effect of smoothing the model,",
            "description": ""
          },
          "especially": {
            "type": "in regression.",
            "description": "- If int, then consider `min_samples_leaf` as the minimum number.\n- If float, then `min_samples_leaf` is a fraction and\n`ceil(min_samples_leaf * n_samples)` are the minimum"
          },
          "min_weight_fraction_leaf": {
            "type": "float, default=0.0",
            "description": ""
          },
          "equal": {
            "type": "weight when sample_weight is not provided.",
            "description": ""
          },
          "max_features": {
            "type": "int, float, {\"sqrt\", \"log2\"} or None, default=\"sqrt\"",
            "description": ""
          },
          "each": {
            "type": "split.",
            "description": "- If \"sqrt\", then `max_features=sqrt(n_features)`.\n- If \"log2\", then `max_features=log2(n_features)`.\n- If None, then `max_features=n_features`.\n.. versionchanged:: 1.1"
          },
          "Note": {
            "type": "that these weights will be multiplied with sample_weight (passed",
            "description": ""
          },
          "valid": {
            "type": "partition of the node samples is found, even if it requires to",
            "description": ""
          },
          "effectively": {
            "type": "inspect more than ``max_features`` features.",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Used": {
            "type": "to pick randomly the `max_features` used at each split.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "max_leaf_nodes": {
            "type": "int, default=None",
            "description": ""
          },
          "Grow": {
            "type": "a tree with ``max_leaf_nodes`` in best-first fashion.",
            "description": ""
          },
          "Best": {
            "type": "nodes are defined as relative reduction in impurity.",
            "description": ""
          },
          "If": {
            "type": "monotonic_cst is None, no constraints are applied.",
            "description": ""
          },
          "min_impurity_decrease": {
            "type": "float, default=0.0",
            "description": ""
          },
          "greater": {
            "type": "than or equal to this value.",
            "description": ""
          },
          "N_t": {
            "type": "/ N * (impurity - N_t_R / N_t * right_impurity",
            "description": "- N_t_L / N_t * left_impurity)"
          },
          "where": {
            "type": "``N`` is the total number of samples, ``N_t`` is the number of",
            "description": ""
          },
          "samples": {
            "type": "at the current node, ``N_t_L`` is the number of samples in the",
            "description": ""
          },
          "left": {
            "type": "child, and ``N_t_R`` is the number of samples in the right child.",
            "description": "``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,"
          },
          "if": {
            "type": "``sample_weight`` is passed.",
            "description": ".. versionadded:: 0.19"
          },
          "class_weight": {
            "type": "dict, list of dict or \"balanced\", default=None",
            "description": ""
          },
          "Weights": {
            "type": "associated with classes in the form ``{class_label: weight}``.",
            "description": ""
          },
          "order": {
            "type": "as the columns of y.",
            "description": ""
          },
          "defined": {
            "type": "for each class of every column in its own dict. For example,",
            "description": ""
          },
          "for": {
            "type": "basic usage of these attributes.",
            "description": ""
          },
          "weights": {
            "type": "inversely proportional to class frequencies in the input data",
            "description": ""
          },
          "as": {
            "type": "``n_samples / (n_classes * np.bincount(y))``",
            "description": ""
          },
          "For": {
            "type": "multi-output, the weights of each column of y will be multiplied.",
            "description": ""
          },
          "through": {
            "type": "the fit method) if sample_weight is specified.",
            "description": ""
          },
          "ccp_alpha": {
            "type": "non",
            "description": "negative float, default=0.0"
          },
          "Complexity": {
            "type": "parameter used for Minimal Cost-Complexity Pruning. The",
            "description": ""
          },
          "subtree": {
            "type": "with the largest cost complexity that is smaller than",
            "description": "``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n:ref:`minimal_cost_complexity_pruning` for details. See\n:ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`"
          },
          "monotonic_cst": {
            "type": "array",
            "description": "like of int of shape (n_features), default=None"
          },
          "Indicates": {
            "type": "the monotonicity constraint to enforce on each feature.",
            "description": "- 1: monotonic increase\n- 0: no constraint\n- -1: monotonic decrease"
          },
          "Monotonicity": {
            "type": "constraints are not supported for:",
            "description": "- multiclass classifications (i.e. when `n_classes > 2`),\n- multioutput classifications (i.e. when `n_outputs_ > 1`),\n- classifications trained on data with missing values."
          },
          "Read": {
            "type": "more in the :ref:`User Guide <monotonic_cst_gbdt>`.",
            "description": ".. versionadded:: 1.4\nAttributes\n----------"
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,) or list of ndarray",
            "description": ""
          },
          "or": {
            "type": "a list containing the number of classes for each",
            "description": ""
          },
          "max_features_": {
            "type": "int",
            "description": ""
          },
          "n_classes_": {
            "type": "int or list of int",
            "description": ""
          },
          "output": {
            "type": "for multi-output problems",
            "description": "."
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": ""
          },
          "total": {
            "type": "reduction of the criterion brought by that feature.  It is also",
            "description": ""
          },
          "known": {
            "type": "as the Gini importance.",
            "description": ""
          },
          "Warning": {
            "type": "impurity",
            "description": "based feature importances can be misleading for"
          },
          "high": {
            "type": "cardinality features (many unique values). See",
            "description": ":func:`sklearn.inspection.permutation_importance` as an alternative."
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`.",
            "description": ".. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "n_outputs_": {
            "type": "int",
            "description": ""
          },
          "tree_": {
            "type": "Tree instance",
            "description": ""
          },
          "ExtraTreeRegressor": {
            "type": "An extremely randomized tree regressor.",
            "description": "sklearn.ensemble.ExtraTreesClassifier : An extra-trees classifier.\nsklearn.ensemble.ExtraTreesRegressor : An extra-trees regressor.\nsklearn.ensemble.RandomForestClassifier : A random forest classifier.\nsklearn.ensemble.RandomForestRegressor : A random forest regressor.\nsklearn.ensemble.RandomTreesEmbedding : An ensemble of"
          },
          "totally": {
            "type": "random trees.",
            "description": "Notes\n-----"
          },
          "unpruned": {
            "type": "trees which can potentially be very large on some data sets. To",
            "description": ""
          },
          "reduce": {
            "type": "memory consumption, the complexity and size of the trees should be",
            "description": ""
          },
          "controlled": {
            "type": "by setting those parameter values.",
            "description": "References\n----------\n.. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\","
          },
          "Machine": {
            "type": "Learning, 63(1), 3-42, 2006.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import load_iris\n>>> from sklearn.model_selection import train_test_split\n>>> from sklearn.ensemble import BaggingClassifier\n>>> from sklearn.tree import ExtraTreeClassifier\n>>> X, y = load_iris(return_X_y=True)\n>>> X_train, X_test, y_train, y_test = train_test_split(\n...    X, y, random_state=0)\n>>> extra_tree = ExtraTreeClassifier(random_state=0)\n>>> cls = BaggingClassifier(extra_tree, random_state=0).fit(\n...    X_train, y_train)\n>>> cls.score(X_test, y_test)\n0.8947..."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    ExtraTreeRegressor : An extremely randomized tree regressor.\n    sklearn.ensemble.ExtraTreesClassifier : An extra-trees classifier.\n    sklearn.ensemble.ExtraTreesRegressor : An extra-trees regressor.\n    sklearn.ensemble.RandomForestClassifier : A random forest classifier.\n    sklearn.ensemble.RandomForestRegressor : A random forest regressor.\n    sklearn.ensemble.RandomTreesEmbedding : An ensemble of\n        totally random trees.\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    References\n    ----------\n\n    .. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\",\n           Machine Learning, 63(1), 3-42, 2006.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import load_iris\n    >>> from sklearn.model_selection import train_test_split\n    >>> from sklearn.ensemble import BaggingClassifier\n    >>> from sklearn.tree import ExtraTreeClassifier\n    >>> X, y = load_iris(return_X_y=True)\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...    X, y, random_state=0)\n    >>> extra_tree = ExtraTreeClassifier(random_state=0)\n    >>> cls = BaggingClassifier(extra_tree, random_state=0).fit(\n    ...    X_train, y_train)\n    >>> cls.score(X_test, y_test)\n    0.8947...",
        "notes": "that for multioutput (including multilabel) weights should be\n        defined for each class of every column in its own dict. For example,\n        for four-class multilabel classification weights should be\n        [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of\n        [{1:1}, {2:5}, {3:1}, {4:1}].\n\n        The \"balanced\" mode uses the values of y to automatically adjust\n        weights inversely proportional to class frequencies in the input data\n        as ``n_samples / (n_classes * np.bincount(y))``\n\n        For multi-output, the weights of each column of y will be multiplied.",
        "examples": "--------\n    >>> from sklearn.datasets import load_iris\n    >>> from sklearn.model_selection import train_test_split\n    >>> from sklearn.ensemble import BaggingClassifier\n    >>> from sklearn.tree import ExtraTreeClassifier\n    >>> X, y = load_iris(return_X_y=True)\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...    X, y, random_state=0)\n    >>> extra_tree = ExtraTreeClassifier(random_state=0)\n    >>> cls = BaggingClassifier(extra_tree, random_state=0).fit(\n    ...    X_train, y_train)\n    >>> cls.score(X_test, y_test)\n    0.8947..."
      },
      "methods": [
        {
          "name": "apply",
          "signature": "apply(self, X, check_input=True)",
          "documentation": {
            "description": "Return the index of the leaf that each sample is predicted as.\n\n        .. versionadded:: 0.17\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples. Internally, it will be converted to",
                "description": "``dtype=np.float32`` and if a sparse matrix is provided"
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "X_leaves": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "For": {
                "type": "each datapoint x in X, return the index of the leaf x",
                "description": ""
              },
              "ends": {
                "type": "up in. Leaves are numbered within",
                "description": "``[0; self.tree_.node_count)``, possibly with gaps in the\nnumbering."
              }
            },
            "returns": "-------\n        X_leaves : array-like of shape (n_samples,)\n            For each datapoint x in X, return the index of the leaf x\n            ends up in. Leaves are numbered within\n            ``[0; self.tree_.node_count)``, possibly with gaps in the\n            numbering.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cost_complexity_pruning_path",
          "signature": "cost_complexity_pruning_path(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Compute the pruning path during Minimal Cost-Complexity Pruning.\n\n        See :ref:`minimal_cost_complexity_pruning` for details on the pruning\n        process.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csc_matrix``.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            The target values (class labels) as integers or strings.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted. Splits\n            that would create child nodes with net zero or negative weight are\n            ignored while searching for a split in each node. Splits are also\n            ignored if they would result in any single class carrying a\n            negative weight in either child node.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "target values (class labels) as integers or strings.",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csc_matrix``.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted. Splits",
                "description": ""
              },
              "that": {
                "type": "would create child nodes with net zero or negative weight are",
                "description": ""
              },
              "ignored": {
                "type": "if they would result in any single class carrying a",
                "description": ""
              },
              "negative": {
                "type": "weight in either child node.",
                "description": "Returns\n-------"
              },
              "ccp_path": {
                "type": ":class:`~sklearn.utils.Bunch`",
                "description": "Dictionary-like object, with the following attributes."
              },
              "ccp_alphas": {
                "type": "ndarray",
                "description": ""
              },
              "Effective": {
                "type": "alphas of subtree during pruning.",
                "description": ""
              },
              "impurities": {
                "type": "ndarray",
                "description": ""
              },
              "Sum": {
                "type": "of the impurities of the subtree leaves for the",
                "description": ""
              },
              "corresponding": {
                "type": "alpha value in ``ccp_alphas``.",
                "description": ""
              }
            },
            "returns": "-------\n        ccp_path : :class:`~sklearn.utils.Bunch`\n            Dictionary-like object, with the following attributes.\n\n            ccp_alphas : ndarray\n                Effective alphas of subtree during pruning.\n\n            impurities : ndarray\n                Sum of the impurities of the subtree leaves for the\n                corresponding alpha value in ``ccp_alphas``.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "decision_path",
          "signature": "decision_path(self, X, check_input=True)",
          "documentation": {
            "description": "Return the decision path in the tree.\n\n        .. versionadded:: 0.18\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.\n\n        Returns\n        -------\n        indicator : sparse matrix of shape (n_samples, n_nodes)",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples. Internally, it will be converted to",
                "description": "``dtype=np.float32`` and if a sparse matrix is provided"
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "indicator": {
                "type": "sparse matrix of shape (n_samples, n_nodes)",
                "description": ""
              },
              "Return": {
                "type": "a node indicator CSR matrix where non zero elements",
                "description": ""
              },
              "indicates": {
                "type": "that the samples goes through the nodes.",
                "description": ""
              }
            },
            "returns": "a node indicator CSR matrix where non zero elements\n            indicates that the samples goes through the nodes.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None, check_input=True)",
          "documentation": {
            "description": "Build a decision tree classifier from the training set (X, y).\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csc_matrix``.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            The target values (class labels) as integers or strings.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted. Splits\n            that would create child nodes with net zero or negative weight are\n            ignored while searching for a split in each node. Splits are also\n            ignored if they would result in any single class carrying a\n            negative weight in either child node.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "target values (class labels) as integers or strings.",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csc_matrix``.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted. Splits",
                "description": ""
              },
              "that": {
                "type": "would create child nodes with net zero or negative weight are",
                "description": ""
              },
              "ignored": {
                "type": "if they would result in any single class carrying a",
                "description": ""
              },
              "negative": {
                "type": "weight in either child node.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "self": {
                "type": "DecisionTreeClassifier",
                "description": ""
              },
              "Fitted": {
                "type": "estimator.",
                "description": ""
              }
            },
            "returns": "-------\n        self : DecisionTreeClassifier\n            Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_depth",
          "signature": "get_depth(self)",
          "documentation": {
            "description": "Return the depth of the decision tree.\n\n        The depth of a tree is the maximum distance between the root\n        and any leaf.",
            "parameters": {},
            "returns": "-------\n        self.tree_.max_depth : int\n            The maximum depth of the tree.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRequest\n            A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_n_leaves",
          "signature": "get_n_leaves(self)",
          "documentation": {
            "description": "Return the number of leaves of the decision tree.",
            "parameters": {},
            "returns": "-------\n        self.tree_.n_leaves : int\n            Number of leaves.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X, check_input=True)",
          "documentation": {
            "description": "Predict class or regression value for X.\n\n        For a classification model, the predicted class for each sample in X is\n        returned. For a regression model, the predicted value based on X is\n        returned.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted classes, or the predict values.",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              }
            },
            "returns": "-------\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            The predicted classes, or the predict values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_log_proba",
          "signature": "predict_log_proba(self, X)",
          "documentation": {
            "description": "Predict class log-probabilities of the input samples X.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "class log-probabilities of the input samples. The order of the",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "proba": {
                "type": "ndarray of shape (n_samples, n_classes) or list of n_outputs             such arrays if n_outputs > 1",
                "description": ""
              },
              "classes": {
                "type": "corresponds to that in the attribute :term:`classes_`.",
                "description": ""
              }
            },
            "returns": "-------\n        proba : ndarray of shape (n_samples, n_classes) or list of n_outputs             such arrays if n_outputs > 1\n            The class log-probabilities of the input samples. The order of the\n            classes corresponds to that in the attribute :term:`classes_`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_proba",
          "signature": "predict_proba(self, X, check_input=True)",
          "documentation": {
            "description": "Predict class probabilities of the input samples X.\n\n        The predicted class probability is the fraction of samples of the same\n        class in a leaf.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "class probabilities of the input samples. The order of the",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "proba": {
                "type": "ndarray of shape (n_samples, n_classes) or list of n_outputs             such arrays if n_outputs > 1",
                "description": ""
              },
              "classes": {
                "type": "corresponds to that in the attribute :term:`classes_`.",
                "description": ""
              }
            },
            "returns": "-------\n        proba : ndarray of shape (n_samples, n_classes) or list of n_outputs             such arrays if n_outputs > 1\n            The class probabilities of the input samples. The order of the\n            classes corresponds to that in the attribute :term:`classes_`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "labels for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ""
              },
              "Mean": {
                "type": "accuracy of ``self.predict(X)`` w.r.t. `y`.",
                "description": ""
              }
            },
            "returns": "the mean accuracy on the given test data and labels.\n\n        In multi-label classification, this is the subset accuracy\n        which is a harsh metric since you require for each sample that\n        each label set be correctly predicted.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True labels for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.tree._classes.ExtraTreeClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.tree._classes.ExtraTreeClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.tree._classes.ExtraTreeClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.tree._classes.ExtraTreeClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "ExtraTreeRegressor",
      "documentation": {
        "description": "An extremely randomized tree regressor.\n\n    Extra-trees differ from classic decision trees in the way they are built.\n    When looking for the best split to separate the samples of a node into two\n    groups, random splits are drawn for each of the `max_features` randomly\n    selected features and the best split among those is chosen. When\n    `max_features` is set 1, this amounts to building a totally random\n    decision tree.\n\n    Warning: Extra-trees should only be used within ensemble methods.\n\n    Read more in the :ref:`User Guide <tree>`.\n\n    Parameters\n    ----------\n    criterion : {\"squared_error\", \"friedman_mse\", \"absolute_error\", \"poisson\"},             default=\"squared_error\"\n        The function to measure the quality of a split. Supported criteria\n        are \"squared_error\" for the mean squared error, which is equal to\n        variance reduction as feature selection criterion and minimizes the L2\n        loss using the mean of each terminal node, \"friedman_mse\", which uses\n        mean squared error with Friedman's improvement score for potential\n        splits, \"absolute_error\" for the mean absolute error, which minimizes\n        the L1 loss using the median of each terminal node, and \"poisson\" which\n        uses reduction in Poisson deviance to find splits.\n\n        .. versionadded:: 0.18\n           Mean Absolute Error (MAE) criterion.\n\n        .. versionadded:: 0.24\n            Poisson deviance criterion.\n\n    splitter : {\"random\", \"best\"}, default=\"random\"\n        The strategy used to choose the split at each node. Supported\n        strategies are \"best\" to choose the best split and \"random\" to choose\n        the best random split.\n\n    max_depth : int, default=None\n        The maximum depth of the tree. If None, then nodes are expanded until\n        all leaves are pure or until all leaves contain less than\n        min_samples_split samples.\n\n    min_samples_split : int or float, default=2\n        The minimum number of samples required to split an internal node:\n\n        - If int, then consider `min_samples_split` as the minimum number.\n        - If float, then `min_samples_split` is a fraction and\n          `ceil(min_samples_split * n_samples)` are the minimum\n          number of samples for each split.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_samples_leaf : int or float, default=1\n        The minimum number of samples required to be at a leaf node.\n        A split point at any depth will only be considered if it leaves at\n        least ``min_samples_leaf`` training samples in each of the left and\n        right branches.  This may have the effect of smoothing the model,\n        especially in regression.\n\n        - If int, then consider `min_samples_leaf` as the minimum number.\n        - If float, then `min_samples_leaf` is a fraction and\n          `ceil(min_samples_leaf * n_samples)` are the minimum\n          number of samples for each node.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_weight_fraction_leaf : float, default=0.0\n        The minimum weighted fraction of the sum total of weights (of all\n        the input samples) required to be at a leaf node. Samples have\n        equal weight when sample_weight is not provided.\n\n    max_features : int, float, {\"sqrt\", \"log2\"} or None, default=1.0\n        The number of features to consider when looking for the best split:\n\n        - If int, then consider `max_features` features at each split.\n        - If float, then `max_features` is a fraction and\n          `max(1, int(max_features * n_features_in_))` features are considered at each\n          split.\n        - If \"sqrt\", then `max_features=sqrt(n_features)`.\n        - If \"log2\", then `max_features=log2(n_features)`.\n        - If None, then `max_features=n_features`.\n\n        .. versionchanged:: 1.1\n            The default of `max_features` changed from `\"auto\"` to `1.0`.\n\n        Note: the search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features.\n\n    random_state : int, RandomState instance or None, default=None\n        Used to pick randomly the `max_features` used at each split.\n        See :term:`Glossary <random_state>` for details.\n\n    min_impurity_decrease : float, default=0.0\n        A node will be split if this split induces a decrease of the impurity\n        greater than or equal to this value.\n\n        The weighted impurity decrease equation is the following::\n\n            N_t / N * (impurity - N_t_R / N_t * right_impurity\n                                - N_t_L / N_t * left_impurity)\n\n        where ``N`` is the total number of samples, ``N_t`` is the number of\n        samples at the current node, ``N_t_L`` is the number of samples in the\n        left child, and ``N_t_R`` is the number of samples in the right child.\n\n        ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n        if ``sample_weight`` is passed.\n\n        .. versionadded:: 0.19\n\n    max_leaf_nodes : int, default=None\n        Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        If None then unlimited number of leaf nodes.\n\n    ccp_alpha : non-negative float, default=0.0\n        Complexity parameter used for Minimal Cost-Complexity Pruning. The\n        subtree with the largest cost complexity that is smaller than\n        ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n        :ref:`minimal_cost_complexity_pruning` for details. See\n        :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n        for an example of such pruning.\n\n        .. versionadded:: 0.22\n\n    monotonic_cst : array-like of int of shape (n_features), default=None\n        Indicates the monotonicity constraint to enforce on each feature.\n          - 1: monotonic increase\n          - 0: no constraint\n          - -1: monotonic decrease\n\n        If monotonic_cst is None, no constraints are applied.\n\n        Monotonicity constraints are not supported for:\n          - multioutput regressions (i.e. when `n_outputs_ > 1`),\n          - regressions trained on data with missing values.\n\n        Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n        .. versionadded:: 1.4\n\n    Attributes\n    ----------\n    max_features_ : int\n        The inferred value of max_features.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    feature_importances_ : ndarray of shape (n_features,)\n        Return impurity-based feature importances (the higher, the more\n        important the feature).\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    n_outputs_ : int\n        The number of outputs when ``fit`` is performed.\n\n    tree_ : Tree instance\n        The underlying Tree object. Please refer to\n        ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n        :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n        for basic usage of these attributes.\n\n    See Also\n    --------\n    ExtraTreeClassifier : An extremely randomized tree classifier.\n    sklearn.ensemble.ExtraTreesClassifier : An extra-trees classifier.\n    sklearn.ensemble.ExtraTreesRegressor : An extra-trees regressor.\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    References\n    ----------\n\n    .. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\",\n           Machine Learning, 63(1), 3-42, 2006.",
        "parameters": {
          "criterion": {
            "type": "{\"squared_error\", \"friedman_mse\", \"absolute_error\", \"poisson\"},             default=\"squared_error\"",
            "description": ""
          },
          "The": {
            "type": "default values for the parameters controlling the size of the trees",
            "description": "(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and"
          },
          "are": {
            "type": "\"squared_error\" for the mean squared error, which is equal to",
            "description": ""
          },
          "variance": {
            "type": "reduction as feature selection criterion and minimizes the L2",
            "description": ""
          },
          "loss": {
            "type": "using the mean of each terminal node, \"friedman_mse\", which uses",
            "description": ""
          },
          "mean": {
            "type": "squared error with Friedman's improvement score for potential",
            "description": "splits, \"absolute_error\" for the mean absolute error, which minimizes"
          },
          "the": {
            "type": "input samples) required to be at a leaf node. Samples have",
            "description": ""
          },
          "uses": {
            "type": "reduction in Poisson deviance to find splits.",
            "description": ".. versionadded:: 0.18"
          },
          "Mean": {
            "type": "Absolute Error (MAE) criterion.",
            "description": ".. versionadded:: 0.24"
          },
          "Poisson": {
            "type": "deviance criterion.",
            "description": ""
          },
          "splitter": {
            "type": "{\"random\", \"best\"}, default=\"random\"",
            "description": ""
          },
          "strategies": {
            "type": "are \"best\" to choose the best split and \"random\" to choose",
            "description": ""
          },
          "max_depth": {
            "type": "int, default=None",
            "description": ""
          },
          "all": {
            "type": "leaves are pure or until all leaves contain less than",
            "description": ""
          },
          "min_samples_split": {
            "type": "int or float, default=2",
            "description": ""
          },
          "number": {
            "type": "of samples for each node.",
            "description": ".. versionchanged:: 0.18"
          },
          "Added": {
            "type": "float values for fractions.",
            "description": ""
          },
          "min_samples_leaf": {
            "type": "int or float, default=1",
            "description": ""
          },
          "A": {
            "type": "node will be split if this split induces a decrease of the impurity",
            "description": ""
          },
          "least": {
            "type": "``min_samples_leaf`` training samples in each of the left and",
            "description": ""
          },
          "right": {
            "type": "branches.  This may have the effect of smoothing the model,",
            "description": ""
          },
          "especially": {
            "type": "in regression.",
            "description": "- If int, then consider `min_samples_leaf` as the minimum number.\n- If float, then `min_samples_leaf` is a fraction and\n`ceil(min_samples_leaf * n_samples)` are the minimum"
          },
          "min_weight_fraction_leaf": {
            "type": "float, default=0.0",
            "description": ""
          },
          "equal": {
            "type": "weight when sample_weight is not provided.",
            "description": ""
          },
          "max_features": {
            "type": "int, float, {\"sqrt\", \"log2\"} or None, default=1.0",
            "description": ""
          },
          "Note": {
            "type": "the search for a split does not stop until at least one",
            "description": ""
          },
          "valid": {
            "type": "partition of the node samples is found, even if it requires to",
            "description": ""
          },
          "effectively": {
            "type": "inspect more than ``max_features`` features.",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Used": {
            "type": "to pick randomly the `max_features` used at each split.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "min_impurity_decrease": {
            "type": "float, default=0.0",
            "description": ""
          },
          "greater": {
            "type": "than or equal to this value.",
            "description": ""
          },
          "N_t": {
            "type": "/ N * (impurity - N_t_R / N_t * right_impurity",
            "description": "- N_t_L / N_t * left_impurity)"
          },
          "where": {
            "type": "``N`` is the total number of samples, ``N_t`` is the number of",
            "description": ""
          },
          "samples": {
            "type": "at the current node, ``N_t_L`` is the number of samples in the",
            "description": ""
          },
          "left": {
            "type": "child, and ``N_t_R`` is the number of samples in the right child.",
            "description": "``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,"
          },
          "if": {
            "type": "``sample_weight`` is passed.",
            "description": ".. versionadded:: 0.19"
          },
          "max_leaf_nodes": {
            "type": "int, default=None",
            "description": ""
          },
          "Grow": {
            "type": "a tree with ``max_leaf_nodes`` in best-first fashion.",
            "description": ""
          },
          "Best": {
            "type": "nodes are defined as relative reduction in impurity.",
            "description": ""
          },
          "If": {
            "type": "monotonic_cst is None, no constraints are applied.",
            "description": ""
          },
          "ccp_alpha": {
            "type": "non",
            "description": "negative float, default=0.0"
          },
          "Complexity": {
            "type": "parameter used for Minimal Cost-Complexity Pruning. The",
            "description": ""
          },
          "subtree": {
            "type": "with the largest cost complexity that is smaller than",
            "description": "``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n:ref:`minimal_cost_complexity_pruning` for details. See\n:ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`"
          },
          "for": {
            "type": "basic usage of these attributes.",
            "description": ""
          },
          "monotonic_cst": {
            "type": "array",
            "description": "like of int of shape (n_features), default=None"
          },
          "Indicates": {
            "type": "the monotonicity constraint to enforce on each feature.",
            "description": "- 1: monotonic increase\n- 0: no constraint\n- -1: monotonic decrease"
          },
          "Monotonicity": {
            "type": "constraints are not supported for:",
            "description": "- multioutput regressions (i.e. when `n_outputs_ > 1`),\n- regressions trained on data with missing values."
          },
          "Read": {
            "type": "more in the :ref:`User Guide <monotonic_cst_gbdt>`.",
            "description": ".. versionadded:: 1.4\nAttributes\n----------"
          },
          "max_features_": {
            "type": "int",
            "description": ""
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`.",
            "description": ".. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": ""
          },
          "Return": {
            "type": "impurity-based feature importances (the higher, the more",
            "description": ""
          },
          "important": {
            "type": "the feature).",
            "description": ""
          },
          "Warning": {
            "type": "impurity",
            "description": "based feature importances can be misleading for"
          },
          "high": {
            "type": "cardinality features (many unique values). See",
            "description": ":func:`sklearn.inspection.permutation_importance` as an alternative."
          },
          "n_outputs_": {
            "type": "int",
            "description": ""
          },
          "tree_": {
            "type": "Tree instance",
            "description": ""
          },
          "ExtraTreeClassifier": {
            "type": "An extremely randomized tree classifier.",
            "description": "sklearn.ensemble.ExtraTreesClassifier : An extra-trees classifier.\nsklearn.ensemble.ExtraTreesRegressor : An extra-trees regressor.\nNotes\n-----"
          },
          "unpruned": {
            "type": "trees which can potentially be very large on some data sets. To",
            "description": ""
          },
          "reduce": {
            "type": "memory consumption, the complexity and size of the trees should be",
            "description": ""
          },
          "controlled": {
            "type": "by setting those parameter values.",
            "description": "References\n----------\n.. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\","
          },
          "Machine": {
            "type": "Learning, 63(1), 3-42, 2006.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import load_diabetes\n>>> from sklearn.model_selection import train_test_split\n>>> from sklearn.ensemble import BaggingRegressor\n>>> from sklearn.tree import ExtraTreeRegressor\n>>> X, y = load_diabetes(return_X_y=True)\n>>> X_train, X_test, y_train, y_test = train_test_split(\n...     X, y, random_state=0)\n>>> extra_tree = ExtraTreeRegressor(random_state=0)\n>>> reg = BaggingRegressor(extra_tree, random_state=0).fit(\n...     X_train, y_train)\n>>> reg.score(X_test, y_test)\n0.33..."
          }
        },
        "returns": "impurity-based feature importances (the higher, the more\n        important the feature).\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    n_outputs_ : int\n        The number of outputs when ``fit`` is performed.\n\n    tree_ : Tree instance\n        The underlying Tree object. Please refer to\n        ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n        :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n        for basic usage of these attributes.\n\n    See Also\n    --------\n    ExtraTreeClassifier : An extremely randomized tree classifier.\n    sklearn.ensemble.ExtraTreesClassifier : An extra-trees classifier.\n    sklearn.ensemble.ExtraTreesRegressor : An extra-trees regressor.\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    References\n    ----------\n\n    .. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\",\n           Machine Learning, 63(1), 3-42, 2006.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import load_diabetes\n    >>> from sklearn.model_selection import train_test_split\n    >>> from sklearn.ensemble import BaggingRegressor\n    >>> from sklearn.tree import ExtraTreeRegressor\n    >>> X, y = load_diabetes(return_X_y=True)\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...     X, y, random_state=0)\n    >>> extra_tree = ExtraTreeRegressor(random_state=0)\n    >>> reg = BaggingRegressor(extra_tree, random_state=0).fit(\n    ...     X_train, y_train)\n    >>> reg.score(X_test, y_test)\n    0.33...",
        "raises": "",
        "see_also": "--------\n    ExtraTreeClassifier : An extremely randomized tree classifier.\n    sklearn.ensemble.ExtraTreesClassifier : An extra-trees classifier.\n    sklearn.ensemble.ExtraTreesRegressor : An extra-trees regressor.\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    References\n    ----------\n\n    .. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\",\n           Machine Learning, 63(1), 3-42, 2006.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import load_diabetes\n    >>> from sklearn.model_selection import train_test_split\n    >>> from sklearn.ensemble import BaggingRegressor\n    >>> from sklearn.tree import ExtraTreeRegressor\n    >>> X, y = load_diabetes(return_X_y=True)\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...     X, y, random_state=0)\n    >>> extra_tree = ExtraTreeRegressor(random_state=0)\n    >>> reg = BaggingRegressor(extra_tree, random_state=0).fit(\n    ...     X_train, y_train)\n    >>> reg.score(X_test, y_test)\n    0.33...",
        "notes": "the search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features.\n\n    random_state : int, RandomState instance or None, default=None\n        Used to pick randomly the `max_features` used at each split.\n        See :term:`Glossary <random_state>` for details.\n\n    min_impurity_decrease : float, default=0.0\n        A node will be split if this split induces a decrease of the impurity\n        greater than or equal to this value.\n\n        The weighted impurity decrease equation is the following::\n\n            N_t / N * (impurity - N_t_R / N_t * right_impurity\n                                - N_t_L / N_t * left_impurity)\n\n        where ``N`` is the total number of samples, ``N_t`` is the number of\n        samples at the current node, ``N_t_L`` is the number of samples in the\n        left child, and ``N_t_R`` is the number of samples in the right child.\n\n        ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n        if ``sample_weight`` is passed.\n\n        .. versionadded:: 0.19\n\n    max_leaf_nodes : int, default=None\n        Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        If None then unlimited number of leaf nodes.\n\n    ccp_alpha : non-negative float, default=0.0\n        Complexity parameter used for Minimal Cost-Complexity Pruning. The\n        subtree with the largest cost complexity that is smaller than\n        ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n        :ref:`minimal_cost_complexity_pruning` for details. See\n        :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n        for an example of such pruning.\n\n        .. versionadded:: 0.22\n\n    monotonic_cst : array-like of int of shape (n_features), default=None\n        Indicates the monotonicity constraint to enforce on each feature.\n          - 1: monotonic increase\n          - 0: no constraint\n          - -1: monotonic decrease\n\n        If monotonic_cst is None, no constraints are applied.\n\n        Monotonicity constraints are not supported for:\n          - multioutput regressions (i.e. when `n_outputs_ > 1`),\n          - regressions trained on data with missing values.\n\n        Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n        .. versionadded:: 1.4\n\n    Attributes\n    ----------\n    max_features_ : int\n        The inferred value of max_features.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    feature_importances_ : ndarray of shape (n_features,)\n        Return impurity-based feature importances (the higher, the more\n        important the feature).\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    n_outputs_ : int\n        The number of outputs when ``fit`` is performed.\n\n    tree_ : Tree instance\n        The underlying Tree object. Please refer to\n        ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n        :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n        for basic usage of these attributes.\n\n    See Also\n    --------\n    ExtraTreeClassifier : An extremely randomized tree classifier.\n    sklearn.ensemble.ExtraTreesClassifier : An extra-trees classifier.\n    sklearn.ensemble.ExtraTreesRegressor : An extra-trees regressor.\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    References\n    ----------\n\n    .. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\",\n           Machine Learning, 63(1), 3-42, 2006.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import load_diabetes\n    >>> from sklearn.model_selection import train_test_split\n    >>> from sklearn.ensemble import BaggingRegressor\n    >>> from sklearn.tree import ExtraTreeRegressor\n    >>> X, y = load_diabetes(return_X_y=True)\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...     X, y, random_state=0)\n    >>> extra_tree = ExtraTreeRegressor(random_state=0)\n    >>> reg = BaggingRegressor(extra_tree, random_state=0).fit(\n    ...     X_train, y_train)\n    >>> reg.score(X_test, y_test)\n    0.33...",
        "examples": "--------\n    >>> from sklearn.datasets import load_diabetes\n    >>> from sklearn.model_selection import train_test_split\n    >>> from sklearn.ensemble import BaggingRegressor\n    >>> from sklearn.tree import ExtraTreeRegressor\n    >>> X, y = load_diabetes(return_X_y=True)\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...     X, y, random_state=0)\n    >>> extra_tree = ExtraTreeRegressor(random_state=0)\n    >>> reg = BaggingRegressor(extra_tree, random_state=0).fit(\n    ...     X_train, y_train)\n    >>> reg.score(X_test, y_test)\n    0.33..."
      },
      "methods": [
        {
          "name": "apply",
          "signature": "apply(self, X, check_input=True)",
          "documentation": {
            "description": "Return the index of the leaf that each sample is predicted as.\n\n        .. versionadded:: 0.17\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples. Internally, it will be converted to",
                "description": "``dtype=np.float32`` and if a sparse matrix is provided"
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "X_leaves": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "For": {
                "type": "each datapoint x in X, return the index of the leaf x",
                "description": ""
              },
              "ends": {
                "type": "up in. Leaves are numbered within",
                "description": "``[0; self.tree_.node_count)``, possibly with gaps in the\nnumbering."
              }
            },
            "returns": "-------\n        X_leaves : array-like of shape (n_samples,)\n            For each datapoint x in X, return the index of the leaf x\n            ends up in. Leaves are numbered within\n            ``[0; self.tree_.node_count)``, possibly with gaps in the\n            numbering.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cost_complexity_pruning_path",
          "signature": "cost_complexity_pruning_path(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Compute the pruning path during Minimal Cost-Complexity Pruning.\n\n        See :ref:`minimal_cost_complexity_pruning` for details on the pruning\n        process.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csc_matrix``.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            The target values (class labels) as integers or strings.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted. Splits\n            that would create child nodes with net zero or negative weight are\n            ignored while searching for a split in each node. Splits are also\n            ignored if they would result in any single class carrying a\n            negative weight in either child node.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "target values (class labels) as integers or strings.",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csc_matrix``.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted. Splits",
                "description": ""
              },
              "that": {
                "type": "would create child nodes with net zero or negative weight are",
                "description": ""
              },
              "ignored": {
                "type": "if they would result in any single class carrying a",
                "description": ""
              },
              "negative": {
                "type": "weight in either child node.",
                "description": "Returns\n-------"
              },
              "ccp_path": {
                "type": ":class:`~sklearn.utils.Bunch`",
                "description": "Dictionary-like object, with the following attributes."
              },
              "ccp_alphas": {
                "type": "ndarray",
                "description": ""
              },
              "Effective": {
                "type": "alphas of subtree during pruning.",
                "description": ""
              },
              "impurities": {
                "type": "ndarray",
                "description": ""
              },
              "Sum": {
                "type": "of the impurities of the subtree leaves for the",
                "description": ""
              },
              "corresponding": {
                "type": "alpha value in ``ccp_alphas``.",
                "description": ""
              }
            },
            "returns": "-------\n        ccp_path : :class:`~sklearn.utils.Bunch`\n            Dictionary-like object, with the following attributes.\n\n            ccp_alphas : ndarray\n                Effective alphas of subtree during pruning.\n\n            impurities : ndarray\n                Sum of the impurities of the subtree leaves for the\n                corresponding alpha value in ``ccp_alphas``.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "decision_path",
          "signature": "decision_path(self, X, check_input=True)",
          "documentation": {
            "description": "Return the decision path in the tree.\n\n        .. versionadded:: 0.18\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.\n\n        Returns\n        -------\n        indicator : sparse matrix of shape (n_samples, n_nodes)",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples. Internally, it will be converted to",
                "description": "``dtype=np.float32`` and if a sparse matrix is provided"
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "indicator": {
                "type": "sparse matrix of shape (n_samples, n_nodes)",
                "description": ""
              },
              "Return": {
                "type": "a node indicator CSR matrix where non zero elements",
                "description": ""
              },
              "indicates": {
                "type": "that the samples goes through the nodes.",
                "description": ""
              }
            },
            "returns": "a node indicator CSR matrix where non zero elements\n            indicates that the samples goes through the nodes.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None, check_input=True)",
          "documentation": {
            "description": "Build a decision tree regressor from the training set (X, y).\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csc_matrix``.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            The target values (real numbers). Use ``dtype=np.float64`` and\n            ``order='C'`` for maximum efficiency.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted. Splits\n            that would create child nodes with net zero or negative weight are\n            ignored while searching for a split in each node.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "target values (real numbers). Use ``dtype=np.float64`` and",
                "description": "``order='C'`` for maximum efficiency."
              },
              "to": {
                "type": "a sparse ``csc_matrix``.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted. Splits",
                "description": ""
              },
              "that": {
                "type": "would create child nodes with net zero or negative weight are",
                "description": ""
              },
              "ignored": {
                "type": "while searching for a split in each node.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "self": {
                "type": "DecisionTreeRegressor",
                "description": ""
              },
              "Fitted": {
                "type": "estimator.",
                "description": ""
              }
            },
            "returns": "-------\n        self : DecisionTreeRegressor\n            Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_depth",
          "signature": "get_depth(self)",
          "documentation": {
            "description": "Return the depth of the decision tree.\n\n        The depth of a tree is the maximum distance between the root\n        and any leaf.",
            "parameters": {},
            "returns": "-------\n        self.tree_.max_depth : int\n            The maximum depth of the tree.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRequest\n            A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_n_leaves",
          "signature": "get_n_leaves(self)",
          "documentation": {
            "description": "Return the number of leaves of the decision tree.",
            "parameters": {},
            "returns": "-------\n        self.tree_.n_leaves : int\n            Number of leaves.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X, check_input=True)",
          "documentation": {
            "description": "Predict class or regression value for X.\n\n        For a classification model, the predicted class for each sample in X is\n        returned. For a regression model, the predicted value based on X is\n        returned.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        check_input : bool, default=True\n            Allow to bypass several input checking.\n            Don't use this parameter unless you know what you're doing.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted classes, or the predict values.",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": ""
              },
              "check_input": {
                "type": "bool, default=True",
                "description": ""
              },
              "Allow": {
                "type": "to bypass several input checking.",
                "description": "Don't use this parameter unless you know what you're doing.\nReturns\n-------"
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              }
            },
            "returns": "-------\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            The predicted classes, or the predict values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Return the coefficient of determination of the prediction.\n\n        The coefficient of determination :math:`R^2` is defined as\n        :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\n        sum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\n        is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\n        The best possible score is 1.0 and it can be negative (because the\n        model can be arbitrarily worse). A constant model that always predicts\n        the expected value of `y`, disregarding the input features, would get\n        a :math:`R^2` score of 0.0.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples. For some estimators this may be a precomputed\n            kernel matrix or a list of generic objects instead with shape\n            ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n            is the number of samples used in the fitting for the estimator.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True values for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples. For some estimators this may be a precomputed",
                "description": ""
              },
              "kernel": {
                "type": "matrix or a list of generic objects instead with shape",
                "description": "``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``"
              },
              "is": {
                "type": "the number of samples used in the fitting for the estimator.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "values for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ":math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\nNotes\n-----"
              },
              "The": {
                "type": "math:`R^2` score used when calling ``score`` on a regressor uses",
                "description": "``multioutput='uniform_average'`` from version 0.23 to keep consistent"
              },
              "with": {
                "type": "default value of :func:`~sklearn.metrics.r2_score`.",
                "description": ""
              },
              "This": {
                "type": "influences the ``score`` method of all the multioutput",
                "description": ""
              },
              "regressors": {
                "type": "(except for",
                "description": ":class:`~sklearn.multioutput.MultiOutputRegressor`)."
              }
            },
            "returns": "-------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\n\n        Notes\n        -----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "raises": "",
            "see_also": "",
            "notes": "-----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.tree._classes.ExtraTreeRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.tree._classes.ExtraTreeRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.tree._classes.ExtraTreeRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.tree._classes.ExtraTreeRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        }
      ]
    }
  ]
}