{
  "sklearn.linear_model": {
    "description": "A variety of linear models.",
    "functions": [
      "ARDRegression",
      "BayesianRidge",
      "ElasticNet",
      "ElasticNetCV",
      "GammaRegressor",
      "HuberRegressor",
      "Lars",
      "LarsCV",
      "Lasso",
      "LassoCV",
      "LassoLars",
      "LassoLarsCV",
      "LassoLarsIC",
      "LinearRegression",
      "LogisticRegression",
      "LogisticRegressionCV",
      "MultiTaskElasticNet",
      "MultiTaskElasticNetCV",
      "MultiTaskLasso",
      "MultiTaskLassoCV",
      "OrthogonalMatchingPursuit",
      "OrthogonalMatchingPursuitCV",
      "PassiveAggressiveClassifier",
      "PassiveAggressiveRegressor",
      "Perceptron",
      "PoissonRegressor",
      "QuantileRegressor",
      "RANSACRegressor",
      "Ridge",
      "RidgeCV",
      "RidgeClassifier",
      "RidgeClassifierCV",
      "SGDClassifier",
      "SGDOneClassSVM",
      "SGDRegressor",
      "TheilSenRegressor",
      "TweedieRegressor",
      "enet_path",
      "lars_path",
      "lars_path_gram",
      "lasso_path",
      "orthogonal_mp",
      "orthogonal_mp_gram",
      "ridge_regression"
    ],
    "classes": [
      "ARDRegression",
      "BayesianRidge",
      "ElasticNet",
      "ElasticNetCV",
      "GammaRegressor",
      "HuberRegressor",
      "Lars",
      "LarsCV",
      "Lasso",
      "LassoCV",
      "LassoLars",
      "LassoLarsCV",
      "LassoLarsIC",
      "LinearRegression",
      "LogisticRegression",
      "LogisticRegressionCV",
      "MultiTaskElasticNet",
      "MultiTaskElasticNetCV",
      "MultiTaskLasso",
      "MultiTaskLassoCV",
      "OrthogonalMatchingPursuit",
      "OrthogonalMatchingPursuitCV",
      "PassiveAggressiveClassifier",
      "PassiveAggressiveRegressor",
      "Perceptron",
      "PoissonRegressor",
      "QuantileRegressor",
      "RANSACRegressor",
      "Ridge",
      "RidgeCV",
      "RidgeClassifier",
      "RidgeClassifierCV",
      "SGDClassifier",
      "SGDOneClassSVM",
      "SGDRegressor",
      "TheilSenRegressor",
      "TweedieRegressor"
    ]
  },
  "sklearn.model_selection": {
    "description": "Tools for model selection, such as cross validation and hyper-parameter tuning.",
    "functions": [
      "BaseCrossValidator",
      "BaseShuffleSplit",
      "FixedThresholdClassifier",
      "GridSearchCV",
      "GroupKFold",
      "GroupShuffleSplit",
      "KFold",
      "LearningCurveDisplay",
      "LeaveOneGroupOut",
      "LeaveOneOut",
      "LeavePGroupsOut",
      "LeavePOut",
      "ParameterGrid",
      "ParameterSampler",
      "PredefinedSplit",
      "RandomizedSearchCV",
      "RepeatedKFold",
      "RepeatedStratifiedKFold",
      "ShuffleSplit",
      "StratifiedGroupKFold",
      "StratifiedKFold",
      "StratifiedShuffleSplit",
      "TimeSeriesSplit",
      "TunedThresholdClassifierCV",
      "ValidationCurveDisplay",
      "check_cv",
      "cross_val_predict",
      "cross_val_score",
      "cross_validate",
      "learning_curve",
      "permutation_test_score",
      "train_test_split",
      "validation_curve"
    ],
    "classes": [
      "BaseCrossValidator",
      "BaseShuffleSplit",
      "FixedThresholdClassifier",
      "GridSearchCV",
      "GroupKFold",
      "GroupShuffleSplit",
      "KFold",
      "LearningCurveDisplay",
      "LeaveOneGroupOut",
      "LeaveOneOut",
      "LeavePGroupsOut",
      "LeavePOut",
      "ParameterGrid",
      "ParameterSampler",
      "PredefinedSplit",
      "RandomizedSearchCV",
      "RepeatedKFold",
      "RepeatedStratifiedKFold",
      "ShuffleSplit",
      "StratifiedGroupKFold",
      "StratifiedKFold",
      "StratifiedShuffleSplit",
      "TimeSeriesSplit",
      "TunedThresholdClassifierCV",
      "ValidationCurveDisplay"
    ]
  },
  "sklearn.feature_selection": {
    "description": "Feature selection algorithms.\n\nThese include univariate filter selection methods and the recursive feature elimination\nalgorithm.",
    "functions": [
      "GenericUnivariateSelect",
      "RFE",
      "RFECV",
      "SelectFdr",
      "SelectFpr",
      "SelectFromModel",
      "SelectFwe",
      "SelectKBest",
      "SelectPercentile",
      "SelectorMixin",
      "SequentialFeatureSelector",
      "VarianceThreshold",
      "chi2",
      "f_classif",
      "f_oneway",
      "f_regression",
      "mutual_info_classif",
      "mutual_info_regression",
      "r_regression"
    ],
    "classes": [
      "GenericUnivariateSelect",
      "RFE",
      "RFECV",
      "SelectFdr",
      "SelectFpr",
      "SelectFromModel",
      "SelectFwe",
      "SelectKBest",
      "SelectPercentile",
      "SelectorMixin",
      "SequentialFeatureSelector",
      "VarianceThreshold"
    ]
  },
  "sklearn.pipeline": {
    "description": "Utilities to build a composite estimator as a chain of transforms and estimators.",
    "functions": [
      "Bunch",
      "Counter",
      "FeatureUnion",
      "FunctionTransformer",
      "HasMethods",
      "Hidden",
      "MetadataRouter",
      "MethodMapping",
      "NotFittedError",
      "Parallel",
      "Pipeline",
      "TransformerMixin",
      "available_if",
      "chain",
      "check_is_fitted",
      "check_memory",
      "clone",
      "contextmanager",
      "deepcopy",
      "defaultdict",
      "delayed",
      "get_routing_for_object",
      "get_tags",
      "islice",
      "make_pipeline",
      "make_union",
      "process_routing"
    ],
    "classes": [
      "Bunch",
      "Counter",
      "FeatureUnion",
      "FunctionTransformer",
      "HasMethods",
      "Hidden",
      "MetadataRouter",
      "MethodMapping",
      "NotFittedError",
      "Parallel",
      "Pipeline",
      "TransformerMixin",
      "chain",
      "defaultdict",
      "islice"
    ]
  },
  "sklearn": {
    "description": "Configure global settings and get information about the working environment.",
    "functions": [
      "clone",
      "config_context",
      "get_config",
      "set_config",
      "show_versions"
    ],
    "classes": []
  },
  "sklearn.tree": {
    "description": "Decision tree based models for classification and regression.",
    "functions": [
      "BaseDecisionTree",
      "DecisionTreeClassifier",
      "DecisionTreeRegressor",
      "ExtraTreeClassifier",
      "ExtraTreeRegressor",
      "export_graphviz",
      "export_text",
      "plot_tree"
    ],
    "classes": [
      "BaseDecisionTree",
      "DecisionTreeClassifier",
      "DecisionTreeRegressor",
      "ExtraTreeClassifier",
      "ExtraTreeRegressor"
    ]
  },
  "sklearn.cluster": {
    "description": "Popular unsupervised clustering algorithms.",
    "functions": [
      "AffinityPropagation",
      "AgglomerativeClustering",
      "Birch",
      "BisectingKMeans",
      "DBSCAN",
      "FeatureAgglomeration",
      "HDBSCAN",
      "KMeans",
      "MeanShift",
      "MiniBatchKMeans",
      "OPTICS",
      "SpectralBiclustering",
      "SpectralClustering",
      "SpectralCoclustering",
      "affinity_propagation",
      "cluster_optics_dbscan",
      "cluster_optics_xi",
      "compute_optics_graph",
      "dbscan",
      "estimate_bandwidth",
      "get_bin_seeds",
      "k_means",
      "kmeans_plusplus",
      "linkage_tree",
      "mean_shift",
      "spectral_clustering",
      "ward_tree"
    ],
    "classes": [
      "AffinityPropagation",
      "AgglomerativeClustering",
      "Birch",
      "BisectingKMeans",
      "DBSCAN",
      "FeatureAgglomeration",
      "HDBSCAN",
      "KMeans",
      "MeanShift",
      "MiniBatchKMeans",
      "OPTICS",
      "SpectralBiclustering",
      "SpectralClustering",
      "SpectralCoclustering"
    ]
  },
  "sklearn.neighbors": {
    "description": "The k-nearest neighbors algorithms.",
    "functions": [
      "BallTree",
      "KDTree",
      "KNeighborsClassifier",
      "KNeighborsRegressor",
      "KNeighborsTransformer",
      "KernelDensity",
      "LocalOutlierFactor",
      "NearestCentroid",
      "NearestNeighbors",
      "NeighborhoodComponentsAnalysis",
      "RadiusNeighborsClassifier",
      "RadiusNeighborsRegressor",
      "RadiusNeighborsTransformer",
      "kneighbors_graph",
      "radius_neighbors_graph",
      "sort_graph_by_row_values"
    ],
    "classes": [
      "BallTree",
      "KDTree",
      "KNeighborsClassifier",
      "KNeighborsRegressor",
      "KNeighborsTransformer",
      "KernelDensity",
      "LocalOutlierFactor",
      "NearestCentroid",
      "NearestNeighbors",
      "NeighborhoodComponentsAnalysis",
      "RadiusNeighborsClassifier",
      "RadiusNeighborsRegressor",
      "RadiusNeighborsTransformer"
    ]
  },
  "sklearn.naive_bayes": {
    "description": "Naive Bayes algorithms.\n\nThese are supervised learning methods based on applying Bayes' theorem with strong\n(naive) feature independence assumptions.",
    "functions": [
      "ABCMeta",
      "BaseEstimator",
      "BernoulliNB",
      "CategoricalNB",
      "ClassifierMixin",
      "ComplementNB",
      "GaussianNB",
      "Integral",
      "Interval",
      "LabelBinarizer",
      "MultinomialNB",
      "Real",
      "abstractmethod",
      "binarize",
      "check_is_fitted",
      "check_non_negative",
      "label_binarize",
      "logsumexp",
      "safe_sparse_dot",
      "validate_data"
    ],
    "classes": [
      "ABCMeta",
      "BaseEstimator",
      "BernoulliNB",
      "CategoricalNB",
      "ClassifierMixin",
      "ComplementNB",
      "GaussianNB",
      "Integral",
      "Interval",
      "LabelBinarizer",
      "MultinomialNB",
      "Real"
    ]
  },
  "sklearn.svm": {
    "description": "Support vector machine algorithms.",
    "functions": [
      "LinearSVC",
      "LinearSVR",
      "NuSVC",
      "NuSVR",
      "OneClassSVM",
      "SVC",
      "SVR",
      "l1_min_c"
    ],
    "classes": [
      "LinearSVC",
      "LinearSVR",
      "NuSVC",
      "NuSVR",
      "OneClassSVM",
      "SVC",
      "SVR"
    ]
  },
  "sklearn.preprocessing": {
    "description": "Methods for scaling, centering, normalization, binarization, and more.",
    "functions": [
      "Binarizer",
      "FunctionTransformer",
      "KBinsDiscretizer",
      "KernelCenterer",
      "LabelBinarizer",
      "LabelEncoder",
      "MaxAbsScaler",
      "MinMaxScaler",
      "MultiLabelBinarizer",
      "Normalizer",
      "OneHotEncoder",
      "OrdinalEncoder",
      "PolynomialFeatures",
      "PowerTransformer",
      "QuantileTransformer",
      "RobustScaler",
      "SplineTransformer",
      "StandardScaler",
      "TargetEncoder",
      "add_dummy_feature",
      "binarize",
      "label_binarize",
      "maxabs_scale",
      "minmax_scale",
      "normalize",
      "power_transform",
      "quantile_transform",
      "robust_scale",
      "scale"
    ],
    "classes": [
      "Binarizer",
      "FunctionTransformer",
      "KBinsDiscretizer",
      "KernelCenterer",
      "LabelBinarizer",
      "LabelEncoder",
      "MaxAbsScaler",
      "MinMaxScaler",
      "MultiLabelBinarizer",
      "Normalizer",
      "OneHotEncoder",
      "OrdinalEncoder",
      "PolynomialFeatures",
      "PowerTransformer",
      "QuantileTransformer",
      "RobustScaler",
      "SplineTransformer",
      "StandardScaler",
      "TargetEncoder"
    ]
  }
}