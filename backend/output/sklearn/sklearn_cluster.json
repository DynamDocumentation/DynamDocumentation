{
  "description": "Popular unsupervised clustering algorithms.",
  "functions": [
    {
      "name": "AffinityPropagation",
      "signature": "AffinityPropagation(*, damping=0.5, max_iter=200, convergence_iter=15, copy=True, preference=None, affinity='euclidean', verbose=False, random_state=None)",
      "docstring": {
        "description": "Perform Affinity Propagation Clustering of data.\n\nRead more in the :ref:`User Guide <affinity_propagation>`.",
        "parameters": {
          "damping": {
            "type": "float, default=0.5",
            "description": "Damping factor in the range `[0.5, 1.0)` is the extent to\n    which the current value is maintained relative to\n    incoming values (weighted 1 - damping). This in order\n    to avoid numerical oscillations when updating these\n    values (messages)."
          },
          "max_iter": {
            "type": "int, default=200",
            "description": "Maximum number of iterations."
          },
          "convergence_iter": {
            "type": "int, default=15",
            "description": "Number of iterations with no change in the number\n    of estimated clusters that stops the convergence."
          },
          "copy": {
            "type": "bool, default=True",
            "description": "Make a copy of input data."
          },
          "preference": {
            "type": "array-like of shape (n_samples,) or float, default=None",
            "description": "Preferences for each point - points with larger values of\n    preferences are more likely to be chosen as exemplars. The number\n    of exemplars, ie of clusters, is influenced by the input\n    preferences value. If the preferences are not passed as arguments,\n    they will be set to the median of the input similarities."
          },
          "affinity": {
            "type": "{'euclidean', 'precomputed'}, default='euclidean'",
            "description": "Which affinity to use. At the moment 'precomputed' and\n    ``euclidean`` are supported. 'euclidean' uses the\n    negative squared euclidean distance between points."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Whether to be verbose."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Pseudo-random number generator to control the starting state.\n    Use an int for reproducible results across function calls.\n    See the :term:`Glossary <random_state>`.\n\n    .. versionadded:: 0.23\n        this parameter was previously hardcoded as 0.\n\nAttributes\n----------"
          },
          "cluster_centers_indices_": {
            "type": "ndarray of shape (n_clusters,)",
            "description": "Indices of cluster centers."
          },
          "cluster_centers_": {
            "type": "ndarray of shape (n_clusters, n_features)",
            "description": "Cluster centers (if affinity != ``precomputed``)."
          },
          "labels_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Labels of each point."
          },
          "affinity_matrix_": {
            "type": "ndarray of shape (n_samples, n_samples)",
            "description": "Stores the affinity matrix used in ``fit``."
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations taken to converge."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "AgglomerativeClustering : Recursively merges the pair of\n    clusters that minimally increases a given linkage distance.\nFeatureAgglomeration : Similar to AgglomerativeClustering,\n    but recursively merges features instead of samples.\nKMeans : K-Means clustering.\nMiniBatchKMeans : Mini-Batch K-Means clustering.\nMeanShift : Mean shift clustering using a flat kernel.\nSpectralClustering : Apply clustering to a projection\n    of the normalized Laplacian.",
        "notes": "For an example usage,\nsee :ref:`sphx_glr_auto_examples_cluster_plot_affinity_propagation.py`.\n\nThe algorithmic complexity of affinity propagation is quadratic\nin the number of points.\n\nWhen the algorithm does not converge, it will still return a arrays of\n``cluster_center_indices`` and labels if there are any exemplars/clusters,\nhowever they may be degenerate and should be used with caution.\n\nWhen ``fit`` does not converge, ``cluster_centers_`` is still populated\nhowever it may be degenerate. In such a case, proceed with caution.\nIf ``fit`` does not converge and fails to produce any ``cluster_centers_``\nthen ``predict`` will label every sample as ``-1``.\n\nWhen all training samples have equal similarities and equal preferences,\nthe assignment of cluster centers and labels depends on the preference.\nIf the preference is smaller than the similarities, ``fit`` will result in\na single cluster center and label ``0`` for every sample. Otherwise, every\ntraining sample becomes its own cluster center and is assigned a unique\nlabel.\n\nReferences\n----------\n\nBrendan J. Frey and Delbert Dueck, \"Clustering by Passing Messages\nBetween Data Points\", Science Feb. 2007",
        "examples": ">>> from sklearn.cluster import AffinityPropagation\n>>> import numpy as np\n>>> X = np.array([[1, 2], [1, 4], [1, 0],\n...               [4, 2], [4, 4], [4, 0]])\n>>> clustering = AffinityPropagation(random_state=5).fit(X)\n>>> clustering\nAffinityPropagation(random_state=5)\n>>> clustering.labels_\narray([0, 0, 0, 1, 1, 1])\n>>> clustering.predict([[0, 0], [4, 4]])\narray([0, 1])\n>>> clustering.cluster_centers_\narray([[1, 2],\n       [4, 2]])"
      }
    },
    {
      "name": "AgglomerativeClustering",
      "signature": "AgglomerativeClustering(n_clusters=2, *, metric='euclidean', memory=None, connectivity=None, compute_full_tree='auto', linkage='ward', distance_threshold=None, compute_distances=False)",
      "docstring": {
        "description": "Agglomerative Clustering.\n\nRecursively merges pair of clusters of sample data; uses linkage distance.\n\nRead more in the :ref:`User Guide <hierarchical_clustering>`.",
        "parameters": {
          "n_clusters": {
            "type": "int or None, default=2",
            "description": "The number of clusters to find. It must be ``None`` if\n    ``distance_threshold`` is not ``None``."
          },
          "metric": {
            "type": "str or callable, default=\"euclidean\"",
            "description": "Metric used to compute the linkage. Can be \"euclidean\", \"l1\", \"l2\",\n    \"manhattan\", \"cosine\", or \"precomputed\". If linkage is \"ward\", only\n    \"euclidean\" is accepted. If \"precomputed\", a distance matrix is needed\n    as input for the fit method. If connectivity is None, linkage is\n    \"single\" and affinity is not \"precomputed\" any valid pairwise distance\n    metric can be assigned.\n\n    .. versionadded:: 1.2"
          },
          "memory": {
            "type": "str or object with the joblib.Memory interface, default=None",
            "description": "Used to cache the output of the computation of the tree.\n    By default, no caching is done. If a string is given, it is the\n    path to the caching directory."
          },
          "connectivity": {
            "type": "array-like, sparse matrix, or callable, default=None",
            "description": "Connectivity matrix. Defines for each sample the neighboring\n    samples following a given structure of the data.\n    This can be a connectivity matrix itself or a callable that transforms\n    the data into a connectivity matrix, such as derived from\n    `kneighbors_graph`. Default is ``None``, i.e, the\n    hierarchical clustering algorithm is unstructured.\n\n    For an example of connectivity matrix using\n    :class:`~sklearn.neighbors.kneighbors_graph`, see\n    :ref:`sphx_glr_auto_examples_cluster_plot_agglomerative_clustering.py`."
          },
          "compute_full_tree": {
            "type": "'auto' or bool, default='auto'",
            "description": "Stop early the construction of the tree at ``n_clusters``. This is\n    useful to decrease computation time if the number of clusters is not\n    small compared to the number of samples. This option is useful only\n    when specifying a connectivity matrix. Note also that when varying the\n    number of clusters and using caching, it may be advantageous to compute\n    the full tree. It must be ``True`` if ``distance_threshold`` is not\n    ``None``. By default `compute_full_tree` is \"auto\", which is equivalent\n    to `True` when `distance_threshold` is not `None` or that `n_clusters`\n    is inferior to the maximum between 100 or `0.02 * n_samples`.\n    Otherwise, \"auto\" is equivalent to `False`."
          },
          "linkage": {
            "type": "{'ward', 'complete', 'average', 'single'}, default='ward'",
            "description": "Which linkage criterion to use. The linkage criterion determines which\n    distance to use between sets of observation. The algorithm will merge\n    the pairs of cluster that minimize this criterion.\n\n    - 'ward' minimizes the variance of the clusters being merged.\n    - 'average' uses the average of the distances of each observation of\n      the two sets.\n    - 'complete' or 'maximum' linkage uses the maximum distances between\n      all observations of the two sets.\n    - 'single' uses the minimum of the distances between all observations\n      of the two sets.\n\n    .. versionadded:: 0.20\n        Added the 'single' option\n\n    For examples comparing different `linkage` criteria, see\n    :ref:`sphx_glr_auto_examples_cluster_plot_linkage_comparison.py`."
          },
          "distance_threshold": {
            "type": "float, default=None",
            "description": "The linkage distance threshold at or above which clusters will not be\n    merged. If not ``None``, ``n_clusters`` must be ``None`` and\n    ``compute_full_tree`` must be ``True``.\n\n    .. versionadded:: 0.21"
          },
          "compute_distances": {
            "type": "bool, default=False",
            "description": "Computes distances between clusters even if `distance_threshold` is not\n    used. This can be used to make dendrogram visualization, but introduces\n    a computational and memory overhead.\n\n    .. versionadded:: 0.24\n\n    For an example of dendrogram visualization, see\n    :ref:`sphx_glr_auto_examples_cluster_plot_agglomerative_dendrogram.py`.\n\nAttributes\n----------"
          },
          "n_clusters_": {
            "type": "int",
            "description": "The number of clusters found by the algorithm. If\n    ``distance_threshold=None``, it will be equal to the given\n    ``n_clusters``."
          },
          "labels_": {
            "type": "ndarray of shape (n_samples)",
            "description": "Cluster labels for each point."
          },
          "n_leaves_": {
            "type": "int",
            "description": "Number of leaves in the hierarchical tree."
          },
          "n_connected_components_": {
            "type": "int",
            "description": "The estimated number of connected components in the graph.\n\n    .. versionadded:: 0.21\n        ``n_connected_components_`` was added to replace ``n_components_``."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "children_": {
            "type": "array-like of shape (n_samples-1, 2)",
            "description": "The children of each non-leaf node. Values less than `n_samples`\n    correspond to leaves of the tree which are the original samples.\n    A node `i` greater than or equal to `n_samples` is a non-leaf\n    node and has children `children_[i - n_samples]`. Alternatively\n    at the i-th iteration, children[i][0] and children[i][1]\n    are merged to form node `n_samples + i`."
          },
          "distances_": {
            "type": "array-like of shape (n_nodes-1,)",
            "description": "Distances between nodes in the corresponding place in `children_`.\n    Only computed if `distance_threshold` is used or `compute_distances`\n    is set to `True`."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "FeatureAgglomeration : Agglomerative clustering but for features instead of\n    samples.\nward_tree : Hierarchical clustering with ward linkage.",
        "notes": "",
        "examples": ">>> from sklearn.cluster import AgglomerativeClustering\n>>> import numpy as np\n>>> X = np.array([[1, 2], [1, 4], [1, 0],\n...               [4, 2], [4, 4], [4, 0]])\n>>> clustering = AgglomerativeClustering().fit(X)\n>>> clustering\nAgglomerativeClustering()\n>>> clustering.labels_\narray([1, 1, 1, 0, 0, 0])"
      }
    },
    {
      "name": "Birch",
      "signature": "Birch(*, threshold=0.5, branching_factor=50, n_clusters=3, compute_labels=True, copy='deprecated')",
      "docstring": {
        "description": "Implements the BIRCH clustering algorithm.\n\nIt is a memory-efficient, online-learning algorithm provided as an\nalternative to :class:`MiniBatchKMeans`. It constructs a tree\ndata structure with the cluster centroids being read off the leaf.\nThese can be either the final cluster centroids or can be provided as input\nto another clustering algorithm such as :class:`AgglomerativeClustering`.\n\nRead more in the :ref:`User Guide <birch>`.\n\n.. versionadded:: 0.16",
        "parameters": {
          "threshold": {
            "type": "float, default=0.5",
            "description": "The radius of the subcluster obtained by merging a new sample and the\n    closest subcluster should be lesser than the threshold. Otherwise a new\n    subcluster is started. Setting this value to be very low promotes\n    splitting and vice-versa."
          },
          "branching_factor": {
            "type": "int, default=50",
            "description": "Maximum number of CF subclusters in each node. If a new samples enters\n    such that the number of subclusters exceed the branching_factor then\n    that node is split into two nodes with the subclusters redistributed\n    in each. The parent subcluster of that node is removed and two new\n    subclusters are added as parents of the 2 split nodes."
          },
          "n_clusters": {
            "type": "int, instance of sklearn.cluster model or None, default=3",
            "description": "Number of clusters after the final clustering step, which treats the\n    subclusters from the leaves as new samples.\n\n    - `None` : the final clustering step is not performed and the\n      subclusters are returned as they are.\n\n    - :mod:`sklearn.cluster` Estimator : If a model is provided, the model\n      is fit treating the subclusters as new samples and the initial data\n      is mapped to the label of the closest subcluster.\n\n    - `int` : the model fit is :class:`AgglomerativeClustering` with\n      `n_clusters` set to be equal to the int."
          },
          "compute_labels": {
            "type": "bool, default=True",
            "description": "Whether or not to compute labels for each fit."
          },
          "copy": {
            "type": "bool, default=True",
            "description": "Whether or not to make a copy of the given data. If set to False,\n    the initial data will be overwritten.\n\n    .. deprecated:: 1.6\n        `copy` was deprecated in 1.6 and will be removed in 1.8. It has no effect\n        as the estimator does not perform in-place operations on the input data.\n\nAttributes\n----------"
          },
          "root_": {
            "type": "_CFNode",
            "description": "Root of the CFTree."
          },
          "dummy_leaf_": {
            "type": "_CFNode",
            "description": "Start pointer to all the leaves."
          },
          "subcluster_centers_": {
            "type": "ndarray",
            "description": "Centroids of all subclusters read directly from the leaves."
          },
          "subcluster_labels_": {
            "type": "ndarray",
            "description": "Labels assigned to the centroids of the subclusters after\n    they are clustered globally."
          },
          "labels_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Array of labels assigned to the input data.\n    if partial_fit is used instead of fit, they are assigned to the\n    last batch of data."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "MiniBatchKMeans : Alternative implementation that does incremental updates\n    of the centers' positions using mini-batches.",
        "notes": "The tree data structure consists of nodes with each node consisting of\na number of subclusters. The maximum number of subclusters in a node\nis determined by the branching factor. Each subcluster maintains a\nlinear sum, squared sum and the number of samples in that subcluster.\nIn addition, each subcluster can also have a node as its child, if the\nsubcluster is not a member of a leaf node.\n\nFor a new point entering the root, it is merged with the subcluster closest\nto it and the linear sum, squared sum and the number of samples of that\nsubcluster are updated. This is done recursively till the properties of\nthe leaf node are updated.\n\nSee :ref:`sphx_glr_auto_examples_cluster_plot_birch_vs_minibatchkmeans.py` for a\ncomparison with :class:`~sklearn.cluster.MiniBatchKMeans`.\n\nReferences\n----------\n* Tian Zhang, Raghu Ramakrishnan, Maron Livny\n  BIRCH: An efficient data clustering method for large databases.\n  https://www.cs.sfu.ca/CourseCentral/459/han/papers/zhang96.pdf\n\n* Roberto Perdisci\n  JBirch - Java implementation of BIRCH clustering algorithm\n  https://code.google.com/archive/p/jbirch",
        "examples": ">>> from sklearn.cluster import Birch\n>>> X = [[0, 1], [0.3, 1], [-0.3, 1], [0, -1], [0.3, -1], [-0.3, -1]]\n>>> brc = Birch(n_clusters=None)\n>>> brc.fit(X)\nBirch(n_clusters=None)\n>>> brc.predict(X)\narray([0, 0, 0, 1, 1, 1])"
      }
    },
    {
      "name": "BisectingKMeans",
      "signature": "BisectingKMeans(n_clusters=8, *, init='random', n_init=1, random_state=None, max_iter=300, verbose=0, tol=0.0001, copy_x=True, algorithm='lloyd', bisecting_strategy='biggest_inertia')",
      "docstring": {
        "description": "Bisecting K-Means clustering.\n\nRead more in the :ref:`User Guide <bisect_k_means>`.\n\n.. versionadded:: 1.1",
        "parameters": {
          "n_clusters": {
            "type": "int, default=8",
            "description": "The number of clusters to form as well as the number of\n    centroids to generate."
          },
          "init": {
            "type": "{'k-means++', 'random'} or callable, default='random'",
            "description": "Method for initialization:\n\n    'k-means++' : selects initial cluster centers for k-mean\n    clustering in a smart way to speed up convergence. See section\n    Notes in k_init for more details.\n\n    'random': choose `n_clusters` observations (rows) at random from data\n    for the initial centroids.\n\n    If a callable is passed, it should take arguments X, n_clusters and a\n    random state and return an initialization."
          },
          "n_init": {
            "type": "int, default=1",
            "description": "Number of time the inner k-means algorithm will be run with different\n    centroid seeds in each bisection.\n    That will result producing for each bisection best output of n_init\n    consecutive runs in terms of inertia."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Determines random number generation for centroid initialization\n    in inner K-Means. Use an int to make the randomness deterministic.\n    See :term:`Glossary <random_state>`."
          },
          "max_iter": {
            "type": "int, default=300",
            "description": "Maximum number of iterations of the inner k-means algorithm at each\n    bisection."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "Verbosity mode."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "Relative tolerance with regards to Frobenius norm of the difference\n    in the cluster centers of two consecutive iterations  to declare\n    convergence. Used in inner k-means algorithm at each bisection to pick\n    best possible clusters."
          },
          "copy_x": {
            "type": "bool, default=True",
            "description": "When pre-computing distances it is more numerically accurate to center\n    the data first. If copy_x is True (default), then the original data is\n    not modified. If False, the original data is modified, and put back\n    before the function returns, but small numerical differences may be\n    introduced by subtracting and then adding the data mean. Note that if\n    the original data is not C-contiguous, a copy will be made even if\n    copy_x is False. If the original data is sparse, but not in CSR format,\n    a copy will be made even if copy_x is False."
          },
          "algorithm": {
            "type": "{\"lloyd\", \"elkan\"}, default=\"lloyd\"",
            "description": "Inner K-means algorithm used in bisection.\n    The classical EM-style algorithm is `\"lloyd\"`.\n    The `\"elkan\"` variation can be more efficient on some datasets with\n    well-defined clusters, by using the triangle inequality. However it's\n    more memory intensive due to the allocation of an extra array of shape\n    `(n_samples, n_clusters)`."
          },
          "bisecting_strategy": {
            "type": "{\"biggest_inertia\", \"largest_cluster\"},            default=\"biggest_inertia\"",
            "description": "Defines how bisection should be performed:\n\n    - \"biggest_inertia\" means that BisectingKMeans will always check\n      all calculated cluster for cluster with biggest SSE\n      (Sum of squared errors) and bisect it. This approach concentrates on\n      precision, but may be costly in terms of execution time (especially for\n      larger amount of data points).\n\n    - \"largest_cluster\" - BisectingKMeans will always split cluster with\n      largest amount of points assigned to it from all clusters\n      previously calculated. That should work faster than picking by SSE\n      ('biggest_inertia') and may produce similar results in most cases.\n\nAttributes\n----------"
          },
          "cluster_centers_": {
            "type": "ndarray of shape (n_clusters, n_features)",
            "description": "Coordinates of cluster centers. If the algorithm stops before fully\n    converging (see ``tol`` and ``max_iter``), these will not be\n    consistent with ``labels_``."
          },
          "labels_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Labels of each point."
          },
          "inertia_": {
            "type": "float",
            "description": "Sum of squared distances of samples to their closest cluster center,\n    weighted by the sample weights if provided."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`."
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "KMeans : Original implementation of K-Means algorithm.",
        "notes": "It might be inefficient when n_cluster is less than 3, due to unnecessary\ncalculations for that case.",
        "examples": ">>> from sklearn.cluster import BisectingKMeans\n>>> import numpy as np\n>>> X = np.array([[1, 1], [10, 1], [3, 1],\n...               [10, 0], [2, 1], [10, 2],\n...               [10, 8], [10, 9], [10, 10]])\n>>> bisect_means = BisectingKMeans(n_clusters=3, random_state=0).fit(X)\n>>> bisect_means.labels_\narray([0, 2, 0, 2, 0, 2, 1, 1, 1], dtype=int32)\n>>> bisect_means.predict([[0, 0], [12, 3]])\narray([0, 2], dtype=int32)\n>>> bisect_means.cluster_centers_\narray([[ 2., 1.],\n       [10., 9.],\n       [10., 1.]])\n\nFor a comparison between BisectingKMeans and K-Means refer to example\n:ref:`sphx_glr_auto_examples_cluster_plot_bisect_kmeans.py`."
      }
    },
    {
      "name": "DBSCAN",
      "signature": "DBSCAN(eps=0.5, *, min_samples=5, metric='euclidean', metric_params=None, algorithm='auto', leaf_size=30, p=None, n_jobs=None)",
      "docstring": {
        "description": "Perform DBSCAN clustering from vector array or distance matrix.\n\nDBSCAN - Density-Based Spatial Clustering of Applications with Noise.\nFinds core samples of high density and expands clusters from them.\nGood for data which contains clusters of similar density.\n\nThis implementation has a worst case memory complexity of :math:`O({n}^2)`,\nwhich can occur when the `eps` param is large and `min_samples` is low,\nwhile the original DBSCAN only uses linear memory.\nFor further details, see the Notes below.\n\nRead more in the :ref:`User Guide <dbscan>`.",
        "parameters": {
          "eps": {
            "type": "float, default=0.5",
            "description": "The maximum distance between two samples for one to be considered\n    as in the neighborhood of the other. This is not a maximum bound\n    on the distances of points within a cluster. This is the most\n    important DBSCAN parameter to choose appropriately for your data set\n    and distance function."
          },
          "min_samples": {
            "type": "int, default=5",
            "description": "The number of samples (or total weight) in a neighborhood for a point to\n    be considered as a core point. This includes the point itself. If\n    `min_samples` is set to a higher value, DBSCAN will find denser clusters,\n    whereas if it is set to a lower value, the found clusters will be more\n    sparse."
          },
          "metric": {
            "type": "str, or callable, default='euclidean'",
            "description": "The metric to use when calculating distance between instances in a\n    feature array. If metric is a string or callable, it must be one of\n    the options allowed by :func:`sklearn.metrics.pairwise_distances` for\n    its metric parameter.\n    If metric is \"precomputed\", X is assumed to be a distance matrix and\n    must be square. X may be a :term:`sparse graph`, in which\n    case only \"nonzero\" elements may be considered neighbors for DBSCAN.\n\n    .. versionadded:: 0.17\n       metric *precomputed* to accept precomputed sparse matrix."
          },
          "metric_params": {
            "type": "dict, default=None",
            "description": "Additional keyword arguments for the metric function.\n\n    .. versionadded:: 0.19"
          },
          "algorithm": {
            "type": "{'auto', 'ball_tree', 'kd_tree', 'brute'}, default='auto'",
            "description": "The algorithm to be used by the NearestNeighbors module\n    to compute pointwise distances and find nearest neighbors.\n    See NearestNeighbors module documentation for details."
          },
          "leaf_size": {
            "type": "int, default=30",
            "description": "Leaf size passed to BallTree or cKDTree. This can affect the speed\n    of the construction and query, as well as the memory required\n    to store the tree. The optimal value depends\n    on the nature of the problem."
          },
          "p": {
            "type": "float, default=None",
            "description": "The power of the Minkowski metric to be used to calculate distance\n    between points. If None, then ``p=2`` (equivalent to the Euclidean\n    distance)."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "The number of parallel jobs to run.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details.\n\nAttributes\n----------"
          },
          "core_sample_indices_": {
            "type": "ndarray of shape (n_core_samples,)",
            "description": "Indices of core samples."
          },
          "components_": {
            "type": "ndarray of shape (n_core_samples, n_features)",
            "description": "Copy of each core sample found by training."
          },
          "labels_": {
            "type": "ndarray of shape (n_samples)",
            "description": "Cluster labels for each point in the dataset given to fit().\n    Noisy samples are given the label -1."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "OPTICS : A similar clustering at multiple values of eps. Our implementation\n    is optimized for memory usage.",
        "notes": "For an example, see\n:ref:`sphx_glr_auto_examples_cluster_plot_dbscan.py`.\n\nThis implementation bulk-computes all neighborhood queries, which increases\nthe memory complexity to O(n.d) where d is the average number of neighbors,\nwhile original DBSCAN had memory complexity O(n). It may attract a higher\nmemory complexity when querying these nearest neighborhoods, depending\non the ``algorithm``.\n\nOne way to avoid the query complexity is to pre-compute sparse\nneighborhoods in chunks using\n:func:`NearestNeighbors.radius_neighbors_graph\n<sklearn.neighbors.NearestNeighbors.radius_neighbors_graph>` with\n``mode='distance'``, then using ``metric='precomputed'`` here.\n\nAnother way to reduce memory and computation time is to remove\n(near-)duplicate points and use ``sample_weight`` instead.\n\n:class:`~sklearn.cluster.OPTICS` provides a similar clustering with lower memory\nusage.\n\nReferences\n----------\nEster, M., H. P. Kriegel, J. Sander, and X. Xu, `\"A Density-Based\nAlgorithm for Discovering Clusters in Large Spatial Databases with Noise\"\n<https://www.dbs.ifi.lmu.de/Publikationen/Papers/KDD-96.final.frame.pdf>`_.\nIn: Proceedings of the 2nd International Conference on Knowledge Discovery\nand Data Mining, Portland, OR, AAAI Press, pp. 226-231. 1996\n\nSchubert, E., Sander, J., Ester, M., Kriegel, H. P., & Xu, X. (2017).\n:doi:`\"DBSCAN revisited, revisited: why and how you should (still) use DBSCAN.\"\n<10.1145/3068335>`\nACM Transactions on Database Systems (TODS), 42(3), 19.",
        "examples": ">>> from sklearn.cluster import DBSCAN\n>>> import numpy as np\n>>> X = np.array([[1, 2], [2, 2], [2, 3],\n...               [8, 7], [8, 8], [25, 80]])\n>>> clustering = DBSCAN(eps=3, min_samples=2).fit(X)\n>>> clustering.labels_\narray([ 0,  0,  0,  1,  1, -1])\n>>> clustering\nDBSCAN(eps=3, min_samples=2)"
      }
    },
    {
      "name": "FeatureAgglomeration",
      "signature": "FeatureAgglomeration(n_clusters=2, *, metric='euclidean', memory=None, connectivity=None, compute_full_tree='auto', linkage='ward', pooling_func=<function mean at 0x7862a41a4d30>, distance_threshold=None, compute_distances=False)",
      "docstring": {
        "description": "Agglomerate features.\n\nRecursively merges pair of clusters of features.\n\nRefer to\n:ref:`sphx_glr_auto_examples_cluster_plot_feature_agglomeration_vs_univariate_selection.py`\nfor an example comparison of :class:`FeatureAgglomeration` strategy with a\nunivariate feature selection strategy (based on ANOVA).\n\nRead more in the :ref:`User Guide <hierarchical_clustering>`.",
        "parameters": {
          "n_clusters": {
            "type": "int or None, default=2",
            "description": "The number of clusters to find. It must be ``None`` if\n    ``distance_threshold`` is not ``None``."
          },
          "metric": {
            "type": "str or callable, default=\"euclidean\"",
            "description": "Metric used to compute the linkage. Can be \"euclidean\", \"l1\", \"l2\",\n    \"manhattan\", \"cosine\", or \"precomputed\". If linkage is \"ward\", only\n    \"euclidean\" is accepted. If \"precomputed\", a distance matrix is needed\n    as input for the fit method.\n\n    .. versionadded:: 1.2"
          },
          "memory": {
            "type": "str or object with the joblib.Memory interface, default=None",
            "description": "Used to cache the output of the computation of the tree.\n    By default, no caching is done. If a string is given, it is the\n    path to the caching directory."
          },
          "connectivity": {
            "type": "array-like, sparse matrix, or callable, default=None",
            "description": "Connectivity matrix. Defines for each feature the neighboring\n    features following a given structure of the data.\n    This can be a connectivity matrix itself or a callable that transforms\n    the data into a connectivity matrix, such as derived from\n    `kneighbors_graph`. Default is `None`, i.e, the\n    hierarchical clustering algorithm is unstructured."
          },
          "compute_full_tree": {
            "type": "'auto' or bool, default='auto'",
            "description": "Stop early the construction of the tree at `n_clusters`. This is useful\n    to decrease computation time if the number of clusters is not small\n    compared to the number of features. This option is useful only when\n    specifying a connectivity matrix. Note also that when varying the\n    number of clusters and using caching, it may be advantageous to compute\n    the full tree. It must be ``True`` if ``distance_threshold`` is not\n    ``None``. By default `compute_full_tree` is \"auto\", which is equivalent\n    to `True` when `distance_threshold` is not `None` or that `n_clusters`\n    is inferior to the maximum between 100 or `0.02 * n_samples`.\n    Otherwise, \"auto\" is equivalent to `False`."
          },
          "linkage": {
            "type": "{\"ward\", \"complete\", \"average\", \"single\"}, default=\"ward\"",
            "description": "Which linkage criterion to use. The linkage criterion determines which\n    distance to use between sets of features. The algorithm will merge\n    the pairs of cluster that minimize this criterion.\n\n    - \"ward\" minimizes the variance of the clusters being merged.\n    - \"complete\" or maximum linkage uses the maximum distances between\n      all features of the two sets.\n    - \"average\" uses the average of the distances of each feature of\n      the two sets.\n    - \"single\" uses the minimum of the distances between all features\n      of the two sets."
          },
          "pooling_func": {
            "type": "callable, default=np.mean",
            "description": "This combines the values of agglomerated features into a single\n    value, and should accept an array of shape [M, N] and the keyword\n    argument `axis=1`, and reduce it to an array of size [M]."
          },
          "distance_threshold": {
            "type": "float, default=None",
            "description": "The linkage distance threshold at or above which clusters will not be\n    merged. If not ``None``, ``n_clusters`` must be ``None`` and\n    ``compute_full_tree`` must be ``True``.\n\n    .. versionadded:: 0.21"
          },
          "compute_distances": {
            "type": "bool, default=False",
            "description": "Computes distances between clusters even if `distance_threshold` is not\n    used. This can be used to make dendrogram visualization, but introduces\n    a computational and memory overhead.\n\n    .. versionadded:: 0.24\n\nAttributes\n----------"
          },
          "n_clusters_": {
            "type": "int",
            "description": "The number of clusters found by the algorithm. If\n    ``distance_threshold=None``, it will be equal to the given\n    ``n_clusters``."
          },
          "labels_": {
            "type": "array-like of (n_features,)",
            "description": "Cluster labels for each feature."
          },
          "n_leaves_": {
            "type": "int",
            "description": "Number of leaves in the hierarchical tree."
          },
          "n_connected_components_": {
            "type": "int",
            "description": "The estimated number of connected components in the graph.\n\n    .. versionadded:: 0.21\n        ``n_connected_components_`` was added to replace ``n_components_``."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "children_": {
            "type": "array-like of shape (n_nodes-1, 2)",
            "description": "The children of each non-leaf node. Values less than `n_features`\n    correspond to leaves of the tree which are the original samples.\n    A node `i` greater than or equal to `n_features` is a non-leaf\n    node and has children `children_[i - n_features]`. Alternatively\n    at the i-th iteration, children[i][0] and children[i][1]\n    are merged to form node `n_features + i`."
          },
          "distances_": {
            "type": "array-like of shape (n_nodes-1,)",
            "description": "Distances between nodes in the corresponding place in `children_`.\n    Only computed if `distance_threshold` is used or `compute_distances`\n    is set to `True`."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "AgglomerativeClustering : Agglomerative clustering samples instead of\n    features.\nward_tree : Hierarchical clustering with ward linkage.",
        "notes": "",
        "examples": ">>> import numpy as np\n>>> from sklearn import datasets, cluster\n>>> digits = datasets.load_digits()\n>>> images = digits.images\n>>> X = np.reshape(images, (len(images), -1))\n>>> agglo = cluster.FeatureAgglomeration(n_clusters=32)\n>>> agglo.fit(X)\nFeatureAgglomeration(n_clusters=32)\n>>> X_reduced = agglo.transform(X)\n>>> X_reduced.shape\n(1797, 32)"
      }
    },
    {
      "name": "HDBSCAN",
      "signature": "HDBSCAN(min_cluster_size=5, min_samples=None, cluster_selection_epsilon=0.0, max_cluster_size=None, metric='euclidean', metric_params=None, alpha=1.0, algorithm='auto', leaf_size=40, n_jobs=None, cluster_selection_method='eom', allow_single_cluster=False, store_centers=None, copy=False)",
      "docstring": {
        "description": "Cluster data using hierarchical density-based clustering.\n\nHDBSCAN - Hierarchical Density-Based Spatial Clustering of Applications\nwith Noise. Performs :class:`~sklearn.cluster.DBSCAN` over varying epsilon\nvalues and integrates the result to find a clustering that gives the best\nstability over epsilon.\nThis allows HDBSCAN to find clusters of varying densities (unlike\n:class:`~sklearn.cluster.DBSCAN`), and be more robust to parameter selection.\nRead more in the :ref:`User Guide <hdbscan>`.\n\nFor an example of how to use HDBSCAN, as well as a comparison to\n:class:`~sklearn.cluster.DBSCAN`, please see the :ref:`plotting demo\n<sphx_glr_auto_examples_cluster_plot_hdbscan.py>`.\n\n.. versionadded:: 1.3",
        "parameters": {
          "min_cluster_size": {
            "type": "int, default=5",
            "description": "The minimum number of samples in a group for that group to be\n    considered a cluster; groupings smaller than this size will be left\n    as noise."
          },
          "min_samples": {
            "type": "int, default=None",
            "description": "The parameter `k` used to calculate the distance between a point\n    `x_p` and its k-th nearest neighbor.\n    When `None`, defaults to `min_cluster_size`."
          },
          "cluster_selection_epsilon": {
            "type": "float, default=0.0",
            "description": "A distance threshold. Clusters below this value will be merged.\n    See [5]_ for more information."
          },
          "max_cluster_size": {
            "type": "int, default=None",
            "description": "A limit to the size of clusters returned by the `\"eom\"` cluster\n    selection algorithm. There is no limit when `max_cluster_size=None`.\n    Has no effect if `cluster_selection_method=\"leaf\"`."
          },
          "metric": {
            "type": "str or callable, default='euclidean'",
            "description": "The metric to use when calculating distance between instances in a\n    feature array.\n\n    - If metric is a string or callable, it must be one of\n      the options allowed by :func:`~sklearn.metrics.pairwise_distances`\n      for its metric parameter.\n\n    - If metric is \"precomputed\", X is assumed to be a distance matrix and\n      must be square."
          },
          "metric_params": {
            "type": "dict, default=None",
            "description": "Arguments passed to the distance metric."
          },
          "alpha": {
            "type": "float, default=1.0",
            "description": "A distance scaling parameter as used in robust single linkage.\n    See [3]_ for more information."
          },
          "algorithm": {
            "type": "{\"auto\", \"brute\", \"kd_tree\", \"ball_tree\"}, default=\"auto\"",
            "description": "Exactly which algorithm to use for computing core distances; By default\n    this is set to `\"auto\"` which attempts to use a\n    :class:`~sklearn.neighbors.KDTree` tree if possible, otherwise it uses\n    a :class:`~sklearn.neighbors.BallTree` tree. Both `\"kd_tree\"` and\n    `\"ball_tree\"` algorithms use the\n    :class:`~sklearn.neighbors.NearestNeighbors` estimator.\n\n    If the `X` passed during `fit` is sparse or `metric` is invalid for\n    both :class:`~sklearn.neighbors.KDTree` and\n    :class:`~sklearn.neighbors.BallTree`, then it resolves to use the\n    `\"brute\"` algorithm."
          },
          "leaf_size": {
            "type": "int, default=40",
            "description": "Leaf size for trees responsible for fast nearest neighbour queries when\n    a KDTree or a BallTree are used as core-distance algorithms. A large\n    dataset size and small `leaf_size` may induce excessive memory usage.\n    If you are running out of memory consider increasing the `leaf_size`\n    parameter. Ignored for `algorithm=\"brute\"`."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "Number of jobs to run in parallel to calculate distances.\n    `None` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    `-1` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "cluster_selection_method": {
            "type": "{\"eom\", \"leaf\"}, default=\"eom\"",
            "description": "The method used to select clusters from the condensed tree. The\n    standard approach for HDBSCAN* is to use an Excess of Mass (`\"eom\"`)\n    algorithm to find the most persistent clusters. Alternatively you can\n    instead select the clusters at the leaves of the tree -- this provides\n    the most fine grained and homogeneous clusters."
          },
          "allow_single_cluster": {
            "type": "bool, default=False",
            "description": "By default HDBSCAN* will not produce a single cluster, setting this\n    to True will override this and allow single cluster results in\n    the case that you feel this is a valid result for your dataset."
          },
          "store_centers": {
            "type": "str, default=None",
            "description": "Which, if any, cluster centers to compute and store. The options are:\n\n    - `None` which does not compute nor store any centers.\n    - `\"centroid\"` which calculates the center by taking the weighted\n      average of their positions. Note that the algorithm uses the\n      euclidean metric and does not guarantee that the output will be\n      an observed data point.\n    - `\"medoid\"` which calculates the center by taking the point in the\n      fitted data which minimizes the distance to all other points in\n      the cluster. This is slower than \"centroid\" since it requires\n      computing additional pairwise distances between points of the\n      same cluster but guarantees the output is an observed data point.\n      The medoid is also well-defined for arbitrary metrics, and does not\n      depend on a euclidean metric.\n    - `\"both\"` which computes and stores both forms of centers."
          },
          "copy": {
            "type": "bool, default=False",
            "description": "If `copy=True` then any time an in-place modifications would be made\n    that would overwrite data passed to :term:`fit`, a copy will first be\n    made, guaranteeing that the original data will be unchanged.\n    Currently, it only applies when `metric=\"precomputed\"`, when passing\n    a dense array or a CSR sparse matrix and when `algorithm=\"brute\"`.\n\nAttributes\n----------"
          },
          "labels_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Cluster labels for each point in the dataset given to :term:`fit`.\n    Outliers are labeled as follows:\n\n    - Noisy samples are given the label -1.\n    - Samples with infinite elements (+/- np.inf) are given the label -2.\n    - Samples with missing data are given the label -3, even if they\n      also have infinite elements."
          },
          "probabilities_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "The strength with which each sample is a member of its assigned\n    cluster.\n\n    - Clustered samples have probabilities proportional to the degree that\n      they persist as part of the cluster.\n    - Noisy samples have probability zero.\n    - Samples with infinite elements (+/- np.inf) have probability 0.\n    - Samples with missing data have probability `np.nan`."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`."
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings."
          },
          "centroids_": {
            "type": "ndarray of shape (n_clusters, n_features)",
            "description": "A collection containing the centroid of each cluster calculated under\n    the standard euclidean metric. The centroids may fall \"outside\" their\n    respective clusters if the clusters themselves are non-convex.\n\n    Note that `n_clusters` only counts non-outlier clusters. That is to\n    say, the `-1, -2, -3` labels for the outlier clusters are excluded."
          },
          "medoids_": {
            "type": "ndarray of shape (n_clusters, n_features)",
            "description": "A collection containing the medoid of each cluster calculated under\n    the whichever metric was passed to the `metric` parameter. The\n    medoids are points in the original cluster which minimize the average\n    distance to all other points in that cluster under the chosen metric.\n    These can be thought of as the result of projecting the `metric`-based\n    centroid back onto the cluster.\n\n    Note that `n_clusters` only counts non-outlier clusters. That is to\n    say, the `-1, -2, -3` labels for the outlier clusters are excluded."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "DBSCAN : Density-Based Spatial Clustering of Applications\n    with Noise.\nOPTICS : Ordering Points To Identify the Clustering Structure.\nBirch : Memory-efficient, online-learning algorithm.",
        "notes": "The `min_samples` parameter includes the point itself, whereas the implementation in\n`scikit-learn-contrib/hdbscan <https://github.com/scikit-learn-contrib/hdbscan>`_\ndoes not. To get the same results in both versions, the value of `min_samples` here\nmust be 1 greater than the value used in `scikit-learn-contrib/hdbscan\n<https://github.com/scikit-learn-contrib/hdbscan>`_.\n\nReferences\n----------\n\n.. [1] :doi:`Campello, R. J., Moulavi, D., & Sander, J. Density-based clustering\n  based on hierarchical density estimates.\n  <10.1007/978-3-642-37456-2_14>`\n.. [2] :doi:`Campello, R. J., Moulavi, D., Zimek, A., & Sander, J.\n   Hierarchical density estimates for data clustering, visualization,\n   and outlier detection.<10.1145/2733381>`\n\n.. [3] `Chaudhuri, K., & Dasgupta, S. Rates of convergence for the\n   cluster tree.\n   <https://papers.nips.cc/paper/2010/hash/\n   b534ba68236ba543ae44b22bd110a1d6-Abstract.html>`_\n\n.. [4] `Moulavi, D., Jaskowiak, P.A., Campello, R.J., Zimek, A. and\n   Sander, J. Density-Based Clustering Validation.\n   <https://www.dbs.ifi.lmu.de/~zimek/publications/SDM2014/DBCV.pdf>`_\n\n.. [5] :arxiv:`Malzer, C., & Baum, M. \"A Hybrid Approach To Hierarchical\n   Density-based Cluster Selection.\"<1911.02282>`.",
        "examples": ">>> import numpy as np\n>>> from sklearn.cluster import HDBSCAN\n>>> from sklearn.datasets import load_digits\n>>> X, _ = load_digits(return_X_y=True)\n>>> hdb = HDBSCAN(min_cluster_size=20)\n>>> hdb.fit(X)\nHDBSCAN(min_cluster_size=20)\n>>> hdb.labels_.shape == (X.shape[0],)\nTrue\n>>> np.unique(hdb.labels_).tolist()\n[-1, 0, 1, 2, 3, 4, 5, 6, 7]"
      }
    },
    {
      "name": "KMeans",
      "signature": "KMeans(n_clusters=8, *, init='k-means++', n_init='auto', max_iter=300, tol=0.0001, verbose=0, random_state=None, copy_x=True, algorithm='lloyd')",
      "docstring": {
        "description": "K-Means clustering.\n\nRead more in the :ref:`User Guide <k_means>`.",
        "parameters": {
          "n_clusters": {
            "type": "int, default=8",
            "description": "The number of clusters to form as well as the number of\n    centroids to generate.\n\n    For an example of how to choose an optimal value for `n_clusters` refer to\n    :ref:`sphx_glr_auto_examples_cluster_plot_kmeans_silhouette_analysis.py`."
          },
          "init": {
            "type": "{'k-means++', 'random'}, callable or array-like of shape             (n_clusters, n_features), default='k-means++'",
            "description": "Method for initialization:\n\n    * 'k-means++' : selects initial cluster centroids using sampling             based on an empirical probability distribution of the points'             contribution to the overall inertia. This technique speeds up             convergence. The algorithm implemented is \"greedy k-means++\". It             differs from the vanilla k-means++ by making several trials at             each sampling step and choosing the best centroid among them.\n\n    * 'random': choose `n_clusters` observations (rows) at random from         data for the initial centroids.\n\n    * If an array is passed, it should be of shape (n_clusters, n_features)        and gives the initial centers.\n\n    * If a callable is passed, it should take arguments X, n_clusters and a        random state and return an initialization.\n\n    For an example of how to use the different `init` strategies, see\n    :ref:`sphx_glr_auto_examples_cluster_plot_kmeans_digits.py`.\n\n    For an evaluation of the impact of initialization, see the example\n    :ref:`sphx_glr_auto_examples_cluster_plot_kmeans_stability_low_dim_dense.py`."
          },
          "n_init": {
            "type": "'auto' or int, default='auto'",
            "description": "Number of times the k-means algorithm is run with different centroid\n    seeds. The final results is the best output of `n_init` consecutive runs\n    in terms of inertia. Several runs are recommended for sparse\n    high-dimensional problems (see :ref:`kmeans_sparse_high_dim`).\n\n    When `n_init='auto'`, the number of runs depends on the value of init:\n    10 if using `init='random'` or `init` is a callable;\n    1 if using `init='k-means++'` or `init` is an array-like.\n\n    .. versionadded:: 1.2\n       Added 'auto' option for `n_init`.\n\n    .. versionchanged:: 1.4\n       Default value for `n_init` changed to `'auto'`."
          },
          "max_iter": {
            "type": "int, default=300",
            "description": "Maximum number of iterations of the k-means algorithm for a\n    single run."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "Relative tolerance with regards to Frobenius norm of the difference\n    in the cluster centers of two consecutive iterations to declare\n    convergence."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "Verbosity mode."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Determines random number generation for centroid initialization. Use\n    an int to make the randomness deterministic.\n    See :term:`Glossary <random_state>`."
          },
          "copy_x": {
            "type": "bool, default=True",
            "description": "When pre-computing distances it is more numerically accurate to center\n    the data first. If copy_x is True (default), then the original data is\n    not modified. If False, the original data is modified, and put back\n    before the function returns, but small numerical differences may be\n    introduced by subtracting and then adding the data mean. Note that if\n    the original data is not C-contiguous, a copy will be made even if\n    copy_x is False. If the original data is sparse, but not in CSR format,\n    a copy will be made even if copy_x is False."
          },
          "algorithm": {
            "type": "{\"lloyd\", \"elkan\"}, default=\"lloyd\"",
            "description": "K-means algorithm to use. The classical EM-style algorithm is `\"lloyd\"`.\n    The `\"elkan\"` variation can be more efficient on some datasets with\n    well-defined clusters, by using the triangle inequality. However it's\n    more memory intensive due to the allocation of an extra array of shape\n    `(n_samples, n_clusters)`.\n\n    .. versionchanged:: 0.18\n        Added Elkan algorithm\n\n    .. versionchanged:: 1.1\n        Renamed \"full\" to \"lloyd\", and deprecated \"auto\" and \"full\".\n        Changed \"auto\" to use \"lloyd\" instead of \"elkan\".\n\nAttributes\n----------"
          },
          "cluster_centers_": {
            "type": "ndarray of shape (n_clusters, n_features)",
            "description": "Coordinates of cluster centers. If the algorithm stops before fully\n    converging (see ``tol`` and ``max_iter``), these will not be\n    consistent with ``labels_``."
          },
          "labels_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Labels of each point"
          },
          "inertia_": {
            "type": "float",
            "description": "Sum of squared distances of samples to their closest cluster center,\n    weighted by the sample weights if provided."
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations run."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "MiniBatchKMeans : Alternative online implementation that does incremental\n    updates of the centers positions using mini-batches.\n    For large scale learning (say n_samples > 10k) MiniBatchKMeans is\n    probably much faster than the default batch implementation.",
        "notes": "The k-means problem is solved using either Lloyd's or Elkan's algorithm.\n\nThe average complexity is given by O(k n T), where n is the number of\nsamples and T is the number of iteration.\n\nThe worst case complexity is given by O(n^(k+2/p)) with\nn = n_samples, p = n_features.\nRefer to :doi:`\"How slow is the k-means method?\" D. Arthur and S. Vassilvitskii -\nSoCG2006.<10.1145/1137856.1137880>` for more details.\n\nIn practice, the k-means algorithm is very fast (one of the fastest\nclustering algorithms available), but it falls in local minima. That's why\nit can be useful to restart it several times.\n\nIf the algorithm stops before fully converging (because of ``tol`` or\n``max_iter``), ``labels_`` and ``cluster_centers_`` will not be consistent,\ni.e. the ``cluster_centers_`` will not be the means of the points in each\ncluster. Also, the estimator will reassign ``labels_`` after the last\niteration to make ``labels_`` consistent with ``predict`` on the training\nset.",
        "examples": ">>> from sklearn.cluster import KMeans\n>>> import numpy as np\n>>> X = np.array([[1, 2], [1, 4], [1, 0],\n...               [10, 2], [10, 4], [10, 0]])\n>>> kmeans = KMeans(n_clusters=2, random_state=0, n_init=\"auto\").fit(X)\n>>> kmeans.labels_\narray([1, 1, 1, 0, 0, 0], dtype=int32)\n>>> kmeans.predict([[0, 0], [12, 3]])\narray([1, 0], dtype=int32)\n>>> kmeans.cluster_centers_\narray([[10.,  2.],\n       [ 1.,  2.]])\n\nFor examples of common problems with K-Means and how to address them see\n:ref:`sphx_glr_auto_examples_cluster_plot_kmeans_assumptions.py`.\n\nFor a demonstration of how K-Means can be used to cluster text documents see\n:ref:`sphx_glr_auto_examples_text_plot_document_clustering.py`.\n\nFor a comparison between K-Means and MiniBatchKMeans refer to example\n:ref:`sphx_glr_auto_examples_cluster_plot_mini_batch_kmeans.py`.\n\nFor a comparison between K-Means and BisectingKMeans refer to example\n:ref:`sphx_glr_auto_examples_cluster_plot_bisect_kmeans.py`."
      }
    },
    {
      "name": "MeanShift",
      "signature": "MeanShift(*, bandwidth=None, seeds=None, bin_seeding=False, min_bin_freq=1, cluster_all=True, n_jobs=None, max_iter=300)",
      "docstring": {
        "description": "Mean shift clustering using a flat kernel.\n\nMean shift clustering aims to discover \"blobs\" in a smooth density of\nsamples. It is a centroid-based algorithm, which works by updating\ncandidates for centroids to be the mean of the points within a given\nregion. These candidates are then filtered in a post-processing stage to\neliminate near-duplicates to form the final set of centroids.\n\nSeeding is performed using a binning technique for scalability.\n\nFor an example of how to use MeanShift clustering, refer to:\n:ref:`sphx_glr_auto_examples_cluster_plot_mean_shift.py`.\n\nRead more in the :ref:`User Guide <mean_shift>`.",
        "parameters": {
          "bandwidth": {
            "type": "float, default=None",
            "description": "Bandwidth used in the flat kernel.\n\n    If not given, the bandwidth is estimated using\n    sklearn.cluster.estimate_bandwidth; see the documentation for that\n    function for hints on scalability (see also the Notes, below)."
          },
          "seeds": {
            "type": "array-like of shape (n_samples, n_features), default=None",
            "description": "Seeds used to initialize kernels. If not set,\n    the seeds are calculated by clustering.get_bin_seeds\n    with bandwidth as the grid size and default values for\n    other parameters."
          },
          "bin_seeding": {
            "type": "bool, default=False",
            "description": "If true, initial kernel locations are not locations of all\n    points, but rather the location of the discretized version of\n    points, where points are binned onto a grid whose coarseness\n    corresponds to the bandwidth. Setting this option to True will speed\n    up the algorithm because fewer seeds will be initialized.\n    The default value is False.\n    Ignored if seeds argument is not None."
          },
          "min_bin_freq": {
            "type": "int, default=1",
            "description": "To speed up the algorithm, accept only those bins with at least\n   min_bin_freq points as seeds."
          },
          "cluster_all": {
            "type": "bool, default=True",
            "description": "If true, then all points are clustered, even those orphans that are\n    not within any kernel. Orphans are assigned to the nearest kernel.\n    If false, then orphans are given cluster label -1."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "The number of jobs to use for the computation. The following tasks benefit\n    from the parallelization:\n\n    - The search of nearest neighbors for bandwidth estimation and label\n      assignments. See the details in the docstring of the\n      ``NearestNeighbors`` class.\n    - Hill-climbing optimization for all seeds.\n\n    See :term:`Glossary <n_jobs>` for more details.\n\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "max_iter": {
            "type": "int, default=300",
            "description": "Maximum number of iterations, per seed point before the clustering\n    operation terminates (for that seed point), if has not converged yet.\n\n    .. versionadded:: 0.22\n\nAttributes\n----------"
          },
          "cluster_centers_": {
            "type": "ndarray of shape (n_clusters, n_features)",
            "description": "Coordinates of cluster centers."
          },
          "labels_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Labels of each point."
          },
          "n_iter_": {
            "type": "int",
            "description": "Maximum number of iterations performed on each seed.\n\n    .. versionadded:: 0.22"
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "KMeans : K-Means clustering.",
        "notes": "Scalability:\n\nBecause this implementation uses a flat kernel and\na Ball Tree to look up members of each kernel, the complexity will tend\ntowards O(T*n*log(n)) in lower dimensions, with n the number of samples\nand T the number of points. In higher dimensions the complexity will\ntend towards O(T*n^2).\n\nScalability can be boosted by using fewer seeds, for example by using\na higher value of min_bin_freq in the get_bin_seeds function.\n\nNote that the estimate_bandwidth function is much less scalable than the\nmean shift algorithm and will be the bottleneck if it is used.\n\nReferences\n----------\n\nDorin Comaniciu and Peter Meer, \"Mean Shift: A robust approach toward\nfeature space analysis\". IEEE Transactions on Pattern Analysis and\nMachine Intelligence. 2002. pp. 603-619.",
        "examples": ">>> from sklearn.cluster import MeanShift\n>>> import numpy as np\n>>> X = np.array([[1, 1], [2, 1], [1, 0],\n...               [4, 7], [3, 5], [3, 6]])\n>>> clustering = MeanShift(bandwidth=2).fit(X)\n>>> clustering.labels_\narray([1, 1, 1, 0, 0, 0])\n>>> clustering.predict([[0, 0], [5, 5]])\narray([1, 0])\n>>> clustering\nMeanShift(bandwidth=2)"
      }
    },
    {
      "name": "MiniBatchKMeans",
      "signature": "MiniBatchKMeans(n_clusters=8, *, init='k-means++', max_iter=100, batch_size=1024, verbose=0, compute_labels=True, random_state=None, tol=0.0, max_no_improvement=10, init_size=None, n_init='auto', reassignment_ratio=0.01)",
      "docstring": {
        "description": "Mini-Batch K-Means clustering.\n\nRead more in the :ref:`User Guide <mini_batch_kmeans>`.",
        "parameters": {
          "n_clusters": {
            "type": "int, default=8",
            "description": "The number of clusters to form as well as the number of\n    centroids to generate."
          },
          "init": {
            "type": "{'k-means++', 'random'}, callable or array-like of shape             (n_clusters, n_features), default='k-means++'",
            "description": "Method for initialization:\n\n    'k-means++' : selects initial cluster centroids using sampling based on\n    an empirical probability distribution of the points' contribution to the\n    overall inertia. This technique speeds up convergence. The algorithm\n    implemented is \"greedy k-means++\". It differs from the vanilla k-means++\n    by making several trials at each sampling step and choosing the best centroid\n    among them.\n\n    'random': choose `n_clusters` observations (rows) at random from data\n    for the initial centroids.\n\n    If an array is passed, it should be of shape (n_clusters, n_features)\n    and gives the initial centers.\n\n    If a callable is passed, it should take arguments X, n_clusters and a\n    random state and return an initialization.\n\n    For an evaluation of the impact of initialization, see the example\n    :ref:`sphx_glr_auto_examples_cluster_plot_kmeans_stability_low_dim_dense.py`."
          },
          "max_iter": {
            "type": "int, default=100",
            "description": "Maximum number of iterations over the complete dataset before\n    stopping independently of any early stopping criterion heuristics."
          },
          "batch_size": {
            "type": "int, default=1024",
            "description": "Size of the mini batches.\n    For faster computations, you can set the ``batch_size`` greater than\n    256 * number of cores to enable parallelism on all cores.\n\n    .. versionchanged:: 1.0\n       `batch_size` default changed from 100 to 1024."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "Verbosity mode."
          },
          "compute_labels": {
            "type": "bool, default=True",
            "description": "Compute label assignment and inertia for the complete dataset\n    once the minibatch optimization has converged in fit."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Determines random number generation for centroid initialization and\n    random reassignment. Use an int to make the randomness deterministic.\n    See :term:`Glossary <random_state>`."
          },
          "tol": {
            "type": "float, default=0.0",
            "description": "Control early stopping based on the relative center changes as\n    measured by a smoothed, variance-normalized of the mean center\n    squared position changes. This early stopping heuristics is\n    closer to the one used for the batch variant of the algorithms\n    but induces a slight computational and memory overhead over the\n    inertia heuristic.\n\n    To disable convergence detection based on normalized center\n    change, set tol to 0.0 (default)."
          },
          "max_no_improvement": {
            "type": "int, default=10",
            "description": "Control early stopping based on the consecutive number of mini\n    batches that does not yield an improvement on the smoothed inertia.\n\n    To disable convergence detection based on inertia, set\n    max_no_improvement to None."
          },
          "init_size": {
            "type": "int, default=None",
            "description": "Number of samples to randomly sample for speeding up the\n    initialization (sometimes at the expense of accuracy): the\n    only algorithm is initialized by running a batch KMeans on a\n    random subset of the data. This needs to be larger than n_clusters.\n\n    If `None`, the heuristic is `init_size = 3 * batch_size` if\n    `3 * batch_size < n_clusters`, else `init_size = 3 * n_clusters`."
          },
          "n_init": {
            "type": "'auto' or int, default=\"auto\"",
            "description": "Number of random initializations that are tried.\n    In contrast to KMeans, the algorithm is only run once, using the best of\n    the `n_init` initializations as measured by inertia. Several runs are\n    recommended for sparse high-dimensional problems (see\n    :ref:`kmeans_sparse_high_dim`).\n\n    When `n_init='auto'`, the number of runs depends on the value of init:\n    3 if using `init='random'` or `init` is a callable;\n    1 if using `init='k-means++'` or `init` is an array-like.\n\n    .. versionadded:: 1.2\n       Added 'auto' option for `n_init`.\n\n    .. versionchanged:: 1.4\n       Default value for `n_init` changed to `'auto'` in version."
          },
          "reassignment_ratio": {
            "type": "float, default=0.01",
            "description": "Control the fraction of the maximum number of counts for a center to\n    be reassigned. A higher value means that low count centers are more\n    easily reassigned, which means that the model will take longer to\n    converge, but should converge in a better clustering. However, too high\n    a value may cause convergence issues, especially with a small batch\n    size.\n\nAttributes\n----------"
          },
          "cluster_centers_": {
            "type": "ndarray of shape (n_clusters, n_features)",
            "description": "Coordinates of cluster centers."
          },
          "labels_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Labels of each point (if compute_labels is set to True)."
          },
          "inertia_": {
            "type": "float",
            "description": "The value of the inertia criterion associated with the chosen\n    partition if compute_labels is set to True. If compute_labels is set to\n    False, it's an approximation of the inertia based on an exponentially\n    weighted average of the batch inertiae.\n    The inertia is defined as the sum of square distances of samples to\n    their cluster center, weighted by the sample weights if provided."
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations over the full dataset."
          },
          "n_steps_": {
            "type": "int",
            "description": "Number of minibatches processed.\n\n    .. versionadded:: 1.0"
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "KMeans : The classic implementation of the clustering method based on the\n    Lloyd's algorithm. It consumes the whole set of input data at each\n    iteration.",
        "notes": "See https://www.eecs.tufts.edu/~dsculley/papers/fastkmeans.pdf\n\nWhen there are too few points in the dataset, some centers may be\nduplicated, which means that a proper clustering in terms of the number\nof requesting clusters and the number of returned clusters will not\nalways match. One solution is to set `reassignment_ratio=0`, which\nprevents reassignments of clusters that are too small.\n\nSee :ref:`sphx_glr_auto_examples_cluster_plot_birch_vs_minibatchkmeans.py` for a\ncomparison with :class:`~sklearn.cluster.BIRCH`.",
        "examples": ">>> from sklearn.cluster import MiniBatchKMeans\n>>> import numpy as np\n>>> X = np.array([[1, 2], [1, 4], [1, 0],\n...               [4, 2], [4, 0], [4, 4],\n...               [4, 5], [0, 1], [2, 2],\n...               [3, 2], [5, 5], [1, -1]])\n>>> # manually fit on batches\n>>> kmeans = MiniBatchKMeans(n_clusters=2,\n...                          random_state=0,\n...                          batch_size=6,\n...                          n_init=\"auto\")\n>>> kmeans = kmeans.partial_fit(X[0:6,:])\n>>> kmeans = kmeans.partial_fit(X[6:12,:])\n>>> kmeans.cluster_centers_\narray([[3.375, 3.  ],\n       [0.75 , 0.5 ]])\n>>> kmeans.predict([[0, 0], [4, 4]])\narray([1, 0], dtype=int32)\n>>> # fit on the whole data\n>>> kmeans = MiniBatchKMeans(n_clusters=2,\n...                          random_state=0,\n...                          batch_size=6,\n...                          max_iter=10,\n...                          n_init=\"auto\").fit(X)\n>>> kmeans.cluster_centers_\narray([[3.55102041, 2.48979592],\n       [1.06896552, 1.        ]])\n>>> kmeans.predict([[0, 0], [4, 4]])\narray([1, 0], dtype=int32)"
      }
    },
    {
      "name": "OPTICS",
      "signature": "OPTICS(*, min_samples=5, max_eps=inf, metric='minkowski', p=2, metric_params=None, cluster_method='xi', eps=None, xi=0.05, predecessor_correction=True, min_cluster_size=None, algorithm='auto', leaf_size=30, memory=None, n_jobs=None)",
      "docstring": {
        "description": "Estimate clustering structure from vector array.\n\nOPTICS (Ordering Points To Identify the Clustering Structure), closely\nrelated to DBSCAN, finds core sample of high density and expands clusters\nfrom them [1]_. Unlike DBSCAN, keeps cluster hierarchy for a variable\nneighborhood radius. Better suited for usage on large datasets than the\ncurrent sklearn implementation of DBSCAN.\n\nClusters are then extracted using a DBSCAN-like method\n(cluster_method = 'dbscan') or an automatic\ntechnique proposed in [1]_ (cluster_method = 'xi').\n\nThis implementation deviates from the original OPTICS by first performing\nk-nearest-neighborhood searches on all points to identify core sizes, then\ncomputing only the distances to unprocessed points when constructing the\ncluster order. Note that we do not employ a heap to manage the expansion\ncandidates, so the time complexity will be O(n^2).\n\nRead more in the :ref:`User Guide <optics>`.",
        "parameters": {
          "min_samples": {
            "type": "int > 1 or float between 0 and 1, default=5",
            "description": "The number of samples in a neighborhood for a point to be considered as\n    a core point. Also, up and down steep regions can't have more than\n    ``min_samples`` consecutive non-steep points. Expressed as an absolute\n    number or a fraction of the number of samples (rounded to be at least\n    2)."
          },
          "max_eps": {
            "type": "float, default=np.inf",
            "description": "The maximum distance between two samples for one to be considered as\n    in the neighborhood of the other. Default value of ``np.inf`` will\n    identify clusters across all scales; reducing ``max_eps`` will result\n    in shorter run times."
          },
          "metric": {
            "type": "str or callable, default='minkowski'",
            "description": "Metric to use for distance computation. Any metric from scikit-learn\n    or scipy.spatial.distance can be used.\n\n    If metric is a callable function, it is called on each\n    pair of instances (rows) and the resulting value recorded. The callable\n    should take two arrays as input and return one value indicating the\n    distance between them. This works for Scipy's metrics, but is less\n    efficient than passing the metric name as a string. If metric is\n    \"precomputed\", `X` is assumed to be a distance matrix and must be\n    square.\n\n    Valid values for metric are:\n\n    - from scikit-learn: ['cityblock', 'cosine', 'euclidean', 'l1', 'l2',\n      'manhattan']\n\n    - from scipy.spatial.distance: ['braycurtis', 'canberra', 'chebyshev',\n      'correlation', 'dice', 'hamming', 'jaccard', 'kulsinski',\n      'mahalanobis', 'minkowski', 'rogerstanimoto', 'russellrao',\n      'seuclidean', 'sokalmichener', 'sokalsneath', 'sqeuclidean',\n      'yule']\n\n    Sparse matrices are only supported by scikit-learn metrics.\n    See the documentation for scipy.spatial.distance for details on these\n    metrics.\n\n    .. note::\n       `'kulsinski'` is deprecated from SciPy 1.9 and will be removed in SciPy 1.11."
          },
          "p": {
            "type": "float, default=2",
            "description": "Parameter for the Minkowski metric from\n    :class:`~sklearn.metrics.pairwise_distances`. When p = 1, this is\n    equivalent to using manhattan_distance (l1), and euclidean_distance\n    (l2) for p = 2. For arbitrary p, minkowski_distance (l_p) is used."
          },
          "metric_params": {
            "type": "dict, default=None",
            "description": "Additional keyword arguments for the metric function."
          },
          "cluster_method": {
            "type": "str, default='xi'",
            "description": "The extraction method used to extract clusters using the calculated\n    reachability and ordering. Possible values are \"xi\" and \"dbscan\"."
          },
          "eps": {
            "type": "float, default=None",
            "description": "The maximum distance between two samples for one to be considered as\n    in the neighborhood of the other. By default it assumes the same value\n    as ``max_eps``.\n    Used only when ``cluster_method='dbscan'``."
          },
          "xi": {
            "type": "float between 0 and 1, default=0.05",
            "description": "Determines the minimum steepness on the reachability plot that\n    constitutes a cluster boundary. For example, an upwards point in the\n    reachability plot is defined by the ratio from one point to its\n    successor being at most 1-xi.\n    Used only when ``cluster_method='xi'``."
          },
          "predecessor_correction": {
            "type": "bool, default=True",
            "description": "Correct clusters according to the predecessors calculated by OPTICS\n    [2]_. This parameter has minimal effect on most datasets.\n    Used only when ``cluster_method='xi'``."
          },
          "min_cluster_size": {
            "type": "int > 1 or float between 0 and 1, default=None",
            "description": "Minimum number of samples in an OPTICS cluster, expressed as an\n    absolute number or a fraction of the number of samples (rounded to be\n    at least 2). If ``None``, the value of ``min_samples`` is used instead.\n    Used only when ``cluster_method='xi'``."
          },
          "algorithm": {
            "type": "{'auto', 'ball_tree', 'kd_tree', 'brute'}, default='auto'",
            "description": "Algorithm used to compute the nearest neighbors:\n\n    - 'ball_tree' will use :class:`~sklearn.neighbors.BallTree`.\n    - 'kd_tree' will use :class:`~sklearn.neighbors.KDTree`.\n    - 'brute' will use a brute-force search.\n    - 'auto' (default) will attempt to decide the most appropriate\n      algorithm based on the values passed to :meth:`fit` method.\n\n    Note: fitting on sparse input will override the setting of\n    this parameter, using brute force."
          },
          "leaf_size": {
            "type": "int, default=30",
            "description": "Leaf size passed to :class:`~sklearn.neighbors.BallTree` or\n    :class:`~sklearn.neighbors.KDTree`. This can affect the speed of the\n    construction and query, as well as the memory required to store the\n    tree. The optimal value depends on the nature of the problem."
          },
          "memory": {
            "type": "str or object with the joblib.Memory interface, default=None",
            "description": "Used to cache the output of the computation of the tree.\n    By default, no caching is done. If a string is given, it is the\n    path to the caching directory."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "The number of parallel jobs to run for neighbors search.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details.\n\nAttributes\n----------"
          },
          "labels_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Cluster labels for each point in the dataset given to fit().\n    Noisy samples and points which are not included in a leaf cluster\n    of ``cluster_hierarchy_`` are labeled as -1."
          },
          "reachability_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Reachability distances per sample, indexed by object order. Use\n    ``clust.reachability_[clust.ordering_]`` to access in cluster order."
          },
          "ordering_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "The cluster ordered list of sample indices."
          },
          "core_distances_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Distance at which each sample becomes a core point, indexed by object\n    order. Points which will never be core have a distance of inf. Use\n    ``clust.core_distances_[clust.ordering_]`` to access in cluster order."
          },
          "predecessor_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Point that a sample was reached from, indexed by object order.\n    Seed points have a predecessor of -1."
          },
          "cluster_hierarchy_": {
            "type": "ndarray of shape (n_clusters, 2)",
            "description": "The list of clusters in the form of ``[start, end]`` in each row, with\n    all indices inclusive. The clusters are ordered according to\n    ``(end, -start)`` (ascending) so that larger clusters encompassing\n    smaller clusters come after those smaller ones. Since ``labels_`` does\n    not reflect the hierarchy, usually\n    ``len(cluster_hierarchy_) > np.unique(optics.labels_)``. Please also\n    note that these indices are of the ``ordering_``, i.e.\n    ``X[ordering_][start:end + 1]`` form a cluster.\n    Only available when ``cluster_method='xi'``."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "DBSCAN : A similar clustering for a specified neighborhood radius (eps).\n    Our implementation is optimized for runtime.\n\nReferences\n----------\n.. [1] Ankerst, Mihael, Markus M. Breunig, Hans-Peter Kriegel,\n   and J\u00f6rg Sander. \"OPTICS: ordering points to identify the clustering\n   structure.\" ACM SIGMOD Record 28, no. 2 (1999): 49-60.\n\n.. [2] Schubert, Erich, Michael Gertz.\n   \"Improving the Cluster Structure Extracted from OPTICS Plots.\" Proc. of\n   the Conference \"Lernen, Wissen, Daten, Analysen\" (LWDA) (2018): 318-329.",
        "notes": "",
        "examples": ">>> from sklearn.cluster import OPTICS\n>>> import numpy as np\n>>> X = np.array([[1, 2], [2, 5], [3, 6],\n...               [8, 7], [8, 8], [7, 3]])\n>>> clustering = OPTICS(min_samples=2).fit(X)\n>>> clustering.labels_\narray([0, 0, 0, 1, 1, 1])\n\nFor a more detailed example see\n:ref:`sphx_glr_auto_examples_cluster_plot_optics.py`."
      }
    },
    {
      "name": "SpectralBiclustering",
      "signature": "SpectralBiclustering(n_clusters=3, *, method='bistochastic', n_components=6, n_best=3, svd_method='randomized', n_svd_vecs=None, mini_batch=False, init='k-means++', n_init=10, random_state=None)",
      "docstring": {
        "description": "Spectral biclustering (Kluger, 2003).\n\nPartitions rows and columns under the assumption that the data has\nan underlying checkerboard structure. For instance, if there are\ntwo row partitions and three column partitions, each row will\nbelong to three biclusters, and each column will belong to two\nbiclusters. The outer product of the corresponding row and column\nlabel vectors gives this checkerboard structure.\n\nRead more in the :ref:`User Guide <spectral_biclustering>`.",
        "parameters": {
          "n_clusters": {
            "type": "int or tuple (n_row_clusters, n_column_clusters), default=3",
            "description": "The number of row and column clusters in the checkerboard\n    structure."
          },
          "method": {
            "type": "{'bistochastic', 'scale', 'log'}, default='bistochastic'",
            "description": "Method of normalizing and converting singular vectors into\n    biclusters. May be one of 'scale', 'bistochastic', or 'log'.\n    The authors recommend using 'log'. If the data is sparse,\n    however, log normalization will not work, which is why the\n    default is 'bistochastic'.\n\n    .. warning::\n       if `method='log'`, the data must not be sparse."
          },
          "n_components": {
            "type": "int, default=6",
            "description": "Number of singular vectors to check."
          },
          "n_best": {
            "type": "int, default=3",
            "description": "Number of best singular vectors to which to project the data\n    for clustering."
          },
          "svd_method": {
            "type": "{'randomized', 'arpack'}, default='randomized'",
            "description": "Selects the algorithm for finding singular vectors. May be\n    'randomized' or 'arpack'. If 'randomized', uses\n    :func:`~sklearn.utils.extmath.randomized_svd`, which may be faster\n    for large matrices. If 'arpack', uses\n    `scipy.sparse.linalg.svds`, which is more accurate, but\n    possibly slower in some cases."
          },
          "n_svd_vecs": {
            "type": "int, default=None",
            "description": "Number of vectors to use in calculating the SVD. Corresponds\n    to `ncv` when `svd_method=arpack` and `n_oversamples` when\n    `svd_method` is 'randomized`."
          },
          "mini_batch": {
            "type": "bool, default=False",
            "description": "Whether to use mini-batch k-means, which is faster but may get\n    different results."
          },
          "init": {
            "type": "{'k-means++', 'random'} or ndarray of shape (n_clusters, n_features),             default='k-means++'",
            "description": "Method for initialization of k-means algorithm; defaults to\n    'k-means++'."
          },
          "n_init": {
            "type": "int, default=10",
            "description": "Number of random initializations that are tried with the\n    k-means algorithm.\n\n    If mini-batch k-means is used, the best initialization is\n    chosen and the algorithm runs once. Otherwise, the algorithm\n    is run for each initialization and the best solution chosen."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used for randomizing the singular value decomposition and the k-means\n    initialization. Use an int to make the randomness deterministic.\n    See :term:`Glossary <random_state>`.\n\nAttributes\n----------"
          },
          "rows_": {
            "type": "array-like of shape (n_row_clusters, n_rows)",
            "description": "Results of the clustering. `rows[i, r]` is True if\n    cluster `i` contains row `r`. Available only after calling ``fit``."
          },
          "columns_": {
            "type": "array-like of shape (n_column_clusters, n_columns)",
            "description": "Results of the clustering, like `rows`."
          },
          "row_labels_": {
            "type": "array-like of shape (n_rows,)",
            "description": "Row partition labels."
          },
          "column_labels_": {
            "type": "array-like of shape (n_cols,)",
            "description": "Column partition labels."
          },
          "biclusters_": {
            "type": "tuple of two ndarrays",
            "description": "The tuple contains the `rows_` and `columns_` arrays."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "SpectralCoclustering : Spectral Co-Clustering algorithm (Dhillon, 2001).\n\nReferences\n----------\n\n* :doi:`Kluger, Yuval, et. al., 2003. Spectral biclustering of microarray\n  data: coclustering genes and conditions.\n  <10.1101/gr.648603>`",
        "notes": "",
        "examples": ">>> from sklearn.cluster import SpectralBiclustering\n>>> import numpy as np\n>>> X = np.array([[1, 1], [2, 1], [1, 0],\n...               [4, 7], [3, 5], [3, 6]])\n>>> clustering = SpectralBiclustering(n_clusters=2, random_state=0).fit(X)\n>>> clustering.row_labels_\narray([1, 1, 1, 0, 0, 0], dtype=int32)\n>>> clustering.column_labels_\narray([1, 0], dtype=int32)\n>>> clustering\nSpectralBiclustering(n_clusters=2, random_state=0)\n\nFor a more detailed example, see\n:ref:`sphx_glr_auto_examples_bicluster_plot_spectral_biclustering.py`"
      }
    },
    {
      "name": "SpectralClustering",
      "signature": "SpectralClustering(n_clusters=8, *, eigen_solver=None, n_components=None, random_state=None, n_init=10, gamma=1.0, affinity='rbf', n_neighbors=10, eigen_tol='auto', assign_labels='kmeans', degree=3, coef0=1, kernel_params=None, n_jobs=None, verbose=False)",
      "docstring": {
        "description": "Apply clustering to a projection of the normalized Laplacian.\n\nIn practice Spectral Clustering is very useful when the structure of\nthe individual clusters is highly non-convex, or more generally when\na measure of the center and spread of the cluster is not a suitable\ndescription of the complete cluster, such as when clusters are\nnested circles on the 2D plane.\n\nIf the affinity matrix is the adjacency matrix of a graph, this method\ncan be used to find normalized graph cuts [1]_, [2]_.\n\nWhen calling ``fit``, an affinity matrix is constructed using either\na kernel function such the Gaussian (aka RBF) kernel with Euclidean\ndistance ``d(X, X)``::\n\n        np.exp(-gamma * d(X,X) ** 2)\n\nor a k-nearest neighbors connectivity matrix.\n\nAlternatively, a user-provided affinity matrix can be specified by\nsetting ``affinity='precomputed'``.\n\nRead more in the :ref:`User Guide <spectral_clustering>`.",
        "parameters": {
          "n_clusters": {
            "type": "int, default=8",
            "description": "The dimension of the projection subspace."
          },
          "eigen_solver": {
            "type": "{'arpack', 'lobpcg', 'amg'}, default=None",
            "description": "The eigenvalue decomposition strategy to use. AMG requires pyamg\n    to be installed. It can be faster on very large, sparse problems,\n    but may also lead to instabilities. If None, then ``'arpack'`` is\n    used. See [4]_ for more details regarding `'lobpcg'`."
          },
          "n_components": {
            "type": "int, default=None",
            "description": "Number of eigenvectors to use for the spectral embedding. If None,\n    defaults to `n_clusters`."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "A pseudo random number generator used for the initialization\n    of the lobpcg eigenvectors decomposition when `eigen_solver ==\n    'amg'`, and for the K-Means initialization. Use an int to make\n    the results deterministic across calls (See\n    :term:`Glossary <random_state>`).\n\n    .. note::\n        When using `eigen_solver == 'amg'`,\n        it is necessary to also fix the global numpy seed with\n        `np.random.seed(int)` to get deterministic results. See\n        https://github.com/pyamg/pyamg/issues/139 for further\n        information."
          },
          "n_init": {
            "type": "int, default=10",
            "description": "Number of time the k-means algorithm will be run with different\n    centroid seeds. The final results will be the best output of n_init\n    consecutive runs in terms of inertia. Only used if\n    ``assign_labels='kmeans'``."
          },
          "gamma": {
            "type": "float, default=1.0",
            "description": "Kernel coefficient for rbf, poly, sigmoid, laplacian and chi2 kernels.\n    Ignored for ``affinity='nearest_neighbors'``, ``affinity='precomputed'``\n    or ``affinity='precomputed_nearest_neighbors'``."
          },
          "affinity": {
            "type": "str or callable, default='rbf'",
            "description": "How to construct the affinity matrix.\n     - 'nearest_neighbors': construct the affinity matrix by computing a\n       graph of nearest neighbors.\n     - 'rbf': construct the affinity matrix using a radial basis function\n       (RBF) kernel.\n     - 'precomputed': interpret ``X`` as a precomputed affinity matrix,\n       where larger values indicate greater similarity between instances.\n     - 'precomputed_nearest_neighbors': interpret ``X`` as a sparse graph\n       of precomputed distances, and construct a binary affinity matrix\n       from the ``n_neighbors`` nearest neighbors of each instance.\n     - one of the kernels supported by\n       :func:`~sklearn.metrics.pairwise.pairwise_kernels`.\n\n    Only kernels that produce similarity scores (non-negative values that\n    increase with similarity) should be used. This property is not checked\n    by the clustering algorithm."
          },
          "n_neighbors": {
            "type": "int, default=10",
            "description": "Number of neighbors to use when constructing the affinity matrix using\n    the nearest neighbors method. Ignored for ``affinity='rbf'``."
          },
          "eigen_tol": {
            "type": "float, default=\"auto\"",
            "description": "Stopping criterion for eigen decomposition of the Laplacian matrix.\n    If `eigen_tol=\"auto\"` then the passed tolerance will depend on the\n    `eigen_solver`:\n\n    - If `eigen_solver=\"arpack\"`, then `eigen_tol=0.0`;\n    - If `eigen_solver=\"lobpcg\"` or `eigen_solver=\"amg\"`, then\n      `eigen_tol=None` which configures the underlying `lobpcg` solver to\n      automatically resolve the value according to their heuristics. See,\n      :func:`scipy.sparse.linalg.lobpcg` for details.\n\n    Note that when using `eigen_solver=\"lobpcg\"` or `eigen_solver=\"amg\"`\n    values of `tol<1e-5` may lead to convergence issues and should be\n    avoided.\n\n    .. versionadded:: 1.2\n       Added 'auto' option."
          },
          "assign_labels": {
            "type": "{'kmeans', 'discretize', 'cluster_qr'}, default='kmeans'",
            "description": "The strategy for assigning labels in the embedding space. There are two\n    ways to assign labels after the Laplacian embedding. k-means is a\n    popular choice, but it can be sensitive to initialization.\n    Discretization is another approach which is less sensitive to random\n    initialization [3]_.\n    The cluster_qr method [5]_ directly extract clusters from eigenvectors\n    in spectral clustering. In contrast to k-means and discretization, cluster_qr\n    has no tuning parameters and runs no iterations, yet may outperform\n    k-means and discretization in terms of both quality and speed.\n\n    .. versionchanged:: 1.1\n       Added new labeling method 'cluster_qr'."
          },
          "degree": {
            "type": "float, default=3",
            "description": "Degree of the polynomial kernel. Ignored by other kernels."
          },
          "coef0": {
            "type": "float, default=1",
            "description": "Zero coefficient for polynomial and sigmoid kernels.\n    Ignored by other kernels."
          },
          "kernel_params": {
            "type": "dict of str to any, default=None",
            "description": "Parameters (keyword arguments) and values for kernel passed as\n    callable object. Ignored by other kernels."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "The number of parallel jobs to run when `affinity='nearest_neighbors'`\n    or `affinity='precomputed_nearest_neighbors'`. The neighbors search\n    will be done in parallel.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Verbosity mode.\n\n    .. versionadded:: 0.24\n\nAttributes\n----------"
          },
          "affinity_matrix_": {
            "type": "array-like of shape (n_samples, n_samples)",
            "description": "Affinity matrix used for clustering. Available only after calling\n    ``fit``."
          },
          "labels_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Labels of each point"
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "sklearn.cluster.KMeans : K-Means clustering.\nsklearn.cluster.DBSCAN : Density-Based Spatial Clustering of\n    Applications with Noise.",
        "notes": "A distance matrix for which 0 indicates identical elements and high values\nindicate very dissimilar elements can be transformed into an affinity /\nsimilarity matrix that is well-suited for the algorithm by\napplying the Gaussian (aka RBF, heat) kernel::\n\n    np.exp(- dist_matrix ** 2 / (2. * delta ** 2))\n\nwhere ``delta`` is a free parameter representing the width of the Gaussian\nkernel.\n\nAn alternative is to take a symmetric version of the k-nearest neighbors\nconnectivity matrix of the points.\n\nIf the pyamg package is installed, it is used: this greatly\nspeeds up computation.\n\nReferences\n----------\n.. [1] :doi:`Normalized cuts and image segmentation, 2000\n       Jianbo Shi, Jitendra Malik\n       <10.1109/34.868688>`\n\n.. [2] :doi:`A Tutorial on Spectral Clustering, 2007\n       Ulrike von Luxburg\n       <10.1007/s11222-007-9033-z>`\n\n.. [3] `Multiclass spectral clustering, 2003\n       Stella X. Yu, Jianbo Shi\n       <https://people.eecs.berkeley.edu/~jordan/courses/281B-spring04/readings/yu-shi.pdf>`_\n\n.. [4] :doi:`Toward the Optimal Preconditioned Eigensolver:\n       Locally Optimal Block Preconditioned Conjugate Gradient Method, 2001\n       A. V. Knyazev\n       SIAM Journal on Scientific Computing 23, no. 2, pp. 517-541.\n       <10.1137/S1064827500366124>`\n\n.. [5] :doi:`Simple, direct, and efficient multi-way spectral clustering, 2019\n       Anil Damle, Victor Minden, Lexing Ying\n       <10.1093/imaiai/iay008>`",
        "examples": ">>> from sklearn.cluster import SpectralClustering\n>>> import numpy as np\n>>> X = np.array([[1, 1], [2, 1], [1, 0],\n...               [4, 7], [3, 5], [3, 6]])\n>>> clustering = SpectralClustering(n_clusters=2,\n...         assign_labels='discretize',\n...         random_state=0).fit(X)\n>>> clustering.labels_\narray([1, 1, 1, 0, 0, 0])\n>>> clustering\nSpectralClustering(assign_labels='discretize', n_clusters=2,\n    random_state=0)"
      }
    },
    {
      "name": "SpectralCoclustering",
      "signature": "SpectralCoclustering(n_clusters=3, *, svd_method='randomized', n_svd_vecs=None, mini_batch=False, init='k-means++', n_init=10, random_state=None)",
      "docstring": {
        "description": "Spectral Co-Clustering algorithm (Dhillon, 2001).\n\nClusters rows and columns of an array `X` to solve the relaxed\nnormalized cut of the bipartite graph created from `X` as follows:\nthe edge between row vertex `i` and column vertex `j` has weight\n`X[i, j]`.\n\nThe resulting bicluster structure is block-diagonal, since each\nrow and each column belongs to exactly one bicluster.\n\nSupports sparse matrices, as long as they are nonnegative.\n\nRead more in the :ref:`User Guide <spectral_coclustering>`.",
        "parameters": {
          "n_clusters": {
            "type": "int, default=3",
            "description": "The number of biclusters to find."
          },
          "svd_method": {
            "type": "{'randomized', 'arpack'}, default='randomized'",
            "description": "Selects the algorithm for finding singular vectors. May be\n    'randomized' or 'arpack'. If 'randomized', use\n    :func:`sklearn.utils.extmath.randomized_svd`, which may be faster\n    for large matrices. If 'arpack', use\n    :func:`scipy.sparse.linalg.svds`, which is more accurate, but\n    possibly slower in some cases."
          },
          "n_svd_vecs": {
            "type": "int, default=None",
            "description": "Number of vectors to use in calculating the SVD. Corresponds\n    to `ncv` when `svd_method=arpack` and `n_oversamples` when\n    `svd_method` is 'randomized`."
          },
          "mini_batch": {
            "type": "bool, default=False",
            "description": "Whether to use mini-batch k-means, which is faster but may get\n    different results."
          },
          "init": {
            "type": "{'k-means++', 'random'}, or ndarray of shape             (n_clusters, n_features), default='k-means++'",
            "description": "Method for initialization of k-means algorithm; defaults to\n    'k-means++'."
          },
          "n_init": {
            "type": "int, default=10",
            "description": "Number of random initializations that are tried with the\n    k-means algorithm.\n\n    If mini-batch k-means is used, the best initialization is\n    chosen and the algorithm runs once. Otherwise, the algorithm\n    is run for each initialization and the best solution chosen."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used for randomizing the singular value decomposition and the k-means\n    initialization. Use an int to make the randomness deterministic.\n    See :term:`Glossary <random_state>`.\n\nAttributes\n----------"
          },
          "rows_": {
            "type": "array-like of shape (n_row_clusters, n_rows)",
            "description": "Results of the clustering. `rows[i, r]` is True if\n    cluster `i` contains row `r`. Available only after calling ``fit``."
          },
          "columns_": {
            "type": "array-like of shape (n_column_clusters, n_columns)",
            "description": "Results of the clustering, like `rows`."
          },
          "row_labels_": {
            "type": "array-like of shape (n_rows,)",
            "description": "The bicluster label of each row."
          },
          "column_labels_": {
            "type": "array-like of shape (n_cols,)",
            "description": "The bicluster label of each column."
          },
          "biclusters_": {
            "type": "tuple of two ndarrays",
            "description": "The tuple contains the `rows_` and `columns_` arrays."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "SpectralBiclustering : Partitions rows and columns under the assumption\n    that the data has an underlying checkerboard structure.\n\nReferences\n----------\n* :doi:`Dhillon, Inderjit S, 2001. Co-clustering documents and words using\n  bipartite spectral graph partitioning.\n  <10.1145/502512.502550>`",
        "notes": "",
        "examples": ">>> from sklearn.cluster import SpectralCoclustering\n>>> import numpy as np\n>>> X = np.array([[1, 1], [2, 1], [1, 0],\n...               [4, 7], [3, 5], [3, 6]])\n>>> clustering = SpectralCoclustering(n_clusters=2, random_state=0).fit(X)\n>>> clustering.row_labels_ #doctest: +SKIP\narray([0, 1, 1, 0, 0, 0], dtype=int32)\n>>> clustering.column_labels_ #doctest: +SKIP\narray([0, 0], dtype=int32)\n>>> clustering\nSpectralCoclustering(n_clusters=2, random_state=0)"
      }
    },
    {
      "name": "affinity_propagation",
      "signature": "affinity_propagation(S, *, preference=None, convergence_iter=15, max_iter=200, damping=0.5, copy=True, verbose=False, return_n_iter=False, random_state=None)",
      "docstring": {
        "description": "Perform Affinity Propagation Clustering of data.\n\nRead more in the :ref:`User Guide <affinity_propagation>`.",
        "parameters": {
          "S": {
            "type": "array-like of shape (n_samples, n_samples)",
            "description": "Matrix of similarities between points."
          },
          "preference": {
            "type": "array-like of shape (n_samples,) or float, default=None",
            "description": "Preferences for each point - points with larger values of\n    preferences are more likely to be chosen as exemplars. The number of\n    exemplars, i.e. of clusters, is influenced by the input preferences\n    value. If the preferences are not passed as arguments, they will be\n    set to the median of the input similarities (resulting in a moderate\n    number of clusters). For a smaller amount of clusters, this can be set\n    to the minimum value of the similarities."
          },
          "convergence_iter": {
            "type": "int, default=15",
            "description": "Number of iterations with no change in the number\n    of estimated clusters that stops the convergence."
          },
          "max_iter": {
            "type": "int, default=200",
            "description": "Maximum number of iterations."
          },
          "damping": {
            "type": "float, default=0.5",
            "description": "Damping factor between 0.5 and 1."
          },
          "copy": {
            "type": "bool, default=True",
            "description": "If copy is False, the affinity matrix is modified inplace by the\n    algorithm, for memory efficiency."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "The verbosity level."
          },
          "return_n_iter": {
            "type": "bool, default=False",
            "description": "Whether or not to return the number of iterations."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Pseudo-random number generator to control the starting state.\n    Use an int for reproducible results across function calls.\n    See the :term:`Glossary <random_state>`.\n\n    .. versionadded:: 0.23\n        this parameter was previously hardcoded as 0."
          }
        },
        "returns": "cluster_centers_indices : ndarray of shape (n_clusters,)\n    Index of clusters centers.\n\nlabels : ndarray of shape (n_samples,)\n    Cluster labels for each point.\n\nn_iter : int\n    Number of iterations run. Returned only if `return_n_iter` is\n    set to True.",
        "raises": "",
        "see_also": "",
        "notes": "For an example usage,\nsee :ref:`sphx_glr_auto_examples_cluster_plot_affinity_propagation.py`.\nYou may also check out,\n:ref:`sphx_glr_auto_examples_applications_plot_stock_market.py`\n\nWhen the algorithm does not converge, it will still return a arrays of\n``cluster_center_indices`` and labels if there are any exemplars/clusters,\nhowever they may be degenerate and should be used with caution.\n\nWhen all training samples have equal similarities and equal preferences,\nthe assignment of cluster centers and labels depends on the preference.\nIf the preference is smaller than the similarities, a single cluster center\nand label ``0`` for every sample will be returned. Otherwise, every\ntraining sample becomes its own cluster center and is assigned a unique\nlabel.\n\nReferences\n----------\nBrendan J. Frey and Delbert Dueck, \"Clustering by Passing Messages\nBetween Data Points\", Science Feb. 2007",
        "examples": ">>> import numpy as np\n>>> from sklearn.cluster import affinity_propagation\n>>> from sklearn.metrics.pairwise import euclidean_distances\n>>> X = np.array([[1, 2], [1, 4], [1, 0],\n...               [4, 2], [4, 4], [4, 0]])\n>>> S = -euclidean_distances(X, squared=True)\n>>> cluster_centers_indices, labels = affinity_propagation(S, random_state=0)\n>>> cluster_centers_indices\narray([0, 3])\n>>> labels\narray([0, 0, 0, 1, 1, 1])"
      }
    },
    {
      "name": "cluster_optics_dbscan",
      "signature": "cluster_optics_dbscan(*, reachability, core_distances, ordering, eps)",
      "docstring": {
        "description": "Perform DBSCAN extraction for an arbitrary epsilon.\n\nExtracting the clusters runs in linear time. Note that this results in\n``labels_`` which are close to a :class:`~sklearn.cluster.DBSCAN` with\nsimilar settings and ``eps``, only if ``eps`` is close to ``max_eps``.",
        "parameters": {
          "reachability": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Reachability distances calculated by OPTICS (``reachability_``)."
          },
          "core_distances": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Distances at which points become core (``core_distances_``)."
          },
          "ordering": {
            "type": "ndarray of shape (n_samples,)",
            "description": "OPTICS ordered point indices (``ordering_``)."
          },
          "eps": {
            "type": "float",
            "description": "DBSCAN ``eps`` parameter. Must be set to < ``max_eps``. Results\n    will be close to DBSCAN algorithm if ``eps`` and ``max_eps`` are close\n    to one another."
          }
        },
        "returns": "labels_ : array of shape (n_samples,)\n    The estimated labels.",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ">>> import numpy as np\n>>> from sklearn.cluster import cluster_optics_dbscan, compute_optics_graph\n>>> X = np.array([[1, 2], [2, 5], [3, 6],\n...               [8, 7], [8, 8], [7, 3]])\n>>> ordering, core_distances, reachability, predecessor = compute_optics_graph(\n...     X,\n...     min_samples=2,\n...     max_eps=np.inf,\n...     metric=\"minkowski\",\n...     p=2,\n...     metric_params=None,\n...     algorithm=\"auto\",\n...     leaf_size=30,\n...     n_jobs=None,\n... )\n>>> eps = 4.5\n>>> labels = cluster_optics_dbscan(\n...     reachability=reachability,\n...     core_distances=core_distances,\n...     ordering=ordering,\n...     eps=eps,\n... )\n>>> labels\narray([0, 0, 0, 1, 1, 1])"
      }
    },
    {
      "name": "cluster_optics_xi",
      "signature": "cluster_optics_xi(*, reachability, predecessor, ordering, min_samples, min_cluster_size=None, xi=0.05, predecessor_correction=True)",
      "docstring": {
        "description": "Automatically extract clusters according to the Xi-steep method.",
        "parameters": {
          "reachability": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Reachability distances calculated by OPTICS (`reachability_`)."
          },
          "predecessor": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Predecessors calculated by OPTICS."
          },
          "ordering": {
            "type": "ndarray of shape (n_samples,)",
            "description": "OPTICS ordered point indices (`ordering_`)."
          },
          "min_samples": {
            "type": "int > 1 or float between 0 and 1",
            "description": "The same as the min_samples given to OPTICS. Up and down steep regions\n    can't have more then ``min_samples`` consecutive non-steep points.\n    Expressed as an absolute number or a fraction of the number of samples\n    (rounded to be at least 2)."
          },
          "min_cluster_size": {
            "type": "int > 1 or float between 0 and 1, default=None",
            "description": "Minimum number of samples in an OPTICS cluster, expressed as an\n    absolute number or a fraction of the number of samples (rounded to be\n    at least 2). If ``None``, the value of ``min_samples`` is used instead."
          },
          "xi": {
            "type": "float between 0 and 1, default=0.05",
            "description": "Determines the minimum steepness on the reachability plot that\n    constitutes a cluster boundary. For example, an upwards point in the\n    reachability plot is defined by the ratio from one point to its\n    successor being at most 1-xi."
          },
          "predecessor_correction": {
            "type": "bool, default=True",
            "description": "Correct clusters based on the calculated predecessors."
          }
        },
        "returns": "labels : ndarray of shape (n_samples,)\n    The labels assigned to samples. Points which are not included\n    in any cluster are labeled as -1.\n\nclusters : ndarray of shape (n_clusters, 2)\n    The list of clusters in the form of ``[start, end]`` in each row, with\n    all indices inclusive. The clusters are ordered according to ``(end,\n    -start)`` (ascending) so that larger clusters encompassing smaller\n    clusters come after such nested smaller clusters. Since ``labels`` does\n    not reflect the hierarchy, usually ``len(clusters) >\n    np.unique(labels)``.",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ">>> import numpy as np\n>>> from sklearn.cluster import cluster_optics_xi, compute_optics_graph\n>>> X = np.array([[1, 2], [2, 5], [3, 6],\n...               [8, 7], [8, 8], [7, 3]])\n>>> ordering, core_distances, reachability, predecessor = compute_optics_graph(\n...     X,\n...     min_samples=2,\n...     max_eps=np.inf,\n...     metric=\"minkowski\",\n...     p=2,\n...     metric_params=None,\n...     algorithm=\"auto\",\n...     leaf_size=30,\n...     n_jobs=None\n... )\n>>> min_samples = 2\n>>> labels, clusters = cluster_optics_xi(\n...     reachability=reachability,\n...     predecessor=predecessor,\n...     ordering=ordering,\n...     min_samples=min_samples,\n... )\n>>> labels\narray([0, 0, 0, 1, 1, 1])\n>>> clusters\narray([[0, 2],\n       [3, 5],\n       [0, 5]])"
      }
    },
    {
      "name": "compute_optics_graph",
      "signature": "compute_optics_graph(X, *, min_samples, max_eps, metric, p, metric_params, algorithm, leaf_size, n_jobs)",
      "docstring": {
        "description": "Compute the OPTICS reachability graph.\n\nRead more in the :ref:`User Guide <optics>`.",
        "parameters": {
          "X": {
            "type": "{ndarray, sparse matrix} of shape (n_samples, n_features), or             (n_samples, n_samples) if metric='precomputed'",
            "description": "A feature array, or array of distances between samples if\n    metric='precomputed'."
          },
          "min_samples": {
            "type": "int > 1 or float between 0 and 1",
            "description": "The number of samples in a neighborhood for a point to be considered\n    as a core point. Expressed as an absolute number or a fraction of the\n    number of samples (rounded to be at least 2)."
          },
          "max_eps": {
            "type": "float, default=np.inf",
            "description": "The maximum distance between two samples for one to be considered as\n    in the neighborhood of the other. Default value of ``np.inf`` will\n    identify clusters across all scales; reducing ``max_eps`` will result\n    in shorter run times."
          },
          "metric": {
            "type": "str or callable, default='minkowski'",
            "description": "Metric to use for distance computation. Any metric from scikit-learn\n    or scipy.spatial.distance can be used.\n\n    If metric is a callable function, it is called on each\n    pair of instances (rows) and the resulting value recorded. The callable\n    should take two arrays as input and return one value indicating the\n    distance between them. This works for Scipy's metrics, but is less\n    efficient than passing the metric name as a string. If metric is\n    \"precomputed\", X is assumed to be a distance matrix and must be square.\n\n    Valid values for metric are:\n\n    - from scikit-learn: ['cityblock', 'cosine', 'euclidean', 'l1', 'l2',\n      'manhattan']\n\n    - from scipy.spatial.distance: ['braycurtis', 'canberra', 'chebyshev',\n      'correlation', 'dice', 'hamming', 'jaccard', 'kulsinski',\n      'mahalanobis', 'minkowski', 'rogerstanimoto', 'russellrao',\n      'seuclidean', 'sokalmichener', 'sokalsneath', 'sqeuclidean',\n      'yule']\n\n    See the documentation for scipy.spatial.distance for details on these\n    metrics.\n\n    .. note::\n       `'kulsinski'` is deprecated from SciPy 1.9 and will be removed in SciPy 1.11."
          },
          "p": {
            "type": "float, default=2",
            "description": "Parameter for the Minkowski metric from\n    :class:`~sklearn.metrics.pairwise_distances`. When p = 1, this is\n    equivalent to using manhattan_distance (l1), and euclidean_distance\n    (l2) for p = 2. For arbitrary p, minkowski_distance (l_p) is used."
          },
          "metric_params": {
            "type": "dict, default=None",
            "description": "Additional keyword arguments for the metric function."
          },
          "algorithm": {
            "type": "{'auto', 'ball_tree', 'kd_tree', 'brute'}, default='auto'",
            "description": "Algorithm used to compute the nearest neighbors:\n\n    - 'ball_tree' will use :class:`~sklearn.neighbors.BallTree`.\n    - 'kd_tree' will use :class:`~sklearn.neighbors.KDTree`.\n    - 'brute' will use a brute-force search.\n    - 'auto' will attempt to decide the most appropriate algorithm\n      based on the values passed to `fit` method. (default)\n\n    Note: fitting on sparse input will override the setting of\n    this parameter, using brute force."
          },
          "leaf_size": {
            "type": "int, default=30",
            "description": "Leaf size passed to :class:`~sklearn.neighbors.BallTree` or\n    :class:`~sklearn.neighbors.KDTree`. This can affect the speed of the\n    construction and query, as well as the memory required to store the\n    tree. The optimal value depends on the nature of the problem."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "The number of parallel jobs to run for neighbors search.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          }
        },
        "returns": "ordering_ : array of shape (n_samples,)\n    The cluster ordered list of sample indices.\n\ncore_distances_ : array of shape (n_samples,)\n    Distance at which each sample becomes a core point, indexed by object\n    order. Points which will never be core have a distance of inf. Use\n    ``clust.core_distances_[clust.ordering_]`` to access in cluster order.\n\nreachability_ : array of shape (n_samples,)\n    Reachability distances per sample, indexed by object order. Use\n    ``clust.reachability_[clust.ordering_]`` to access in cluster order.\n\npredecessor_ : array of shape (n_samples,)\n    Point that a sample was reached from, indexed by object order.\n    Seed points have a predecessor of -1.\n\nReferences\n----------\n.. [1] Ankerst, Mihael, Markus M. Breunig, Hans-Peter Kriegel,\n   and J\u00f6rg Sander. \"OPTICS: ordering points to identify the clustering\n   structure.\" ACM SIGMOD Record 28, no. 2 (1999): 49-60.",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ">>> import numpy as np\n>>> from sklearn.cluster import compute_optics_graph\n>>> X = np.array([[1, 2], [2, 5], [3, 6],\n...               [8, 7], [8, 8], [7, 3]])\n>>> ordering, core_distances, reachability, predecessor = compute_optics_graph(\n...     X,\n...     min_samples=2,\n...     max_eps=np.inf,\n...     metric=\"minkowski\",\n...     p=2,\n...     metric_params=None,\n...     algorithm=\"auto\",\n...     leaf_size=30,\n...     n_jobs=None,\n... )\n>>> ordering\narray([0, 1, 2, 5, 3, 4])\n>>> core_distances\narray([3.16..., 1.41..., 1.41..., 1.        , 1.        ,\n       4.12...])\n>>> reachability\narray([       inf, 3.16..., 1.41..., 4.12..., 1.        ,\n       5.        ])\n>>> predecessor\narray([-1,  0,  1,  5,  3,  2])"
      }
    },
    {
      "name": "dbscan",
      "signature": "dbscan(X, eps=0.5, *, min_samples=5, metric='minkowski', metric_params=None, algorithm='auto', leaf_size=30, p=2, sample_weight=None, n_jobs=None)",
      "docstring": {
        "description": "Perform DBSCAN clustering from vector array or distance matrix.\n\nRead more in the :ref:`User Guide <dbscan>`.",
        "parameters": {
          "X": {
            "type": "{array-like, sparse (CSR) matrix} of shape (n_samples, n_features) or             (n_samples, n_samples)",
            "description": "A feature array, or array of distances between samples if\n    ``metric='precomputed'``."
          },
          "eps": {
            "type": "float, default=0.5",
            "description": "The maximum distance between two samples for one to be considered\n    as in the neighborhood of the other. This is not a maximum bound\n    on the distances of points within a cluster. This is the most\n    important DBSCAN parameter to choose appropriately for your data set\n    and distance function."
          },
          "min_samples": {
            "type": "int, default=5",
            "description": "The number of samples (or total weight) in a neighborhood for a point\n    to be considered as a core point. This includes the point itself."
          },
          "metric": {
            "type": "str or callable, default='minkowski'",
            "description": "The metric to use when calculating distance between instances in a\n    feature array. If metric is a string or callable, it must be one of\n    the options allowed by :func:`sklearn.metrics.pairwise_distances` for\n    its metric parameter.\n    If metric is \"precomputed\", X is assumed to be a distance matrix and\n    must be square during fit.\n    X may be a :term:`sparse graph <sparse graph>`,\n    in which case only \"nonzero\" elements may be considered neighbors."
          },
          "metric_params": {
            "type": "dict, default=None",
            "description": "Additional keyword arguments for the metric function.\n\n    .. versionadded:: 0.19"
          },
          "algorithm": {
            "type": "{'auto', 'ball_tree', 'kd_tree', 'brute'}, default='auto'",
            "description": "The algorithm to be used by the NearestNeighbors module\n    to compute pointwise distances and find nearest neighbors.\n    See NearestNeighbors module documentation for details."
          },
          "leaf_size": {
            "type": "int, default=30",
            "description": "Leaf size passed to BallTree or cKDTree. This can affect the speed\n    of the construction and query, as well as the memory required\n    to store the tree. The optimal value depends\n    on the nature of the problem."
          },
          "p": {
            "type": "float, default=2",
            "description": "The power of the Minkowski metric to be used to calculate distance\n    between points."
          },
          "sample_weight": {
            "type": "array-like of shape (n_samples,), default=None",
            "description": "Weight of each sample, such that a sample with a weight of at least\n    ``min_samples`` is by itself a core sample; a sample with negative\n    weight may inhibit its eps-neighbor from being core.\n    Note that weights are absolute, and default to 1."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "The number of parallel jobs to run for neighbors search. ``None`` means\n    1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means\n    using all processors. See :term:`Glossary <n_jobs>` for more details.\n    If precomputed distance are used, parallel execution is not available\n    and thus n_jobs will have no effect."
          }
        },
        "returns": "core_samples : ndarray of shape (n_core_samples,)\n    Indices of core samples.\n\nlabels : ndarray of shape (n_samples,)\n    Cluster labels for each point.  Noisy samples are given the label -1.",
        "raises": "",
        "see_also": "DBSCAN : An estimator interface for this clustering algorithm.\nOPTICS : A similar estimator interface clustering at multiple values of\n    eps. Our implementation is optimized for memory usage.",
        "notes": "For an example, see :ref:`sphx_glr_auto_examples_cluster_plot_dbscan.py`.\n\nThis implementation bulk-computes all neighborhood queries, which increases\nthe memory complexity to O(n.d) where d is the average number of neighbors,\nwhile original DBSCAN had memory complexity O(n). It may attract a higher\nmemory complexity when querying these nearest neighborhoods, depending\non the ``algorithm``.\n\nOne way to avoid the query complexity is to pre-compute sparse\nneighborhoods in chunks using\n:func:`NearestNeighbors.radius_neighbors_graph\n<sklearn.neighbors.NearestNeighbors.radius_neighbors_graph>` with\n``mode='distance'``, then using ``metric='precomputed'`` here.\n\nAnother way to reduce memory and computation time is to remove\n(near-)duplicate points and use ``sample_weight`` instead.\n\n:class:`~sklearn.cluster.OPTICS` provides a similar clustering with lower\nmemory usage.\n\nReferences\n----------\nEster, M., H. P. Kriegel, J. Sander, and X. Xu, `\"A Density-Based\nAlgorithm for Discovering Clusters in Large Spatial Databases with Noise\"\n<https://www.dbs.ifi.lmu.de/Publikationen/Papers/KDD-96.final.frame.pdf>`_.\nIn: Proceedings of the 2nd International Conference on Knowledge Discovery\nand Data Mining, Portland, OR, AAAI Press, pp. 226-231. 1996\n\nSchubert, E., Sander, J., Ester, M., Kriegel, H. P., & Xu, X. (2017).\n:doi:`\"DBSCAN revisited, revisited: why and how you should (still) use DBSCAN.\"\n<10.1145/3068335>`\nACM Transactions on Database Systems (TODS), 42(3), 19.",
        "examples": ">>> from sklearn.cluster import dbscan\n>>> X = [[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]]\n>>> core_samples, labels = dbscan(X, eps=3, min_samples=2)\n>>> core_samples\narray([0, 1, 2, 3, 4])\n>>> labels\narray([ 0,  0,  0,  1,  1, -1])"
      }
    },
    {
      "name": "estimate_bandwidth",
      "signature": "estimate_bandwidth(X, *, quantile=0.3, n_samples=None, random_state=0, n_jobs=None)",
      "docstring": {
        "description": "Estimate the bandwidth to use with the mean-shift algorithm.\n\nThis function takes time at least quadratic in `n_samples`. For large\ndatasets, it is wise to subsample by setting `n_samples`. Alternatively,\nthe parameter `bandwidth` can be set to a small value without estimating\nit.",
        "parameters": {
          "X": {
            "type": "array-like of shape (n_samples, n_features)",
            "description": "Input points."
          },
          "quantile": {
            "type": "float, default=0.3",
            "description": "Should be between [0, 1]\n    0.5 means that the median of all pairwise distances is used."
          },
          "n_samples": {
            "type": "int, default=None",
            "description": "The number of samples to use. If not given, all samples are used."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "The generator used to randomly select the samples from input points\n    for bandwidth estimation. Use an int to make the randomness\n    deterministic.\n    See :term:`Glossary <random_state>`."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "The number of parallel jobs to run for neighbors search.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          }
        },
        "returns": "bandwidth : float\n    The bandwidth parameter.",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ">>> import numpy as np\n>>> from sklearn.cluster import estimate_bandwidth\n>>> X = np.array([[1, 1], [2, 1], [1, 0],\n...               [4, 7], [3, 5], [3, 6]])\n>>> estimate_bandwidth(X, quantile=0.5)\nnp.float64(1.61...)"
      }
    },
    {
      "name": "get_bin_seeds",
      "signature": "get_bin_seeds(X, bin_size, min_bin_freq=1)",
      "docstring": {
        "description": "Find seeds for mean_shift.\n\nFinds seeds by first binning data onto a grid whose lines are\nspaced bin_size apart, and then choosing those bins with at least\nmin_bin_freq points.",
        "parameters": {
          "X": {
            "type": "array-like of shape (n_samples, n_features)",
            "description": "Input points, the same points that will be used in mean_shift."
          },
          "bin_size": {
            "type": "float",
            "description": "Controls the coarseness of the binning. Smaller values lead\n    to more seeding (which is computationally more expensive). If you're\n    not sure how to set this, set it to the value of the bandwidth used\n    in clustering.mean_shift."
          },
          "min_bin_freq": {
            "type": "int, default=1",
            "description": "Only bins with at least min_bin_freq will be selected as seeds.\n    Raising this value decreases the number of seeds found, which\n    makes mean_shift computationally cheaper."
          }
        },
        "returns": "bin_seeds : array-like of shape (n_samples, n_features)\n    Points used as initial kernel positions in clustering.mean_shift.",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "k_means",
      "signature": "k_means(X, n_clusters, *, sample_weight=None, init='k-means++', n_init='auto', max_iter=300, verbose=False, tol=0.0001, random_state=None, copy_x=True, algorithm='lloyd', return_n_iter=False)",
      "docstring": {
        "description": "Perform K-means clustering algorithm.\n\nRead more in the :ref:`User Guide <k_means>`.",
        "parameters": {
          "X": {
            "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
            "description": "The observations to cluster. It must be noted that the data\n    will be converted to C ordering, which will cause a memory copy\n    if the given data is not C-contiguous."
          },
          "n_clusters": {
            "type": "int",
            "description": "The number of clusters to form as well as the number of\n    centroids to generate."
          },
          "sample_weight": {
            "type": "array-like of shape (n_samples,), default=None",
            "description": "The weights for each observation in `X`. If `None`, all observations\n    are assigned equal weight. `sample_weight` is not used during\n    initialization if `init` is a callable or a user provided array."
          },
          "init": {
            "type": "{'k-means++', 'random'}, callable or array-like of shape             (n_clusters, n_features), default='k-means++'",
            "description": "Method for initialization:\n\n    - `'k-means++'` : selects initial cluster centers for k-mean\n      clustering in a smart way to speed up convergence. See section\n      Notes in k_init for more details.\n    - `'random'`: choose `n_clusters` observations (rows) at random from data\n      for the initial centroids.\n    - If an array is passed, it should be of shape `(n_clusters, n_features)`\n      and gives the initial centers.\n    - If a callable is passed, it should take arguments `X`, `n_clusters` and a\n      random state and return an initialization."
          },
          "n_init": {
            "type": "'auto' or int, default=\"auto\"",
            "description": "Number of time the k-means algorithm will be run with different\n    centroid seeds. The final results will be the best output of\n    n_init consecutive runs in terms of inertia.\n\n    When `n_init='auto'`, the number of runs depends on the value of init:\n    10 if using `init='random'` or `init` is a callable;\n    1 if using `init='k-means++'` or `init` is an array-like.\n\n    .. versionadded:: 1.2\n       Added 'auto' option for `n_init`.\n\n    .. versionchanged:: 1.4\n       Default value for `n_init` changed to `'auto'`."
          },
          "max_iter": {
            "type": "int, default=300",
            "description": "Maximum number of iterations of the k-means algorithm to run."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Verbosity mode."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "Relative tolerance with regards to Frobenius norm of the difference\n    in the cluster centers of two consecutive iterations to declare\n    convergence."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Determines random number generation for centroid initialization. Use\n    an int to make the randomness deterministic.\n    See :term:`Glossary <random_state>`."
          },
          "copy_x": {
            "type": "bool, default=True",
            "description": "When pre-computing distances it is more numerically accurate to center\n    the data first. If `copy_x` is True (default), then the original data is\n    not modified. If False, the original data is modified, and put back\n    before the function returns, but small numerical differences may be\n    introduced by subtracting and then adding the data mean. Note that if\n    the original data is not C-contiguous, a copy will be made even if\n    `copy_x` is False. If the original data is sparse, but not in CSR format,\n    a copy will be made even if `copy_x` is False."
          },
          "algorithm": {
            "type": "{\"lloyd\", \"elkan\"}, default=\"lloyd\"",
            "description": "K-means algorithm to use. The classical EM-style algorithm is `\"lloyd\"`.\n    The `\"elkan\"` variation can be more efficient on some datasets with\n    well-defined clusters, by using the triangle inequality. However it's\n    more memory intensive due to the allocation of an extra array of shape\n    `(n_samples, n_clusters)`.\n\n    .. versionchanged:: 0.18\n        Added Elkan algorithm\n\n    .. versionchanged:: 1.1\n        Renamed \"full\" to \"lloyd\", and deprecated \"auto\" and \"full\".\n        Changed \"auto\" to use \"lloyd\" instead of \"elkan\"."
          },
          "return_n_iter": {
            "type": "bool, default=False",
            "description": "Whether or not to return the number of iterations."
          }
        },
        "returns": "centroid : ndarray of shape (n_clusters, n_features)\n    Centroids found at the last iteration of k-means.\n\nlabel : ndarray of shape (n_samples,)\n    The `label[i]` is the code or index of the centroid the\n    i'th observation is closest to.\n\ninertia : float\n    The final value of the inertia criterion (sum of squared distances to\n    the closest centroid for all observations in the training set).\n\nbest_n_iter : int\n    Number of iterations corresponding to the best results.\n    Returned only if `return_n_iter` is set to True.",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ">>> import numpy as np\n>>> from sklearn.cluster import k_means\n>>> X = np.array([[1, 2], [1, 4], [1, 0],\n...               [10, 2], [10, 4], [10, 0]])\n>>> centroid, label, inertia = k_means(\n...     X, n_clusters=2, n_init=\"auto\", random_state=0\n... )\n>>> centroid\narray([[10.,  2.],\n       [ 1.,  2.]])\n>>> label\narray([1, 1, 1, 0, 0, 0], dtype=int32)\n>>> inertia\n16.0"
      }
    },
    {
      "name": "kmeans_plusplus",
      "signature": "kmeans_plusplus(X, n_clusters, *, sample_weight=None, x_squared_norms=None, random_state=None, n_local_trials=None)",
      "docstring": {
        "description": "Init n_clusters seeds according to k-means++.\n\n.. versionadded:: 0.24",
        "parameters": {
          "X": {
            "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
            "description": "The data to pick seeds from."
          },
          "n_clusters": {
            "type": "int",
            "description": "The number of centroids to initialize."
          },
          "sample_weight": {
            "type": "array-like of shape (n_samples,), default=None",
            "description": "The weights for each observation in `X`. If `None`, all observations\n    are assigned equal weight. `sample_weight` is ignored if `init`\n    is a callable or a user provided array.\n\n    .. versionadded:: 1.3"
          },
          "x_squared_norms": {
            "type": "array-like of shape (n_samples,), default=None",
            "description": "Squared Euclidean norm of each data point."
          },
          "random_state": {
            "type": "int or RandomState instance, default=None",
            "description": "Determines random number generation for centroid initialization. Pass\n    an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "n_local_trials": {
            "type": "int, default=None",
            "description": "The number of seeding trials for each center (except the first),\n    of which the one reducing inertia the most is greedily chosen.\n    Set to None to make the number of trials depend logarithmically\n    on the number of seeds (2+log(k)) which is the recommended setting.\n    Setting to 1 disables the greedy cluster selection and recovers the\n    vanilla k-means++ algorithm which was empirically shown to work less\n    well than its greedy variant."
          }
        },
        "returns": "centers : ndarray of shape (n_clusters, n_features)\n    The initial centers for k-means.\n\nindices : ndarray of shape (n_clusters,)\n    The index location of the chosen centers in the data array X. For a\n    given index and center, X[index] = center.",
        "raises": "",
        "see_also": "",
        "notes": "Selects initial cluster centers for k-mean clustering in a smart way\nto speed up convergence. see: Arthur, D. and Vassilvitskii, S.\n\"k-means++: the advantages of careful seeding\". ACM-SIAM symposium\non Discrete algorithms. 2007",
        "examples": ">>> from sklearn.cluster import kmeans_plusplus\n>>> import numpy as np\n>>> X = np.array([[1, 2], [1, 4], [1, 0],\n...               [10, 2], [10, 4], [10, 0]])\n>>> centers, indices = kmeans_plusplus(X, n_clusters=2, random_state=0)\n>>> centers\narray([[10,  2],\n       [ 1,  0]])\n>>> indices\narray([3, 2])"
      }
    },
    {
      "name": "linkage_tree",
      "signature": "linkage_tree(X, connectivity=None, n_clusters=None, linkage='complete', affinity='euclidean', return_distance=False)",
      "docstring": {
        "description": "Linkage agglomerative clustering based on a Feature matrix.\n\nThe inertia matrix uses a Heapq-based representation.\n\nThis is the structured version, that takes into account some topological\nstructure between samples.\n\nRead more in the :ref:`User Guide <hierarchical_clustering>`.",
        "parameters": {
          "X": {
            "type": "array-like of shape (n_samples, n_features)",
            "description": "Feature matrix representing `n_samples` samples to be clustered."
          },
          "connectivity": {
            "type": "sparse matrix, default=None",
            "description": "Connectivity matrix. Defines for each sample the neighboring samples\n    following a given structure of the data. The matrix is assumed to\n    be symmetric and only the upper triangular half is used.\n    Default is `None`, i.e, the Ward algorithm is unstructured."
          },
          "n_clusters": {
            "type": "int, default=None",
            "description": "Stop early the construction of the tree at `n_clusters`. This is\n    useful to decrease computation time if the number of clusters is\n    not small compared to the number of samples. In this case, the\n    complete tree is not computed, thus the 'children' output is of\n    limited use, and the 'parents' output should rather be used.\n    This option is valid only when specifying a connectivity matrix."
          },
          "linkage": {
            "type": "{\"average\", \"complete\", \"single\"}, default=\"complete\"",
            "description": "Which linkage criteria to use. The linkage criterion determines which\n    distance to use between sets of observation.\n        - \"average\" uses the average of the distances of each observation of\n          the two sets.\n        - \"complete\" or maximum linkage uses the maximum distances between\n          all observations of the two sets.\n        - \"single\" uses the minimum of the distances between all\n          observations of the two sets."
          },
          "affinity": {
            "type": "str or callable, default='euclidean'",
            "description": "Which metric to use. Can be 'euclidean', 'manhattan', or any\n    distance known to paired distance (see metric.pairwise)."
          },
          "return_distance": {
            "type": "bool, default=False",
            "description": "Whether or not to return the distances between the clusters."
          }
        },
        "returns": "children : ndarray of shape (n_nodes-1, 2)\n    The children of each non-leaf node. Values less than `n_samples`\n    correspond to leaves of the tree which are the original samples.\n    A node `i` greater than or equal to `n_samples` is a non-leaf\n    node and has children `children_[i - n_samples]`. Alternatively\n    at the i-th iteration, children[i][0] and children[i][1]\n    are merged to form node `n_samples + i`.\n\nn_connected_components : int\n    The number of connected components in the graph.\n\nn_leaves : int\n    The number of leaves in the tree.\n\nparents : ndarray of shape (n_nodes, ) or None\n    The parent of each node. Only returned when a connectivity matrix\n    is specified, elsewhere 'None' is returned.\n\ndistances : ndarray of shape (n_nodes-1,)\n    Returned when `return_distance` is set to `True`.\n\n    distances[i] refers to the distance between children[i][0] and\n    children[i][1] when they are merged.",
        "raises": "",
        "see_also": "ward_tree : Hierarchical clustering with ward linkage.",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "mean_shift",
      "signature": "mean_shift(X, *, bandwidth=None, seeds=None, bin_seeding=False, min_bin_freq=1, cluster_all=True, max_iter=300, n_jobs=None)",
      "docstring": {
        "description": "Perform mean shift clustering of data using a flat kernel.\n\nRead more in the :ref:`User Guide <mean_shift>`.",
        "parameters": {
          "X": {
            "type": "array-like of shape (n_samples, n_features)",
            "description": "Input data."
          },
          "bandwidth": {
            "type": "float, default=None",
            "description": "Kernel bandwidth. If not None, must be in the range [0, +inf).\n\n    If None, the bandwidth is determined using a heuristic based on\n    the median of all pairwise distances. This will take quadratic time in\n    the number of samples. The sklearn.cluster.estimate_bandwidth function\n    can be used to do this more efficiently."
          },
          "seeds": {
            "type": "array-like of shape (n_seeds, n_features) or None",
            "description": "Point used as initial kernel locations. If None and bin_seeding=False,\n    each data point is used as a seed. If None and bin_seeding=True,\n    see bin_seeding."
          },
          "bin_seeding": {
            "type": "bool, default=False",
            "description": "If true, initial kernel locations are not locations of all\n    points, but rather the location of the discretized version of\n    points, where points are binned onto a grid whose coarseness\n    corresponds to the bandwidth. Setting this option to True will speed\n    up the algorithm because fewer seeds will be initialized.\n    Ignored if seeds argument is not None."
          },
          "min_bin_freq": {
            "type": "int, default=1",
            "description": "To speed up the algorithm, accept only those bins with at least\n   min_bin_freq points as seeds."
          },
          "cluster_all": {
            "type": "bool, default=True",
            "description": "If true, then all points are clustered, even those orphans that are\n    not within any kernel. Orphans are assigned to the nearest kernel.\n    If false, then orphans are given cluster label -1."
          },
          "max_iter": {
            "type": "int, default=300",
            "description": "Maximum number of iterations, per seed point before the clustering\n    operation terminates (for that seed point), if has not converged yet."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "The number of jobs to use for the computation. The following tasks benefit\n    from the parallelization:\n\n    - The search of nearest neighbors for bandwidth estimation and label\n      assignments. See the details in the docstring of the\n      ``NearestNeighbors`` class.\n    - Hill-climbing optimization for all seeds.\n\n    See :term:`Glossary <n_jobs>` for more details.\n\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details.\n\n    .. versionadded:: 0.17\n       Parallel Execution using *n_jobs*."
          }
        },
        "returns": "cluster_centers : ndarray of shape (n_clusters, n_features)\n    Coordinates of cluster centers.\n\nlabels : ndarray of shape (n_samples,)\n    Cluster labels for each point.",
        "raises": "",
        "see_also": "",
        "notes": "For a usage example, see\n:ref:`sphx_glr_auto_examples_cluster_plot_mean_shift.py`.",
        "examples": ">>> import numpy as np\n>>> from sklearn.cluster import mean_shift\n>>> X = np.array([[1, 1], [2, 1], [1, 0],\n...               [4, 7], [3, 5], [3, 6]])\n>>> cluster_centers, labels = mean_shift(X, bandwidth=2)\n>>> cluster_centers\narray([[3.33..., 6.     ],\n       [1.33..., 0.66...]])\n>>> labels\narray([1, 1, 1, 0, 0, 0])"
      }
    },
    {
      "name": "spectral_clustering",
      "signature": "spectral_clustering(affinity, *, n_clusters=8, n_components=None, eigen_solver=None, random_state=None, n_init=10, eigen_tol='auto', assign_labels='kmeans', verbose=False)",
      "docstring": {
        "description": "Apply clustering to a projection of the normalized Laplacian.\n\nIn practice Spectral Clustering is very useful when the structure of\nthe individual clusters is highly non-convex or more generally when\na measure of the center and spread of the cluster is not a suitable\ndescription of the complete cluster. For instance, when clusters are\nnested circles on the 2D plane.\n\nIf affinity is the adjacency matrix of a graph, this method can be\nused to find normalized graph cuts [1]_, [2]_.\n\nRead more in the :ref:`User Guide <spectral_clustering>`.",
        "parameters": {
          "affinity": {
            "type": "{array-like, sparse matrix} of shape (n_samples, n_samples)",
            "description": "The affinity matrix describing the relationship of the samples to\n    embed. **Must be symmetric**.\n\n    Possible examples:\n      - adjacency matrix of a graph,\n      - heat kernel of the pairwise distance matrix of the samples,\n      - symmetric k-nearest neighbours connectivity matrix of the samples."
          },
          "n_clusters": {
            "type": "int, default=None",
            "description": "Number of clusters to extract."
          },
          "n_components": {
            "type": "int, default=n_clusters",
            "description": "Number of eigenvectors to use for the spectral embedding."
          },
          "eigen_solver": {
            "type": "{None, 'arpack', 'lobpcg', or 'amg'}",
            "description": "The eigenvalue decomposition method. If None then ``'arpack'`` is used.\n    See [4]_ for more details regarding ``'lobpcg'``.\n    Eigensolver ``'amg'`` runs ``'lobpcg'`` with optional\n    Algebraic MultiGrid preconditioning and requires pyamg to be installed.\n    It can be faster on very large sparse problems [6]_ and [7]_."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "A pseudo random number generator used for the initialization\n    of the lobpcg eigenvectors decomposition when `eigen_solver ==\n    'amg'`, and for the K-Means initialization. Use an int to make\n    the results deterministic across calls (See\n    :term:`Glossary <random_state>`).\n\n    .. note::\n        When using `eigen_solver == 'amg'`,\n        it is necessary to also fix the global numpy seed with\n        `np.random.seed(int)` to get deterministic results. See\n        https://github.com/pyamg/pyamg/issues/139 for further\n        information."
          },
          "n_init": {
            "type": "int, default=10",
            "description": "Number of time the k-means algorithm will be run with different\n    centroid seeds. The final results will be the best output of n_init\n    consecutive runs in terms of inertia. Only used if\n    ``assign_labels='kmeans'``."
          },
          "eigen_tol": {
            "type": "float, default=\"auto\"",
            "description": "Stopping criterion for eigendecomposition of the Laplacian matrix.\n    If `eigen_tol=\"auto\"` then the passed tolerance will depend on the\n    `eigen_solver`:\n\n    - If `eigen_solver=\"arpack\"`, then `eigen_tol=0.0`;\n    - If `eigen_solver=\"lobpcg\"` or `eigen_solver=\"amg\"`, then\n      `eigen_tol=None` which configures the underlying `lobpcg` solver to\n      automatically resolve the value according to their heuristics. See,\n      :func:`scipy.sparse.linalg.lobpcg` for details.\n\n    Note that when using `eigen_solver=\"lobpcg\"` or `eigen_solver=\"amg\"`\n    values of `tol<1e-5` may lead to convergence issues and should be\n    avoided.\n\n    .. versionadded:: 1.2\n       Added 'auto' option."
          },
          "assign_labels": {
            "type": "{'kmeans', 'discretize', 'cluster_qr'}, default='kmeans'",
            "description": "The strategy to use to assign labels in the embedding\n    space.  There are three ways to assign labels after the Laplacian\n    embedding.  k-means can be applied and is a popular choice. But it can\n    also be sensitive to initialization. Discretization is another\n    approach which is less sensitive to random initialization [3]_.\n    The cluster_qr method [5]_ directly extracts clusters from eigenvectors\n    in spectral clustering. In contrast to k-means and discretization, cluster_qr\n    has no tuning parameters and is not an iterative method, yet may outperform\n    k-means and discretization in terms of both quality and speed. For a detailed\n    comparison of clustering strategies, refer to the following example:\n    :ref:`sphx_glr_auto_examples_cluster_plot_coin_segmentation.py`.\n\n    .. versionchanged:: 1.1\n       Added new labeling method 'cluster_qr'."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Verbosity mode.\n\n    .. versionadded:: 0.24"
          }
        },
        "returns": "labels : array of integers, shape: n_samples\n    The labels of the clusters.",
        "raises": "",
        "see_also": "",
        "notes": "The graph should contain only one connected component, elsewhere\nthe results make little sense.\n\nThis algorithm solves the normalized cut for `k=2`: it is a\nnormalized spectral clustering.\n\nReferences\n----------\n\n.. [1] :doi:`Normalized cuts and image segmentation, 2000\n       Jianbo Shi, Jitendra Malik\n       <10.1109/34.868688>`\n\n.. [2] :doi:`A Tutorial on Spectral Clustering, 2007\n       Ulrike von Luxburg\n       <10.1007/s11222-007-9033-z>`\n\n.. [3] `Multiclass spectral clustering, 2003\n       Stella X. Yu, Jianbo Shi\n       <https://people.eecs.berkeley.edu/~jordan/courses/281B-spring04/readings/yu-shi.pdf>`_\n\n.. [4] :doi:`Toward the Optimal Preconditioned Eigensolver:\n       Locally Optimal Block Preconditioned Conjugate Gradient Method, 2001\n       A. V. Knyazev\n       SIAM Journal on Scientific Computing 23, no. 2, pp. 517-541.\n       <10.1137/S1064827500366124>`\n\n.. [5] :doi:`Simple, direct, and efficient multi-way spectral clustering, 2019\n       Anil Damle, Victor Minden, Lexing Ying\n       <10.1093/imaiai/iay008>`\n\n.. [6] :doi:`Multiscale Spectral Image Segmentation Multiscale preconditioning\n       for computing eigenvalues of graph Laplacians in image segmentation, 2006\n       Andrew Knyazev\n       <10.13140/RG.2.2.35280.02565>`\n\n.. [7] :doi:`Preconditioned spectral clustering for stochastic block partition\n       streaming graph challenge (Preliminary version at arXiv.)\n       David Zhuzhunashvili, Andrew Knyazev\n       <10.1109/HPEC.2017.8091045>`",
        "examples": ">>> import numpy as np\n>>> from sklearn.metrics.pairwise import pairwise_kernels\n>>> from sklearn.cluster import spectral_clustering\n>>> X = np.array([[1, 1], [2, 1], [1, 0],\n...               [4, 7], [3, 5], [3, 6]])\n>>> affinity = pairwise_kernels(X, metric='rbf')\n>>> spectral_clustering(\n...     affinity=affinity, n_clusters=2, assign_labels=\"discretize\", random_state=0\n... )\narray([1, 1, 1, 0, 0, 0])"
      }
    },
    {
      "name": "ward_tree",
      "signature": "ward_tree(X, *, connectivity=None, n_clusters=None, return_distance=False)",
      "docstring": {
        "description": "Ward clustering based on a Feature matrix.\n\nRecursively merges the pair of clusters that minimally increases\nwithin-cluster variance.\n\nThe inertia matrix uses a Heapq-based representation.\n\nThis is the structured version, that takes into account some topological\nstructure between samples.\n\nRead more in the :ref:`User Guide <hierarchical_clustering>`.",
        "parameters": {
          "X": {
            "type": "array-like of shape (n_samples, n_features)",
            "description": "Feature matrix representing `n_samples` samples to be clustered."
          },
          "connectivity": {
            "type": "{array-like, sparse matrix}, default=None",
            "description": "Connectivity matrix. Defines for each sample the neighboring samples\n    following a given structure of the data. The matrix is assumed to\n    be symmetric and only the upper triangular half is used.\n    Default is None, i.e, the Ward algorithm is unstructured."
          },
          "n_clusters": {
            "type": "int, default=None",
            "description": "`n_clusters` should be less than `n_samples`.  Stop early the\n    construction of the tree at `n_clusters.` This is useful to decrease\n    computation time if the number of clusters is not small compared to the\n    number of samples. In this case, the complete tree is not computed, thus\n    the 'children' output is of limited use, and the 'parents' output should\n    rather be used. This option is valid only when specifying a connectivity\n    matrix."
          },
          "return_distance": {
            "type": "bool, default=False",
            "description": "If `True`, return the distance between the clusters."
          }
        },
        "returns": "children : ndarray of shape (n_nodes-1, 2)\n    The children of each non-leaf node. Values less than `n_samples`\n    correspond to leaves of the tree which are the original samples.\n    A node `i` greater than or equal to `n_samples` is a non-leaf\n    node and has children `children_[i - n_samples]`. Alternatively\n    at the i-th iteration, children[i][0] and children[i][1]\n    are merged to form node `n_samples + i`.\n\nn_connected_components : int\n    The number of connected components in the graph.\n\nn_leaves : int\n    The number of leaves in the tree.\n\nparents : ndarray of shape (n_nodes,) or None\n    The parent of each node. Only returned when a connectivity matrix\n    is specified, elsewhere 'None' is returned.\n\ndistances : ndarray of shape (n_nodes-1,)\n    Only returned if `return_distance` is set to `True` (for compatibility).\n    The distances between the centers of the nodes. `distances[i]`\n    corresponds to a weighted Euclidean distance between\n    the nodes `children[i, 1]` and `children[i, 2]`. If the nodes refer to\n    leaves of the tree, then `distances[i]` is their unweighted Euclidean\n    distance. Distances are updated in the following way\n    (from scipy.hierarchy.linkage):\n\n    The new entry :math:`d(u,v)` is computed as follows,\n\n    .. math::\n\n       d(u,v) = \\sqrt{\\frac{|v|+|s|}\n                           {T}d(v,s)^2\n                    + \\frac{|v|+|t|}\n                           {T}d(v,t)^2\n                    - \\frac{|v|}\n                           {T}d(s,t)^2}\n\n    where :math:`u` is the newly joined cluster consisting of\n    clusters :math:`s` and :math:`t`, :math:`v` is an unused\n    cluster in the forest, :math:`T=|v|+|s|+|t|`, and\n    :math:`|*|` is the cardinality of its argument. This is also\n    known as the incremental algorithm.",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ">>> import numpy as np\n>>> from sklearn.cluster import ward_tree\n>>> X = np.array([[1, 2], [1, 4], [1, 0],\n...               [4, 2], [4, 4], [4, 0]])\n>>> children, n_connected_components, n_leaves, parents = ward_tree(X)\n>>> children\narray([[0, 1],\n       [3, 5],\n       [2, 6],\n       [4, 7],\n       [8, 9]])\n>>> n_connected_components\n1\n>>> n_leaves\n6"
      }
    }
  ],
  "classes": [
    {
      "name": "AffinityPropagation",
      "docstring": {
        "description": "Perform Affinity Propagation Clustering of data.\n\nRead more in the :ref:`User Guide <affinity_propagation>`.",
        "parameters": {
          "damping": {
            "type": "float, default=0.5",
            "description": "Damping factor in the range `[0.5, 1.0)` is the extent to\n    which the current value is maintained relative to\n    incoming values (weighted 1 - damping). This in order\n    to avoid numerical oscillations when updating these\n    values (messages)."
          },
          "max_iter": {
            "type": "int, default=200",
            "description": "Maximum number of iterations."
          },
          "convergence_iter": {
            "type": "int, default=15",
            "description": "Number of iterations with no change in the number\n    of estimated clusters that stops the convergence."
          },
          "copy": {
            "type": "bool, default=True",
            "description": "Make a copy of input data."
          },
          "preference": {
            "type": "array-like of shape (n_samples,) or float, default=None",
            "description": "Preferences for each point - points with larger values of\n    preferences are more likely to be chosen as exemplars. The number\n    of exemplars, ie of clusters, is influenced by the input\n    preferences value. If the preferences are not passed as arguments,\n    they will be set to the median of the input similarities."
          },
          "affinity": {
            "type": "{'euclidean', 'precomputed'}, default='euclidean'",
            "description": "Which affinity to use. At the moment 'precomputed' and\n    ``euclidean`` are supported. 'euclidean' uses the\n    negative squared euclidean distance between points."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Whether to be verbose."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Pseudo-random number generator to control the starting state.\n    Use an int for reproducible results across function calls.\n    See the :term:`Glossary <random_state>`.\n\n    .. versionadded:: 0.23\n        this parameter was previously hardcoded as 0.\n\nAttributes\n----------"
          },
          "cluster_centers_indices_": {
            "type": "ndarray of shape (n_clusters,)",
            "description": "Indices of cluster centers."
          },
          "cluster_centers_": {
            "type": "ndarray of shape (n_clusters, n_features)",
            "description": "Cluster centers (if affinity != ``precomputed``)."
          },
          "labels_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Labels of each point."
          },
          "affinity_matrix_": {
            "type": "ndarray of shape (n_samples, n_samples)",
            "description": "Stores the affinity matrix used in ``fit``."
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations taken to converge."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "AgglomerativeClustering : Recursively merges the pair of\n    clusters that minimally increases a given linkage distance.\nFeatureAgglomeration : Similar to AgglomerativeClustering,\n    but recursively merges features instead of samples.\nKMeans : K-Means clustering.\nMiniBatchKMeans : Mini-Batch K-Means clustering.\nMeanShift : Mean shift clustering using a flat kernel.\nSpectralClustering : Apply clustering to a projection\n    of the normalized Laplacian.",
        "notes": "For an example usage,\nsee :ref:`sphx_glr_auto_examples_cluster_plot_affinity_propagation.py`.\n\nThe algorithmic complexity of affinity propagation is quadratic\nin the number of points.\n\nWhen the algorithm does not converge, it will still return a arrays of\n``cluster_center_indices`` and labels if there are any exemplars/clusters,\nhowever they may be degenerate and should be used with caution.\n\nWhen ``fit`` does not converge, ``cluster_centers_`` is still populated\nhowever it may be degenerate. In such a case, proceed with caution.\nIf ``fit`` does not converge and fails to produce any ``cluster_centers_``\nthen ``predict`` will label every sample as ``-1``.\n\nWhen all training samples have equal similarities and equal preferences,\nthe assignment of cluster centers and labels depends on the preference.\nIf the preference is smaller than the similarities, ``fit`` will result in\na single cluster center and label ``0`` for every sample. Otherwise, every\ntraining sample becomes its own cluster center and is assigned a unique\nlabel.\n\nReferences\n----------\n\nBrendan J. Frey and Delbert Dueck, \"Clustering by Passing Messages\nBetween Data Points\", Science Feb. 2007",
        "examples": ">>> from sklearn.cluster import AffinityPropagation\n>>> import numpy as np\n>>> X = np.array([[1, 2], [1, 4], [1, 0],\n...               [4, 2], [4, 4], [4, 0]])\n>>> clustering = AffinityPropagation(random_state=5).fit(X)\n>>> clustering\nAffinityPropagation(random_state=5)\n>>> clustering.labels_\narray([0, 0, 0, 1, 1, 1])\n>>> clustering.predict([[0, 0], [4, 4]])\narray([0, 1])\n>>> clustering.cluster_centers_\narray([[1, 2],\n       [4, 2]])"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y=None)",
          "docstring": {
            "description": "Fit the clustering from features, or affinity matrix.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features), or                 array-like of shape (n_samples, n_samples)",
                "description": "Training instances to cluster, or similarities / affinities between\n    instances if ``affinity='precomputed'``. If a sparse feature matrix\n    is provided, it will be converted into a sparse ``csr_matrix``."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              }
            },
            "returns": "self\n    Returns the instance itself.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit_predict",
          "signature": "fit_predict(self, X, y=None)",
          "docstring": {
            "description": "Fit clustering from features/affinity matrix; return cluster labels.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features), or                 array-like of shape (n_samples, n_samples)",
                "description": "Training instances to cluster, or similarities / affinities between\n    instances if ``affinity='precomputed'``. If a sparse feature matrix\n    is provided, it will be converted into a sparse ``csr_matrix``."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              }
            },
            "returns": "labels : ndarray of shape (n_samples,)\n    Cluster labels.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict the closest cluster each sample in X belongs to.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "New data to predict. If a sparse matrix is provided, it will be\n    converted into a sparse ``csr_matrix``."
              }
            },
            "returns": "labels : ndarray of shape (n_samples,)\n    Cluster labels.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "AgglomerativeClustering",
      "docstring": {
        "description": "Agglomerative Clustering.\n\nRecursively merges pair of clusters of sample data; uses linkage distance.\n\nRead more in the :ref:`User Guide <hierarchical_clustering>`.",
        "parameters": {
          "n_clusters": {
            "type": "int or None, default=2",
            "description": "The number of clusters to find. It must be ``None`` if\n    ``distance_threshold`` is not ``None``."
          },
          "metric": {
            "type": "str or callable, default=\"euclidean\"",
            "description": "Metric used to compute the linkage. Can be \"euclidean\", \"l1\", \"l2\",\n    \"manhattan\", \"cosine\", or \"precomputed\". If linkage is \"ward\", only\n    \"euclidean\" is accepted. If \"precomputed\", a distance matrix is needed\n    as input for the fit method. If connectivity is None, linkage is\n    \"single\" and affinity is not \"precomputed\" any valid pairwise distance\n    metric can be assigned.\n\n    .. versionadded:: 1.2"
          },
          "memory": {
            "type": "str or object with the joblib.Memory interface, default=None",
            "description": "Used to cache the output of the computation of the tree.\n    By default, no caching is done. If a string is given, it is the\n    path to the caching directory."
          },
          "connectivity": {
            "type": "array-like, sparse matrix, or callable, default=None",
            "description": "Connectivity matrix. Defines for each sample the neighboring\n    samples following a given structure of the data.\n    This can be a connectivity matrix itself or a callable that transforms\n    the data into a connectivity matrix, such as derived from\n    `kneighbors_graph`. Default is ``None``, i.e, the\n    hierarchical clustering algorithm is unstructured.\n\n    For an example of connectivity matrix using\n    :class:`~sklearn.neighbors.kneighbors_graph`, see\n    :ref:`sphx_glr_auto_examples_cluster_plot_agglomerative_clustering.py`."
          },
          "compute_full_tree": {
            "type": "'auto' or bool, default='auto'",
            "description": "Stop early the construction of the tree at ``n_clusters``. This is\n    useful to decrease computation time if the number of clusters is not\n    small compared to the number of samples. This option is useful only\n    when specifying a connectivity matrix. Note also that when varying the\n    number of clusters and using caching, it may be advantageous to compute\n    the full tree. It must be ``True`` if ``distance_threshold`` is not\n    ``None``. By default `compute_full_tree` is \"auto\", which is equivalent\n    to `True` when `distance_threshold` is not `None` or that `n_clusters`\n    is inferior to the maximum between 100 or `0.02 * n_samples`.\n    Otherwise, \"auto\" is equivalent to `False`."
          },
          "linkage": {
            "type": "{'ward', 'complete', 'average', 'single'}, default='ward'",
            "description": "Which linkage criterion to use. The linkage criterion determines which\n    distance to use between sets of observation. The algorithm will merge\n    the pairs of cluster that minimize this criterion.\n\n    - 'ward' minimizes the variance of the clusters being merged.\n    - 'average' uses the average of the distances of each observation of\n      the two sets.\n    - 'complete' or 'maximum' linkage uses the maximum distances between\n      all observations of the two sets.\n    - 'single' uses the minimum of the distances between all observations\n      of the two sets.\n\n    .. versionadded:: 0.20\n        Added the 'single' option\n\n    For examples comparing different `linkage` criteria, see\n    :ref:`sphx_glr_auto_examples_cluster_plot_linkage_comparison.py`."
          },
          "distance_threshold": {
            "type": "float, default=None",
            "description": "The linkage distance threshold at or above which clusters will not be\n    merged. If not ``None``, ``n_clusters`` must be ``None`` and\n    ``compute_full_tree`` must be ``True``.\n\n    .. versionadded:: 0.21"
          },
          "compute_distances": {
            "type": "bool, default=False",
            "description": "Computes distances between clusters even if `distance_threshold` is not\n    used. This can be used to make dendrogram visualization, but introduces\n    a computational and memory overhead.\n\n    .. versionadded:: 0.24\n\n    For an example of dendrogram visualization, see\n    :ref:`sphx_glr_auto_examples_cluster_plot_agglomerative_dendrogram.py`.\n\nAttributes\n----------"
          },
          "n_clusters_": {
            "type": "int",
            "description": "The number of clusters found by the algorithm. If\n    ``distance_threshold=None``, it will be equal to the given\n    ``n_clusters``."
          },
          "labels_": {
            "type": "ndarray of shape (n_samples)",
            "description": "Cluster labels for each point."
          },
          "n_leaves_": {
            "type": "int",
            "description": "Number of leaves in the hierarchical tree."
          },
          "n_connected_components_": {
            "type": "int",
            "description": "The estimated number of connected components in the graph.\n\n    .. versionadded:: 0.21\n        ``n_connected_components_`` was added to replace ``n_components_``."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "children_": {
            "type": "array-like of shape (n_samples-1, 2)",
            "description": "The children of each non-leaf node. Values less than `n_samples`\n    correspond to leaves of the tree which are the original samples.\n    A node `i` greater than or equal to `n_samples` is a non-leaf\n    node and has children `children_[i - n_samples]`. Alternatively\n    at the i-th iteration, children[i][0] and children[i][1]\n    are merged to form node `n_samples + i`."
          },
          "distances_": {
            "type": "array-like of shape (n_nodes-1,)",
            "description": "Distances between nodes in the corresponding place in `children_`.\n    Only computed if `distance_threshold` is used or `compute_distances`\n    is set to `True`."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "FeatureAgglomeration : Agglomerative clustering but for features instead of\n    samples.\nward_tree : Hierarchical clustering with ward linkage.",
        "notes": "",
        "examples": ">>> from sklearn.cluster import AgglomerativeClustering\n>>> import numpy as np\n>>> X = np.array([[1, 2], [1, 4], [1, 0],\n...               [4, 2], [4, 4], [4, 0]])\n>>> clustering = AgglomerativeClustering().fit(X)\n>>> clustering\nAgglomerativeClustering()\n>>> clustering.labels_\narray([1, 1, 1, 0, 0, 0])"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y=None)",
          "docstring": {
            "description": "Fit the hierarchical clustering from features, or distance matrix.",
            "parameters": {
              "X": {
                "type": "array-like, shape (n_samples, n_features) or                 (n_samples, n_samples)",
                "description": "Training instances to cluster, or distances between instances if\n    ``metric='precomputed'``."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              }
            },
            "returns": "self : object\n    Returns the fitted instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit_predict",
          "signature": "fit_predict(self, X, y=None)",
          "docstring": {
            "description": "Fit and return the result of each sample's clustering assignment.\n\nIn addition to fitting, this method also return the result of the\nclustering assignment for each sample in the training set.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features) or                 (n_samples, n_samples)",
                "description": "Training instances to cluster, or distances between instances if\n    ``affinity='precomputed'``."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              }
            },
            "returns": "labels : ndarray of shape (n_samples,)\n    Cluster labels.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "Birch",
      "docstring": {
        "description": "Implements the BIRCH clustering algorithm.\n\nIt is a memory-efficient, online-learning algorithm provided as an\nalternative to :class:`MiniBatchKMeans`. It constructs a tree\ndata structure with the cluster centroids being read off the leaf.\nThese can be either the final cluster centroids or can be provided as input\nto another clustering algorithm such as :class:`AgglomerativeClustering`.\n\nRead more in the :ref:`User Guide <birch>`.\n\n.. versionadded:: 0.16",
        "parameters": {
          "threshold": {
            "type": "float, default=0.5",
            "description": "The radius of the subcluster obtained by merging a new sample and the\n    closest subcluster should be lesser than the threshold. Otherwise a new\n    subcluster is started. Setting this value to be very low promotes\n    splitting and vice-versa."
          },
          "branching_factor": {
            "type": "int, default=50",
            "description": "Maximum number of CF subclusters in each node. If a new samples enters\n    such that the number of subclusters exceed the branching_factor then\n    that node is split into two nodes with the subclusters redistributed\n    in each. The parent subcluster of that node is removed and two new\n    subclusters are added as parents of the 2 split nodes."
          },
          "n_clusters": {
            "type": "int, instance of sklearn.cluster model or None, default=3",
            "description": "Number of clusters after the final clustering step, which treats the\n    subclusters from the leaves as new samples.\n\n    - `None` : the final clustering step is not performed and the\n      subclusters are returned as they are.\n\n    - :mod:`sklearn.cluster` Estimator : If a model is provided, the model\n      is fit treating the subclusters as new samples and the initial data\n      is mapped to the label of the closest subcluster.\n\n    - `int` : the model fit is :class:`AgglomerativeClustering` with\n      `n_clusters` set to be equal to the int."
          },
          "compute_labels": {
            "type": "bool, default=True",
            "description": "Whether or not to compute labels for each fit."
          },
          "copy": {
            "type": "bool, default=True",
            "description": "Whether or not to make a copy of the given data. If set to False,\n    the initial data will be overwritten.\n\n    .. deprecated:: 1.6\n        `copy` was deprecated in 1.6 and will be removed in 1.8. It has no effect\n        as the estimator does not perform in-place operations on the input data.\n\nAttributes\n----------"
          },
          "root_": {
            "type": "_CFNode",
            "description": "Root of the CFTree."
          },
          "dummy_leaf_": {
            "type": "_CFNode",
            "description": "Start pointer to all the leaves."
          },
          "subcluster_centers_": {
            "type": "ndarray",
            "description": "Centroids of all subclusters read directly from the leaves."
          },
          "subcluster_labels_": {
            "type": "ndarray",
            "description": "Labels assigned to the centroids of the subclusters after\n    they are clustered globally."
          },
          "labels_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Array of labels assigned to the input data.\n    if partial_fit is used instead of fit, they are assigned to the\n    last batch of data."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "MiniBatchKMeans : Alternative implementation that does incremental updates\n    of the centers' positions using mini-batches.",
        "notes": "The tree data structure consists of nodes with each node consisting of\na number of subclusters. The maximum number of subclusters in a node\nis determined by the branching factor. Each subcluster maintains a\nlinear sum, squared sum and the number of samples in that subcluster.\nIn addition, each subcluster can also have a node as its child, if the\nsubcluster is not a member of a leaf node.\n\nFor a new point entering the root, it is merged with the subcluster closest\nto it and the linear sum, squared sum and the number of samples of that\nsubcluster are updated. This is done recursively till the properties of\nthe leaf node are updated.\n\nSee :ref:`sphx_glr_auto_examples_cluster_plot_birch_vs_minibatchkmeans.py` for a\ncomparison with :class:`~sklearn.cluster.MiniBatchKMeans`.\n\nReferences\n----------\n* Tian Zhang, Raghu Ramakrishnan, Maron Livny\n  BIRCH: An efficient data clustering method for large databases.\n  https://www.cs.sfu.ca/CourseCentral/459/han/papers/zhang96.pdf\n\n* Roberto Perdisci\n  JBirch - Java implementation of BIRCH clustering algorithm\n  https://code.google.com/archive/p/jbirch",
        "examples": ">>> from sklearn.cluster import Birch\n>>> X = [[0, 1], [0.3, 1], [-0.3, 1], [0, -1], [0.3, -1], [-0.3, -1]]\n>>> brc = Birch(n_clusters=None)\n>>> brc.fit(X)\nBirch(n_clusters=None)\n>>> brc.predict(X)\narray([0, 0, 0, 1, 1, 1])"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y=None)",
          "docstring": {
            "description": "Build a CF Tree for the input data.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Input data."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              }
            },
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit_predict",
          "signature": "fit_predict(self, X, y=None, **kwargs)",
          "docstring": {
            "description": "Perform clustering on `X` and returns cluster labels.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Input data."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present for API consistency by convention."
              },
              "**kwargs": {
                "type": "dict",
                "description": "Arguments to be passed to ``fit``.\n\n    .. versionadded:: 1.4"
              }
            },
            "returns": "labels : ndarray of shape (n_samples,), dtype=np.int64\n    Cluster labels.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit_transform",
          "signature": "fit_transform(self, X, y=None, **fit_params)",
          "docstring": {
            "description": "Fit to data, then transform it.\n\nFits transformer to `X` and `y` with optional parameters `fit_params`\nand returns a transformed version of `X`.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Input samples."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None",
                "description": "Target values (None for unsupervised transformations)."
              },
              "**fit_params": {
                "type": "dict",
                "description": "Additional fit parameters."
              }
            },
            "returns": "X_new : ndarray array of shape (n_samples, n_features_new)\n    Transformed array.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_feature_names_out",
          "signature": "get_feature_names_out(self, input_features=None)",
          "docstring": {
            "description": "Get output feature names for transformation.\n\nThe feature names out will prefixed by the lowercased class name. For\nexample, if the transformer outputs 3 features, then the feature names\nout are: `[\"class_name0\", \"class_name1\", \"class_name2\"]`.",
            "parameters": {
              "input_features": {
                "type": "array-like of str or None, default=None",
                "description": "Only used to validate feature names with the names seen in `fit`."
              }
            },
            "returns": "feature_names_out : ndarray of str objects\n    Transformed feature names.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "partial_fit",
          "signature": "partial_fit(self, X=None, y=None)",
          "docstring": {
            "description": "Online learning. Prevents rebuilding of CFTree from scratch.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features),             default=None",
                "description": "Input data. If X is not provided, only the global clustering\n    step is done."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              }
            },
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict data using the ``centroids_`` of subclusters.\n\nAvoid computation of the row norms of X.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Input data."
              }
            },
            "returns": "labels : ndarray of shape(n_samples,)\n    Labelled data.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_output",
          "signature": "set_output(self, *, transform=None)",
          "docstring": {
            "description": "Set output container.\n\nSee :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`\nfor an example on how to use the API.",
            "parameters": {
              "transform": {
                "type": "{\"default\", \"pandas\", \"polars\"}, default=None",
                "description": "Configure output of `transform` and `fit_transform`.\n\n    - `\"default\"`: Default output format of a transformer\n    - `\"pandas\"`: DataFrame output\n    - `\"polars\"`: Polars output\n    - `None`: Transform configuration is unchanged\n\n    .. versionadded:: 1.4\n        `\"polars\"` option was added."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "transform",
          "signature": "transform(self, X)",
          "docstring": {
            "description": "Transform X into subcluster centroids dimension.\n\nEach dimension represents the distance from the sample point to each\ncluster centroid.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Input data."
              }
            },
            "returns": "X_trans : {array-like, sparse matrix} of shape (n_samples, n_clusters)\n    Transformed data.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "BisectingKMeans",
      "docstring": {
        "description": "Bisecting K-Means clustering.\n\nRead more in the :ref:`User Guide <bisect_k_means>`.\n\n.. versionadded:: 1.1",
        "parameters": {
          "n_clusters": {
            "type": "int, default=8",
            "description": "The number of clusters to form as well as the number of\n    centroids to generate."
          },
          "init": {
            "type": "{'k-means++', 'random'} or callable, default='random'",
            "description": "Method for initialization:\n\n    'k-means++' : selects initial cluster centers for k-mean\n    clustering in a smart way to speed up convergence. See section\n    Notes in k_init for more details.\n\n    'random': choose `n_clusters` observations (rows) at random from data\n    for the initial centroids.\n\n    If a callable is passed, it should take arguments X, n_clusters and a\n    random state and return an initialization."
          },
          "n_init": {
            "type": "int, default=1",
            "description": "Number of time the inner k-means algorithm will be run with different\n    centroid seeds in each bisection.\n    That will result producing for each bisection best output of n_init\n    consecutive runs in terms of inertia."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Determines random number generation for centroid initialization\n    in inner K-Means. Use an int to make the randomness deterministic.\n    See :term:`Glossary <random_state>`."
          },
          "max_iter": {
            "type": "int, default=300",
            "description": "Maximum number of iterations of the inner k-means algorithm at each\n    bisection."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "Verbosity mode."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "Relative tolerance with regards to Frobenius norm of the difference\n    in the cluster centers of two consecutive iterations  to declare\n    convergence. Used in inner k-means algorithm at each bisection to pick\n    best possible clusters."
          },
          "copy_x": {
            "type": "bool, default=True",
            "description": "When pre-computing distances it is more numerically accurate to center\n    the data first. If copy_x is True (default), then the original data is\n    not modified. If False, the original data is modified, and put back\n    before the function returns, but small numerical differences may be\n    introduced by subtracting and then adding the data mean. Note that if\n    the original data is not C-contiguous, a copy will be made even if\n    copy_x is False. If the original data is sparse, but not in CSR format,\n    a copy will be made even if copy_x is False."
          },
          "algorithm": {
            "type": "{\"lloyd\", \"elkan\"}, default=\"lloyd\"",
            "description": "Inner K-means algorithm used in bisection.\n    The classical EM-style algorithm is `\"lloyd\"`.\n    The `\"elkan\"` variation can be more efficient on some datasets with\n    well-defined clusters, by using the triangle inequality. However it's\n    more memory intensive due to the allocation of an extra array of shape\n    `(n_samples, n_clusters)`."
          },
          "bisecting_strategy": {
            "type": "{\"biggest_inertia\", \"largest_cluster\"},            default=\"biggest_inertia\"",
            "description": "Defines how bisection should be performed:\n\n    - \"biggest_inertia\" means that BisectingKMeans will always check\n      all calculated cluster for cluster with biggest SSE\n      (Sum of squared errors) and bisect it. This approach concentrates on\n      precision, but may be costly in terms of execution time (especially for\n      larger amount of data points).\n\n    - \"largest_cluster\" - BisectingKMeans will always split cluster with\n      largest amount of points assigned to it from all clusters\n      previously calculated. That should work faster than picking by SSE\n      ('biggest_inertia') and may produce similar results in most cases.\n\nAttributes\n----------"
          },
          "cluster_centers_": {
            "type": "ndarray of shape (n_clusters, n_features)",
            "description": "Coordinates of cluster centers. If the algorithm stops before fully\n    converging (see ``tol`` and ``max_iter``), these will not be\n    consistent with ``labels_``."
          },
          "labels_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Labels of each point."
          },
          "inertia_": {
            "type": "float",
            "description": "Sum of squared distances of samples to their closest cluster center,\n    weighted by the sample weights if provided."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`."
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "KMeans : Original implementation of K-Means algorithm.",
        "notes": "It might be inefficient when n_cluster is less than 3, due to unnecessary\ncalculations for that case.",
        "examples": ">>> from sklearn.cluster import BisectingKMeans\n>>> import numpy as np\n>>> X = np.array([[1, 1], [10, 1], [3, 1],\n...               [10, 0], [2, 1], [10, 2],\n...               [10, 8], [10, 9], [10, 10]])\n>>> bisect_means = BisectingKMeans(n_clusters=3, random_state=0).fit(X)\n>>> bisect_means.labels_\narray([0, 2, 0, 2, 0, 2, 1, 1, 1], dtype=int32)\n>>> bisect_means.predict([[0, 0], [12, 3]])\narray([0, 2], dtype=int32)\n>>> bisect_means.cluster_centers_\narray([[ 2., 1.],\n       [10., 9.],\n       [10., 1.]])\n\nFor a comparison between BisectingKMeans and K-Means refer to example\n:ref:`sphx_glr_auto_examples_cluster_plot_bisect_kmeans.py`."
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y=None, sample_weight=None)",
          "docstring": {
            "description": "Compute bisecting k-means clustering.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training instances to cluster.\n\n    .. note:: The data will be converted to C ordering,\n        which will cause a memory copy\n        if the given data is not C-contiguous."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "The weights for each observation in X. If None, all observations\n    are assigned equal weight. `sample_weight` is not used during\n    initialization if `init` is a callable."
              }
            },
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit_predict",
          "signature": "fit_predict(self, X, y=None, sample_weight=None)",
          "docstring": {
            "description": "Compute cluster centers and predict cluster index for each sample.\n\nConvenience method; equivalent to calling fit(X) followed by\npredict(X).",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "New data to transform."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "The weights for each observation in X. If None, all observations\n    are assigned equal weight."
              }
            },
            "returns": "labels : ndarray of shape (n_samples,)\n    Index of the cluster each sample belongs to.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit_transform",
          "signature": "fit_transform(self, X, y=None, sample_weight=None)",
          "docstring": {
            "description": "Compute clustering and transform X to cluster-distance space.\n\nEquivalent to fit(X).transform(X), but more efficiently implemented.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "New data to transform."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "The weights for each observation in X. If None, all observations\n    are assigned equal weight."
              }
            },
            "returns": "X_new : ndarray of shape (n_samples, n_clusters)\n    X transformed in the new space.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_feature_names_out",
          "signature": "get_feature_names_out(self, input_features=None)",
          "docstring": {
            "description": "Get output feature names for transformation.\n\nThe feature names out will prefixed by the lowercased class name. For\nexample, if the transformer outputs 3 features, then the feature names\nout are: `[\"class_name0\", \"class_name1\", \"class_name2\"]`.",
            "parameters": {
              "input_features": {
                "type": "array-like of str or None, default=None",
                "description": "Only used to validate feature names with the names seen in `fit`."
              }
            },
            "returns": "feature_names_out : ndarray of str objects\n    Transformed feature names.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict which cluster each sample in X belongs to.\n\nPrediction is made by going down the hierarchical tree\nin searching of closest leaf cluster.\n\nIn the vector quantization literature, `cluster_centers_` is called\nthe code book and each value returned by `predict` is the index of\nthe closest code in the code book.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "New data to predict."
              }
            },
            "returns": "labels : ndarray of shape (n_samples,)\n    Index of the cluster each sample belongs to.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y=None, sample_weight=None)",
          "docstring": {
            "description": "Opposite of the value of X on the K-means objective.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "New data."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "The weights for each observation in X. If None, all observations\n    are assigned equal weight."
              }
            },
            "returns": "score : float\n    Opposite of the value of X on the K-means objective.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.cluster._bisect_k_means.BisectingKMeans, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.cluster._bisect_k_means.BisectingKMeans",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_output",
          "signature": "set_output(self, *, transform=None)",
          "docstring": {
            "description": "Set output container.\n\nSee :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`\nfor an example on how to use the API.",
            "parameters": {
              "transform": {
                "type": "{\"default\", \"pandas\", \"polars\"}, default=None",
                "description": "Configure output of `transform` and `fit_transform`.\n\n    - `\"default\"`: Default output format of a transformer\n    - `\"pandas\"`: DataFrame output\n    - `\"polars\"`: Polars output\n    - `None`: Transform configuration is unchanged\n\n    .. versionadded:: 1.4\n        `\"polars\"` option was added."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.cluster._bisect_k_means.BisectingKMeans, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.cluster._bisect_k_means.BisectingKMeans",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "transform",
          "signature": "transform(self, X)",
          "docstring": {
            "description": "Transform X to a cluster-distance space.\n\nIn the new space, each dimension is the distance to the cluster\ncenters. Note that even if X is sparse, the array returned by\n`transform` will typically be dense.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "New data to transform."
              }
            },
            "returns": "X_new : ndarray of shape (n_samples, n_clusters)\n    X transformed in the new space.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "DBSCAN",
      "docstring": {
        "description": "Perform DBSCAN clustering from vector array or distance matrix.\n\nDBSCAN - Density-Based Spatial Clustering of Applications with Noise.\nFinds core samples of high density and expands clusters from them.\nGood for data which contains clusters of similar density.\n\nThis implementation has a worst case memory complexity of :math:`O({n}^2)`,\nwhich can occur when the `eps` param is large and `min_samples` is low,\nwhile the original DBSCAN only uses linear memory.\nFor further details, see the Notes below.\n\nRead more in the :ref:`User Guide <dbscan>`.",
        "parameters": {
          "eps": {
            "type": "float, default=0.5",
            "description": "The maximum distance between two samples for one to be considered\n    as in the neighborhood of the other. This is not a maximum bound\n    on the distances of points within a cluster. This is the most\n    important DBSCAN parameter to choose appropriately for your data set\n    and distance function."
          },
          "min_samples": {
            "type": "int, default=5",
            "description": "The number of samples (or total weight) in a neighborhood for a point to\n    be considered as a core point. This includes the point itself. If\n    `min_samples` is set to a higher value, DBSCAN will find denser clusters,\n    whereas if it is set to a lower value, the found clusters will be more\n    sparse."
          },
          "metric": {
            "type": "str, or callable, default='euclidean'",
            "description": "The metric to use when calculating distance between instances in a\n    feature array. If metric is a string or callable, it must be one of\n    the options allowed by :func:`sklearn.metrics.pairwise_distances` for\n    its metric parameter.\n    If metric is \"precomputed\", X is assumed to be a distance matrix and\n    must be square. X may be a :term:`sparse graph`, in which\n    case only \"nonzero\" elements may be considered neighbors for DBSCAN.\n\n    .. versionadded:: 0.17\n       metric *precomputed* to accept precomputed sparse matrix."
          },
          "metric_params": {
            "type": "dict, default=None",
            "description": "Additional keyword arguments for the metric function.\n\n    .. versionadded:: 0.19"
          },
          "algorithm": {
            "type": "{'auto', 'ball_tree', 'kd_tree', 'brute'}, default='auto'",
            "description": "The algorithm to be used by the NearestNeighbors module\n    to compute pointwise distances and find nearest neighbors.\n    See NearestNeighbors module documentation for details."
          },
          "leaf_size": {
            "type": "int, default=30",
            "description": "Leaf size passed to BallTree or cKDTree. This can affect the speed\n    of the construction and query, as well as the memory required\n    to store the tree. The optimal value depends\n    on the nature of the problem."
          },
          "p": {
            "type": "float, default=None",
            "description": "The power of the Minkowski metric to be used to calculate distance\n    between points. If None, then ``p=2`` (equivalent to the Euclidean\n    distance)."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "The number of parallel jobs to run.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details.\n\nAttributes\n----------"
          },
          "core_sample_indices_": {
            "type": "ndarray of shape (n_core_samples,)",
            "description": "Indices of core samples."
          },
          "components_": {
            "type": "ndarray of shape (n_core_samples, n_features)",
            "description": "Copy of each core sample found by training."
          },
          "labels_": {
            "type": "ndarray of shape (n_samples)",
            "description": "Cluster labels for each point in the dataset given to fit().\n    Noisy samples are given the label -1."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "OPTICS : A similar clustering at multiple values of eps. Our implementation\n    is optimized for memory usage.",
        "notes": "For an example, see\n:ref:`sphx_glr_auto_examples_cluster_plot_dbscan.py`.\n\nThis implementation bulk-computes all neighborhood queries, which increases\nthe memory complexity to O(n.d) where d is the average number of neighbors,\nwhile original DBSCAN had memory complexity O(n). It may attract a higher\nmemory complexity when querying these nearest neighborhoods, depending\non the ``algorithm``.\n\nOne way to avoid the query complexity is to pre-compute sparse\nneighborhoods in chunks using\n:func:`NearestNeighbors.radius_neighbors_graph\n<sklearn.neighbors.NearestNeighbors.radius_neighbors_graph>` with\n``mode='distance'``, then using ``metric='precomputed'`` here.\n\nAnother way to reduce memory and computation time is to remove\n(near-)duplicate points and use ``sample_weight`` instead.\n\n:class:`~sklearn.cluster.OPTICS` provides a similar clustering with lower memory\nusage.\n\nReferences\n----------\nEster, M., H. P. Kriegel, J. Sander, and X. Xu, `\"A Density-Based\nAlgorithm for Discovering Clusters in Large Spatial Databases with Noise\"\n<https://www.dbs.ifi.lmu.de/Publikationen/Papers/KDD-96.final.frame.pdf>`_.\nIn: Proceedings of the 2nd International Conference on Knowledge Discovery\nand Data Mining, Portland, OR, AAAI Press, pp. 226-231. 1996\n\nSchubert, E., Sander, J., Ester, M., Kriegel, H. P., & Xu, X. (2017).\n:doi:`\"DBSCAN revisited, revisited: why and how you should (still) use DBSCAN.\"\n<10.1145/3068335>`\nACM Transactions on Database Systems (TODS), 42(3), 19.",
        "examples": ">>> from sklearn.cluster import DBSCAN\n>>> import numpy as np\n>>> X = np.array([[1, 2], [2, 2], [2, 3],\n...               [8, 7], [8, 8], [25, 80]])\n>>> clustering = DBSCAN(eps=3, min_samples=2).fit(X)\n>>> clustering.labels_\narray([ 0,  0,  0,  1,  1, -1])\n>>> clustering\nDBSCAN(eps=3, min_samples=2)"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y=None, sample_weight=None)",
          "docstring": {
            "description": "Perform DBSCAN clustering from features, or distance matrix.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features), or             (n_samples, n_samples)",
                "description": "Training instances to cluster, or distances between instances if\n    ``metric='precomputed'``. If a sparse matrix is provided, it will\n    be converted into a sparse ``csr_matrix``."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Weight of each sample, such that a sample with a weight of at least\n    ``min_samples`` is by itself a core sample; a sample with a\n    negative weight may inhibit its eps-neighbor from being core.\n    Note that weights are absolute, and default to 1."
              }
            },
            "returns": "self : object\n    Returns a fitted instance of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit_predict",
          "signature": "fit_predict(self, X, y=None, sample_weight=None)",
          "docstring": {
            "description": "Compute clusters from a data or distance matrix and predict labels.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features), or             (n_samples, n_samples)",
                "description": "Training instances to cluster, or distances between instances if\n    ``metric='precomputed'``. If a sparse matrix is provided, it will\n    be converted into a sparse ``csr_matrix``."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Weight of each sample, such that a sample with a weight of at least\n    ``min_samples`` is by itself a core sample; a sample with a\n    negative weight may inhibit its eps-neighbor from being core.\n    Note that weights are absolute, and default to 1."
              }
            },
            "returns": "labels : ndarray of shape (n_samples,)\n    Cluster labels. Noisy samples are given the label -1.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.cluster._dbscan.DBSCAN, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.cluster._dbscan.DBSCAN",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "FeatureAgglomeration",
      "docstring": {
        "description": "Agglomerate features.\n\nRecursively merges pair of clusters of features.\n\nRefer to\n:ref:`sphx_glr_auto_examples_cluster_plot_feature_agglomeration_vs_univariate_selection.py`\nfor an example comparison of :class:`FeatureAgglomeration` strategy with a\nunivariate feature selection strategy (based on ANOVA).\n\nRead more in the :ref:`User Guide <hierarchical_clustering>`.",
        "parameters": {
          "n_clusters": {
            "type": "int or None, default=2",
            "description": "The number of clusters to find. It must be ``None`` if\n    ``distance_threshold`` is not ``None``."
          },
          "metric": {
            "type": "str or callable, default=\"euclidean\"",
            "description": "Metric used to compute the linkage. Can be \"euclidean\", \"l1\", \"l2\",\n    \"manhattan\", \"cosine\", or \"precomputed\". If linkage is \"ward\", only\n    \"euclidean\" is accepted. If \"precomputed\", a distance matrix is needed\n    as input for the fit method.\n\n    .. versionadded:: 1.2"
          },
          "memory": {
            "type": "str or object with the joblib.Memory interface, default=None",
            "description": "Used to cache the output of the computation of the tree.\n    By default, no caching is done. If a string is given, it is the\n    path to the caching directory."
          },
          "connectivity": {
            "type": "array-like, sparse matrix, or callable, default=None",
            "description": "Connectivity matrix. Defines for each feature the neighboring\n    features following a given structure of the data.\n    This can be a connectivity matrix itself or a callable that transforms\n    the data into a connectivity matrix, such as derived from\n    `kneighbors_graph`. Default is `None`, i.e, the\n    hierarchical clustering algorithm is unstructured."
          },
          "compute_full_tree": {
            "type": "'auto' or bool, default='auto'",
            "description": "Stop early the construction of the tree at `n_clusters`. This is useful\n    to decrease computation time if the number of clusters is not small\n    compared to the number of features. This option is useful only when\n    specifying a connectivity matrix. Note also that when varying the\n    number of clusters and using caching, it may be advantageous to compute\n    the full tree. It must be ``True`` if ``distance_threshold`` is not\n    ``None``. By default `compute_full_tree` is \"auto\", which is equivalent\n    to `True` when `distance_threshold` is not `None` or that `n_clusters`\n    is inferior to the maximum between 100 or `0.02 * n_samples`.\n    Otherwise, \"auto\" is equivalent to `False`."
          },
          "linkage": {
            "type": "{\"ward\", \"complete\", \"average\", \"single\"}, default=\"ward\"",
            "description": "Which linkage criterion to use. The linkage criterion determines which\n    distance to use between sets of features. The algorithm will merge\n    the pairs of cluster that minimize this criterion.\n\n    - \"ward\" minimizes the variance of the clusters being merged.\n    - \"complete\" or maximum linkage uses the maximum distances between\n      all features of the two sets.\n    - \"average\" uses the average of the distances of each feature of\n      the two sets.\n    - \"single\" uses the minimum of the distances between all features\n      of the two sets."
          },
          "pooling_func": {
            "type": "callable, default=np.mean",
            "description": "This combines the values of agglomerated features into a single\n    value, and should accept an array of shape [M, N] and the keyword\n    argument `axis=1`, and reduce it to an array of size [M]."
          },
          "distance_threshold": {
            "type": "float, default=None",
            "description": "The linkage distance threshold at or above which clusters will not be\n    merged. If not ``None``, ``n_clusters`` must be ``None`` and\n    ``compute_full_tree`` must be ``True``.\n\n    .. versionadded:: 0.21"
          },
          "compute_distances": {
            "type": "bool, default=False",
            "description": "Computes distances between clusters even if `distance_threshold` is not\n    used. This can be used to make dendrogram visualization, but introduces\n    a computational and memory overhead.\n\n    .. versionadded:: 0.24\n\nAttributes\n----------"
          },
          "n_clusters_": {
            "type": "int",
            "description": "The number of clusters found by the algorithm. If\n    ``distance_threshold=None``, it will be equal to the given\n    ``n_clusters``."
          },
          "labels_": {
            "type": "array-like of (n_features,)",
            "description": "Cluster labels for each feature."
          },
          "n_leaves_": {
            "type": "int",
            "description": "Number of leaves in the hierarchical tree."
          },
          "n_connected_components_": {
            "type": "int",
            "description": "The estimated number of connected components in the graph.\n\n    .. versionadded:: 0.21\n        ``n_connected_components_`` was added to replace ``n_components_``."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "children_": {
            "type": "array-like of shape (n_nodes-1, 2)",
            "description": "The children of each non-leaf node. Values less than `n_features`\n    correspond to leaves of the tree which are the original samples.\n    A node `i` greater than or equal to `n_features` is a non-leaf\n    node and has children `children_[i - n_features]`. Alternatively\n    at the i-th iteration, children[i][0] and children[i][1]\n    are merged to form node `n_features + i`."
          },
          "distances_": {
            "type": "array-like of shape (n_nodes-1,)",
            "description": "Distances between nodes in the corresponding place in `children_`.\n    Only computed if `distance_threshold` is used or `compute_distances`\n    is set to `True`."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "AgglomerativeClustering : Agglomerative clustering samples instead of\n    features.\nward_tree : Hierarchical clustering with ward linkage.",
        "notes": "",
        "examples": ">>> import numpy as np\n>>> from sklearn import datasets, cluster\n>>> digits = datasets.load_digits()\n>>> images = digits.images\n>>> X = np.reshape(images, (len(images), -1))\n>>> agglo = cluster.FeatureAgglomeration(n_clusters=32)\n>>> agglo.fit(X)\nFeatureAgglomeration(n_clusters=32)\n>>> X_reduced = agglo.transform(X)\n>>> X_reduced.shape\n(1797, 32)"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y=None)",
          "docstring": {
            "description": "Fit the hierarchical clustering on the data.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "The data."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              }
            },
            "returns": "self : object\n    Returns the transformer.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit_transform",
          "signature": "fit_transform(self, X, y=None, **fit_params)",
          "docstring": {
            "description": "Fit to data, then transform it.\n\nFits transformer to `X` and `y` with optional parameters `fit_params`\nand returns a transformed version of `X`.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Input samples."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None",
                "description": "Target values (None for unsupervised transformations)."
              },
              "**fit_params": {
                "type": "dict",
                "description": "Additional fit parameters."
              }
            },
            "returns": "X_new : ndarray array of shape (n_samples, n_features_new)\n    Transformed array.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_feature_names_out",
          "signature": "get_feature_names_out(self, input_features=None)",
          "docstring": {
            "description": "Get output feature names for transformation.\n\nThe feature names out will prefixed by the lowercased class name. For\nexample, if the transformer outputs 3 features, then the feature names\nout are: `[\"class_name0\", \"class_name1\", \"class_name2\"]`.",
            "parameters": {
              "input_features": {
                "type": "array-like of str or None, default=None",
                "description": "Only used to validate feature names with the names seen in `fit`."
              }
            },
            "returns": "feature_names_out : ndarray of str objects\n    Transformed feature names.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "inverse_transform",
          "signature": "inverse_transform(self, X=None, *, Xt=None)",
          "docstring": {
            "description": "Inverse the transformation and return a vector of size `n_features`.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_clusters) or (n_clusters,)",
                "description": "The values to be assigned to each cluster of samples."
              },
              "Xt": {
                "type": "array-like of shape (n_samples, n_clusters) or (n_clusters,)",
                "description": "The values to be assigned to each cluster of samples.\n\n    .. deprecated:: 1.5\n        `Xt` was deprecated in 1.5 and will be removed in 1.7. Use `X` instead."
              }
            },
            "returns": "X : ndarray of shape (n_samples, n_features) or (n_features,)\n    A vector of size `n_samples` with the values of `Xred` assigned to\n    each of the cluster of samples.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_output",
          "signature": "set_output(self, *, transform=None)",
          "docstring": {
            "description": "Set output container.\n\nSee :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`\nfor an example on how to use the API.",
            "parameters": {
              "transform": {
                "type": "{\"default\", \"pandas\", \"polars\"}, default=None",
                "description": "Configure output of `transform` and `fit_transform`.\n\n    - `\"default\"`: Default output format of a transformer\n    - `\"pandas\"`: DataFrame output\n    - `\"polars\"`: Polars output\n    - `None`: Transform configuration is unchanged\n\n    .. versionadded:: 1.4\n        `\"polars\"` option was added."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "transform",
          "signature": "transform(self, X)",
          "docstring": {
            "description": "Transform a new matrix using the built clustering.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features) or                 (n_samples, n_samples)",
                "description": "A M by N array of M observations in N dimensions or a length\n    M array of M one-dimensional observations."
              }
            },
            "returns": "Y : ndarray of shape (n_samples, n_clusters) or (n_clusters,)\n    The pooled values for each feature cluster.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "HDBSCAN",
      "docstring": {
        "description": "Cluster data using hierarchical density-based clustering.\n\nHDBSCAN - Hierarchical Density-Based Spatial Clustering of Applications\nwith Noise. Performs :class:`~sklearn.cluster.DBSCAN` over varying epsilon\nvalues and integrates the result to find a clustering that gives the best\nstability over epsilon.\nThis allows HDBSCAN to find clusters of varying densities (unlike\n:class:`~sklearn.cluster.DBSCAN`), and be more robust to parameter selection.\nRead more in the :ref:`User Guide <hdbscan>`.\n\nFor an example of how to use HDBSCAN, as well as a comparison to\n:class:`~sklearn.cluster.DBSCAN`, please see the :ref:`plotting demo\n<sphx_glr_auto_examples_cluster_plot_hdbscan.py>`.\n\n.. versionadded:: 1.3",
        "parameters": {
          "min_cluster_size": {
            "type": "int, default=5",
            "description": "The minimum number of samples in a group for that group to be\n    considered a cluster; groupings smaller than this size will be left\n    as noise."
          },
          "min_samples": {
            "type": "int, default=None",
            "description": "The parameter `k` used to calculate the distance between a point\n    `x_p` and its k-th nearest neighbor.\n    When `None`, defaults to `min_cluster_size`."
          },
          "cluster_selection_epsilon": {
            "type": "float, default=0.0",
            "description": "A distance threshold. Clusters below this value will be merged.\n    See [5]_ for more information."
          },
          "max_cluster_size": {
            "type": "int, default=None",
            "description": "A limit to the size of clusters returned by the `\"eom\"` cluster\n    selection algorithm. There is no limit when `max_cluster_size=None`.\n    Has no effect if `cluster_selection_method=\"leaf\"`."
          },
          "metric": {
            "type": "str or callable, default='euclidean'",
            "description": "The metric to use when calculating distance between instances in a\n    feature array.\n\n    - If metric is a string or callable, it must be one of\n      the options allowed by :func:`~sklearn.metrics.pairwise_distances`\n      for its metric parameter.\n\n    - If metric is \"precomputed\", X is assumed to be a distance matrix and\n      must be square."
          },
          "metric_params": {
            "type": "dict, default=None",
            "description": "Arguments passed to the distance metric."
          },
          "alpha": {
            "type": "float, default=1.0",
            "description": "A distance scaling parameter as used in robust single linkage.\n    See [3]_ for more information."
          },
          "algorithm": {
            "type": "{\"auto\", \"brute\", \"kd_tree\", \"ball_tree\"}, default=\"auto\"",
            "description": "Exactly which algorithm to use for computing core distances; By default\n    this is set to `\"auto\"` which attempts to use a\n    :class:`~sklearn.neighbors.KDTree` tree if possible, otherwise it uses\n    a :class:`~sklearn.neighbors.BallTree` tree. Both `\"kd_tree\"` and\n    `\"ball_tree\"` algorithms use the\n    :class:`~sklearn.neighbors.NearestNeighbors` estimator.\n\n    If the `X` passed during `fit` is sparse or `metric` is invalid for\n    both :class:`~sklearn.neighbors.KDTree` and\n    :class:`~sklearn.neighbors.BallTree`, then it resolves to use the\n    `\"brute\"` algorithm."
          },
          "leaf_size": {
            "type": "int, default=40",
            "description": "Leaf size for trees responsible for fast nearest neighbour queries when\n    a KDTree or a BallTree are used as core-distance algorithms. A large\n    dataset size and small `leaf_size` may induce excessive memory usage.\n    If you are running out of memory consider increasing the `leaf_size`\n    parameter. Ignored for `algorithm=\"brute\"`."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "Number of jobs to run in parallel to calculate distances.\n    `None` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    `-1` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "cluster_selection_method": {
            "type": "{\"eom\", \"leaf\"}, default=\"eom\"",
            "description": "The method used to select clusters from the condensed tree. The\n    standard approach for HDBSCAN* is to use an Excess of Mass (`\"eom\"`)\n    algorithm to find the most persistent clusters. Alternatively you can\n    instead select the clusters at the leaves of the tree -- this provides\n    the most fine grained and homogeneous clusters."
          },
          "allow_single_cluster": {
            "type": "bool, default=False",
            "description": "By default HDBSCAN* will not produce a single cluster, setting this\n    to True will override this and allow single cluster results in\n    the case that you feel this is a valid result for your dataset."
          },
          "store_centers": {
            "type": "str, default=None",
            "description": "Which, if any, cluster centers to compute and store. The options are:\n\n    - `None` which does not compute nor store any centers.\n    - `\"centroid\"` which calculates the center by taking the weighted\n      average of their positions. Note that the algorithm uses the\n      euclidean metric and does not guarantee that the output will be\n      an observed data point.\n    - `\"medoid\"` which calculates the center by taking the point in the\n      fitted data which minimizes the distance to all other points in\n      the cluster. This is slower than \"centroid\" since it requires\n      computing additional pairwise distances between points of the\n      same cluster but guarantees the output is an observed data point.\n      The medoid is also well-defined for arbitrary metrics, and does not\n      depend on a euclidean metric.\n    - `\"both\"` which computes and stores both forms of centers."
          },
          "copy": {
            "type": "bool, default=False",
            "description": "If `copy=True` then any time an in-place modifications would be made\n    that would overwrite data passed to :term:`fit`, a copy will first be\n    made, guaranteeing that the original data will be unchanged.\n    Currently, it only applies when `metric=\"precomputed\"`, when passing\n    a dense array or a CSR sparse matrix and when `algorithm=\"brute\"`.\n\nAttributes\n----------"
          },
          "labels_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Cluster labels for each point in the dataset given to :term:`fit`.\n    Outliers are labeled as follows:\n\n    - Noisy samples are given the label -1.\n    - Samples with infinite elements (+/- np.inf) are given the label -2.\n    - Samples with missing data are given the label -3, even if they\n      also have infinite elements."
          },
          "probabilities_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "The strength with which each sample is a member of its assigned\n    cluster.\n\n    - Clustered samples have probabilities proportional to the degree that\n      they persist as part of the cluster.\n    - Noisy samples have probability zero.\n    - Samples with infinite elements (+/- np.inf) have probability 0.\n    - Samples with missing data have probability `np.nan`."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`."
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings."
          },
          "centroids_": {
            "type": "ndarray of shape (n_clusters, n_features)",
            "description": "A collection containing the centroid of each cluster calculated under\n    the standard euclidean metric. The centroids may fall \"outside\" their\n    respective clusters if the clusters themselves are non-convex.\n\n    Note that `n_clusters` only counts non-outlier clusters. That is to\n    say, the `-1, -2, -3` labels for the outlier clusters are excluded."
          },
          "medoids_": {
            "type": "ndarray of shape (n_clusters, n_features)",
            "description": "A collection containing the medoid of each cluster calculated under\n    the whichever metric was passed to the `metric` parameter. The\n    medoids are points in the original cluster which minimize the average\n    distance to all other points in that cluster under the chosen metric.\n    These can be thought of as the result of projecting the `metric`-based\n    centroid back onto the cluster.\n\n    Note that `n_clusters` only counts non-outlier clusters. That is to\n    say, the `-1, -2, -3` labels for the outlier clusters are excluded."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "DBSCAN : Density-Based Spatial Clustering of Applications\n    with Noise.\nOPTICS : Ordering Points To Identify the Clustering Structure.\nBirch : Memory-efficient, online-learning algorithm.",
        "notes": "The `min_samples` parameter includes the point itself, whereas the implementation in\n`scikit-learn-contrib/hdbscan <https://github.com/scikit-learn-contrib/hdbscan>`_\ndoes not. To get the same results in both versions, the value of `min_samples` here\nmust be 1 greater than the value used in `scikit-learn-contrib/hdbscan\n<https://github.com/scikit-learn-contrib/hdbscan>`_.\n\nReferences\n----------\n\n.. [1] :doi:`Campello, R. J., Moulavi, D., & Sander, J. Density-based clustering\n  based on hierarchical density estimates.\n  <10.1007/978-3-642-37456-2_14>`\n.. [2] :doi:`Campello, R. J., Moulavi, D., Zimek, A., & Sander, J.\n   Hierarchical density estimates for data clustering, visualization,\n   and outlier detection.<10.1145/2733381>`\n\n.. [3] `Chaudhuri, K., & Dasgupta, S. Rates of convergence for the\n   cluster tree.\n   <https://papers.nips.cc/paper/2010/hash/\n   b534ba68236ba543ae44b22bd110a1d6-Abstract.html>`_\n\n.. [4] `Moulavi, D., Jaskowiak, P.A., Campello, R.J., Zimek, A. and\n   Sander, J. Density-Based Clustering Validation.\n   <https://www.dbs.ifi.lmu.de/~zimek/publications/SDM2014/DBCV.pdf>`_\n\n.. [5] :arxiv:`Malzer, C., & Baum, M. \"A Hybrid Approach To Hierarchical\n   Density-based Cluster Selection.\"<1911.02282>`.",
        "examples": ">>> import numpy as np\n>>> from sklearn.cluster import HDBSCAN\n>>> from sklearn.datasets import load_digits\n>>> X, _ = load_digits(return_X_y=True)\n>>> hdb = HDBSCAN(min_cluster_size=20)\n>>> hdb.fit(X)\nHDBSCAN(min_cluster_size=20)\n>>> hdb.labels_.shape == (X.shape[0],)\nTrue\n>>> np.unique(hdb.labels_).tolist()\n[-1, 0, 1, 2, 3, 4, 5, 6, 7]"
      },
      "methods": [
        {
          "name": "dbscan_clustering",
          "signature": "dbscan_clustering(self, cut_distance, min_cluster_size=5)",
          "docstring": {
            "description": "Return clustering given by DBSCAN without border points.\n\nReturn clustering that would be equivalent to running DBSCAN* for a\nparticular cut_distance (or epsilon) DBSCAN* can be thought of as\nDBSCAN without the border points.  As such these results may differ\nslightly from `cluster.DBSCAN` due to the difference in implementation\nover the non-core points.\n\nThis can also be thought of as a flat clustering derived from constant\nheight cut through the single linkage tree.\n\nThis represents the result of selecting a cut value for robust single linkage\nclustering. The `min_cluster_size` allows the flat clustering to declare noise\npoints (and cluster smaller than `min_cluster_size`).",
            "parameters": {
              "cut_distance": {
                "type": "float",
                "description": "The mutual reachability distance cut value to use to generate a\n    flat clustering."
              },
              "min_cluster_size": {
                "type": "int, default=5",
                "description": "Clusters smaller than this value with be called 'noise' and remain\n    unclustered in the resulting flat clustering."
              }
            },
            "returns": "labels : ndarray of shape (n_samples,)\n    An array of cluster labels, one per datapoint.\n    Outliers are labeled as follows:\n\n    - Noisy samples are given the label -1.\n    - Samples with infinite elements (+/- np.inf) are given the label -2.\n    - Samples with missing data are given the label -3, even if they\n      also have infinite elements.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y=None)",
          "docstring": {
            "description": "Find clusters based on hierarchical density-based clustering.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features), or                 ndarray of shape (n_samples, n_samples)",
                "description": "A feature array, or array of distances between samples if\n    `metric='precomputed'`."
              },
              "y": {
                "type": "None",
                "description": "Ignored."
              }
            },
            "returns": "self : object\n    Returns self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit_predict",
          "signature": "fit_predict(self, X, y=None)",
          "docstring": {
            "description": "Cluster X and return the associated cluster labels.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features), or                 ndarray of shape (n_samples, n_samples)",
                "description": "A feature array, or array of distances between samples if\n    `metric='precomputed'`."
              },
              "y": {
                "type": "None",
                "description": "Ignored."
              }
            },
            "returns": "y : ndarray of shape (n_samples,)\n    Cluster labels.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "KMeans",
      "docstring": {
        "description": "K-Means clustering.\n\nRead more in the :ref:`User Guide <k_means>`.",
        "parameters": {
          "n_clusters": {
            "type": "int, default=8",
            "description": "The number of clusters to form as well as the number of\n    centroids to generate.\n\n    For an example of how to choose an optimal value for `n_clusters` refer to\n    :ref:`sphx_glr_auto_examples_cluster_plot_kmeans_silhouette_analysis.py`."
          },
          "init": {
            "type": "{'k-means++', 'random'}, callable or array-like of shape             (n_clusters, n_features), default='k-means++'",
            "description": "Method for initialization:\n\n    * 'k-means++' : selects initial cluster centroids using sampling             based on an empirical probability distribution of the points'             contribution to the overall inertia. This technique speeds up             convergence. The algorithm implemented is \"greedy k-means++\". It             differs from the vanilla k-means++ by making several trials at             each sampling step and choosing the best centroid among them.\n\n    * 'random': choose `n_clusters` observations (rows) at random from         data for the initial centroids.\n\n    * If an array is passed, it should be of shape (n_clusters, n_features)        and gives the initial centers.\n\n    * If a callable is passed, it should take arguments X, n_clusters and a        random state and return an initialization.\n\n    For an example of how to use the different `init` strategies, see\n    :ref:`sphx_glr_auto_examples_cluster_plot_kmeans_digits.py`.\n\n    For an evaluation of the impact of initialization, see the example\n    :ref:`sphx_glr_auto_examples_cluster_plot_kmeans_stability_low_dim_dense.py`."
          },
          "n_init": {
            "type": "'auto' or int, default='auto'",
            "description": "Number of times the k-means algorithm is run with different centroid\n    seeds. The final results is the best output of `n_init` consecutive runs\n    in terms of inertia. Several runs are recommended for sparse\n    high-dimensional problems (see :ref:`kmeans_sparse_high_dim`).\n\n    When `n_init='auto'`, the number of runs depends on the value of init:\n    10 if using `init='random'` or `init` is a callable;\n    1 if using `init='k-means++'` or `init` is an array-like.\n\n    .. versionadded:: 1.2\n       Added 'auto' option for `n_init`.\n\n    .. versionchanged:: 1.4\n       Default value for `n_init` changed to `'auto'`."
          },
          "max_iter": {
            "type": "int, default=300",
            "description": "Maximum number of iterations of the k-means algorithm for a\n    single run."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "Relative tolerance with regards to Frobenius norm of the difference\n    in the cluster centers of two consecutive iterations to declare\n    convergence."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "Verbosity mode."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Determines random number generation for centroid initialization. Use\n    an int to make the randomness deterministic.\n    See :term:`Glossary <random_state>`."
          },
          "copy_x": {
            "type": "bool, default=True",
            "description": "When pre-computing distances it is more numerically accurate to center\n    the data first. If copy_x is True (default), then the original data is\n    not modified. If False, the original data is modified, and put back\n    before the function returns, but small numerical differences may be\n    introduced by subtracting and then adding the data mean. Note that if\n    the original data is not C-contiguous, a copy will be made even if\n    copy_x is False. If the original data is sparse, but not in CSR format,\n    a copy will be made even if copy_x is False."
          },
          "algorithm": {
            "type": "{\"lloyd\", \"elkan\"}, default=\"lloyd\"",
            "description": "K-means algorithm to use. The classical EM-style algorithm is `\"lloyd\"`.\n    The `\"elkan\"` variation can be more efficient on some datasets with\n    well-defined clusters, by using the triangle inequality. However it's\n    more memory intensive due to the allocation of an extra array of shape\n    `(n_samples, n_clusters)`.\n\n    .. versionchanged:: 0.18\n        Added Elkan algorithm\n\n    .. versionchanged:: 1.1\n        Renamed \"full\" to \"lloyd\", and deprecated \"auto\" and \"full\".\n        Changed \"auto\" to use \"lloyd\" instead of \"elkan\".\n\nAttributes\n----------"
          },
          "cluster_centers_": {
            "type": "ndarray of shape (n_clusters, n_features)",
            "description": "Coordinates of cluster centers. If the algorithm stops before fully\n    converging (see ``tol`` and ``max_iter``), these will not be\n    consistent with ``labels_``."
          },
          "labels_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Labels of each point"
          },
          "inertia_": {
            "type": "float",
            "description": "Sum of squared distances of samples to their closest cluster center,\n    weighted by the sample weights if provided."
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations run."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "MiniBatchKMeans : Alternative online implementation that does incremental\n    updates of the centers positions using mini-batches.\n    For large scale learning (say n_samples > 10k) MiniBatchKMeans is\n    probably much faster than the default batch implementation.",
        "notes": "The k-means problem is solved using either Lloyd's or Elkan's algorithm.\n\nThe average complexity is given by O(k n T), where n is the number of\nsamples and T is the number of iteration.\n\nThe worst case complexity is given by O(n^(k+2/p)) with\nn = n_samples, p = n_features.\nRefer to :doi:`\"How slow is the k-means method?\" D. Arthur and S. Vassilvitskii -\nSoCG2006.<10.1145/1137856.1137880>` for more details.\n\nIn practice, the k-means algorithm is very fast (one of the fastest\nclustering algorithms available), but it falls in local minima. That's why\nit can be useful to restart it several times.\n\nIf the algorithm stops before fully converging (because of ``tol`` or\n``max_iter``), ``labels_`` and ``cluster_centers_`` will not be consistent,\ni.e. the ``cluster_centers_`` will not be the means of the points in each\ncluster. Also, the estimator will reassign ``labels_`` after the last\niteration to make ``labels_`` consistent with ``predict`` on the training\nset.",
        "examples": ">>> from sklearn.cluster import KMeans\n>>> import numpy as np\n>>> X = np.array([[1, 2], [1, 4], [1, 0],\n...               [10, 2], [10, 4], [10, 0]])\n>>> kmeans = KMeans(n_clusters=2, random_state=0, n_init=\"auto\").fit(X)\n>>> kmeans.labels_\narray([1, 1, 1, 0, 0, 0], dtype=int32)\n>>> kmeans.predict([[0, 0], [12, 3]])\narray([1, 0], dtype=int32)\n>>> kmeans.cluster_centers_\narray([[10.,  2.],\n       [ 1.,  2.]])\n\nFor examples of common problems with K-Means and how to address them see\n:ref:`sphx_glr_auto_examples_cluster_plot_kmeans_assumptions.py`.\n\nFor a demonstration of how K-Means can be used to cluster text documents see\n:ref:`sphx_glr_auto_examples_text_plot_document_clustering.py`.\n\nFor a comparison between K-Means and MiniBatchKMeans refer to example\n:ref:`sphx_glr_auto_examples_cluster_plot_mini_batch_kmeans.py`.\n\nFor a comparison between K-Means and BisectingKMeans refer to example\n:ref:`sphx_glr_auto_examples_cluster_plot_bisect_kmeans.py`."
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y=None, sample_weight=None)",
          "docstring": {
            "description": "Compute k-means clustering.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training instances to cluster. It must be noted that the data\n    will be converted to C ordering, which will cause a memory\n    copy if the given data is not C-contiguous.\n    If a sparse matrix is passed, a copy will be made if it's not in\n    CSR format."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "The weights for each observation in X. If None, all observations\n    are assigned equal weight. `sample_weight` is not used during\n    initialization if `init` is a callable or a user provided array.\n\n    .. versionadded:: 0.20"
              }
            },
            "returns": "self : object\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit_predict",
          "signature": "fit_predict(self, X, y=None, sample_weight=None)",
          "docstring": {
            "description": "Compute cluster centers and predict cluster index for each sample.\n\nConvenience method; equivalent to calling fit(X) followed by\npredict(X).",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "New data to transform."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "The weights for each observation in X. If None, all observations\n    are assigned equal weight."
              }
            },
            "returns": "labels : ndarray of shape (n_samples,)\n    Index of the cluster each sample belongs to.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit_transform",
          "signature": "fit_transform(self, X, y=None, sample_weight=None)",
          "docstring": {
            "description": "Compute clustering and transform X to cluster-distance space.\n\nEquivalent to fit(X).transform(X), but more efficiently implemented.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "New data to transform."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "The weights for each observation in X. If None, all observations\n    are assigned equal weight."
              }
            },
            "returns": "X_new : ndarray of shape (n_samples, n_clusters)\n    X transformed in the new space.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_feature_names_out",
          "signature": "get_feature_names_out(self, input_features=None)",
          "docstring": {
            "description": "Get output feature names for transformation.\n\nThe feature names out will prefixed by the lowercased class name. For\nexample, if the transformer outputs 3 features, then the feature names\nout are: `[\"class_name0\", \"class_name1\", \"class_name2\"]`.",
            "parameters": {
              "input_features": {
                "type": "array-like of str or None, default=None",
                "description": "Only used to validate feature names with the names seen in `fit`."
              }
            },
            "returns": "feature_names_out : ndarray of str objects\n    Transformed feature names.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict the closest cluster each sample in X belongs to.\n\nIn the vector quantization literature, `cluster_centers_` is called\nthe code book and each value returned by `predict` is the index of\nthe closest code in the code book.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "New data to predict."
              }
            },
            "returns": "labels : ndarray of shape (n_samples,)\n    Index of the cluster each sample belongs to.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y=None, sample_weight=None)",
          "docstring": {
            "description": "Opposite of the value of X on the K-means objective.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "New data."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "The weights for each observation in X. If None, all observations\n    are assigned equal weight."
              }
            },
            "returns": "score : float\n    Opposite of the value of X on the K-means objective.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.cluster._kmeans.KMeans, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.cluster._kmeans.KMeans",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_output",
          "signature": "set_output(self, *, transform=None)",
          "docstring": {
            "description": "Set output container.\n\nSee :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`\nfor an example on how to use the API.",
            "parameters": {
              "transform": {
                "type": "{\"default\", \"pandas\", \"polars\"}, default=None",
                "description": "Configure output of `transform` and `fit_transform`.\n\n    - `\"default\"`: Default output format of a transformer\n    - `\"pandas\"`: DataFrame output\n    - `\"polars\"`: Polars output\n    - `None`: Transform configuration is unchanged\n\n    .. versionadded:: 1.4\n        `\"polars\"` option was added."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.cluster._kmeans.KMeans, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.cluster._kmeans.KMeans",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "transform",
          "signature": "transform(self, X)",
          "docstring": {
            "description": "Transform X to a cluster-distance space.\n\nIn the new space, each dimension is the distance to the cluster\ncenters. Note that even if X is sparse, the array returned by\n`transform` will typically be dense.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "New data to transform."
              }
            },
            "returns": "X_new : ndarray of shape (n_samples, n_clusters)\n    X transformed in the new space.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "MeanShift",
      "docstring": {
        "description": "Mean shift clustering using a flat kernel.\n\nMean shift clustering aims to discover \"blobs\" in a smooth density of\nsamples. It is a centroid-based algorithm, which works by updating\ncandidates for centroids to be the mean of the points within a given\nregion. These candidates are then filtered in a post-processing stage to\neliminate near-duplicates to form the final set of centroids.\n\nSeeding is performed using a binning technique for scalability.\n\nFor an example of how to use MeanShift clustering, refer to:\n:ref:`sphx_glr_auto_examples_cluster_plot_mean_shift.py`.\n\nRead more in the :ref:`User Guide <mean_shift>`.",
        "parameters": {
          "bandwidth": {
            "type": "float, default=None",
            "description": "Bandwidth used in the flat kernel.\n\n    If not given, the bandwidth is estimated using\n    sklearn.cluster.estimate_bandwidth; see the documentation for that\n    function for hints on scalability (see also the Notes, below)."
          },
          "seeds": {
            "type": "array-like of shape (n_samples, n_features), default=None",
            "description": "Seeds used to initialize kernels. If not set,\n    the seeds are calculated by clustering.get_bin_seeds\n    with bandwidth as the grid size and default values for\n    other parameters."
          },
          "bin_seeding": {
            "type": "bool, default=False",
            "description": "If true, initial kernel locations are not locations of all\n    points, but rather the location of the discretized version of\n    points, where points are binned onto a grid whose coarseness\n    corresponds to the bandwidth. Setting this option to True will speed\n    up the algorithm because fewer seeds will be initialized.\n    The default value is False.\n    Ignored if seeds argument is not None."
          },
          "min_bin_freq": {
            "type": "int, default=1",
            "description": "To speed up the algorithm, accept only those bins with at least\n   min_bin_freq points as seeds."
          },
          "cluster_all": {
            "type": "bool, default=True",
            "description": "If true, then all points are clustered, even those orphans that are\n    not within any kernel. Orphans are assigned to the nearest kernel.\n    If false, then orphans are given cluster label -1."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "The number of jobs to use for the computation. The following tasks benefit\n    from the parallelization:\n\n    - The search of nearest neighbors for bandwidth estimation and label\n      assignments. See the details in the docstring of the\n      ``NearestNeighbors`` class.\n    - Hill-climbing optimization for all seeds.\n\n    See :term:`Glossary <n_jobs>` for more details.\n\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "max_iter": {
            "type": "int, default=300",
            "description": "Maximum number of iterations, per seed point before the clustering\n    operation terminates (for that seed point), if has not converged yet.\n\n    .. versionadded:: 0.22\n\nAttributes\n----------"
          },
          "cluster_centers_": {
            "type": "ndarray of shape (n_clusters, n_features)",
            "description": "Coordinates of cluster centers."
          },
          "labels_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Labels of each point."
          },
          "n_iter_": {
            "type": "int",
            "description": "Maximum number of iterations performed on each seed.\n\n    .. versionadded:: 0.22"
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "KMeans : K-Means clustering.",
        "notes": "Scalability:\n\nBecause this implementation uses a flat kernel and\na Ball Tree to look up members of each kernel, the complexity will tend\ntowards O(T*n*log(n)) in lower dimensions, with n the number of samples\nand T the number of points. In higher dimensions the complexity will\ntend towards O(T*n^2).\n\nScalability can be boosted by using fewer seeds, for example by using\na higher value of min_bin_freq in the get_bin_seeds function.\n\nNote that the estimate_bandwidth function is much less scalable than the\nmean shift algorithm and will be the bottleneck if it is used.\n\nReferences\n----------\n\nDorin Comaniciu and Peter Meer, \"Mean Shift: A robust approach toward\nfeature space analysis\". IEEE Transactions on Pattern Analysis and\nMachine Intelligence. 2002. pp. 603-619.",
        "examples": ">>> from sklearn.cluster import MeanShift\n>>> import numpy as np\n>>> X = np.array([[1, 1], [2, 1], [1, 0],\n...               [4, 7], [3, 5], [3, 6]])\n>>> clustering = MeanShift(bandwidth=2).fit(X)\n>>> clustering.labels_\narray([1, 1, 1, 0, 0, 0])\n>>> clustering.predict([[0, 0], [5, 5]])\narray([1, 0])\n>>> clustering\nMeanShift(bandwidth=2)"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y=None)",
          "docstring": {
            "description": "Perform clustering.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Samples to cluster."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present for API consistency by convention."
              }
            },
            "returns": "self : object\n       Fitted instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit_predict",
          "signature": "fit_predict(self, X, y=None, **kwargs)",
          "docstring": {
            "description": "Perform clustering on `X` and returns cluster labels.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Input data."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present for API consistency by convention."
              },
              "**kwargs": {
                "type": "dict",
                "description": "Arguments to be passed to ``fit``.\n\n    .. versionadded:: 1.4"
              }
            },
            "returns": "labels : ndarray of shape (n_samples,), dtype=np.int64\n    Cluster labels.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict the closest cluster each sample in X belongs to.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "New data to predict."
              }
            },
            "returns": "labels : ndarray of shape (n_samples,)\n    Index of the cluster each sample belongs to.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "MiniBatchKMeans",
      "docstring": {
        "description": "Mini-Batch K-Means clustering.\n\nRead more in the :ref:`User Guide <mini_batch_kmeans>`.",
        "parameters": {
          "n_clusters": {
            "type": "int, default=8",
            "description": "The number of clusters to form as well as the number of\n    centroids to generate."
          },
          "init": {
            "type": "{'k-means++', 'random'}, callable or array-like of shape             (n_clusters, n_features), default='k-means++'",
            "description": "Method for initialization:\n\n    'k-means++' : selects initial cluster centroids using sampling based on\n    an empirical probability distribution of the points' contribution to the\n    overall inertia. This technique speeds up convergence. The algorithm\n    implemented is \"greedy k-means++\". It differs from the vanilla k-means++\n    by making several trials at each sampling step and choosing the best centroid\n    among them.\n\n    'random': choose `n_clusters` observations (rows) at random from data\n    for the initial centroids.\n\n    If an array is passed, it should be of shape (n_clusters, n_features)\n    and gives the initial centers.\n\n    If a callable is passed, it should take arguments X, n_clusters and a\n    random state and return an initialization.\n\n    For an evaluation of the impact of initialization, see the example\n    :ref:`sphx_glr_auto_examples_cluster_plot_kmeans_stability_low_dim_dense.py`."
          },
          "max_iter": {
            "type": "int, default=100",
            "description": "Maximum number of iterations over the complete dataset before\n    stopping independently of any early stopping criterion heuristics."
          },
          "batch_size": {
            "type": "int, default=1024",
            "description": "Size of the mini batches.\n    For faster computations, you can set the ``batch_size`` greater than\n    256 * number of cores to enable parallelism on all cores.\n\n    .. versionchanged:: 1.0\n       `batch_size` default changed from 100 to 1024."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "Verbosity mode."
          },
          "compute_labels": {
            "type": "bool, default=True",
            "description": "Compute label assignment and inertia for the complete dataset\n    once the minibatch optimization has converged in fit."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Determines random number generation for centroid initialization and\n    random reassignment. Use an int to make the randomness deterministic.\n    See :term:`Glossary <random_state>`."
          },
          "tol": {
            "type": "float, default=0.0",
            "description": "Control early stopping based on the relative center changes as\n    measured by a smoothed, variance-normalized of the mean center\n    squared position changes. This early stopping heuristics is\n    closer to the one used for the batch variant of the algorithms\n    but induces a slight computational and memory overhead over the\n    inertia heuristic.\n\n    To disable convergence detection based on normalized center\n    change, set tol to 0.0 (default)."
          },
          "max_no_improvement": {
            "type": "int, default=10",
            "description": "Control early stopping based on the consecutive number of mini\n    batches that does not yield an improvement on the smoothed inertia.\n\n    To disable convergence detection based on inertia, set\n    max_no_improvement to None."
          },
          "init_size": {
            "type": "int, default=None",
            "description": "Number of samples to randomly sample for speeding up the\n    initialization (sometimes at the expense of accuracy): the\n    only algorithm is initialized by running a batch KMeans on a\n    random subset of the data. This needs to be larger than n_clusters.\n\n    If `None`, the heuristic is `init_size = 3 * batch_size` if\n    `3 * batch_size < n_clusters`, else `init_size = 3 * n_clusters`."
          },
          "n_init": {
            "type": "'auto' or int, default=\"auto\"",
            "description": "Number of random initializations that are tried.\n    In contrast to KMeans, the algorithm is only run once, using the best of\n    the `n_init` initializations as measured by inertia. Several runs are\n    recommended for sparse high-dimensional problems (see\n    :ref:`kmeans_sparse_high_dim`).\n\n    When `n_init='auto'`, the number of runs depends on the value of init:\n    3 if using `init='random'` or `init` is a callable;\n    1 if using `init='k-means++'` or `init` is an array-like.\n\n    .. versionadded:: 1.2\n       Added 'auto' option for `n_init`.\n\n    .. versionchanged:: 1.4\n       Default value for `n_init` changed to `'auto'` in version."
          },
          "reassignment_ratio": {
            "type": "float, default=0.01",
            "description": "Control the fraction of the maximum number of counts for a center to\n    be reassigned. A higher value means that low count centers are more\n    easily reassigned, which means that the model will take longer to\n    converge, but should converge in a better clustering. However, too high\n    a value may cause convergence issues, especially with a small batch\n    size.\n\nAttributes\n----------"
          },
          "cluster_centers_": {
            "type": "ndarray of shape (n_clusters, n_features)",
            "description": "Coordinates of cluster centers."
          },
          "labels_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Labels of each point (if compute_labels is set to True)."
          },
          "inertia_": {
            "type": "float",
            "description": "The value of the inertia criterion associated with the chosen\n    partition if compute_labels is set to True. If compute_labels is set to\n    False, it's an approximation of the inertia based on an exponentially\n    weighted average of the batch inertiae.\n    The inertia is defined as the sum of square distances of samples to\n    their cluster center, weighted by the sample weights if provided."
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations over the full dataset."
          },
          "n_steps_": {
            "type": "int",
            "description": "Number of minibatches processed.\n\n    .. versionadded:: 1.0"
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "KMeans : The classic implementation of the clustering method based on the\n    Lloyd's algorithm. It consumes the whole set of input data at each\n    iteration.",
        "notes": "See https://www.eecs.tufts.edu/~dsculley/papers/fastkmeans.pdf\n\nWhen there are too few points in the dataset, some centers may be\nduplicated, which means that a proper clustering in terms of the number\nof requesting clusters and the number of returned clusters will not\nalways match. One solution is to set `reassignment_ratio=0`, which\nprevents reassignments of clusters that are too small.\n\nSee :ref:`sphx_glr_auto_examples_cluster_plot_birch_vs_minibatchkmeans.py` for a\ncomparison with :class:`~sklearn.cluster.BIRCH`.",
        "examples": ">>> from sklearn.cluster import MiniBatchKMeans\n>>> import numpy as np\n>>> X = np.array([[1, 2], [1, 4], [1, 0],\n...               [4, 2], [4, 0], [4, 4],\n...               [4, 5], [0, 1], [2, 2],\n...               [3, 2], [5, 5], [1, -1]])\n>>> # manually fit on batches\n>>> kmeans = MiniBatchKMeans(n_clusters=2,\n...                          random_state=0,\n...                          batch_size=6,\n...                          n_init=\"auto\")\n>>> kmeans = kmeans.partial_fit(X[0:6,:])\n>>> kmeans = kmeans.partial_fit(X[6:12,:])\n>>> kmeans.cluster_centers_\narray([[3.375, 3.  ],\n       [0.75 , 0.5 ]])\n>>> kmeans.predict([[0, 0], [4, 4]])\narray([1, 0], dtype=int32)\n>>> # fit on the whole data\n>>> kmeans = MiniBatchKMeans(n_clusters=2,\n...                          random_state=0,\n...                          batch_size=6,\n...                          max_iter=10,\n...                          n_init=\"auto\").fit(X)\n>>> kmeans.cluster_centers_\narray([[3.55102041, 2.48979592],\n       [1.06896552, 1.        ]])\n>>> kmeans.predict([[0, 0], [4, 4]])\narray([1, 0], dtype=int32)"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y=None, sample_weight=None)",
          "docstring": {
            "description": "Compute the centroids on X by chunking it into mini-batches.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training instances to cluster. It must be noted that the data\n    will be converted to C ordering, which will cause a memory copy\n    if the given data is not C-contiguous.\n    If a sparse matrix is passed, a copy will be made if it's not in\n    CSR format."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "The weights for each observation in X. If None, all observations\n    are assigned equal weight. `sample_weight` is not used during\n    initialization if `init` is a callable or a user provided array.\n\n    .. versionadded:: 0.20"
              }
            },
            "returns": "self : object\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit_predict",
          "signature": "fit_predict(self, X, y=None, sample_weight=None)",
          "docstring": {
            "description": "Compute cluster centers and predict cluster index for each sample.\n\nConvenience method; equivalent to calling fit(X) followed by\npredict(X).",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "New data to transform."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "The weights for each observation in X. If None, all observations\n    are assigned equal weight."
              }
            },
            "returns": "labels : ndarray of shape (n_samples,)\n    Index of the cluster each sample belongs to.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit_transform",
          "signature": "fit_transform(self, X, y=None, sample_weight=None)",
          "docstring": {
            "description": "Compute clustering and transform X to cluster-distance space.\n\nEquivalent to fit(X).transform(X), but more efficiently implemented.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "New data to transform."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "The weights for each observation in X. If None, all observations\n    are assigned equal weight."
              }
            },
            "returns": "X_new : ndarray of shape (n_samples, n_clusters)\n    X transformed in the new space.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_feature_names_out",
          "signature": "get_feature_names_out(self, input_features=None)",
          "docstring": {
            "description": "Get output feature names for transformation.\n\nThe feature names out will prefixed by the lowercased class name. For\nexample, if the transformer outputs 3 features, then the feature names\nout are: `[\"class_name0\", \"class_name1\", \"class_name2\"]`.",
            "parameters": {
              "input_features": {
                "type": "array-like of str or None, default=None",
                "description": "Only used to validate feature names with the names seen in `fit`."
              }
            },
            "returns": "feature_names_out : ndarray of str objects\n    Transformed feature names.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "partial_fit",
          "signature": "partial_fit(self, X, y=None, sample_weight=None)",
          "docstring": {
            "description": "Update k means estimate on a single mini-batch X.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training instances to cluster. It must be noted that the data\n    will be converted to C ordering, which will cause a memory copy\n    if the given data is not C-contiguous.\n    If a sparse matrix is passed, a copy will be made if it's not in\n    CSR format."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "The weights for each observation in X. If None, all observations\n    are assigned equal weight. `sample_weight` is not used during\n    initialization if `init` is a callable or a user provided array."
              }
            },
            "returns": "self : object\n    Return updated estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict the closest cluster each sample in X belongs to.\n\nIn the vector quantization literature, `cluster_centers_` is called\nthe code book and each value returned by `predict` is the index of\nthe closest code in the code book.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "New data to predict."
              }
            },
            "returns": "labels : ndarray of shape (n_samples,)\n    Index of the cluster each sample belongs to.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y=None, sample_weight=None)",
          "docstring": {
            "description": "Opposite of the value of X on the K-means objective.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "New data."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "The weights for each observation in X. If None, all observations\n    are assigned equal weight."
              }
            },
            "returns": "score : float\n    Opposite of the value of X on the K-means objective.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.cluster._kmeans.MiniBatchKMeans, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.cluster._kmeans.MiniBatchKMeans",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_output",
          "signature": "set_output(self, *, transform=None)",
          "docstring": {
            "description": "Set output container.\n\nSee :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`\nfor an example on how to use the API.",
            "parameters": {
              "transform": {
                "type": "{\"default\", \"pandas\", \"polars\"}, default=None",
                "description": "Configure output of `transform` and `fit_transform`.\n\n    - `\"default\"`: Default output format of a transformer\n    - `\"pandas\"`: DataFrame output\n    - `\"polars\"`: Polars output\n    - `None`: Transform configuration is unchanged\n\n    .. versionadded:: 1.4\n        `\"polars\"` option was added."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_partial_fit_request",
          "signature": "set_partial_fit_request(self: sklearn.cluster._kmeans.MiniBatchKMeans, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.cluster._kmeans.MiniBatchKMeans",
          "docstring": {
            "description": "Request metadata passed to the ``partial_fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``partial_fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``partial_fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``partial_fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.cluster._kmeans.MiniBatchKMeans, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.cluster._kmeans.MiniBatchKMeans",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "transform",
          "signature": "transform(self, X)",
          "docstring": {
            "description": "Transform X to a cluster-distance space.\n\nIn the new space, each dimension is the distance to the cluster\ncenters. Note that even if X is sparse, the array returned by\n`transform` will typically be dense.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "New data to transform."
              }
            },
            "returns": "X_new : ndarray of shape (n_samples, n_clusters)\n    X transformed in the new space.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "OPTICS",
      "docstring": {
        "description": "Estimate clustering structure from vector array.\n\nOPTICS (Ordering Points To Identify the Clustering Structure), closely\nrelated to DBSCAN, finds core sample of high density and expands clusters\nfrom them [1]_. Unlike DBSCAN, keeps cluster hierarchy for a variable\nneighborhood radius. Better suited for usage on large datasets than the\ncurrent sklearn implementation of DBSCAN.\n\nClusters are then extracted using a DBSCAN-like method\n(cluster_method = 'dbscan') or an automatic\ntechnique proposed in [1]_ (cluster_method = 'xi').\n\nThis implementation deviates from the original OPTICS by first performing\nk-nearest-neighborhood searches on all points to identify core sizes, then\ncomputing only the distances to unprocessed points when constructing the\ncluster order. Note that we do not employ a heap to manage the expansion\ncandidates, so the time complexity will be O(n^2).\n\nRead more in the :ref:`User Guide <optics>`.",
        "parameters": {
          "min_samples": {
            "type": "int > 1 or float between 0 and 1, default=5",
            "description": "The number of samples in a neighborhood for a point to be considered as\n    a core point. Also, up and down steep regions can't have more than\n    ``min_samples`` consecutive non-steep points. Expressed as an absolute\n    number or a fraction of the number of samples (rounded to be at least\n    2)."
          },
          "max_eps": {
            "type": "float, default=np.inf",
            "description": "The maximum distance between two samples for one to be considered as\n    in the neighborhood of the other. Default value of ``np.inf`` will\n    identify clusters across all scales; reducing ``max_eps`` will result\n    in shorter run times."
          },
          "metric": {
            "type": "str or callable, default='minkowski'",
            "description": "Metric to use for distance computation. Any metric from scikit-learn\n    or scipy.spatial.distance can be used.\n\n    If metric is a callable function, it is called on each\n    pair of instances (rows) and the resulting value recorded. The callable\n    should take two arrays as input and return one value indicating the\n    distance between them. This works for Scipy's metrics, but is less\n    efficient than passing the metric name as a string. If metric is\n    \"precomputed\", `X` is assumed to be a distance matrix and must be\n    square.\n\n    Valid values for metric are:\n\n    - from scikit-learn: ['cityblock', 'cosine', 'euclidean', 'l1', 'l2',\n      'manhattan']\n\n    - from scipy.spatial.distance: ['braycurtis', 'canberra', 'chebyshev',\n      'correlation', 'dice', 'hamming', 'jaccard', 'kulsinski',\n      'mahalanobis', 'minkowski', 'rogerstanimoto', 'russellrao',\n      'seuclidean', 'sokalmichener', 'sokalsneath', 'sqeuclidean',\n      'yule']\n\n    Sparse matrices are only supported by scikit-learn metrics.\n    See the documentation for scipy.spatial.distance for details on these\n    metrics.\n\n    .. note::\n       `'kulsinski'` is deprecated from SciPy 1.9 and will be removed in SciPy 1.11."
          },
          "p": {
            "type": "float, default=2",
            "description": "Parameter for the Minkowski metric from\n    :class:`~sklearn.metrics.pairwise_distances`. When p = 1, this is\n    equivalent to using manhattan_distance (l1), and euclidean_distance\n    (l2) for p = 2. For arbitrary p, minkowski_distance (l_p) is used."
          },
          "metric_params": {
            "type": "dict, default=None",
            "description": "Additional keyword arguments for the metric function."
          },
          "cluster_method": {
            "type": "str, default='xi'",
            "description": "The extraction method used to extract clusters using the calculated\n    reachability and ordering. Possible values are \"xi\" and \"dbscan\"."
          },
          "eps": {
            "type": "float, default=None",
            "description": "The maximum distance between two samples for one to be considered as\n    in the neighborhood of the other. By default it assumes the same value\n    as ``max_eps``.\n    Used only when ``cluster_method='dbscan'``."
          },
          "xi": {
            "type": "float between 0 and 1, default=0.05",
            "description": "Determines the minimum steepness on the reachability plot that\n    constitutes a cluster boundary. For example, an upwards point in the\n    reachability plot is defined by the ratio from one point to its\n    successor being at most 1-xi.\n    Used only when ``cluster_method='xi'``."
          },
          "predecessor_correction": {
            "type": "bool, default=True",
            "description": "Correct clusters according to the predecessors calculated by OPTICS\n    [2]_. This parameter has minimal effect on most datasets.\n    Used only when ``cluster_method='xi'``."
          },
          "min_cluster_size": {
            "type": "int > 1 or float between 0 and 1, default=None",
            "description": "Minimum number of samples in an OPTICS cluster, expressed as an\n    absolute number or a fraction of the number of samples (rounded to be\n    at least 2). If ``None``, the value of ``min_samples`` is used instead.\n    Used only when ``cluster_method='xi'``."
          },
          "algorithm": {
            "type": "{'auto', 'ball_tree', 'kd_tree', 'brute'}, default='auto'",
            "description": "Algorithm used to compute the nearest neighbors:\n\n    - 'ball_tree' will use :class:`~sklearn.neighbors.BallTree`.\n    - 'kd_tree' will use :class:`~sklearn.neighbors.KDTree`.\n    - 'brute' will use a brute-force search.\n    - 'auto' (default) will attempt to decide the most appropriate\n      algorithm based on the values passed to :meth:`fit` method.\n\n    Note: fitting on sparse input will override the setting of\n    this parameter, using brute force."
          },
          "leaf_size": {
            "type": "int, default=30",
            "description": "Leaf size passed to :class:`~sklearn.neighbors.BallTree` or\n    :class:`~sklearn.neighbors.KDTree`. This can affect the speed of the\n    construction and query, as well as the memory required to store the\n    tree. The optimal value depends on the nature of the problem."
          },
          "memory": {
            "type": "str or object with the joblib.Memory interface, default=None",
            "description": "Used to cache the output of the computation of the tree.\n    By default, no caching is done. If a string is given, it is the\n    path to the caching directory."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "The number of parallel jobs to run for neighbors search.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details.\n\nAttributes\n----------"
          },
          "labels_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Cluster labels for each point in the dataset given to fit().\n    Noisy samples and points which are not included in a leaf cluster\n    of ``cluster_hierarchy_`` are labeled as -1."
          },
          "reachability_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Reachability distances per sample, indexed by object order. Use\n    ``clust.reachability_[clust.ordering_]`` to access in cluster order."
          },
          "ordering_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "The cluster ordered list of sample indices."
          },
          "core_distances_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Distance at which each sample becomes a core point, indexed by object\n    order. Points which will never be core have a distance of inf. Use\n    ``clust.core_distances_[clust.ordering_]`` to access in cluster order."
          },
          "predecessor_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Point that a sample was reached from, indexed by object order.\n    Seed points have a predecessor of -1."
          },
          "cluster_hierarchy_": {
            "type": "ndarray of shape (n_clusters, 2)",
            "description": "The list of clusters in the form of ``[start, end]`` in each row, with\n    all indices inclusive. The clusters are ordered according to\n    ``(end, -start)`` (ascending) so that larger clusters encompassing\n    smaller clusters come after those smaller ones. Since ``labels_`` does\n    not reflect the hierarchy, usually\n    ``len(cluster_hierarchy_) > np.unique(optics.labels_)``. Please also\n    note that these indices are of the ``ordering_``, i.e.\n    ``X[ordering_][start:end + 1]`` form a cluster.\n    Only available when ``cluster_method='xi'``."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "DBSCAN : A similar clustering for a specified neighborhood radius (eps).\n    Our implementation is optimized for runtime.\n\nReferences\n----------\n.. [1] Ankerst, Mihael, Markus M. Breunig, Hans-Peter Kriegel,\n   and J\u00f6rg Sander. \"OPTICS: ordering points to identify the clustering\n   structure.\" ACM SIGMOD Record 28, no. 2 (1999): 49-60.\n\n.. [2] Schubert, Erich, Michael Gertz.\n   \"Improving the Cluster Structure Extracted from OPTICS Plots.\" Proc. of\n   the Conference \"Lernen, Wissen, Daten, Analysen\" (LWDA) (2018): 318-329.",
        "notes": "",
        "examples": ">>> from sklearn.cluster import OPTICS\n>>> import numpy as np\n>>> X = np.array([[1, 2], [2, 5], [3, 6],\n...               [8, 7], [8, 8], [7, 3]])\n>>> clustering = OPTICS(min_samples=2).fit(X)\n>>> clustering.labels_\narray([0, 0, 0, 1, 1, 1])\n\nFor a more detailed example see\n:ref:`sphx_glr_auto_examples_cluster_plot_optics.py`."
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y=None)",
          "docstring": {
            "description": "Perform OPTICS clustering.\n\nExtracts an ordered list of points and reachability distances, and\nperforms initial clustering using ``max_eps`` distance specified at\nOPTICS object instantiation.",
            "parameters": {
              "X": {
                "type": "{ndarray, sparse matrix} of shape (n_samples, n_features), or                 (n_samples, n_samples) if metric='precomputed'",
                "description": "A feature array, or array of distances between samples if\n    metric='precomputed'. If a sparse matrix is provided, it will be\n    converted into CSR format."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present for API consistency by convention."
              }
            },
            "returns": "self : object\n    Returns a fitted instance of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit_predict",
          "signature": "fit_predict(self, X, y=None, **kwargs)",
          "docstring": {
            "description": "Perform clustering on `X` and returns cluster labels.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Input data."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present for API consistency by convention."
              },
              "**kwargs": {
                "type": "dict",
                "description": "Arguments to be passed to ``fit``.\n\n    .. versionadded:: 1.4"
              }
            },
            "returns": "labels : ndarray of shape (n_samples,), dtype=np.int64\n    Cluster labels.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "SpectralBiclustering",
      "docstring": {
        "description": "Spectral biclustering (Kluger, 2003).\n\nPartitions rows and columns under the assumption that the data has\nan underlying checkerboard structure. For instance, if there are\ntwo row partitions and three column partitions, each row will\nbelong to three biclusters, and each column will belong to two\nbiclusters. The outer product of the corresponding row and column\nlabel vectors gives this checkerboard structure.\n\nRead more in the :ref:`User Guide <spectral_biclustering>`.",
        "parameters": {
          "n_clusters": {
            "type": "int or tuple (n_row_clusters, n_column_clusters), default=3",
            "description": "The number of row and column clusters in the checkerboard\n    structure."
          },
          "method": {
            "type": "{'bistochastic', 'scale', 'log'}, default='bistochastic'",
            "description": "Method of normalizing and converting singular vectors into\n    biclusters. May be one of 'scale', 'bistochastic', or 'log'.\n    The authors recommend using 'log'. If the data is sparse,\n    however, log normalization will not work, which is why the\n    default is 'bistochastic'.\n\n    .. warning::\n       if `method='log'`, the data must not be sparse."
          },
          "n_components": {
            "type": "int, default=6",
            "description": "Number of singular vectors to check."
          },
          "n_best": {
            "type": "int, default=3",
            "description": "Number of best singular vectors to which to project the data\n    for clustering."
          },
          "svd_method": {
            "type": "{'randomized', 'arpack'}, default='randomized'",
            "description": "Selects the algorithm for finding singular vectors. May be\n    'randomized' or 'arpack'. If 'randomized', uses\n    :func:`~sklearn.utils.extmath.randomized_svd`, which may be faster\n    for large matrices. If 'arpack', uses\n    `scipy.sparse.linalg.svds`, which is more accurate, but\n    possibly slower in some cases."
          },
          "n_svd_vecs": {
            "type": "int, default=None",
            "description": "Number of vectors to use in calculating the SVD. Corresponds\n    to `ncv` when `svd_method=arpack` and `n_oversamples` when\n    `svd_method` is 'randomized`."
          },
          "mini_batch": {
            "type": "bool, default=False",
            "description": "Whether to use mini-batch k-means, which is faster but may get\n    different results."
          },
          "init": {
            "type": "{'k-means++', 'random'} or ndarray of shape (n_clusters, n_features),             default='k-means++'",
            "description": "Method for initialization of k-means algorithm; defaults to\n    'k-means++'."
          },
          "n_init": {
            "type": "int, default=10",
            "description": "Number of random initializations that are tried with the\n    k-means algorithm.\n\n    If mini-batch k-means is used, the best initialization is\n    chosen and the algorithm runs once. Otherwise, the algorithm\n    is run for each initialization and the best solution chosen."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used for randomizing the singular value decomposition and the k-means\n    initialization. Use an int to make the randomness deterministic.\n    See :term:`Glossary <random_state>`.\n\nAttributes\n----------"
          },
          "rows_": {
            "type": "array-like of shape (n_row_clusters, n_rows)",
            "description": "Results of the clustering. `rows[i, r]` is True if\n    cluster `i` contains row `r`. Available only after calling ``fit``."
          },
          "columns_": {
            "type": "array-like of shape (n_column_clusters, n_columns)",
            "description": "Results of the clustering, like `rows`."
          },
          "row_labels_": {
            "type": "array-like of shape (n_rows,)",
            "description": "Row partition labels."
          },
          "column_labels_": {
            "type": "array-like of shape (n_cols,)",
            "description": "Column partition labels."
          },
          "biclusters_": {
            "type": "tuple of two ndarrays",
            "description": "The tuple contains the `rows_` and `columns_` arrays."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "SpectralCoclustering : Spectral Co-Clustering algorithm (Dhillon, 2001).\n\nReferences\n----------\n\n* :doi:`Kluger, Yuval, et. al., 2003. Spectral biclustering of microarray\n  data: coclustering genes and conditions.\n  <10.1101/gr.648603>`",
        "notes": "",
        "examples": ">>> from sklearn.cluster import SpectralBiclustering\n>>> import numpy as np\n>>> X = np.array([[1, 1], [2, 1], [1, 0],\n...               [4, 7], [3, 5], [3, 6]])\n>>> clustering = SpectralBiclustering(n_clusters=2, random_state=0).fit(X)\n>>> clustering.row_labels_\narray([1, 1, 1, 0, 0, 0], dtype=int32)\n>>> clustering.column_labels_\narray([1, 0], dtype=int32)\n>>> clustering\nSpectralBiclustering(n_clusters=2, random_state=0)\n\nFor a more detailed example, see\n:ref:`sphx_glr_auto_examples_bicluster_plot_spectral_biclustering.py`"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y=None)",
          "docstring": {
            "description": "Create a biclustering for X.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present for API consistency by convention."
              }
            },
            "returns": "self : object\n    SpectralBiclustering instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_indices",
          "signature": "get_indices(self, i)",
          "docstring": {
            "description": "Row and column indices of the `i`'th bicluster.\n\nOnly works if ``rows_`` and ``columns_`` attributes exist.",
            "parameters": {
              "i": {
                "type": "int",
                "description": "The index of the cluster."
              }
            },
            "returns": "row_ind : ndarray, dtype=np.intp\n    Indices of rows in the dataset that belong to the bicluster.\ncol_ind : ndarray, dtype=np.intp\n    Indices of columns in the dataset that belong to the bicluster.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_shape",
          "signature": "get_shape(self, i)",
          "docstring": {
            "description": "Shape of the `i`'th bicluster.",
            "parameters": {
              "i": {
                "type": "int",
                "description": "The index of the cluster."
              }
            },
            "returns": "n_rows : int\n    Number of rows in the bicluster.\n\nn_cols : int\n    Number of columns in the bicluster.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_submatrix",
          "signature": "get_submatrix(self, i, data)",
          "docstring": {
            "description": "Return the submatrix corresponding to bicluster `i`.",
            "parameters": {
              "i": {
                "type": "int",
                "description": "The index of the cluster."
              },
              "data": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "The data."
              }
            },
            "returns": "submatrix : ndarray of shape (n_rows, n_cols)\n    The submatrix corresponding to bicluster `i`.",
            "raises": "",
            "see_also": "",
            "notes": "Works with sparse matrices. Only works if ``rows_`` and\n``columns_`` attributes exist.",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "SpectralClustering",
      "docstring": {
        "description": "Apply clustering to a projection of the normalized Laplacian.\n\nIn practice Spectral Clustering is very useful when the structure of\nthe individual clusters is highly non-convex, or more generally when\na measure of the center and spread of the cluster is not a suitable\ndescription of the complete cluster, such as when clusters are\nnested circles on the 2D plane.\n\nIf the affinity matrix is the adjacency matrix of a graph, this method\ncan be used to find normalized graph cuts [1]_, [2]_.\n\nWhen calling ``fit``, an affinity matrix is constructed using either\na kernel function such the Gaussian (aka RBF) kernel with Euclidean\ndistance ``d(X, X)``::\n\n        np.exp(-gamma * d(X,X) ** 2)\n\nor a k-nearest neighbors connectivity matrix.\n\nAlternatively, a user-provided affinity matrix can be specified by\nsetting ``affinity='precomputed'``.\n\nRead more in the :ref:`User Guide <spectral_clustering>`.",
        "parameters": {
          "n_clusters": {
            "type": "int, default=8",
            "description": "The dimension of the projection subspace."
          },
          "eigen_solver": {
            "type": "{'arpack', 'lobpcg', 'amg'}, default=None",
            "description": "The eigenvalue decomposition strategy to use. AMG requires pyamg\n    to be installed. It can be faster on very large, sparse problems,\n    but may also lead to instabilities. If None, then ``'arpack'`` is\n    used. See [4]_ for more details regarding `'lobpcg'`."
          },
          "n_components": {
            "type": "int, default=None",
            "description": "Number of eigenvectors to use for the spectral embedding. If None,\n    defaults to `n_clusters`."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "A pseudo random number generator used for the initialization\n    of the lobpcg eigenvectors decomposition when `eigen_solver ==\n    'amg'`, and for the K-Means initialization. Use an int to make\n    the results deterministic across calls (See\n    :term:`Glossary <random_state>`).\n\n    .. note::\n        When using `eigen_solver == 'amg'`,\n        it is necessary to also fix the global numpy seed with\n        `np.random.seed(int)` to get deterministic results. See\n        https://github.com/pyamg/pyamg/issues/139 for further\n        information."
          },
          "n_init": {
            "type": "int, default=10",
            "description": "Number of time the k-means algorithm will be run with different\n    centroid seeds. The final results will be the best output of n_init\n    consecutive runs in terms of inertia. Only used if\n    ``assign_labels='kmeans'``."
          },
          "gamma": {
            "type": "float, default=1.0",
            "description": "Kernel coefficient for rbf, poly, sigmoid, laplacian and chi2 kernels.\n    Ignored for ``affinity='nearest_neighbors'``, ``affinity='precomputed'``\n    or ``affinity='precomputed_nearest_neighbors'``."
          },
          "affinity": {
            "type": "str or callable, default='rbf'",
            "description": "How to construct the affinity matrix.\n     - 'nearest_neighbors': construct the affinity matrix by computing a\n       graph of nearest neighbors.\n     - 'rbf': construct the affinity matrix using a radial basis function\n       (RBF) kernel.\n     - 'precomputed': interpret ``X`` as a precomputed affinity matrix,\n       where larger values indicate greater similarity between instances.\n     - 'precomputed_nearest_neighbors': interpret ``X`` as a sparse graph\n       of precomputed distances, and construct a binary affinity matrix\n       from the ``n_neighbors`` nearest neighbors of each instance.\n     - one of the kernels supported by\n       :func:`~sklearn.metrics.pairwise.pairwise_kernels`.\n\n    Only kernels that produce similarity scores (non-negative values that\n    increase with similarity) should be used. This property is not checked\n    by the clustering algorithm."
          },
          "n_neighbors": {
            "type": "int, default=10",
            "description": "Number of neighbors to use when constructing the affinity matrix using\n    the nearest neighbors method. Ignored for ``affinity='rbf'``."
          },
          "eigen_tol": {
            "type": "float, default=\"auto\"",
            "description": "Stopping criterion for eigen decomposition of the Laplacian matrix.\n    If `eigen_tol=\"auto\"` then the passed tolerance will depend on the\n    `eigen_solver`:\n\n    - If `eigen_solver=\"arpack\"`, then `eigen_tol=0.0`;\n    - If `eigen_solver=\"lobpcg\"` or `eigen_solver=\"amg\"`, then\n      `eigen_tol=None` which configures the underlying `lobpcg` solver to\n      automatically resolve the value according to their heuristics. See,\n      :func:`scipy.sparse.linalg.lobpcg` for details.\n\n    Note that when using `eigen_solver=\"lobpcg\"` or `eigen_solver=\"amg\"`\n    values of `tol<1e-5` may lead to convergence issues and should be\n    avoided.\n\n    .. versionadded:: 1.2\n       Added 'auto' option."
          },
          "assign_labels": {
            "type": "{'kmeans', 'discretize', 'cluster_qr'}, default='kmeans'",
            "description": "The strategy for assigning labels in the embedding space. There are two\n    ways to assign labels after the Laplacian embedding. k-means is a\n    popular choice, but it can be sensitive to initialization.\n    Discretization is another approach which is less sensitive to random\n    initialization [3]_.\n    The cluster_qr method [5]_ directly extract clusters from eigenvectors\n    in spectral clustering. In contrast to k-means and discretization, cluster_qr\n    has no tuning parameters and runs no iterations, yet may outperform\n    k-means and discretization in terms of both quality and speed.\n\n    .. versionchanged:: 1.1\n       Added new labeling method 'cluster_qr'."
          },
          "degree": {
            "type": "float, default=3",
            "description": "Degree of the polynomial kernel. Ignored by other kernels."
          },
          "coef0": {
            "type": "float, default=1",
            "description": "Zero coefficient for polynomial and sigmoid kernels.\n    Ignored by other kernels."
          },
          "kernel_params": {
            "type": "dict of str to any, default=None",
            "description": "Parameters (keyword arguments) and values for kernel passed as\n    callable object. Ignored by other kernels."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "The number of parallel jobs to run when `affinity='nearest_neighbors'`\n    or `affinity='precomputed_nearest_neighbors'`. The neighbors search\n    will be done in parallel.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Verbosity mode.\n\n    .. versionadded:: 0.24\n\nAttributes\n----------"
          },
          "affinity_matrix_": {
            "type": "array-like of shape (n_samples, n_samples)",
            "description": "Affinity matrix used for clustering. Available only after calling\n    ``fit``."
          },
          "labels_": {
            "type": "ndarray of shape (n_samples,)",
            "description": "Labels of each point"
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "sklearn.cluster.KMeans : K-Means clustering.\nsklearn.cluster.DBSCAN : Density-Based Spatial Clustering of\n    Applications with Noise.",
        "notes": "A distance matrix for which 0 indicates identical elements and high values\nindicate very dissimilar elements can be transformed into an affinity /\nsimilarity matrix that is well-suited for the algorithm by\napplying the Gaussian (aka RBF, heat) kernel::\n\n    np.exp(- dist_matrix ** 2 / (2. * delta ** 2))\n\nwhere ``delta`` is a free parameter representing the width of the Gaussian\nkernel.\n\nAn alternative is to take a symmetric version of the k-nearest neighbors\nconnectivity matrix of the points.\n\nIf the pyamg package is installed, it is used: this greatly\nspeeds up computation.\n\nReferences\n----------\n.. [1] :doi:`Normalized cuts and image segmentation, 2000\n       Jianbo Shi, Jitendra Malik\n       <10.1109/34.868688>`\n\n.. [2] :doi:`A Tutorial on Spectral Clustering, 2007\n       Ulrike von Luxburg\n       <10.1007/s11222-007-9033-z>`\n\n.. [3] `Multiclass spectral clustering, 2003\n       Stella X. Yu, Jianbo Shi\n       <https://people.eecs.berkeley.edu/~jordan/courses/281B-spring04/readings/yu-shi.pdf>`_\n\n.. [4] :doi:`Toward the Optimal Preconditioned Eigensolver:\n       Locally Optimal Block Preconditioned Conjugate Gradient Method, 2001\n       A. V. Knyazev\n       SIAM Journal on Scientific Computing 23, no. 2, pp. 517-541.\n       <10.1137/S1064827500366124>`\n\n.. [5] :doi:`Simple, direct, and efficient multi-way spectral clustering, 2019\n       Anil Damle, Victor Minden, Lexing Ying\n       <10.1093/imaiai/iay008>`",
        "examples": ">>> from sklearn.cluster import SpectralClustering\n>>> import numpy as np\n>>> X = np.array([[1, 1], [2, 1], [1, 0],\n...               [4, 7], [3, 5], [3, 6]])\n>>> clustering = SpectralClustering(n_clusters=2,\n...         assign_labels='discretize',\n...         random_state=0).fit(X)\n>>> clustering.labels_\narray([1, 1, 1, 0, 0, 0])\n>>> clustering\nSpectralClustering(assign_labels='discretize', n_clusters=2,\n    random_state=0)"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y=None)",
          "docstring": {
            "description": "Perform spectral clustering from features, or affinity matrix.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features) or                 (n_samples, n_samples)",
                "description": "Training instances to cluster, similarities / affinities between\n    instances if ``affinity='precomputed'``, or distances between\n    instances if ``affinity='precomputed_nearest_neighbors``. If a\n    sparse matrix is provided in a format other than ``csr_matrix``,\n    ``csc_matrix``, or ``coo_matrix``, it will be converted into a\n    sparse ``csr_matrix``."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              }
            },
            "returns": "self : object\n    A fitted instance of the estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit_predict",
          "signature": "fit_predict(self, X, y=None)",
          "docstring": {
            "description": "Perform spectral clustering on `X` and return cluster labels.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features) or                 (n_samples, n_samples)",
                "description": "Training instances to cluster, similarities / affinities between\n    instances if ``affinity='precomputed'``, or distances between\n    instances if ``affinity='precomputed_nearest_neighbors``. If a\n    sparse matrix is provided in a format other than ``csr_matrix``,\n    ``csc_matrix``, or ``coo_matrix``, it will be converted into a\n    sparse ``csr_matrix``."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present here for API consistency by convention."
              }
            },
            "returns": "labels : ndarray of shape (n_samples,)\n    Cluster labels.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "SpectralCoclustering",
      "docstring": {
        "description": "Spectral Co-Clustering algorithm (Dhillon, 2001).\n\nClusters rows and columns of an array `X` to solve the relaxed\nnormalized cut of the bipartite graph created from `X` as follows:\nthe edge between row vertex `i` and column vertex `j` has weight\n`X[i, j]`.\n\nThe resulting bicluster structure is block-diagonal, since each\nrow and each column belongs to exactly one bicluster.\n\nSupports sparse matrices, as long as they are nonnegative.\n\nRead more in the :ref:`User Guide <spectral_coclustering>`.",
        "parameters": {
          "n_clusters": {
            "type": "int, default=3",
            "description": "The number of biclusters to find."
          },
          "svd_method": {
            "type": "{'randomized', 'arpack'}, default='randomized'",
            "description": "Selects the algorithm for finding singular vectors. May be\n    'randomized' or 'arpack'. If 'randomized', use\n    :func:`sklearn.utils.extmath.randomized_svd`, which may be faster\n    for large matrices. If 'arpack', use\n    :func:`scipy.sparse.linalg.svds`, which is more accurate, but\n    possibly slower in some cases."
          },
          "n_svd_vecs": {
            "type": "int, default=None",
            "description": "Number of vectors to use in calculating the SVD. Corresponds\n    to `ncv` when `svd_method=arpack` and `n_oversamples` when\n    `svd_method` is 'randomized`."
          },
          "mini_batch": {
            "type": "bool, default=False",
            "description": "Whether to use mini-batch k-means, which is faster but may get\n    different results."
          },
          "init": {
            "type": "{'k-means++', 'random'}, or ndarray of shape             (n_clusters, n_features), default='k-means++'",
            "description": "Method for initialization of k-means algorithm; defaults to\n    'k-means++'."
          },
          "n_init": {
            "type": "int, default=10",
            "description": "Number of random initializations that are tried with the\n    k-means algorithm.\n\n    If mini-batch k-means is used, the best initialization is\n    chosen and the algorithm runs once. Otherwise, the algorithm\n    is run for each initialization and the best solution chosen."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used for randomizing the singular value decomposition and the k-means\n    initialization. Use an int to make the randomness deterministic.\n    See :term:`Glossary <random_state>`.\n\nAttributes\n----------"
          },
          "rows_": {
            "type": "array-like of shape (n_row_clusters, n_rows)",
            "description": "Results of the clustering. `rows[i, r]` is True if\n    cluster `i` contains row `r`. Available only after calling ``fit``."
          },
          "columns_": {
            "type": "array-like of shape (n_column_clusters, n_columns)",
            "description": "Results of the clustering, like `rows`."
          },
          "row_labels_": {
            "type": "array-like of shape (n_rows,)",
            "description": "The bicluster label of each row."
          },
          "column_labels_": {
            "type": "array-like of shape (n_cols,)",
            "description": "The bicluster label of each column."
          },
          "biclusters_": {
            "type": "tuple of two ndarrays",
            "description": "The tuple contains the `rows_` and `columns_` arrays."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "SpectralBiclustering : Partitions rows and columns under the assumption\n    that the data has an underlying checkerboard structure.\n\nReferences\n----------\n* :doi:`Dhillon, Inderjit S, 2001. Co-clustering documents and words using\n  bipartite spectral graph partitioning.\n  <10.1145/502512.502550>`",
        "notes": "",
        "examples": ">>> from sklearn.cluster import SpectralCoclustering\n>>> import numpy as np\n>>> X = np.array([[1, 1], [2, 1], [1, 0],\n...               [4, 7], [3, 5], [3, 6]])\n>>> clustering = SpectralCoclustering(n_clusters=2, random_state=0).fit(X)\n>>> clustering.row_labels_ #doctest: +SKIP\narray([0, 1, 1, 0, 0, 0], dtype=int32)\n>>> clustering.column_labels_ #doctest: +SKIP\narray([0, 0], dtype=int32)\n>>> clustering\nSpectralCoclustering(n_clusters=2, random_state=0)"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y=None)",
          "docstring": {
            "description": "Create a biclustering for X.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present for API consistency by convention."
              }
            },
            "returns": "self : object\n    SpectralBiclustering instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_indices",
          "signature": "get_indices(self, i)",
          "docstring": {
            "description": "Row and column indices of the `i`'th bicluster.\n\nOnly works if ``rows_`` and ``columns_`` attributes exist.",
            "parameters": {
              "i": {
                "type": "int",
                "description": "The index of the cluster."
              }
            },
            "returns": "row_ind : ndarray, dtype=np.intp\n    Indices of rows in the dataset that belong to the bicluster.\ncol_ind : ndarray, dtype=np.intp\n    Indices of columns in the dataset that belong to the bicluster.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_shape",
          "signature": "get_shape(self, i)",
          "docstring": {
            "description": "Shape of the `i`'th bicluster.",
            "parameters": {
              "i": {
                "type": "int",
                "description": "The index of the cluster."
              }
            },
            "returns": "n_rows : int\n    Number of rows in the bicluster.\n\nn_cols : int\n    Number of columns in the bicluster.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_submatrix",
          "signature": "get_submatrix(self, i, data)",
          "docstring": {
            "description": "Return the submatrix corresponding to bicluster `i`.",
            "parameters": {
              "i": {
                "type": "int",
                "description": "The index of the cluster."
              },
              "data": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "The data."
              }
            },
            "returns": "submatrix : ndarray of shape (n_rows, n_cols)\n    The submatrix corresponding to bicluster `i`.",
            "raises": "",
            "see_also": "",
            "notes": "Works with sparse matrices. Only works if ``rows_`` and\n``columns_`` attributes exist.",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    }
  ],
  "constants": []
}