{
  "description": "Ensemble-based methods for classification, regression and anomaly detection.",
  "functions": [],
  "classes": [
    {
      "name": "AdaBoostClassifier",
      "documentation": {
        "description": "An AdaBoost classifier.\n\n    An AdaBoost [1]_ classifier is a meta-estimator that begins by fitting a\n    classifier on the original dataset and then fits additional copies of the\n    classifier on the same dataset but where the weights of incorrectly\n    classified instances are adjusted such that subsequent classifiers focus\n    more on difficult cases.\n\n    This class implements the algorithm based on [2]_.\n\n    Read more in the :ref:`User Guide <adaboost>`.\n\n    .. versionadded:: 0.14\n\n    Parameters\n    ----------\n    estimator : object, default=None\n        The base estimator from which the boosted ensemble is built.\n        Support for sample weighting is required, as well as proper\n        ``classes_`` and ``n_classes_`` attributes. If ``None``, then\n        the base estimator is :class:`~sklearn.tree.DecisionTreeClassifier`\n        initialized with `max_depth=1`.\n\n        .. versionadded:: 1.2\n           `base_estimator` was renamed to `estimator`.\n\n    n_estimators : int, default=50\n        The maximum number of estimators at which boosting is terminated.\n        In case of perfect fit, the learning procedure is stopped early.\n        Values must be in the range `[1, inf)`.\n\n    learning_rate : float, default=1.0\n        Weight applied to each classifier at each boosting iteration. A higher\n        learning rate increases the contribution of each classifier. There is\n        a trade-off between the `learning_rate` and `n_estimators` parameters.\n        Values must be in the range `(0.0, inf)`.\n\n    algorithm : {'SAMME'}, default='SAMME'\n        Use the SAMME discrete boosting algorithm.\n\n        .. deprecated:: 1.6\n            `algorithm` is deprecated and will be removed in version 1.8. This\n            estimator only implements the 'SAMME' algorithm.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls the random seed given at each `estimator` at each\n        boosting iteration.\n        Thus, it is only used when `estimator` exposes a `random_state`.\n        Pass an int for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Attributes\n    ----------\n    estimator_ : estimator\n        The base estimator from which the ensemble is grown.\n\n        .. versionadded:: 1.2\n           `base_estimator_` was renamed to `estimator_`.\n\n    estimators_ : list of classifiers\n        The collection of fitted sub-estimators.\n\n    classes_ : ndarray of shape (n_classes,)\n        The classes labels.\n\n    n_classes_ : int\n        The number of classes.\n\n    estimator_weights_ : ndarray of floats\n        Weights for each estimator in the boosted ensemble.\n\n    estimator_errors_ : ndarray of floats\n        Classification error for each estimator in the boosted\n        ensemble.\n\n    feature_importances_ : ndarray of shape (n_features,)\n        The impurity-based feature importances if supported by the\n        ``estimator`` (when based on decision trees).\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    See Also\n    --------\n    AdaBoostRegressor : An AdaBoost regressor that begins by fitting a\n        regressor on the original dataset and then fits additional copies of\n        the regressor on the same dataset but where the weights of instances\n        are adjusted according to the error of the current prediction.\n\n    GradientBoostingClassifier : GB builds an additive model in a forward\n        stage-wise fashion. Regression trees are fit on the negative gradient\n        of the binomial or multinomial deviance loss function. Binary\n        classification is a special case where only a single regression tree is\n        induced.\n\n    sklearn.tree.DecisionTreeClassifier : A non-parametric supervised learning\n        method used for classification.\n        Creates a model that predicts the value of a target variable by\n        learning simple decision rules inferred from the data features.\n\n    References\n    ----------\n    .. [1] Y. Freund, R. Schapire, \"A Decision-Theoretic Generalization of\n           on-Line Learning and an Application to Boosting\", 1995.\n\n    .. [2] :doi:`J. Zhu, H. Zou, S. Rosset, T. Hastie, \"Multi-class adaboost.\"\n           Statistics and its Interface 2.3 (2009): 349-360.\n           <10.4310/SII.2009.v2.n3.a8>`",
        "parameters": {
          "estimator": {
            "type": "only implements the 'SAMME' algorithm.",
            "description": ""
          },
          "The": {
            "type": "impurity-based feature importances if supported by the",
            "description": "``estimator`` (when based on decision trees)."
          },
          "Support": {
            "type": "for sample weighting is required, as well as proper",
            "description": "``classes_`` and ``n_classes_`` attributes. If ``None``, then"
          },
          "the": {
            "type": "regressor on the same dataset but where the weights of instances",
            "description": ""
          },
          "initialized": {
            "type": "with `max_depth=1`.",
            "description": ".. versionadded:: 1.2\n`base_estimator` was renamed to `estimator`."
          },
          "n_estimators": {
            "type": "int, default=50",
            "description": ""
          },
          "In": {
            "type": "case of perfect fit, the learning procedure is stopped early.",
            "description": ""
          },
          "Values": {
            "type": "must be in the range `(0.0, inf)`.",
            "description": ""
          },
          "learning_rate": {
            "type": "float, default=1.0",
            "description": ""
          },
          "Weight": {
            "type": "applied to each classifier at each boosting iteration. A higher",
            "description": ""
          },
          "learning": {
            "type": "simple decision rules inferred from the data features.",
            "description": "References\n----------\n.. [1] Y. Freund, R. Schapire, \"A Decision-Theoretic Generalization of\non-Line Learning and an Application to Boosting\", 1995.\n.. [2] :doi:`J. Zhu, H. Zou, S. Rosset, T. Hastie, \"Multi-class adaboost.\""
          },
          "a": {
            "type": "trade-off between the `learning_rate` and `n_estimators` parameters.",
            "description": ""
          },
          "algorithm": {
            "type": "{'SAMME'}, default='SAMME'",
            "description": ""
          },
          "Use": {
            "type": "the SAMME discrete boosting algorithm.",
            "description": ".. deprecated:: 1.6\n`algorithm` is deprecated and will be removed in version 1.8. This"
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Controls": {
            "type": "the random seed given at each `estimator` at each",
            "description": ""
          },
          "boosting": {
            "type": "iteration.",
            "description": "Thus, it is only used when `estimator` exposes a `random_state`."
          },
          "Pass": {
            "type": "an int for reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "estimator_": {
            "type": "estimator",
            "description": ""
          },
          "estimators_": {
            "type": "list of classifiers",
            "description": ""
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,)",
            "description": ""
          },
          "n_classes_": {
            "type": "int",
            "description": ""
          },
          "estimator_weights_": {
            "type": "ndarray of floats",
            "description": ""
          },
          "Weights": {
            "type": "for each estimator in the boosted ensemble.",
            "description": ""
          },
          "estimator_errors_": {
            "type": "ndarray of floats",
            "description": ""
          },
          "Classification": {
            "type": "error for each estimator in the boosted",
            "description": "ensemble."
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": ""
          },
          "Warning": {
            "type": "impurity",
            "description": "based feature importances can be misleading for"
          },
          "high": {
            "type": "cardinality features (many unique values). See",
            "description": ":func:`sklearn.inspection.permutation_importance` as an alternative."
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`.",
            "description": ".. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "AdaBoostRegressor": {
            "type": "An AdaBoost regressor that begins by fitting a",
            "description": ""
          },
          "regressor": {
            "type": "on the original dataset and then fits additional copies of",
            "description": ""
          },
          "are": {
            "type": "adjusted according to the error of the current prediction.",
            "description": ""
          },
          "GradientBoostingClassifier": {
            "type": "GB builds an additive model in a forward",
            "description": "stage-wise fashion. Regression trees are fit on the negative gradient"
          },
          "of": {
            "type": "the binomial or multinomial deviance loss function. Binary",
            "description": ""
          },
          "classification": {
            "type": "dataset composed of two Gaussian quantiles clusters, please",
            "description": ""
          },
          "method": {
            "type": "used for classification.",
            "description": ""
          },
          "Creates": {
            "type": "a model that predicts the value of a target variable by",
            "description": ""
          },
          "Statistics": {
            "type": "and its Interface 2.3 (2009): 349-360.",
            "description": "<10.4310/SII.2009.v2.n3.a8>`\nExamples\n--------\n>>> from sklearn.ensemble import AdaBoostClassifier\n>>> from sklearn.datasets import make_classification\n>>> X, y = make_classification(n_samples=1000, n_features=4,\n...                            n_informative=2, n_redundant=0,\n...                            random_state=0, shuffle=False)\n>>> clf = AdaBoostClassifier(n_estimators=100, random_state=0)\n>>> clf.fit(X, y)"
          },
          "AdaBoostClassifier": {
            "type": "n_estimators=100, random_state=0",
            "description": ">>> clf.predict([[0, 0, 0, 0]])"
          },
          "array": {
            "type": "[1]",
            "description": ">>> clf.score(X, y)\n0.96..."
          },
          "For": {
            "type": "a detailed example of using AdaBoost to fit a non-linearly seperable",
            "description": ""
          },
          "as": {
            "type": "weaklearners, please refer to",
            "description": ":ref:`sphx_glr_auto_examples_ensemble_plot_adaboost_multiclass.py`."
          },
          "refer": {
            "type": "to :ref:`sphx_glr_auto_examples_ensemble_plot_adaboost_twoclass.py`.",
            "description": ""
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    AdaBoostRegressor : An AdaBoost regressor that begins by fitting a\n        regressor on the original dataset and then fits additional copies of\n        the regressor on the same dataset but where the weights of instances\n        are adjusted according to the error of the current prediction.\n\n    GradientBoostingClassifier : GB builds an additive model in a forward\n        stage-wise fashion. Regression trees are fit on the negative gradient\n        of the binomial or multinomial deviance loss function. Binary\n        classification is a special case where only a single regression tree is\n        induced.\n\n    sklearn.tree.DecisionTreeClassifier : A non-parametric supervised learning\n        method used for classification.\n        Creates a model that predicts the value of a target variable by\n        learning simple decision rules inferred from the data features.\n\n    References\n    ----------\n    .. [1] Y. Freund, R. Schapire, \"A Decision-Theoretic Generalization of\n           on-Line Learning and an Application to Boosting\", 1995.\n\n    .. [2] :doi:`J. Zhu, H. Zou, S. Rosset, T. Hastie, \"Multi-class adaboost.\"\n           Statistics and its Interface 2.3 (2009): 349-360.\n           <10.4310/SII.2009.v2.n3.a8>`\n\n    Examples\n    --------\n    >>> from sklearn.ensemble import AdaBoostClassifier\n    >>> from sklearn.datasets import make_classification\n    >>> X, y = make_classification(n_samples=1000, n_features=4,\n    ...                            n_informative=2, n_redundant=0,\n    ...                            random_state=0, shuffle=False)\n    >>> clf = AdaBoostClassifier(n_estimators=100, random_state=0)\n    >>> clf.fit(X, y)\n    AdaBoostClassifier(n_estimators=100, random_state=0)\n    >>> clf.predict([[0, 0, 0, 0]])\n    array([1])\n    >>> clf.score(X, y)\n    0.96...\n\n    For a detailed example of using AdaBoost to fit a sequence of DecisionTrees\n    as weaklearners, please refer to\n    :ref:`sphx_glr_auto_examples_ensemble_plot_adaboost_multiclass.py`.\n\n    For a detailed example of using AdaBoost to fit a non-linearly seperable\n    classification dataset composed of two Gaussian quantiles clusters, please\n    refer to :ref:`sphx_glr_auto_examples_ensemble_plot_adaboost_twoclass.py`.",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.ensemble import AdaBoostClassifier\n    >>> from sklearn.datasets import make_classification\n    >>> X, y = make_classification(n_samples=1000, n_features=4,\n    ...                            n_informative=2, n_redundant=0,\n    ...                            random_state=0, shuffle=False)\n    >>> clf = AdaBoostClassifier(n_estimators=100, random_state=0)\n    >>> clf.fit(X, y)\n    AdaBoostClassifier(n_estimators=100, random_state=0)\n    >>> clf.predict([[0, 0, 0, 0]])\n    array([1])\n    >>> clf.score(X, y)\n    0.96...\n\n    For a detailed example of using AdaBoost to fit a sequence of DecisionTrees\n    as weaklearners, please refer to\n    :ref:`sphx_glr_auto_examples_ensemble_plot_adaboost_multiclass.py`.\n\n    For a detailed example of using AdaBoost to fit a non-linearly seperable\n    classification dataset composed of two Gaussian quantiles clusters, please\n    refer to :ref:`sphx_glr_auto_examples_ensemble_plot_adaboost_twoclass.py`."
      },
      "methods": [
        {
          "name": "decision_function",
          "signature": "decision_function(self, X)",
          "documentation": {
            "description": "Compute the decision function of ``X``.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Sparse matrix can be CSC, CSR, COO,\n            DOK, or LIL. COO, DOK, and LIL are converted to CSR.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "decision function of the input samples. The order of",
                "description": ""
              },
              "score": {
                "type": "ndarray of shape of (n_samples, k)",
                "description": ""
              },
              "outputs": {
                "type": "is the same as that of the :term:`classes_` attribute.",
                "description": ""
              },
              "Binary": {
                "type": "classification is a special cases with ``k == 1``,",
                "description": ""
              },
              "otherwise": {
                "type": "``k==n_classes``. For binary classification,",
                "description": ""
              },
              "values": {
                "type": "closer to -1 or 1 mean more like the first or second",
                "description": ""
              },
              "class": {
                "type": "in ``classes_``, respectively.",
                "description": ""
              }
            },
            "returns": "-------\n        score : ndarray of shape of (n_samples, k)\n            The decision function of the input samples. The order of\n            outputs is the same as that of the :term:`classes_` attribute.\n            Binary classification is a special cases with ``k == 1``,\n            otherwise ``k==n_classes``. For binary classification,\n            values closer to -1 or 1 mean more like the first or second\n            class in ``classes_``, respectively.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Build a boosted classifier/regressor from the training set (X, y).\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Sparse matrix can be CSC, CSR, COO,\n            DOK, or LIL. COO, DOK, and LIL are converted to CSR.\n\n        y : array-like of shape (n_samples,)\n            The target values.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, the sample weights are initialized to\n            1 / n_samples.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "target values.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, the sample weights are initialized to",
                "description": ""
              },
              "1": {
                "type": "/ n_samples.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "Fitted": {
                "type": "estimator.",
                "description": ""
              }
            },
            "returns": "-------\n        self : object\n            Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Raise `NotImplementedError`.\n\n        This estimator does not support metadata routing yet.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "documentation": {
            "description": "Predict classes for X.\n\n        The predicted class of an input sample is computed as the weighted mean\n        prediction of the classifiers in the ensemble.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Sparse matrix can be CSC, CSR, COO,\n            DOK, or LIL. COO, DOK, and LIL are converted to CSR.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted classes.",
                "description": ""
              },
              "y": {
                "type": "ndarray of shape (n_samples,)",
                "description": ""
              }
            },
            "returns": "-------\n        y : ndarray of shape (n_samples,)\n            The predicted classes.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_log_proba",
          "signature": "predict_log_proba(self, X)",
          "documentation": {
            "description": "Predict class log-probabilities for X.\n\n        The predicted class log-probabilities of an input sample is computed as\n        the weighted mean predicted class log-probabilities of the classifiers\n        in the ensemble.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Sparse matrix can be CSC, CSR, COO,\n            DOK, or LIL. COO, DOK, and LIL are converted to CSR.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "class probabilities of the input samples. The order of",
                "description": ""
              },
              "p": {
                "type": "ndarray of shape (n_samples, n_classes)",
                "description": ""
              },
              "outputs": {
                "type": "is the same of that of the :term:`classes_` attribute.",
                "description": ""
              }
            },
            "returns": "-------\n        p : ndarray of shape (n_samples, n_classes)\n            The class probabilities of the input samples. The order of\n            outputs is the same of that of the :term:`classes_` attribute.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_proba",
          "signature": "predict_proba(self, X)",
          "documentation": {
            "description": "Predict class probabilities for X.\n\n        The predicted class probabilities of an input sample is computed as\n        the weighted mean predicted class probabilities of the classifiers\n        in the ensemble.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Sparse matrix can be CSC, CSR, COO,\n            DOK, or LIL. COO, DOK, and LIL are converted to CSR.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "class probabilities of the input samples. The order of",
                "description": ""
              },
              "p": {
                "type": "ndarray of shape (n_samples, n_classes)",
                "description": ""
              },
              "outputs": {
                "type": "is the same of that of the :term:`classes_` attribute.",
                "description": ""
              }
            },
            "returns": "-------\n        p : ndarray of shape (n_samples, n_classes)\n            The class probabilities of the input samples. The order of\n            outputs is the same of that of the :term:`classes_` attribute.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "labels for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ""
              },
              "Mean": {
                "type": "accuracy of ``self.predict(X)`` w.r.t. `y`.",
                "description": ""
              }
            },
            "returns": "the mean accuracy on the given test data and labels.\n\n        In multi-label classification, this is the subset accuracy\n        which is a harsh metric since you require for each sample that\n        each label set be correctly predicted.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True labels for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.ensemble._weight_boosting.AdaBoostClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._weight_boosting.AdaBoostClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.ensemble._weight_boosting.AdaBoostClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._weight_boosting.AdaBoostClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "staged_decision_function",
          "signature": "staged_decision_function(self, X)",
          "documentation": {
            "description": "Compute decision function of ``X`` for each boosting iteration.\n\n        This method allows monitoring (i.e. determine error on testing set)\n        after each boosting iteration.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "decision function of the input samples. The order of",
                "description": ""
              },
              "score": {
                "type": "generator of ndarray of shape (n_samples, k)",
                "description": ""
              },
              "outputs": {
                "type": "is the same of that of the :term:`classes_` attribute.",
                "description": ""
              },
              "Binary": {
                "type": "classification is a special cases with ``k == 1``,",
                "description": ""
              },
              "otherwise": {
                "type": "``k==n_classes``. For binary classification,",
                "description": ""
              },
              "values": {
                "type": "closer to -1 or 1 mean more like the first or second",
                "description": ""
              },
              "class": {
                "type": "in ``classes_``, respectively.",
                "description": ""
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "staged_predict",
          "signature": "staged_predict(self, X)",
          "documentation": {
            "description": "Return staged predictions for X.\n\n        The predicted class of an input sample is computed as the weighted mean\n        prediction of the classifiers in the ensemble.\n\n        This generator method yields the ensemble prediction after each\n        iteration of boosting and therefore allows monitoring, such as to\n        determine the prediction on a test set after each boost.",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted classes.",
                "description": ""
              },
              "y": {
                "type": "generator of ndarray of shape (n_samples,)",
                "description": ""
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "staged_predict_proba",
          "signature": "staged_predict_proba(self, X)",
          "documentation": {
            "description": "Predict class probabilities for X.\n\n        The predicted class probabilities of an input sample is computed as\n        the weighted mean predicted class probabilities of the classifiers\n        in the ensemble.\n\n        This generator method yields the ensemble predicted class probabilities\n        after each iteration of boosting and therefore allows monitoring, such\n        as to determine the predicted class probabilities on a test set after\n        each boost.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "class probabilities of the input samples. The order of",
                "description": ""
              },
              "p": {
                "type": "generator of ndarray of shape (n_samples,)",
                "description": ""
              },
              "outputs": {
                "type": "is the same of that of the :term:`classes_` attribute.",
                "description": ""
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "staged_score",
          "signature": "staged_score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Return staged scores for X, y.\n\n        This generator method yields the ensemble score after each iteration of\n        boosting and therefore allows monitoring, such as to determine the\n        score on a test set after each boost.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "training input samples. Sparse matrix can be CSC, CSR, COO,",
                "description": "DOK, or LIL. COO, DOK, and LIL are converted to CSR."
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "Labels": {
                "type": "for X.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Yields\n------"
              },
              "z": {
                "type": "float",
                "description": ""
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "AdaBoostRegressor",
      "documentation": {
        "description": "An AdaBoost regressor.\n\n    An AdaBoost [1] regressor is a meta-estimator that begins by fitting a\n    regressor on the original dataset and then fits additional copies of the\n    regressor on the same dataset but where the weights of instances are\n    adjusted according to the error of the current prediction. As such,\n    subsequent regressors focus more on difficult cases.\n\n    This class implements the algorithm known as AdaBoost.R2 [2].\n\n    Read more in the :ref:`User Guide <adaboost>`.\n\n    .. versionadded:: 0.14\n\n    Parameters\n    ----------\n    estimator : object, default=None\n        The base estimator from which the boosted ensemble is built.\n        If ``None``, then the base estimator is\n        :class:`~sklearn.tree.DecisionTreeRegressor` initialized with\n        `max_depth=3`.\n\n        .. versionadded:: 1.2\n           `base_estimator` was renamed to `estimator`.\n\n    n_estimators : int, default=50\n        The maximum number of estimators at which boosting is terminated.\n        In case of perfect fit, the learning procedure is stopped early.\n        Values must be in the range `[1, inf)`.\n\n    learning_rate : float, default=1.0\n        Weight applied to each regressor at each boosting iteration. A higher\n        learning rate increases the contribution of each regressor. There is\n        a trade-off between the `learning_rate` and `n_estimators` parameters.\n        Values must be in the range `(0.0, inf)`.\n\n    loss : {'linear', 'square', 'exponential'}, default='linear'\n        The loss function to use when updating the weights after each\n        boosting iteration.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls the random seed given at each `estimator` at each\n        boosting iteration.\n        Thus, it is only used when `estimator` exposes a `random_state`.\n        In addition, it controls the bootstrap of the weights used to train the\n        `estimator` at each boosting iteration.\n        Pass an int for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Attributes\n    ----------\n    estimator_ : estimator\n        The base estimator from which the ensemble is grown.\n\n        .. versionadded:: 1.2\n           `base_estimator_` was renamed to `estimator_`.\n\n    estimators_ : list of regressors\n        The collection of fitted sub-estimators.\n\n    estimator_weights_ : ndarray of floats\n        Weights for each estimator in the boosted ensemble.\n\n    estimator_errors_ : ndarray of floats\n        Regression error for each estimator in the boosted ensemble.\n\n    feature_importances_ : ndarray of shape (n_features,)\n        The impurity-based feature importances if supported by the\n        ``estimator`` (when based on decision trees).\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    See Also\n    --------\n    AdaBoostClassifier : An AdaBoost classifier.\n    GradientBoostingRegressor : Gradient Boosting Classification Tree.\n    sklearn.tree.DecisionTreeRegressor : A decision tree regressor.\n\n    References\n    ----------\n    .. [1] Y. Freund, R. Schapire, \"A Decision-Theoretic Generalization of\n           on-Line Learning and an Application to Boosting\", 1995.\n\n    .. [2] H. Drucker, \"Improving Regressors using Boosting Techniques\", 1997.",
        "parameters": {
          "estimator": {
            "type": "object, default=None",
            "description": ""
          },
          "The": {
            "type": "impurity-based feature importances if supported by the",
            "description": "``estimator`` (when based on decision trees)."
          },
          "If": {
            "type": "``None``, then the base estimator is",
            "description": ":class:`~sklearn.tree.DecisionTreeRegressor` initialized with\n`max_depth=3`.\n.. versionadded:: 1.2\n`base_estimator` was renamed to `estimator`."
          },
          "n_estimators": {
            "type": "int, default=50",
            "description": ""
          },
          "In": {
            "type": "addition, it controls the bootstrap of the weights used to train the",
            "description": "`estimator` at each boosting iteration."
          },
          "Values": {
            "type": "must be in the range `(0.0, inf)`.",
            "description": ""
          },
          "learning_rate": {
            "type": "float, default=1.0",
            "description": ""
          },
          "Weight": {
            "type": "applied to each regressor at each boosting iteration. A higher",
            "description": ""
          },
          "learning": {
            "type": "rate increases the contribution of each regressor. There is",
            "description": ""
          },
          "a": {
            "type": "trade-off between the `learning_rate` and `n_estimators` parameters.",
            "description": ""
          },
          "loss": {
            "type": "{'linear', 'square', 'exponential'}, default='linear'",
            "description": ""
          },
          "boosting": {
            "type": "iteration.",
            "description": "Thus, it is only used when `estimator` exposes a `random_state`."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Controls": {
            "type": "the random seed given at each `estimator` at each",
            "description": ""
          },
          "Pass": {
            "type": "an int for reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "estimator_": {
            "type": "estimator",
            "description": ""
          },
          "estimators_": {
            "type": "list of regressors",
            "description": ""
          },
          "estimator_weights_": {
            "type": "ndarray of floats",
            "description": ""
          },
          "Weights": {
            "type": "for each estimator in the boosted ensemble.",
            "description": ""
          },
          "estimator_errors_": {
            "type": "ndarray of floats",
            "description": ""
          },
          "Regression": {
            "type": "error for each estimator in the boosted ensemble.",
            "description": ""
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": ""
          },
          "Warning": {
            "type": "impurity",
            "description": "based feature importances can be misleading for"
          },
          "high": {
            "type": "cardinality features (many unique values). See",
            "description": ":func:`sklearn.inspection.permutation_importance` as an alternative."
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`.",
            "description": ".. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "AdaBoostClassifier": {
            "type": "An AdaBoost classifier.",
            "description": ""
          },
          "GradientBoostingRegressor": {
            "type": "Gradient Boosting Classification Tree.",
            "description": "sklearn.tree.DecisionTreeRegressor : A decision tree regressor.\nReferences\n----------\n.. [1] Y. Freund, R. Schapire, \"A Decision-Theoretic Generalization of\non-Line Learning and an Application to Boosting\", 1995.\n.. [2] H. Drucker, \"Improving Regressors using Boosting Techniques\", 1997.\nExamples\n--------\n>>> from sklearn.ensemble import AdaBoostRegressor\n>>> from sklearn.datasets import make_regression\n>>> X, y = make_regression(n_features=4, n_informative=2,\n...                        random_state=0, shuffle=False)\n>>> regr = AdaBoostRegressor(random_state=0, n_estimators=100)\n>>> regr.fit(X, y)"
          },
          "AdaBoostRegressor": {
            "type": "n_estimators=100, random_state=0",
            "description": ">>> regr.predict([[0, 0, 0, 0]])"
          },
          "array": {
            "type": "[4.7972...]",
            "description": ">>> regr.score(X, y)\n0.9771..."
          },
          "For": {
            "type": "a detailed example of utilizing :class:`~sklearn.ensemble.AdaBoostRegressor`",
            "description": ""
          },
          "to": {
            "type": "fit a sequence of decision trees as weak learners, please refer to",
            "description": ":ref:`sphx_glr_auto_examples_ensemble_plot_adaboost_regression.py`."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    AdaBoostClassifier : An AdaBoost classifier.\n    GradientBoostingRegressor : Gradient Boosting Classification Tree.\n    sklearn.tree.DecisionTreeRegressor : A decision tree regressor.\n\n    References\n    ----------\n    .. [1] Y. Freund, R. Schapire, \"A Decision-Theoretic Generalization of\n           on-Line Learning and an Application to Boosting\", 1995.\n\n    .. [2] H. Drucker, \"Improving Regressors using Boosting Techniques\", 1997.\n\n    Examples\n    --------\n    >>> from sklearn.ensemble import AdaBoostRegressor\n    >>> from sklearn.datasets import make_regression\n    >>> X, y = make_regression(n_features=4, n_informative=2,\n    ...                        random_state=0, shuffle=False)\n    >>> regr = AdaBoostRegressor(random_state=0, n_estimators=100)\n    >>> regr.fit(X, y)\n    AdaBoostRegressor(n_estimators=100, random_state=0)\n    >>> regr.predict([[0, 0, 0, 0]])\n    array([4.7972...])\n    >>> regr.score(X, y)\n    0.9771...\n\n    For a detailed example of utilizing :class:`~sklearn.ensemble.AdaBoostRegressor`\n    to fit a sequence of decision trees as weak learners, please refer to\n    :ref:`sphx_glr_auto_examples_ensemble_plot_adaboost_regression.py`.",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.ensemble import AdaBoostRegressor\n    >>> from sklearn.datasets import make_regression\n    >>> X, y = make_regression(n_features=4, n_informative=2,\n    ...                        random_state=0, shuffle=False)\n    >>> regr = AdaBoostRegressor(random_state=0, n_estimators=100)\n    >>> regr.fit(X, y)\n    AdaBoostRegressor(n_estimators=100, random_state=0)\n    >>> regr.predict([[0, 0, 0, 0]])\n    array([4.7972...])\n    >>> regr.score(X, y)\n    0.9771...\n\n    For a detailed example of utilizing :class:`~sklearn.ensemble.AdaBoostRegressor`\n    to fit a sequence of decision trees as weak learners, please refer to\n    :ref:`sphx_glr_auto_examples_ensemble_plot_adaboost_regression.py`."
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Build a boosted classifier/regressor from the training set (X, y).\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Sparse matrix can be CSC, CSR, COO,\n            DOK, or LIL. COO, DOK, and LIL are converted to CSR.\n\n        y : array-like of shape (n_samples,)\n            The target values.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, the sample weights are initialized to\n            1 / n_samples.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "target values.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, the sample weights are initialized to",
                "description": ""
              },
              "1": {
                "type": "/ n_samples.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "Fitted": {
                "type": "estimator.",
                "description": ""
              }
            },
            "returns": "-------\n        self : object\n            Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Raise `NotImplementedError`.\n\n        This estimator does not support metadata routing yet.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "documentation": {
            "description": "Predict regression value for X.\n\n        The predicted regression value of an input sample is computed\n        as the weighted median prediction of the regressors in the ensemble.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Sparse matrix can be CSC, CSR, COO,\n            DOK, or LIL. COO, DOK, and LIL are converted to CSR.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted regression values.",
                "description": ""
              },
              "y": {
                "type": "ndarray of shape (n_samples,)",
                "description": ""
              }
            },
            "returns": "-------\n        y : ndarray of shape (n_samples,)\n            The predicted regression values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Return the coefficient of determination of the prediction.\n\n        The coefficient of determination :math:`R^2` is defined as\n        :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\n        sum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\n        is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\n        The best possible score is 1.0 and it can be negative (because the\n        model can be arbitrarily worse). A constant model that always predicts\n        the expected value of `y`, disregarding the input features, would get\n        a :math:`R^2` score of 0.0.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples. For some estimators this may be a precomputed\n            kernel matrix or a list of generic objects instead with shape\n            ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n            is the number of samples used in the fitting for the estimator.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True values for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples. For some estimators this may be a precomputed",
                "description": ""
              },
              "kernel": {
                "type": "matrix or a list of generic objects instead with shape",
                "description": "``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``"
              },
              "is": {
                "type": "the number of samples used in the fitting for the estimator.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "values for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ":math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\nNotes\n-----"
              },
              "The": {
                "type": "math:`R^2` score used when calling ``score`` on a regressor uses",
                "description": "``multioutput='uniform_average'`` from version 0.23 to keep consistent"
              },
              "with": {
                "type": "default value of :func:`~sklearn.metrics.r2_score`.",
                "description": ""
              },
              "This": {
                "type": "influences the ``score`` method of all the multioutput",
                "description": ""
              },
              "regressors": {
                "type": "(except for",
                "description": ":class:`~sklearn.multioutput.MultiOutputRegressor`)."
              }
            },
            "returns": "-------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\n\n        Notes\n        -----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "raises": "",
            "see_also": "",
            "notes": "-----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.ensemble._weight_boosting.AdaBoostRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._weight_boosting.AdaBoostRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.ensemble._weight_boosting.AdaBoostRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._weight_boosting.AdaBoostRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "staged_predict",
          "signature": "staged_predict(self, X)",
          "documentation": {
            "description": "Return staged predictions for X.\n\n        The predicted regression value of an input sample is computed\n        as the weighted median prediction of the regressors in the ensemble.\n\n        This generator method yields the ensemble prediction after each\n        iteration of boosting and therefore allows monitoring, such as to\n        determine the prediction on a test set after each boost.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted regression values.",
                "description": ""
              },
              "y": {
                "type": "generator of ndarray of shape (n_samples,)",
                "description": ""
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "staged_score",
          "signature": "staged_score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Return staged scores for X, y.\n\n        This generator method yields the ensemble score after each iteration of\n        boosting and therefore allows monitoring, such as to determine the\n        score on a test set after each boost.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "training input samples. Sparse matrix can be CSC, CSR, COO,",
                "description": "DOK, or LIL. COO, DOK, and LIL are converted to CSR."
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "Labels": {
                "type": "for X.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Yields\n------"
              },
              "z": {
                "type": "float",
                "description": ""
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "BaggingClassifier",
      "documentation": {
        "description": "A Bagging classifier.\n\n    A Bagging classifier is an ensemble meta-estimator that fits base\n    classifiers each on random subsets of the original dataset and then\n    aggregate their individual predictions (either by voting or by averaging)\n    to form a final prediction. Such a meta-estimator can typically be used as\n    a way to reduce the variance of a black-box estimator (e.g., a decision\n    tree), by introducing randomization into its construction procedure and\n    then making an ensemble out of it.\n\n    This algorithm encompasses several works from the literature. When random\n    subsets of the dataset are drawn as random subsets of the samples, then\n    this algorithm is known as Pasting [1]_. If samples are drawn with\n    replacement, then the method is known as Bagging [2]_. When random subsets\n    of the dataset are drawn as random subsets of the features, then the method\n    is known as Random Subspaces [3]_. Finally, when base estimators are built\n    on subsets of both samples and features, then the method is known as\n    Random Patches [4]_.\n\n    Read more in the :ref:`User Guide <bagging>`.\n\n    .. versionadded:: 0.15\n\n    Parameters\n    ----------\n    estimator : object, default=None\n        The base estimator to fit on random subsets of the dataset.\n        If None, then the base estimator is a\n        :class:`~sklearn.tree.DecisionTreeClassifier`.\n\n        .. versionadded:: 1.2\n           `base_estimator` was renamed to `estimator`.\n\n    n_estimators : int, default=10\n        The number of base estimators in the ensemble.\n\n    max_samples : int or float, default=1.0\n        The number of samples to draw from X to train each base estimator (with\n        replacement by default, see `bootstrap` for more details).\n\n        - If int, then draw `max_samples` samples.\n        - If float, then draw `max_samples * X.shape[0]` samples.\n\n    max_features : int or float, default=1.0\n        The number of features to draw from X to train each base estimator (\n        without replacement by default, see `bootstrap_features` for more\n        details).\n\n        - If int, then draw `max_features` features.\n        - If float, then draw `max(1, int(max_features * n_features_in_))` features.\n\n    bootstrap : bool, default=True\n        Whether samples are drawn with replacement. If False, sampling\n        without replacement is performed.\n\n    bootstrap_features : bool, default=False\n        Whether features are drawn with replacement.\n\n    oob_score : bool, default=False\n        Whether to use out-of-bag samples to estimate\n        the generalization error. Only available if bootstrap=True.\n\n    warm_start : bool, default=False\n        When set to True, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble, otherwise, just fit\n        a whole new ensemble. See :term:`the Glossary <warm_start>`.\n\n        .. versionadded:: 0.17\n           *warm_start* constructor parameter.\n\n    n_jobs : int, default=None\n        The number of jobs to run in parallel for both :meth:`fit` and\n        :meth:`predict`. ``None`` means 1 unless in a\n        :obj:`joblib.parallel_backend` context. ``-1`` means using all\n        processors. See :term:`Glossary <n_jobs>` for more details.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls the random resampling of the original dataset\n        (sample wise and feature wise).\n        If the base estimator accepts a `random_state` attribute, a different\n        seed is generated for each instance in the ensemble.\n        Pass an int for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    verbose : int, default=0\n        Controls the verbosity when fitting and predicting.\n\n    Attributes\n    ----------\n    estimator_ : estimator\n        The base estimator from which the ensemble is grown.\n\n        .. versionadded:: 1.2\n           `base_estimator_` was renamed to `estimator_`.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    estimators_ : list of estimators\n        The collection of fitted base estimators.\n\n    estimators_samples_ : list of arrays\n        The subset of drawn samples (i.e., the in-bag samples) for each base\n        estimator. Each subset is defined by an array of the indices selected.\n\n    estimators_features_ : list of arrays\n        The subset of drawn features for each base estimator.\n\n    classes_ : ndarray of shape (n_classes,)\n        The classes labels.\n\n    n_classes_ : int or list\n        The number of classes.\n\n    oob_score_ : float\n        Score of the training dataset obtained using an out-of-bag estimate.\n        This attribute exists only when ``oob_score`` is True.\n\n    oob_decision_function_ : ndarray of shape (n_samples, n_classes)\n        Decision function computed with out-of-bag estimate on the training\n        set. If n_estimators is small it might be possible that a data point\n        was never left out during the bootstrap. In this case,\n        `oob_decision_function_` might contain NaN. This attribute exists\n        only when ``oob_score`` is True.\n\n    See Also\n    --------\n    BaggingRegressor : A Bagging regressor.\n\n    References\n    ----------\n\n    .. [1] L. Breiman, \"Pasting small votes for classification in large\n           databases and on-line\", Machine Learning, 36(1), 85-103, 1999.\n\n    .. [2] L. Breiman, \"Bagging predictors\", Machine Learning, 24(2), 123-140,\n           1996.\n\n    .. [3] T. Ho, \"The random subspace method for constructing decision\n           forests\", Pattern Analysis and Machine Intelligence, 20(8), 832-844,\n           1998.\n\n    .. [4] G. Louppe and P. Geurts, \"Ensembles on Random Patches\", Machine\n           Learning and Knowledge Discovery in Databases, 346-361, 2012.",
        "parameters": {
          "estimator": {
            "type": "object, default=None",
            "description": ""
          },
          "The": {
            "type": "number of classes.",
            "description": ""
          },
          "If": {
            "type": "the base estimator accepts a `random_state` attribute, a different",
            "description": ""
          },
          "n_estimators": {
            "type": "int, default=10",
            "description": ""
          },
          "max_samples": {
            "type": "int or float, default=1.0",
            "description": ""
          },
          "replacement": {
            "type": "by default, see `bootstrap` for more details).",
            "description": "- If int, then draw `max_samples` samples.\n- If float, then draw `max_samples * X.shape[0]` samples."
          },
          "max_features": {
            "type": "int or float, default=1.0",
            "description": ""
          },
          "without": {
            "type": "replacement is performed.",
            "description": ""
          },
          "bootstrap": {
            "type": "bool, default=True",
            "description": ""
          },
          "Whether": {
            "type": "to use out-of-bag samples to estimate",
            "description": ""
          },
          "bootstrap_features": {
            "type": "bool, default=False",
            "description": ""
          },
          "oob_score": {
            "type": "bool, default=False",
            "description": ""
          },
          "the": {
            "type": "generalization error. Only available if bootstrap=True.",
            "description": ""
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": ""
          },
          "When": {
            "type": "set to True, reuse the solution of the previous call to fit",
            "description": ""
          },
          "and": {
            "type": "add more estimators to the ensemble, otherwise, just fit",
            "description": ""
          },
          "a": {
            "type": "whole new ensemble. See :term:`the Glossary <warm_start>`.",
            "description": ".. versionadded:: 0.17\n*warm_start* constructor parameter."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Controls": {
            "type": "the verbosity when fitting and predicting.",
            "description": "Attributes\n----------"
          },
          "seed": {
            "type": "is generated for each instance in the ensemble.",
            "description": ""
          },
          "Pass": {
            "type": "an int for reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "verbose": {
            "type": "int, default=0",
            "description": ""
          },
          "estimator_": {
            "type": "estimator",
            "description": ""
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`.",
            "description": ".. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "estimators_": {
            "type": "list of estimators",
            "description": ""
          },
          "estimators_samples_": {
            "type": "list of arrays",
            "description": ""
          },
          "estimators_features_": {
            "type": "list of arrays",
            "description": ""
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,)",
            "description": ""
          },
          "n_classes_": {
            "type": "int or list",
            "description": ""
          },
          "oob_score_": {
            "type": "float",
            "description": ""
          },
          "Score": {
            "type": "of the training dataset obtained using an out-of-bag estimate.",
            "description": ""
          },
          "This": {
            "type": "attribute exists only when ``oob_score`` is True.",
            "description": ""
          },
          "oob_decision_function_": {
            "type": "ndarray of shape (n_samples, n_classes)",
            "description": ""
          },
          "Decision": {
            "type": "function computed with out-of-bag estimate on the training",
            "description": "set. If n_estimators is small it might be possible that a data point"
          },
          "was": {
            "type": "never left out during the bootstrap. In this case,",
            "description": "`oob_decision_function_` might contain NaN. This attribute exists"
          },
          "only": {
            "type": "when ``oob_score`` is True.",
            "description": ""
          },
          "BaggingRegressor": {
            "type": "A Bagging regressor.",
            "description": "References\n----------\n.. [1] L. Breiman, \"Pasting small votes for classification in large"
          },
          "databases": {
            "type": "and on-line\", Machine Learning, 36(1), 85-103, 1999.",
            "description": ".. [2] L. Breiman, \"Bagging predictors\", Machine Learning, 24(2), 123-140,\n1996.\n.. [3] T. Ho, \"The random subspace method for constructing decision\nforests\", Pattern Analysis and Machine Intelligence, 20(8), 832-844,\n1998.\n.. [4] G. Louppe and P. Geurts, \"Ensembles on Random Patches\", Machine"
          },
          "Learning": {
            "type": "and Knowledge Discovery in Databases, 346-361, 2012.",
            "description": "Examples\n--------\n>>> from sklearn.svm import SVC\n>>> from sklearn.ensemble import BaggingClassifier\n>>> from sklearn.datasets import make_classification\n>>> X, y = make_classification(n_samples=100, n_features=4,\n...                            n_informative=2, n_redundant=0,\n...                            random_state=0, shuffle=False)\n>>> clf = BaggingClassifier(estimator=SVC(),\n...                         n_estimators=10, random_state=0).fit(X, y)\n>>> clf.predict([[0, 0, 0, 0]])"
          },
          "array": {
            "type": "[1]",
            "description": ""
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    BaggingRegressor : A Bagging regressor.\n\n    References\n    ----------\n\n    .. [1] L. Breiman, \"Pasting small votes for classification in large\n           databases and on-line\", Machine Learning, 36(1), 85-103, 1999.\n\n    .. [2] L. Breiman, \"Bagging predictors\", Machine Learning, 24(2), 123-140,\n           1996.\n\n    .. [3] T. Ho, \"The random subspace method for constructing decision\n           forests\", Pattern Analysis and Machine Intelligence, 20(8), 832-844,\n           1998.\n\n    .. [4] G. Louppe and P. Geurts, \"Ensembles on Random Patches\", Machine\n           Learning and Knowledge Discovery in Databases, 346-361, 2012.\n\n    Examples\n    --------\n    >>> from sklearn.svm import SVC\n    >>> from sklearn.ensemble import BaggingClassifier\n    >>> from sklearn.datasets import make_classification\n    >>> X, y = make_classification(n_samples=100, n_features=4,\n    ...                            n_informative=2, n_redundant=0,\n    ...                            random_state=0, shuffle=False)\n    >>> clf = BaggingClassifier(estimator=SVC(),\n    ...                         n_estimators=10, random_state=0).fit(X, y)\n    >>> clf.predict([[0, 0, 0, 0]])\n    array([1])",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.svm import SVC\n    >>> from sklearn.ensemble import BaggingClassifier\n    >>> from sklearn.datasets import make_classification\n    >>> X, y = make_classification(n_samples=100, n_features=4,\n    ...                            n_informative=2, n_redundant=0,\n    ...                            random_state=0, shuffle=False)\n    >>> clf = BaggingClassifier(estimator=SVC(),\n    ...                         n_estimators=10, random_state=0).fit(X, y)\n    >>> clf.predict([[0, 0, 0, 0]])\n    array([1])"
      },
      "methods": [
        {
          "name": "decision_function",
          "signature": "decision_function(self, X)",
          "documentation": {
            "description": "Average of the decision functions of the base classifiers.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Sparse matrices are accepted only if\n            they are supported by the base estimator.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "decision function of the input samples. The columns correspond",
                "description": ""
              },
              "they": {
                "type": "are supported by the base estimator.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "ndarray of shape (n_samples, k)",
                "description": ""
              },
              "to": {
                "type": "the classes in sorted order, as they appear in the attribute",
                "description": "``classes_``. Regression and binary classification are special"
              },
              "cases": {
                "type": "with ``k == 1``, otherwise ``k==n_classes``.",
                "description": ""
              }
            },
            "returns": "-------\n        score : ndarray of shape (n_samples, k)\n            The decision function of the input samples. The columns correspond\n            to the classes in sorted order, as they appear in the attribute\n            ``classes_``. Regression and binary classification are special\n            cases with ``k == 1``, otherwise ``k==n_classes``.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, *, sample_weight=None, **fit_params)",
          "documentation": {
            "description": "Build a Bagging ensemble of estimators from the training set (X, y).\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Sparse matrices are accepted only if\n            they are supported by the base estimator.\n\n        y : array-like of shape (n_samples,)\n            The target values (class labels in classification, real numbers in\n            regression).\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "target values (class labels in classification, real numbers in",
                "description": "regression)."
              },
              "they": {
                "type": "are supported by the base estimator.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted.",
                "description": ""
              },
              "Note": {
                "type": "that this is supported only if the base estimator supports",
                "description": ""
              },
              "sample": {
                "type": "weighting.",
                "description": "**fit_params : dict"
              }
            },
            "returns": "-------\n        self : object\n            Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "that this is supported only if the base estimator supports\n            sample weighting.\n\n        **fit_params : dict\n            Parameters to pass to the underlying estimators.\n\n            .. versionadded:: 1.5\n\n                Only available if `enable_metadata_routing=True`,\n                which can be set by using\n                ``sklearn.set_config(enable_metadata_routing=True)``.\n                See :ref:`Metadata Routing User Guide <metadata_routing>` for\n                more details.\n\n        Returns\n        -------\n        self : object\n            Fitted estimator.",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        .. versionadded:: 1.5",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRouter\n            A :class:`~sklearn.utils.metadata_routing.MetadataRouter` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "documentation": {
            "description": "Predict class for X.\n\n        The predicted class of an input sample is computed as the class with\n        the highest mean predicted probability. If base estimators do not\n        implement a ``predict_proba`` method, then it resorts to voting.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Sparse matrices are accepted only if\n            they are supported by the base estimator.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted classes.",
                "description": ""
              },
              "they": {
                "type": "are supported by the base estimator.",
                "description": "Returns\n-------"
              },
              "y": {
                "type": "ndarray of shape (n_samples,)",
                "description": ""
              }
            },
            "returns": "-------\n        y : ndarray of shape (n_samples,)\n            The predicted classes.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_log_proba",
          "signature": "predict_log_proba(self, X)",
          "documentation": {
            "description": "Predict class log-probabilities for X.\n\n        The predicted class log-probabilities of an input sample is computed as\n        the log of the mean predicted class probabilities of the base\n        estimators in the ensemble.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Sparse matrices are accepted only if\n            they are supported by the base estimator.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "class log-probabilities of the input samples. The order of the",
                "description": ""
              },
              "they": {
                "type": "are supported by the base estimator.",
                "description": "Returns\n-------"
              },
              "p": {
                "type": "ndarray of shape (n_samples, n_classes)",
                "description": ""
              },
              "classes": {
                "type": "corresponds to that in the attribute :term:`classes_`.",
                "description": ""
              }
            },
            "returns": "-------\n        p : ndarray of shape (n_samples, n_classes)\n            The class log-probabilities of the input samples. The order of the\n            classes corresponds to that in the attribute :term:`classes_`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_proba",
          "signature": "predict_proba(self, X)",
          "documentation": {
            "description": "Predict class probabilities for X.\n\n        The predicted class probabilities of an input sample is computed as\n        the mean predicted class probabilities of the base estimators in the\n        ensemble. If base estimators do not implement a ``predict_proba``\n        method, then it resorts to voting and the predicted class probabilities\n        of an input sample represents the proportion of estimators predicting\n        each class.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Sparse matrices are accepted only if\n            they are supported by the base estimator.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "class probabilities of the input samples. The order of the",
                "description": ""
              },
              "they": {
                "type": "are supported by the base estimator.",
                "description": "Returns\n-------"
              },
              "p": {
                "type": "ndarray of shape (n_samples, n_classes)",
                "description": ""
              },
              "classes": {
                "type": "corresponds to that in the attribute :term:`classes_`.",
                "description": ""
              }
            },
            "returns": "-------\n        p : ndarray of shape (n_samples, n_classes)\n            The class probabilities of the input samples. The order of the\n            classes corresponds to that in the attribute :term:`classes_`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "labels for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ""
              },
              "Mean": {
                "type": "accuracy of ``self.predict(X)`` w.r.t. `y`.",
                "description": ""
              }
            },
            "returns": "the mean accuracy on the given test data and labels.\n\n        In multi-label classification, this is the subset accuracy\n        which is a harsh metric since you require for each sample that\n        each label set be correctly predicted.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True labels for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.ensemble._bagging.BaggingClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._bagging.BaggingClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.ensemble._bagging.BaggingClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._bagging.BaggingClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "BaggingRegressor",
      "documentation": {
        "description": "A Bagging regressor.\n\n    A Bagging regressor is an ensemble meta-estimator that fits base\n    regressors each on random subsets of the original dataset and then\n    aggregate their individual predictions (either by voting or by averaging)\n    to form a final prediction. Such a meta-estimator can typically be used as\n    a way to reduce the variance of a black-box estimator (e.g., a decision\n    tree), by introducing randomization into its construction procedure and\n    then making an ensemble out of it.\n\n    This algorithm encompasses several works from the literature. When random\n    subsets of the dataset are drawn as random subsets of the samples, then\n    this algorithm is known as Pasting [1]_. If samples are drawn with\n    replacement, then the method is known as Bagging [2]_. When random subsets\n    of the dataset are drawn as random subsets of the features, then the method\n    is known as Random Subspaces [3]_. Finally, when base estimators are built\n    on subsets of both samples and features, then the method is known as\n    Random Patches [4]_.\n\n    Read more in the :ref:`User Guide <bagging>`.\n\n    .. versionadded:: 0.15\n\n    Parameters\n    ----------\n    estimator : object, default=None\n        The base estimator to fit on random subsets of the dataset.\n        If None, then the base estimator is a\n        :class:`~sklearn.tree.DecisionTreeRegressor`.\n\n        .. versionadded:: 1.2\n           `base_estimator` was renamed to `estimator`.\n\n    n_estimators : int, default=10\n        The number of base estimators in the ensemble.\n\n    max_samples : int or float, default=1.0\n        The number of samples to draw from X to train each base estimator (with\n        replacement by default, see `bootstrap` for more details).\n\n        - If int, then draw `max_samples` samples.\n        - If float, then draw `max_samples * X.shape[0]` samples.\n\n    max_features : int or float, default=1.0\n        The number of features to draw from X to train each base estimator (\n        without replacement by default, see `bootstrap_features` for more\n        details).\n\n        - If int, then draw `max_features` features.\n        - If float, then draw `max(1, int(max_features * n_features_in_))` features.\n\n    bootstrap : bool, default=True\n        Whether samples are drawn with replacement. If False, sampling\n        without replacement is performed.\n\n    bootstrap_features : bool, default=False\n        Whether features are drawn with replacement.\n\n    oob_score : bool, default=False\n        Whether to use out-of-bag samples to estimate\n        the generalization error. Only available if bootstrap=True.\n\n    warm_start : bool, default=False\n        When set to True, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble, otherwise, just fit\n        a whole new ensemble. See :term:`the Glossary <warm_start>`.\n\n    n_jobs : int, default=None\n        The number of jobs to run in parallel for both :meth:`fit` and\n        :meth:`predict`. ``None`` means 1 unless in a\n        :obj:`joblib.parallel_backend` context. ``-1`` means using all\n        processors. See :term:`Glossary <n_jobs>` for more details.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls the random resampling of the original dataset\n        (sample wise and feature wise).\n        If the base estimator accepts a `random_state` attribute, a different\n        seed is generated for each instance in the ensemble.\n        Pass an int for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    verbose : int, default=0\n        Controls the verbosity when fitting and predicting.\n\n    Attributes\n    ----------\n    estimator_ : estimator\n        The base estimator from which the ensemble is grown.\n\n        .. versionadded:: 1.2\n           `base_estimator_` was renamed to `estimator_`.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    estimators_ : list of estimators\n        The collection of fitted sub-estimators.\n\n    estimators_samples_ : list of arrays\n        The subset of drawn samples (i.e., the in-bag samples) for each base\n        estimator. Each subset is defined by an array of the indices selected.\n\n    estimators_features_ : list of arrays\n        The subset of drawn features for each base estimator.\n\n    oob_score_ : float\n        Score of the training dataset obtained using an out-of-bag estimate.\n        This attribute exists only when ``oob_score`` is True.\n\n    oob_prediction_ : ndarray of shape (n_samples,)\n        Prediction computed with out-of-bag estimate on the training\n        set. If n_estimators is small it might be possible that a data point\n        was never left out during the bootstrap. In this case,\n        `oob_prediction_` might contain NaN. This attribute exists only\n        when ``oob_score`` is True.\n\n    See Also\n    --------\n    BaggingClassifier : A Bagging classifier.\n\n    References\n    ----------\n\n    .. [1] L. Breiman, \"Pasting small votes for classification in large\n           databases and on-line\", Machine Learning, 36(1), 85-103, 1999.\n\n    .. [2] L. Breiman, \"Bagging predictors\", Machine Learning, 24(2), 123-140,\n           1996.\n\n    .. [3] T. Ho, \"The random subspace method for constructing decision\n           forests\", Pattern Analysis and Machine Intelligence, 20(8), 832-844,\n           1998.\n\n    .. [4] G. Louppe and P. Geurts, \"Ensembles on Random Patches\", Machine\n           Learning and Knowledge Discovery in Databases, 346-361, 2012.",
        "parameters": {
          "estimator": {
            "type": "object, default=None",
            "description": ""
          },
          "The": {
            "type": "subset of drawn features for each base estimator.",
            "description": ""
          },
          "If": {
            "type": "the base estimator accepts a `random_state` attribute, a different",
            "description": ""
          },
          "n_estimators": {
            "type": "int, default=10",
            "description": ""
          },
          "max_samples": {
            "type": "int or float, default=1.0",
            "description": ""
          },
          "replacement": {
            "type": "by default, see `bootstrap` for more details).",
            "description": "- If int, then draw `max_samples` samples.\n- If float, then draw `max_samples * X.shape[0]` samples."
          },
          "max_features": {
            "type": "int or float, default=1.0",
            "description": ""
          },
          "without": {
            "type": "replacement is performed.",
            "description": ""
          },
          "bootstrap": {
            "type": "bool, default=True",
            "description": ""
          },
          "Whether": {
            "type": "to use out-of-bag samples to estimate",
            "description": ""
          },
          "bootstrap_features": {
            "type": "bool, default=False",
            "description": ""
          },
          "oob_score": {
            "type": "bool, default=False",
            "description": ""
          },
          "the": {
            "type": "generalization error. Only available if bootstrap=True.",
            "description": ""
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": ""
          },
          "When": {
            "type": "set to True, reuse the solution of the previous call to fit",
            "description": ""
          },
          "and": {
            "type": "add more estimators to the ensemble, otherwise, just fit",
            "description": ""
          },
          "a": {
            "type": "whole new ensemble. See :term:`the Glossary <warm_start>`.",
            "description": ""
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Controls": {
            "type": "the verbosity when fitting and predicting.",
            "description": "Attributes\n----------"
          },
          "seed": {
            "type": "is generated for each instance in the ensemble.",
            "description": ""
          },
          "Pass": {
            "type": "an int for reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "verbose": {
            "type": "int, default=0",
            "description": ""
          },
          "estimator_": {
            "type": "estimator",
            "description": ""
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`.",
            "description": ".. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "estimators_": {
            "type": "list of estimators",
            "description": ""
          },
          "estimators_samples_": {
            "type": "list of arrays",
            "description": ""
          },
          "estimators_features_": {
            "type": "list of arrays",
            "description": ""
          },
          "oob_score_": {
            "type": "float",
            "description": ""
          },
          "Score": {
            "type": "of the training dataset obtained using an out-of-bag estimate.",
            "description": ""
          },
          "This": {
            "type": "attribute exists only when ``oob_score`` is True.",
            "description": ""
          },
          "oob_prediction_": {
            "type": "ndarray of shape (n_samples,)",
            "description": ""
          },
          "Prediction": {
            "type": "computed with out-of-bag estimate on the training",
            "description": "set. If n_estimators is small it might be possible that a data point"
          },
          "was": {
            "type": "never left out during the bootstrap. In this case,",
            "description": "`oob_prediction_` might contain NaN. This attribute exists only"
          },
          "when": {
            "type": "``oob_score`` is True.",
            "description": ""
          },
          "BaggingClassifier": {
            "type": "A Bagging classifier.",
            "description": "References\n----------\n.. [1] L. Breiman, \"Pasting small votes for classification in large"
          },
          "databases": {
            "type": "and on-line\", Machine Learning, 36(1), 85-103, 1999.",
            "description": ".. [2] L. Breiman, \"Bagging predictors\", Machine Learning, 24(2), 123-140,\n1996.\n.. [3] T. Ho, \"The random subspace method for constructing decision\nforests\", Pattern Analysis and Machine Intelligence, 20(8), 832-844,\n1998.\n.. [4] G. Louppe and P. Geurts, \"Ensembles on Random Patches\", Machine"
          },
          "Learning": {
            "type": "and Knowledge Discovery in Databases, 346-361, 2012.",
            "description": "Examples\n--------\n>>> from sklearn.svm import SVR\n>>> from sklearn.ensemble import BaggingRegressor\n>>> from sklearn.datasets import make_regression\n>>> X, y = make_regression(n_samples=100, n_features=4,\n...                        n_informative=2, n_targets=1,\n...                        random_state=0, shuffle=False)\n>>> regr = BaggingRegressor(estimator=SVR(),\n...                         n_estimators=10, random_state=0).fit(X, y)\n>>> regr.predict([[0, 0, 0, 0]])"
          },
          "array": {
            "type": "[-2.8720...]",
            "description": ""
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    BaggingClassifier : A Bagging classifier.\n\n    References\n    ----------\n\n    .. [1] L. Breiman, \"Pasting small votes for classification in large\n           databases and on-line\", Machine Learning, 36(1), 85-103, 1999.\n\n    .. [2] L. Breiman, \"Bagging predictors\", Machine Learning, 24(2), 123-140,\n           1996.\n\n    .. [3] T. Ho, \"The random subspace method for constructing decision\n           forests\", Pattern Analysis and Machine Intelligence, 20(8), 832-844,\n           1998.\n\n    .. [4] G. Louppe and P. Geurts, \"Ensembles on Random Patches\", Machine\n           Learning and Knowledge Discovery in Databases, 346-361, 2012.\n\n    Examples\n    --------\n    >>> from sklearn.svm import SVR\n    >>> from sklearn.ensemble import BaggingRegressor\n    >>> from sklearn.datasets import make_regression\n    >>> X, y = make_regression(n_samples=100, n_features=4,\n    ...                        n_informative=2, n_targets=1,\n    ...                        random_state=0, shuffle=False)\n    >>> regr = BaggingRegressor(estimator=SVR(),\n    ...                         n_estimators=10, random_state=0).fit(X, y)\n    >>> regr.predict([[0, 0, 0, 0]])\n    array([-2.8720...])",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.svm import SVR\n    >>> from sklearn.ensemble import BaggingRegressor\n    >>> from sklearn.datasets import make_regression\n    >>> X, y = make_regression(n_samples=100, n_features=4,\n    ...                        n_informative=2, n_targets=1,\n    ...                        random_state=0, shuffle=False)\n    >>> regr = BaggingRegressor(estimator=SVR(),\n    ...                         n_estimators=10, random_state=0).fit(X, y)\n    >>> regr.predict([[0, 0, 0, 0]])\n    array([-2.8720...])"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, *, sample_weight=None, **fit_params)",
          "documentation": {
            "description": "Build a Bagging ensemble of estimators from the training set (X, y).\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Sparse matrices are accepted only if\n            they are supported by the base estimator.\n\n        y : array-like of shape (n_samples,)\n            The target values (class labels in classification, real numbers in\n            regression).\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "target values (class labels in classification, real numbers in",
                "description": "regression)."
              },
              "they": {
                "type": "are supported by the base estimator.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted.",
                "description": ""
              },
              "Note": {
                "type": "that this is supported only if the base estimator supports",
                "description": ""
              },
              "sample": {
                "type": "weighting.",
                "description": "**fit_params : dict"
              }
            },
            "returns": "-------\n        self : object\n            Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "that this is supported only if the base estimator supports\n            sample weighting.\n\n        **fit_params : dict\n            Parameters to pass to the underlying estimators.\n\n            .. versionadded:: 1.5\n\n                Only available if `enable_metadata_routing=True`,\n                which can be set by using\n                ``sklearn.set_config(enable_metadata_routing=True)``.\n                See :ref:`Metadata Routing User Guide <metadata_routing>` for\n                more details.\n\n        Returns\n        -------\n        self : object\n            Fitted estimator.",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        .. versionadded:: 1.5",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRouter\n            A :class:`~sklearn.utils.metadata_routing.MetadataRouter` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "documentation": {
            "description": "Predict regression target for X.\n\n        The predicted regression target of an input sample is computed as the\n        mean predicted regression targets of the estimators in the ensemble.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Sparse matrices are accepted only if\n            they are supported by the base estimator.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted values.",
                "description": ""
              },
              "they": {
                "type": "are supported by the base estimator.",
                "description": "Returns\n-------"
              },
              "y": {
                "type": "ndarray of shape (n_samples,)",
                "description": ""
              }
            },
            "returns": "-------\n        y : ndarray of shape (n_samples,)\n            The predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Return the coefficient of determination of the prediction.\n\n        The coefficient of determination :math:`R^2` is defined as\n        :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\n        sum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\n        is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\n        The best possible score is 1.0 and it can be negative (because the\n        model can be arbitrarily worse). A constant model that always predicts\n        the expected value of `y`, disregarding the input features, would get\n        a :math:`R^2` score of 0.0.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples. For some estimators this may be a precomputed\n            kernel matrix or a list of generic objects instead with shape\n            ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n            is the number of samples used in the fitting for the estimator.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True values for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples. For some estimators this may be a precomputed",
                "description": ""
              },
              "kernel": {
                "type": "matrix or a list of generic objects instead with shape",
                "description": "``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``"
              },
              "is": {
                "type": "the number of samples used in the fitting for the estimator.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "values for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ":math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\nNotes\n-----"
              },
              "The": {
                "type": "math:`R^2` score used when calling ``score`` on a regressor uses",
                "description": "``multioutput='uniform_average'`` from version 0.23 to keep consistent"
              },
              "with": {
                "type": "default value of :func:`~sklearn.metrics.r2_score`.",
                "description": ""
              },
              "This": {
                "type": "influences the ``score`` method of all the multioutput",
                "description": ""
              },
              "regressors": {
                "type": "(except for",
                "description": ":class:`~sklearn.multioutput.MultiOutputRegressor`)."
              }
            },
            "returns": "-------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\n\n        Notes\n        -----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "raises": "",
            "see_also": "",
            "notes": "-----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.ensemble._bagging.BaggingRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._bagging.BaggingRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.ensemble._bagging.BaggingRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._bagging.BaggingRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "BaseEnsemble",
      "documentation": {
        "description": "Base class for all ensemble classes.\n\n    Warning: This class should not be used directly. Use derived classes\n    instead.",
        "parameters": {
          "estimator": {
            "type": "object",
            "description": ""
          },
          "The": {
            "type": "collection of fitted base estimators.",
            "description": ""
          },
          "n_estimators": {
            "type": "int, default=10",
            "description": ""
          },
          "estimator_params": {
            "type": "list of str, default=tuple()",
            "description": ""
          },
          "new": {
            "type": "base estimator. If none are given, default parameters are used.",
            "description": "Attributes\n----------"
          },
          "estimator_": {
            "type": "estimator",
            "description": ""
          },
          "estimators_": {
            "type": "list of estimators",
            "description": ""
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRequest\n            A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "ExtraTreesClassifier",
      "documentation": {
        "description": "An extra-trees classifier.\n\n    This class implements a meta estimator that fits a number of\n    randomized decision trees (a.k.a. extra-trees) on various sub-samples\n    of the dataset and uses averaging to improve the predictive accuracy\n    and control over-fitting.\n\n    Read more in the :ref:`User Guide <forest>`.\n\n    Parameters\n    ----------\n    n_estimators : int, default=100\n        The number of trees in the forest.\n\n        .. versionchanged:: 0.22\n           The default value of ``n_estimators`` changed from 10 to 100\n           in 0.22.\n\n    criterion : {\"gini\", \"entropy\", \"log_loss\"}, default=\"gini\"\n        The function to measure the quality of a split. Supported criteria are\n        \"gini\" for the Gini impurity and \"log_loss\" and \"entropy\" both for the\n        Shannon information gain, see :ref:`tree_mathematical_formulation`.\n        Note: This parameter is tree-specific.\n\n    max_depth : int, default=None\n        The maximum depth of the tree. If None, then nodes are expanded until\n        all leaves are pure or until all leaves contain less than\n        min_samples_split samples.\n\n    min_samples_split : int or float, default=2\n        The minimum number of samples required to split an internal node:\n\n        - If int, then consider `min_samples_split` as the minimum number.\n        - If float, then `min_samples_split` is a fraction and\n          `ceil(min_samples_split * n_samples)` are the minimum\n          number of samples for each split.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_samples_leaf : int or float, default=1\n        The minimum number of samples required to be at a leaf node.\n        A split point at any depth will only be considered if it leaves at\n        least ``min_samples_leaf`` training samples in each of the left and\n        right branches.  This may have the effect of smoothing the model,\n        especially in regression.\n\n        - If int, then consider `min_samples_leaf` as the minimum number.\n        - If float, then `min_samples_leaf` is a fraction and\n          `ceil(min_samples_leaf * n_samples)` are the minimum\n          number of samples for each node.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_weight_fraction_leaf : float, default=0.0\n        The minimum weighted fraction of the sum total of weights (of all\n        the input samples) required to be at a leaf node. Samples have\n        equal weight when sample_weight is not provided.\n\n    max_features : {\"sqrt\", \"log2\", None}, int or float, default=\"sqrt\"\n        The number of features to consider when looking for the best split:\n\n        - If int, then consider `max_features` features at each split.\n        - If float, then `max_features` is a fraction and\n          `max(1, int(max_features * n_features_in_))` features are considered at each\n          split.\n        - If \"sqrt\", then `max_features=sqrt(n_features)`.\n        - If \"log2\", then `max_features=log2(n_features)`.\n        - If None, then `max_features=n_features`.\n\n        .. versionchanged:: 1.1\n            The default of `max_features` changed from `\"auto\"` to `\"sqrt\"`.\n\n        Note: the search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features.\n\n    max_leaf_nodes : int, default=None\n        Grow trees with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        If None then unlimited number of leaf nodes.\n\n    min_impurity_decrease : float, default=0.0\n        A node will be split if this split induces a decrease of the impurity\n        greater than or equal to this value.\n\n        The weighted impurity decrease equation is the following::\n\n            N_t / N * (impurity - N_t_R / N_t * right_impurity\n                                - N_t_L / N_t * left_impurity)\n\n        where ``N`` is the total number of samples, ``N_t`` is the number of\n        samples at the current node, ``N_t_L`` is the number of samples in the\n        left child, and ``N_t_R`` is the number of samples in the right child.\n\n        ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n        if ``sample_weight`` is passed.\n\n        .. versionadded:: 0.19\n\n    bootstrap : bool, default=False\n        Whether bootstrap samples are used when building trees. If False, the\n        whole dataset is used to build each tree.\n\n    oob_score : bool or callable, default=False\n        Whether to use out-of-bag samples to estimate the generalization score.\n        By default, :func:`~sklearn.metrics.accuracy_score` is used.\n        Provide a callable with signature `metric(y_true, y_pred)` to use a\n        custom metric. Only available if `bootstrap=True`.\n\n    n_jobs : int, default=None\n        The number of jobs to run in parallel. :meth:`fit`, :meth:`predict`,\n        :meth:`decision_path` and :meth:`apply` are all parallelized over the\n        trees. ``None`` means 1 unless in a :obj:`joblib.parallel_backend`\n        context. ``-1`` means using all processors. See :term:`Glossary\n        <n_jobs>` for more details.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls 3 sources of randomness:\n\n        - the bootstrapping of the samples used when building trees\n          (if ``bootstrap=True``)\n        - the sampling of the features to consider when looking for the best\n          split at each node (if ``max_features < n_features``)\n        - the draw of the splits for each of the `max_features`\n\n        See :term:`Glossary <random_state>` for details.\n\n    verbose : int, default=0\n        Controls the verbosity when fitting and predicting.\n\n    warm_start : bool, default=False\n        When set to ``True``, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble, otherwise, just fit a whole\n        new forest. See :term:`Glossary <warm_start>` and\n        :ref:`tree_ensemble_warm_start` for details.\n\n    class_weight : {\"balanced\", \"balanced_subsample\"}, dict or list of dicts,             default=None\n        Weights associated with classes in the form ``{class_label: weight}``.\n        If not given, all classes are supposed to have weight one. For\n        multi-output problems, a list of dicts can be provided in the same\n        order as the columns of y.\n\n        Note that for multioutput (including multilabel) weights should be\n        defined for each class of every column in its own dict. For example,\n        for four-class multilabel classification weights should be\n        [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of\n        [{1:1}, {2:5}, {3:1}, {4:1}].\n\n        The \"balanced\" mode uses the values of y to automatically adjust\n        weights inversely proportional to class frequencies in the input data\n        as ``n_samples / (n_classes * np.bincount(y))``\n\n        The \"balanced_subsample\" mode is the same as \"balanced\" except that\n        weights are computed based on the bootstrap sample for every tree\n        grown.\n\n        For multi-output, the weights of each column of y will be multiplied.\n\n        Note that these weights will be multiplied with sample_weight (passed\n        through the fit method) if sample_weight is specified.\n\n    ccp_alpha : non-negative float, default=0.0\n        Complexity parameter used for Minimal Cost-Complexity Pruning. The\n        subtree with the largest cost complexity that is smaller than\n        ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n        :ref:`minimal_cost_complexity_pruning` for details. See\n        :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n        for an example of such pruning.\n\n        .. versionadded:: 0.22\n\n    max_samples : int or float, default=None\n        If bootstrap is True, the number of samples to draw from X\n        to train each base estimator.\n\n        - If None (default), then draw `X.shape[0]` samples.\n        - If int, then draw `max_samples` samples.\n        - If float, then draw `max_samples * X.shape[0]` samples. Thus,\n          `max_samples` should be in the interval `(0.0, 1.0]`.\n\n        .. versionadded:: 0.22\n\n    monotonic_cst : array-like of int of shape (n_features), default=None\n        Indicates the monotonicity constraint to enforce on each feature.\n          - 1: monotonically increasing\n          - 0: no constraint\n          - -1: monotonically decreasing\n\n        If monotonic_cst is None, no constraints are applied.\n\n        Monotonicity constraints are not supported for:\n          - multiclass classifications (i.e. when `n_classes > 2`),\n          - multioutput classifications (i.e. when `n_outputs_ > 1`),\n          - classifications trained on data with missing values.\n\n        The constraints hold over the probability of the positive class.\n\n        Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n        .. versionadded:: 1.4\n\n    Attributes\n    ----------\n    estimator_ : :class:`~sklearn.tree.ExtraTreeClassifier`\n        The child estimator template used to create the collection of fitted\n        sub-estimators.\n\n        .. versionadded:: 1.2\n           `base_estimator_` was renamed to `estimator_`.\n\n    estimators_ : list of DecisionTreeClassifier\n        The collection of fitted sub-estimators.\n\n    classes_ : ndarray of shape (n_classes,) or a list of such arrays\n        The classes labels (single output problem), or a list of arrays of\n        class labels (multi-output problem).\n\n    n_classes_ : int or list\n        The number of classes (single output problem), or a list containing the\n        number of classes for each output (multi-output problem).\n\n    feature_importances_ : ndarray of shape (n_features,)\n        The impurity-based feature importances.\n        The higher, the more important the feature.\n        The importance of a feature is computed as the (normalized)\n        total reduction of the criterion brought by that feature.  It is also\n        known as the Gini importance.\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_outputs_ : int\n        The number of outputs when ``fit`` is performed.\n\n    oob_score_ : float\n        Score of the training dataset obtained using an out-of-bag estimate.\n        This attribute exists only when ``oob_score`` is True.\n\n    oob_decision_function_ : ndarray of shape (n_samples, n_classes) or             (n_samples, n_classes, n_outputs)\n        Decision function computed with out-of-bag estimate on the training\n        set. If n_estimators is small it might be possible that a data point\n        was never left out during the bootstrap. In this case,\n        `oob_decision_function_` might contain NaN. This attribute exists\n        only when ``oob_score`` is True.\n\n    estimators_samples_ : list of arrays\n        The subset of drawn samples (i.e., the in-bag samples) for each base\n        estimator. Each subset is defined by an array of the indices selected.\n\n        .. versionadded:: 1.4\n\n    See Also\n    --------\n    ExtraTreesRegressor : An extra-trees regressor with random splits.\n    RandomForestClassifier : A random forest classifier with optimal splits.\n    RandomForestRegressor : Ensemble regressor using trees with optimal splits.\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    References\n    ----------\n    .. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized\n           trees\", Machine Learning, 63(1), 3-42, 2006.",
        "parameters": {
          "n_estimators": {
            "type": "int, default=100",
            "description": ""
          },
          "The": {
            "type": "default values for the parameters controlling the size of the trees",
            "description": "(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and"
          },
          "in": {
            "type": "0.22.",
            "description": ""
          },
          "criterion": {
            "type": "{\"gini\", \"entropy\", \"log_loss\"}, default=\"gini\"",
            "description": ""
          },
          "Shannon": {
            "type": "information gain, see :ref:`tree_mathematical_formulation`.",
            "description": ""
          },
          "Note": {
            "type": "that these weights will be multiplied with sample_weight (passed",
            "description": ""
          },
          "max_depth": {
            "type": "int, default=None",
            "description": ""
          },
          "all": {
            "type": "leaves are pure or until all leaves contain less than",
            "description": ""
          },
          "min_samples_split": {
            "type": "int or float, default=2",
            "description": ""
          },
          "number": {
            "type": "of classes for each output (multi-output problem).",
            "description": ""
          },
          "Added": {
            "type": "float values for fractions.",
            "description": ""
          },
          "min_samples_leaf": {
            "type": "int or float, default=1",
            "description": ""
          },
          "A": {
            "type": "node will be split if this split induces a decrease of the impurity",
            "description": ""
          },
          "least": {
            "type": "``min_samples_leaf`` training samples in each of the left and",
            "description": ""
          },
          "right": {
            "type": "branches.  This may have the effect of smoothing the model,",
            "description": ""
          },
          "especially": {
            "type": "in regression.",
            "description": "- If int, then consider `min_samples_leaf` as the minimum number.\n- If float, then `min_samples_leaf` is a fraction and\n`ceil(min_samples_leaf * n_samples)` are the minimum"
          },
          "min_weight_fraction_leaf": {
            "type": "float, default=0.0",
            "description": ""
          },
          "the": {
            "type": "input samples) required to be at a leaf node. Samples have",
            "description": ""
          },
          "equal": {
            "type": "weight when sample_weight is not provided.",
            "description": ""
          },
          "max_features": {
            "type": "{\"sqrt\", \"log2\", None}, int or float, default=\"sqrt\"",
            "description": ""
          },
          "valid": {
            "type": "partition of the node samples is found, even if it requires to",
            "description": ""
          },
          "effectively": {
            "type": "inspect more than ``max_features`` features.",
            "description": ""
          },
          "max_leaf_nodes": {
            "type": "int, default=None",
            "description": ""
          },
          "Grow": {
            "type": "trees with ``max_leaf_nodes`` in best-first fashion.",
            "description": ""
          },
          "Best": {
            "type": "nodes are defined as relative reduction in impurity.",
            "description": ""
          },
          "If": {
            "type": "monotonic_cst is None, no constraints are applied.",
            "description": ""
          },
          "min_impurity_decrease": {
            "type": "float, default=0.0",
            "description": ""
          },
          "greater": {
            "type": "than or equal to this value.",
            "description": ""
          },
          "N_t": {
            "type": "/ N * (impurity - N_t_R / N_t * right_impurity",
            "description": "- N_t_L / N_t * left_impurity)"
          },
          "where": {
            "type": "``N`` is the total number of samples, ``N_t`` is the number of",
            "description": ""
          },
          "samples": {
            "type": "at the current node, ``N_t_L`` is the number of samples in the",
            "description": ""
          },
          "left": {
            "type": "child, and ``N_t_R`` is the number of samples in the right child.",
            "description": "``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,"
          },
          "if": {
            "type": "``sample_weight`` is passed.",
            "description": ".. versionadded:: 0.19"
          },
          "bootstrap": {
            "type": "bool, default=False",
            "description": ""
          },
          "Whether": {
            "type": "to use out-of-bag samples to estimate the generalization score.",
            "description": ""
          },
          "whole": {
            "type": "dataset is used to build each tree.",
            "description": ""
          },
          "oob_score": {
            "type": "bool or callable, default=False",
            "description": ""
          },
          "By": {
            "type": "default, :func:`~sklearn.metrics.accuracy_score` is used.",
            "description": ""
          },
          "Provide": {
            "type": "a callable with signature `metric(y_true, y_pred)` to use a",
            "description": ""
          },
          "custom": {
            "type": "metric. Only available if `bootstrap=True`.",
            "description": ""
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Controls": {
            "type": "the verbosity when fitting and predicting.",
            "description": ""
          },
          "split": {
            "type": "at each node (if ``max_features < n_features``)",
            "description": "- the draw of the splits for each of the `max_features`"
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "verbose": {
            "type": "int, default=0",
            "description": ""
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": ""
          },
          "When": {
            "type": "set to ``True``, reuse the solution of the previous call to fit",
            "description": ""
          },
          "and": {
            "type": "add more estimators to the ensemble, otherwise, just fit a whole",
            "description": ""
          },
          "new": {
            "type": "forest. See :term:`Glossary <warm_start>` and",
            "description": ":ref:`tree_ensemble_warm_start` for details."
          },
          "class_weight": {
            "type": "{\"balanced\", \"balanced_subsample\"}, dict or list of dicts,             default=None",
            "description": ""
          },
          "Weights": {
            "type": "associated with classes in the form ``{class_label: weight}``.",
            "description": ""
          },
          "order": {
            "type": "as the columns of y.",
            "description": ""
          },
          "defined": {
            "type": "for each class of every column in its own dict. For example,",
            "description": ""
          },
          "for": {
            "type": "an example of such pruning.",
            "description": ".. versionadded:: 0.22"
          },
          "weights": {
            "type": "are computed based on the bootstrap sample for every tree",
            "description": "grown."
          },
          "as": {
            "type": "``n_samples / (n_classes * np.bincount(y))``",
            "description": ""
          },
          "For": {
            "type": "multi-output, the weights of each column of y will be multiplied.",
            "description": ""
          },
          "through": {
            "type": "the fit method) if sample_weight is specified.",
            "description": ""
          },
          "ccp_alpha": {
            "type": "non",
            "description": "negative float, default=0.0"
          },
          "Complexity": {
            "type": "parameter used for Minimal Cost-Complexity Pruning. The",
            "description": ""
          },
          "subtree": {
            "type": "with the largest cost complexity that is smaller than",
            "description": "``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n:ref:`minimal_cost_complexity_pruning` for details. See\n:ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`"
          },
          "max_samples": {
            "type": "int or float, default=None",
            "description": ""
          },
          "to": {
            "type": "train each base estimator.",
            "description": "- If None (default), then draw `X.shape[0]` samples.\n- If int, then draw `max_samples` samples.\n- If float, then draw `max_samples * X.shape[0]` samples. Thus,\n`max_samples` should be in the interval `(0.0, 1.0]`.\n.. versionadded:: 0.22"
          },
          "monotonic_cst": {
            "type": "array",
            "description": "like of int of shape (n_features), default=None"
          },
          "Indicates": {
            "type": "the monotonicity constraint to enforce on each feature.",
            "description": "- 1: monotonically increasing\n- 0: no constraint\n- -1: monotonically decreasing"
          },
          "Monotonicity": {
            "type": "constraints are not supported for:",
            "description": "- multiclass classifications (i.e. when `n_classes > 2`),\n- multioutput classifications (i.e. when `n_outputs_ > 1`),\n- classifications trained on data with missing values."
          },
          "Read": {
            "type": "more in the :ref:`User Guide <monotonic_cst_gbdt>`.",
            "description": ".. versionadded:: 1.4\nAttributes\n----------"
          },
          "estimator_": {
            "type": ":class:`~sklearn.tree.ExtraTreeClassifier`",
            "description": ""
          },
          "estimators_": {
            "type": "list of DecisionTreeClassifier",
            "description": ""
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,) or a list of such arrays",
            "description": ""
          },
          "class": {
            "type": "labels (multi-output problem).",
            "description": ""
          },
          "n_classes_": {
            "type": "int or list",
            "description": ""
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": ""
          },
          "total": {
            "type": "reduction of the criterion brought by that feature.  It is also",
            "description": ""
          },
          "known": {
            "type": "as the Gini importance.",
            "description": ""
          },
          "Warning": {
            "type": "impurity",
            "description": "based feature importances can be misleading for"
          },
          "high": {
            "type": "cardinality features (many unique values). See",
            "description": ":func:`sklearn.inspection.permutation_importance` as an alternative."
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`.",
            "description": ".. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "n_outputs_": {
            "type": "int",
            "description": ""
          },
          "oob_score_": {
            "type": "float",
            "description": ""
          },
          "Score": {
            "type": "of the training dataset obtained using an out-of-bag estimate.",
            "description": ""
          },
          "This": {
            "type": "attribute exists only when ``oob_score`` is True.",
            "description": ""
          },
          "oob_decision_function_": {
            "type": "ndarray of shape (n_samples, n_classes) or             (n_samples, n_classes, n_outputs)",
            "description": ""
          },
          "Decision": {
            "type": "function computed with out-of-bag estimate on the training",
            "description": "set. If n_estimators is small it might be possible that a data point"
          },
          "was": {
            "type": "never left out during the bootstrap. In this case,",
            "description": "`oob_decision_function_` might contain NaN. This attribute exists"
          },
          "only": {
            "type": "when ``oob_score`` is True.",
            "description": ""
          },
          "estimators_samples_": {
            "type": "list of arrays",
            "description": ""
          },
          "ExtraTreesRegressor": {
            "type": "An extra",
            "description": "trees regressor with random splits."
          },
          "RandomForestClassifier": {
            "type": "A random forest classifier with optimal splits.",
            "description": ""
          },
          "RandomForestRegressor": {
            "type": "Ensemble regressor using trees with optimal splits.",
            "description": "Notes\n-----"
          },
          "unpruned": {
            "type": "trees which can potentially be very large on some data sets. To",
            "description": ""
          },
          "reduce": {
            "type": "memory consumption, the complexity and size of the trees should be",
            "description": ""
          },
          "controlled": {
            "type": "by setting those parameter values.",
            "description": "References\n----------\n.. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized\ntrees\", Machine Learning, 63(1), 3-42, 2006.\nExamples\n--------\n>>> from sklearn.ensemble import ExtraTreesClassifier\n>>> from sklearn.datasets import make_classification\n>>> X, y = make_classification(n_features=4, random_state=0)\n>>> clf = ExtraTreesClassifier(n_estimators=100, random_state=0)\n>>> clf.fit(X, y)"
          },
          "ExtraTreesClassifier": {
            "type": "random_state=0",
            "description": ">>> clf.predict([[0, 0, 0, 0]])"
          },
          "array": {
            "type": "[1]",
            "description": ""
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    ExtraTreesRegressor : An extra-trees regressor with random splits.\n    RandomForestClassifier : A random forest classifier with optimal splits.\n    RandomForestRegressor : Ensemble regressor using trees with optimal splits.\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    References\n    ----------\n    .. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized\n           trees\", Machine Learning, 63(1), 3-42, 2006.\n\n    Examples\n    --------\n    >>> from sklearn.ensemble import ExtraTreesClassifier\n    >>> from sklearn.datasets import make_classification\n    >>> X, y = make_classification(n_features=4, random_state=0)\n    >>> clf = ExtraTreesClassifier(n_estimators=100, random_state=0)\n    >>> clf.fit(X, y)\n    ExtraTreesClassifier(random_state=0)\n    >>> clf.predict([[0, 0, 0, 0]])\n    array([1])",
        "notes": "that for multioutput (including multilabel) weights should be\n        defined for each class of every column in its own dict. For example,\n        for four-class multilabel classification weights should be\n        [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of\n        [{1:1}, {2:5}, {3:1}, {4:1}].\n\n        The \"balanced\" mode uses the values of y to automatically adjust\n        weights inversely proportional to class frequencies in the input data\n        as ``n_samples / (n_classes * np.bincount(y))``\n\n        The \"balanced_subsample\" mode is the same as \"balanced\" except that\n        weights are computed based on the bootstrap sample for every tree\n        grown.\n\n        For multi-output, the weights of each column of y will be multiplied.",
        "examples": "--------\n    >>> from sklearn.ensemble import ExtraTreesClassifier\n    >>> from sklearn.datasets import make_classification\n    >>> X, y = make_classification(n_features=4, random_state=0)\n    >>> clf = ExtraTreesClassifier(n_estimators=100, random_state=0)\n    >>> clf.fit(X, y)\n    ExtraTreesClassifier(random_state=0)\n    >>> clf.predict([[0, 0, 0, 0]])\n    array([1])"
      },
      "methods": [
        {
          "name": "apply",
          "signature": "apply(self, X)",
          "documentation": {
            "description": "Apply trees in the forest to X, return leaf indices.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, its dtype will be converted to\n            ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csr_matrix``.\n\n        Returns\n        -------\n        X_leaves : ndarray of shape (n_samples, n_estimators)\n            For each datapoint x in X and for each tree in the forest,",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples. Internally, its dtype will be converted to",
                "description": "``dtype=np.float32``. If a sparse matrix is provided, it will be"
              },
              "converted": {
                "type": "into a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "X_leaves": {
                "type": "ndarray of shape (n_samples, n_estimators)",
                "description": ""
              },
              "For": {
                "type": "each datapoint x in X and for each tree in the forest,",
                "description": ""
              },
              "return": {
                "type": "the index of the leaf x ends up in.",
                "description": ""
              }
            },
            "returns": "the index of the leaf x ends up in.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "decision_path",
          "signature": "decision_path(self, X)",
          "documentation": {
            "description": "",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "columns from indicator[n_nodes_ptr[i]:n_nodes_ptr[i+1]]",
                "description": ""
              },
              "converted": {
                "type": "into a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "indicator": {
                "type": "sparse matrix of shape (n_samples, n_nodes)",
                "description": ""
              },
              "Return": {
                "type": "a node indicator matrix where non zero elements indicates",
                "description": ""
              },
              "that": {
                "type": "the samples goes through the nodes. The matrix is of CSR",
                "description": "format."
              },
              "n_nodes_ptr": {
                "type": "ndarray of shape (n_estimators + 1,)",
                "description": ""
              },
              "gives": {
                "type": "the indicator value for the i-th estimator.",
                "description": ""
              }
            },
            "returns": "the decision path in the forest.\n\n        .. versionadded:: 0.18\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, its dtype will be converted to\n            ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csr_matrix``.\n\n        Returns\n        -------\n        indicator : sparse matrix of shape (n_samples, n_nodes)",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Build a forest of trees from the training set (X, y).\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Internally, its dtype will be converted\n            to ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csc_matrix``.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            The target values (class labels in classification, real numbers in\n            regression).\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted. Splits\n            that would create child nodes with net zero or negative weight are\n            ignored while searching for a split in each node. In the case of\n            classification, splits are also ignored if they would result in any\n            single class carrying a negative weight in either child node.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "target values (class labels in classification, real numbers in",
                "description": "regression)."
              },
              "to": {
                "type": "``dtype=np.float32``. If a sparse matrix is provided, it will be",
                "description": ""
              },
              "converted": {
                "type": "into a sparse ``csc_matrix``.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted. Splits",
                "description": ""
              },
              "that": {
                "type": "would create child nodes with net zero or negative weight are",
                "description": ""
              },
              "ignored": {
                "type": "while searching for a split in each node. In the case of",
                "description": "classification, splits are also ignored if they would result in any"
              },
              "single": {
                "type": "class carrying a negative weight in either child node.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "Fitted": {
                "type": "estimator.",
                "description": ""
              }
            },
            "returns": "-------\n        self : object\n            Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRequest\n            A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "documentation": {
            "description": "Predict class for X.\n\n        The predicted class of an input sample is a vote by the trees in\n        the forest, weighted by their probability estimates. That is,\n        the predicted class is the one with highest mean probability\n        estimate across the trees.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, its dtype will be converted to\n            ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csr_matrix``.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted classes.",
                "description": ""
              },
              "converted": {
                "type": "into a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "y": {
                "type": "ndarray of shape (n_samples,) or (n_samples, n_outputs)",
                "description": ""
              }
            },
            "returns": "-------\n        y : ndarray of shape (n_samples,) or (n_samples, n_outputs)\n            The predicted classes.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_log_proba",
          "signature": "predict_log_proba(self, X)",
          "documentation": {
            "description": "Predict class log-probabilities for X.\n\n        The predicted class log-probabilities of an input sample is computed as\n        the log of the mean predicted class probabilities of the trees in the\n        forest.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, its dtype will be converted to\n            ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csr_matrix``.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "class probabilities of the input samples. The order of the",
                "description": ""
              },
              "converted": {
                "type": "into a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "p": {
                "type": "ndarray of shape (n_samples, n_classes), or a list of such arrays",
                "description": ""
              },
              "classes": {
                "type": "corresponds to that in the attribute :term:`classes_`.",
                "description": ""
              }
            },
            "returns": "-------\n        p : ndarray of shape (n_samples, n_classes), or a list of such arrays\n            The class probabilities of the input samples. The order of the\n            classes corresponds to that in the attribute :term:`classes_`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_proba",
          "signature": "predict_proba(self, X)",
          "documentation": {
            "description": "Predict class probabilities for X.\n\n        The predicted class probabilities of an input sample are computed as\n        the mean predicted class probabilities of the trees in the forest.\n        The class probability of a single tree is the fraction of samples of\n        the same class in a leaf.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, its dtype will be converted to\n            ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csr_matrix``.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "class probabilities of the input samples. The order of the",
                "description": ""
              },
              "converted": {
                "type": "into a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "p": {
                "type": "ndarray of shape (n_samples, n_classes), or a list of such arrays",
                "description": ""
              },
              "classes": {
                "type": "corresponds to that in the attribute :term:`classes_`.",
                "description": ""
              }
            },
            "returns": "-------\n        p : ndarray of shape (n_samples, n_classes), or a list of such arrays\n            The class probabilities of the input samples. The order of the\n            classes corresponds to that in the attribute :term:`classes_`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "labels for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ""
              },
              "Mean": {
                "type": "accuracy of ``self.predict(X)`` w.r.t. `y`.",
                "description": ""
              }
            },
            "returns": "the mean accuracy on the given test data and labels.\n\n        In multi-label classification, this is the subset accuracy\n        which is a harsh metric since you require for each sample that\n        each label set be correctly predicted.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True labels for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.ensemble._forest.ExtraTreesClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._forest.ExtraTreesClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.ensemble._forest.ExtraTreesClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._forest.ExtraTreesClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "ExtraTreesRegressor",
      "documentation": {
        "description": "An extra-trees regressor.\n\n    This class implements a meta estimator that fits a number of\n    randomized decision trees (a.k.a. extra-trees) on various sub-samples\n    of the dataset and uses averaging to improve the predictive accuracy\n    and control over-fitting.\n\n    Read more in the :ref:`User Guide <forest>`.\n\n    Parameters\n    ----------\n    n_estimators : int, default=100\n        The number of trees in the forest.\n\n        .. versionchanged:: 0.22\n           The default value of ``n_estimators`` changed from 10 to 100\n           in 0.22.\n\n    criterion : {\"squared_error\", \"absolute_error\", \"friedman_mse\", \"poisson\"},             default=\"squared_error\"\n        The function to measure the quality of a split. Supported criteria\n        are \"squared_error\" for the mean squared error, which is equal to\n        variance reduction as feature selection criterion and minimizes the L2\n        loss using the mean of each terminal node, \"friedman_mse\", which uses\n        mean squared error with Friedman's improvement score for potential\n        splits, \"absolute_error\" for the mean absolute error, which minimizes\n        the L1 loss using the median of each terminal node, and \"poisson\" which\n        uses reduction in Poisson deviance to find splits.\n        Training using \"absolute_error\" is significantly slower\n        than when using \"squared_error\".\n\n        .. versionadded:: 0.18\n           Mean Absolute Error (MAE) criterion.\n\n    max_depth : int, default=None\n        The maximum depth of the tree. If None, then nodes are expanded until\n        all leaves are pure or until all leaves contain less than\n        min_samples_split samples.\n\n    min_samples_split : int or float, default=2\n        The minimum number of samples required to split an internal node:\n\n        - If int, then consider `min_samples_split` as the minimum number.\n        - If float, then `min_samples_split` is a fraction and\n          `ceil(min_samples_split * n_samples)` are the minimum\n          number of samples for each split.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_samples_leaf : int or float, default=1\n        The minimum number of samples required to be at a leaf node.\n        A split point at any depth will only be considered if it leaves at\n        least ``min_samples_leaf`` training samples in each of the left and\n        right branches.  This may have the effect of smoothing the model,\n        especially in regression.\n\n        - If int, then consider `min_samples_leaf` as the minimum number.\n        - If float, then `min_samples_leaf` is a fraction and\n          `ceil(min_samples_leaf * n_samples)` are the minimum\n          number of samples for each node.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_weight_fraction_leaf : float, default=0.0\n        The minimum weighted fraction of the sum total of weights (of all\n        the input samples) required to be at a leaf node. Samples have\n        equal weight when sample_weight is not provided.\n\n    max_features : {\"sqrt\", \"log2\", None}, int or float, default=1.0\n        The number of features to consider when looking for the best split:\n\n        - If int, then consider `max_features` features at each split.\n        - If float, then `max_features` is a fraction and\n          `max(1, int(max_features * n_features_in_))` features are considered at each\n          split.\n        - If \"sqrt\", then `max_features=sqrt(n_features)`.\n        - If \"log2\", then `max_features=log2(n_features)`.\n        - If None or 1.0, then `max_features=n_features`.\n\n        .. note::\n            The default of 1.0 is equivalent to bagged trees and more\n            randomness can be achieved by setting smaller values, e.g. 0.3.\n\n        .. versionchanged:: 1.1\n            The default of `max_features` changed from `\"auto\"` to 1.0.\n\n        Note: the search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features.\n\n    max_leaf_nodes : int, default=None\n        Grow trees with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        If None then unlimited number of leaf nodes.\n\n    min_impurity_decrease : float, default=0.0\n        A node will be split if this split induces a decrease of the impurity\n        greater than or equal to this value.\n\n        The weighted impurity decrease equation is the following::\n\n            N_t / N * (impurity - N_t_R / N_t * right_impurity\n                                - N_t_L / N_t * left_impurity)\n\n        where ``N`` is the total number of samples, ``N_t`` is the number of\n        samples at the current node, ``N_t_L`` is the number of samples in the\n        left child, and ``N_t_R`` is the number of samples in the right child.\n\n        ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n        if ``sample_weight`` is passed.\n\n        .. versionadded:: 0.19\n\n    bootstrap : bool, default=False\n        Whether bootstrap samples are used when building trees. If False, the\n        whole dataset is used to build each tree.\n\n    oob_score : bool or callable, default=False\n        Whether to use out-of-bag samples to estimate the generalization score.\n        By default, :func:`~sklearn.metrics.r2_score` is used.\n        Provide a callable with signature `metric(y_true, y_pred)` to use a\n        custom metric. Only available if `bootstrap=True`.\n\n    n_jobs : int, default=None\n        The number of jobs to run in parallel. :meth:`fit`, :meth:`predict`,\n        :meth:`decision_path` and :meth:`apply` are all parallelized over the\n        trees. ``None`` means 1 unless in a :obj:`joblib.parallel_backend`\n        context. ``-1`` means using all processors. See :term:`Glossary\n        <n_jobs>` for more details.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls 3 sources of randomness:\n\n        - the bootstrapping of the samples used when building trees\n          (if ``bootstrap=True``)\n        - the sampling of the features to consider when looking for the best\n          split at each node (if ``max_features < n_features``)\n        - the draw of the splits for each of the `max_features`\n\n        See :term:`Glossary <random_state>` for details.\n\n    verbose : int, default=0\n        Controls the verbosity when fitting and predicting.\n\n    warm_start : bool, default=False\n        When set to ``True``, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble, otherwise, just fit a whole\n        new forest. See :term:`Glossary <warm_start>` and\n        :ref:`tree_ensemble_warm_start` for details.\n\n    ccp_alpha : non-negative float, default=0.0\n        Complexity parameter used for Minimal Cost-Complexity Pruning. The\n        subtree with the largest cost complexity that is smaller than\n        ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n        :ref:`minimal_cost_complexity_pruning` for details. See\n        :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n        for an example of such pruning.\n\n        .. versionadded:: 0.22\n\n    max_samples : int or float, default=None\n        If bootstrap is True, the number of samples to draw from X\n        to train each base estimator.\n\n        - If None (default), then draw `X.shape[0]` samples.\n        - If int, then draw `max_samples` samples.\n        - If float, then draw `max_samples * X.shape[0]` samples. Thus,\n          `max_samples` should be in the interval `(0.0, 1.0]`.\n\n        .. versionadded:: 0.22\n\n    monotonic_cst : array-like of int of shape (n_features), default=None\n        Indicates the monotonicity constraint to enforce on each feature.\n          - 1: monotonically increasing\n          - 0: no constraint\n          - -1: monotonically decreasing\n\n        If monotonic_cst is None, no constraints are applied.\n\n        Monotonicity constraints are not supported for:\n          - multioutput regressions (i.e. when `n_outputs_ > 1`),\n          - regressions trained on data with missing values.\n\n        Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n        .. versionadded:: 1.4\n\n    Attributes\n    ----------\n    estimator_ : :class:`~sklearn.tree.ExtraTreeRegressor`\n        The child estimator template used to create the collection of fitted\n        sub-estimators.\n\n        .. versionadded:: 1.2\n           `base_estimator_` was renamed to `estimator_`.\n\n    estimators_ : list of DecisionTreeRegressor\n        The collection of fitted sub-estimators.\n\n    feature_importances_ : ndarray of shape (n_features,)\n        The impurity-based feature importances.\n        The higher, the more important the feature.\n        The importance of a feature is computed as the (normalized)\n        total reduction of the criterion brought by that feature.  It is also\n        known as the Gini importance.\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_outputs_ : int\n        The number of outputs.\n\n    oob_score_ : float\n        Score of the training dataset obtained using an out-of-bag estimate.\n        This attribute exists only when ``oob_score`` is True.\n\n    oob_prediction_ : ndarray of shape (n_samples,) or (n_samples, n_outputs)\n        Prediction computed with out-of-bag estimate on the training set.\n        This attribute exists only when ``oob_score`` is True.\n\n    estimators_samples_ : list of arrays\n        The subset of drawn samples (i.e., the in-bag samples) for each base\n        estimator. Each subset is defined by an array of the indices selected.\n\n        .. versionadded:: 1.4\n\n    See Also\n    --------\n    ExtraTreesClassifier : An extra-trees classifier with random splits.\n    RandomForestClassifier : A random forest classifier with optimal splits.\n    RandomForestRegressor : Ensemble regressor using trees with optimal splits.\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    References\n    ----------\n    .. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\",\n           Machine Learning, 63(1), 3-42, 2006.",
        "parameters": {
          "n_estimators": {
            "type": "int, default=100",
            "description": ""
          },
          "The": {
            "type": "default values for the parameters controlling the size of the trees",
            "description": "(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and"
          },
          "in": {
            "type": "0.22.",
            "description": ""
          },
          "criterion": {
            "type": "{\"squared_error\", \"absolute_error\", \"friedman_mse\", \"poisson\"},             default=\"squared_error\"",
            "description": ""
          },
          "are": {
            "type": "\"squared_error\" for the mean squared error, which is equal to",
            "description": ""
          },
          "variance": {
            "type": "reduction as feature selection criterion and minimizes the L2",
            "description": ""
          },
          "loss": {
            "type": "using the mean of each terminal node, \"friedman_mse\", which uses",
            "description": ""
          },
          "mean": {
            "type": "squared error with Friedman's improvement score for potential",
            "description": "splits, \"absolute_error\" for the mean absolute error, which minimizes"
          },
          "the": {
            "type": "input samples) required to be at a leaf node. Samples have",
            "description": ""
          },
          "uses": {
            "type": "reduction in Poisson deviance to find splits.",
            "description": ""
          },
          "Training": {
            "type": "using \"absolute_error\" is significantly slower",
            "description": ""
          },
          "than": {
            "type": "when using \"squared_error\".",
            "description": ".. versionadded:: 0.18"
          },
          "Mean": {
            "type": "Absolute Error (MAE) criterion.",
            "description": ""
          },
          "max_depth": {
            "type": "int, default=None",
            "description": ""
          },
          "all": {
            "type": "leaves are pure or until all leaves contain less than",
            "description": ""
          },
          "min_samples_split": {
            "type": "int or float, default=2",
            "description": ""
          },
          "number": {
            "type": "of samples for each node.",
            "description": ".. versionchanged:: 0.18"
          },
          "Added": {
            "type": "float values for fractions.",
            "description": ""
          },
          "min_samples_leaf": {
            "type": "int or float, default=1",
            "description": ""
          },
          "A": {
            "type": "node will be split if this split induces a decrease of the impurity",
            "description": ""
          },
          "least": {
            "type": "``min_samples_leaf`` training samples in each of the left and",
            "description": ""
          },
          "right": {
            "type": "branches.  This may have the effect of smoothing the model,",
            "description": ""
          },
          "especially": {
            "type": "in regression.",
            "description": "- If int, then consider `min_samples_leaf` as the minimum number.\n- If float, then `min_samples_leaf` is a fraction and\n`ceil(min_samples_leaf * n_samples)` are the minimum"
          },
          "min_weight_fraction_leaf": {
            "type": "float, default=0.0",
            "description": ""
          },
          "equal": {
            "type": "weight when sample_weight is not provided.",
            "description": ""
          },
          "max_features": {
            "type": "{\"sqrt\", \"log2\", None}, int or float, default=1.0",
            "description": ""
          },
          "randomness": {
            "type": "can be achieved by setting smaller values, e.g. 0.3.",
            "description": ".. versionchanged:: 1.1"
          },
          "Note": {
            "type": "the search for a split does not stop until at least one",
            "description": ""
          },
          "valid": {
            "type": "partition of the node samples is found, even if it requires to",
            "description": ""
          },
          "effectively": {
            "type": "inspect more than ``max_features`` features.",
            "description": ""
          },
          "max_leaf_nodes": {
            "type": "int, default=None",
            "description": ""
          },
          "Grow": {
            "type": "trees with ``max_leaf_nodes`` in best-first fashion.",
            "description": ""
          },
          "Best": {
            "type": "nodes are defined as relative reduction in impurity.",
            "description": ""
          },
          "If": {
            "type": "monotonic_cst is None, no constraints are applied.",
            "description": ""
          },
          "min_impurity_decrease": {
            "type": "float, default=0.0",
            "description": ""
          },
          "greater": {
            "type": "than or equal to this value.",
            "description": ""
          },
          "N_t": {
            "type": "/ N * (impurity - N_t_R / N_t * right_impurity",
            "description": "- N_t_L / N_t * left_impurity)"
          },
          "where": {
            "type": "``N`` is the total number of samples, ``N_t`` is the number of",
            "description": ""
          },
          "samples": {
            "type": "at the current node, ``N_t_L`` is the number of samples in the",
            "description": ""
          },
          "left": {
            "type": "child, and ``N_t_R`` is the number of samples in the right child.",
            "description": "``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,"
          },
          "if": {
            "type": "``sample_weight`` is passed.",
            "description": ".. versionadded:: 0.19"
          },
          "bootstrap": {
            "type": "bool, default=False",
            "description": ""
          },
          "Whether": {
            "type": "to use out-of-bag samples to estimate the generalization score.",
            "description": ""
          },
          "whole": {
            "type": "dataset is used to build each tree.",
            "description": ""
          },
          "oob_score": {
            "type": "bool or callable, default=False",
            "description": ""
          },
          "By": {
            "type": "default, :func:`~sklearn.metrics.r2_score` is used.",
            "description": ""
          },
          "Provide": {
            "type": "a callable with signature `metric(y_true, y_pred)` to use a",
            "description": ""
          },
          "custom": {
            "type": "metric. Only available if `bootstrap=True`.",
            "description": ""
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Controls": {
            "type": "the verbosity when fitting and predicting.",
            "description": ""
          },
          "split": {
            "type": "at each node (if ``max_features < n_features``)",
            "description": "- the draw of the splits for each of the `max_features`"
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "verbose": {
            "type": "int, default=0",
            "description": ""
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": ""
          },
          "When": {
            "type": "set to ``True``, reuse the solution of the previous call to fit",
            "description": ""
          },
          "and": {
            "type": "add more estimators to the ensemble, otherwise, just fit a whole",
            "description": ""
          },
          "new": {
            "type": "forest. See :term:`Glossary <warm_start>` and",
            "description": ":ref:`tree_ensemble_warm_start` for details."
          },
          "ccp_alpha": {
            "type": "non",
            "description": "negative float, default=0.0"
          },
          "Complexity": {
            "type": "parameter used for Minimal Cost-Complexity Pruning. The",
            "description": ""
          },
          "subtree": {
            "type": "with the largest cost complexity that is smaller than",
            "description": "``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n:ref:`minimal_cost_complexity_pruning` for details. See\n:ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`"
          },
          "for": {
            "type": "an example of such pruning.",
            "description": ".. versionadded:: 0.22"
          },
          "max_samples": {
            "type": "int or float, default=None",
            "description": ""
          },
          "to": {
            "type": "train each base estimator.",
            "description": "- If None (default), then draw `X.shape[0]` samples.\n- If int, then draw `max_samples` samples.\n- If float, then draw `max_samples * X.shape[0]` samples. Thus,\n`max_samples` should be in the interval `(0.0, 1.0]`.\n.. versionadded:: 0.22"
          },
          "monotonic_cst": {
            "type": "array",
            "description": "like of int of shape (n_features), default=None"
          },
          "Indicates": {
            "type": "the monotonicity constraint to enforce on each feature.",
            "description": "- 1: monotonically increasing\n- 0: no constraint\n- -1: monotonically decreasing"
          },
          "Monotonicity": {
            "type": "constraints are not supported for:",
            "description": "- multioutput regressions (i.e. when `n_outputs_ > 1`),\n- regressions trained on data with missing values."
          },
          "Read": {
            "type": "more in the :ref:`User Guide <monotonic_cst_gbdt>`.",
            "description": ".. versionadded:: 1.4\nAttributes\n----------"
          },
          "estimator_": {
            "type": ":class:`~sklearn.tree.ExtraTreeRegressor`",
            "description": ""
          },
          "estimators_": {
            "type": "list of DecisionTreeRegressor",
            "description": ""
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": ""
          },
          "total": {
            "type": "reduction of the criterion brought by that feature.  It is also",
            "description": ""
          },
          "known": {
            "type": "as the Gini importance.",
            "description": ""
          },
          "Warning": {
            "type": "impurity",
            "description": "based feature importances can be misleading for"
          },
          "high": {
            "type": "cardinality features (many unique values). See",
            "description": ":func:`sklearn.inspection.permutation_importance` as an alternative."
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`.",
            "description": ".. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "n_outputs_": {
            "type": "int",
            "description": ""
          },
          "oob_score_": {
            "type": "float",
            "description": ""
          },
          "Score": {
            "type": "of the training dataset obtained using an out-of-bag estimate.",
            "description": ""
          },
          "This": {
            "type": "attribute exists only when ``oob_score`` is True.",
            "description": ""
          },
          "oob_prediction_": {
            "type": "ndarray of shape (n_samples,) or (n_samples, n_outputs)",
            "description": ""
          },
          "Prediction": {
            "type": "computed with out-of-bag estimate on the training set.",
            "description": ""
          },
          "estimators_samples_": {
            "type": "list of arrays",
            "description": ""
          },
          "ExtraTreesClassifier": {
            "type": "An extra",
            "description": "trees classifier with random splits."
          },
          "RandomForestClassifier": {
            "type": "A random forest classifier with optimal splits.",
            "description": ""
          },
          "RandomForestRegressor": {
            "type": "Ensemble regressor using trees with optimal splits.",
            "description": "Notes\n-----"
          },
          "unpruned": {
            "type": "trees which can potentially be very large on some data sets. To",
            "description": ""
          },
          "reduce": {
            "type": "memory consumption, the complexity and size of the trees should be",
            "description": ""
          },
          "controlled": {
            "type": "by setting those parameter values.",
            "description": "References\n----------\n.. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\","
          },
          "Machine": {
            "type": "Learning, 63(1), 3-42, 2006.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import load_diabetes\n>>> from sklearn.model_selection import train_test_split\n>>> from sklearn.ensemble import ExtraTreesRegressor\n>>> X, y = load_diabetes(return_X_y=True)\n>>> X_train, X_test, y_train, y_test = train_test_split(\n...     X, y, random_state=0)\n>>> reg = ExtraTreesRegressor(n_estimators=100, random_state=0).fit(\n...    X_train, y_train)\n>>> reg.score(X_test, y_test)\n0.2727..."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    ExtraTreesClassifier : An extra-trees classifier with random splits.\n    RandomForestClassifier : A random forest classifier with optimal splits.\n    RandomForestRegressor : Ensemble regressor using trees with optimal splits.\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    References\n    ----------\n    .. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\",\n           Machine Learning, 63(1), 3-42, 2006.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import load_diabetes\n    >>> from sklearn.model_selection import train_test_split\n    >>> from sklearn.ensemble import ExtraTreesRegressor\n    >>> X, y = load_diabetes(return_X_y=True)\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...     X, y, random_state=0)\n    >>> reg = ExtraTreesRegressor(n_estimators=100, random_state=0).fit(\n    ...    X_train, y_train)\n    >>> reg.score(X_test, y_test)\n    0.2727...",
        "notes": "the search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features.\n\n    max_leaf_nodes : int, default=None\n        Grow trees with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        If None then unlimited number of leaf nodes.\n\n    min_impurity_decrease : float, default=0.0\n        A node will be split if this split induces a decrease of the impurity\n        greater than or equal to this value.\n\n        The weighted impurity decrease equation is the following::\n\n            N_t / N * (impurity - N_t_R / N_t * right_impurity\n                                - N_t_L / N_t * left_impurity)\n\n        where ``N`` is the total number of samples, ``N_t`` is the number of\n        samples at the current node, ``N_t_L`` is the number of samples in the\n        left child, and ``N_t_R`` is the number of samples in the right child.\n\n        ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n        if ``sample_weight`` is passed.\n\n        .. versionadded:: 0.19\n\n    bootstrap : bool, default=False\n        Whether bootstrap samples are used when building trees. If False, the\n        whole dataset is used to build each tree.\n\n    oob_score : bool or callable, default=False\n        Whether to use out-of-bag samples to estimate the generalization score.\n        By default, :func:`~sklearn.metrics.r2_score` is used.\n        Provide a callable with signature `metric(y_true, y_pred)` to use a\n        custom metric. Only available if `bootstrap=True`.\n\n    n_jobs : int, default=None\n        The number of jobs to run in parallel. :meth:`fit`, :meth:`predict`,\n        :meth:`decision_path` and :meth:`apply` are all parallelized over the\n        trees. ``None`` means 1 unless in a :obj:`joblib.parallel_backend`\n        context. ``-1`` means using all processors. See :term:`Glossary\n        <n_jobs>` for more details.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls 3 sources of randomness:\n\n        - the bootstrapping of the samples used when building trees\n          (if ``bootstrap=True``)\n        - the sampling of the features to consider when looking for the best\n          split at each node (if ``max_features < n_features``)\n        - the draw of the splits for each of the `max_features`\n\n        See :term:`Glossary <random_state>` for details.\n\n    verbose : int, default=0\n        Controls the verbosity when fitting and predicting.\n\n    warm_start : bool, default=False\n        When set to ``True``, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble, otherwise, just fit a whole\n        new forest. See :term:`Glossary <warm_start>` and\n        :ref:`tree_ensemble_warm_start` for details.\n\n    ccp_alpha : non-negative float, default=0.0\n        Complexity parameter used for Minimal Cost-Complexity Pruning. The\n        subtree with the largest cost complexity that is smaller than\n        ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n        :ref:`minimal_cost_complexity_pruning` for details. See\n        :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n        for an example of such pruning.\n\n        .. versionadded:: 0.22\n\n    max_samples : int or float, default=None\n        If bootstrap is True, the number of samples to draw from X\n        to train each base estimator.\n\n        - If None (default), then draw `X.shape[0]` samples.\n        - If int, then draw `max_samples` samples.\n        - If float, then draw `max_samples * X.shape[0]` samples. Thus,\n          `max_samples` should be in the interval `(0.0, 1.0]`.\n\n        .. versionadded:: 0.22\n\n    monotonic_cst : array-like of int of shape (n_features), default=None\n        Indicates the monotonicity constraint to enforce on each feature.\n          - 1: monotonically increasing\n          - 0: no constraint\n          - -1: monotonically decreasing\n\n        If monotonic_cst is None, no constraints are applied.\n\n        Monotonicity constraints are not supported for:\n          - multioutput regressions (i.e. when `n_outputs_ > 1`),\n          - regressions trained on data with missing values.\n\n        Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n        .. versionadded:: 1.4\n\n    Attributes\n    ----------\n    estimator_ : :class:`~sklearn.tree.ExtraTreeRegressor`\n        The child estimator template used to create the collection of fitted\n        sub-estimators.\n\n        .. versionadded:: 1.2\n           `base_estimator_` was renamed to `estimator_`.\n\n    estimators_ : list of DecisionTreeRegressor\n        The collection of fitted sub-estimators.\n\n    feature_importances_ : ndarray of shape (n_features,)\n        The impurity-based feature importances.\n        The higher, the more important the feature.\n        The importance of a feature is computed as the (normalized)\n        total reduction of the criterion brought by that feature.  It is also\n        known as the Gini importance.\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_outputs_ : int\n        The number of outputs.\n\n    oob_score_ : float\n        Score of the training dataset obtained using an out-of-bag estimate.\n        This attribute exists only when ``oob_score`` is True.\n\n    oob_prediction_ : ndarray of shape (n_samples,) or (n_samples, n_outputs)\n        Prediction computed with out-of-bag estimate on the training set.\n        This attribute exists only when ``oob_score`` is True.\n\n    estimators_samples_ : list of arrays\n        The subset of drawn samples (i.e., the in-bag samples) for each base\n        estimator. Each subset is defined by an array of the indices selected.\n\n        .. versionadded:: 1.4\n\n    See Also\n    --------\n    ExtraTreesClassifier : An extra-trees classifier with random splits.\n    RandomForestClassifier : A random forest classifier with optimal splits.\n    RandomForestRegressor : Ensemble regressor using trees with optimal splits.\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    References\n    ----------\n    .. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\",\n           Machine Learning, 63(1), 3-42, 2006.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import load_diabetes\n    >>> from sklearn.model_selection import train_test_split\n    >>> from sklearn.ensemble import ExtraTreesRegressor\n    >>> X, y = load_diabetes(return_X_y=True)\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...     X, y, random_state=0)\n    >>> reg = ExtraTreesRegressor(n_estimators=100, random_state=0).fit(\n    ...    X_train, y_train)\n    >>> reg.score(X_test, y_test)\n    0.2727...",
        "examples": "--------\n    >>> from sklearn.datasets import load_diabetes\n    >>> from sklearn.model_selection import train_test_split\n    >>> from sklearn.ensemble import ExtraTreesRegressor\n    >>> X, y = load_diabetes(return_X_y=True)\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...     X, y, random_state=0)\n    >>> reg = ExtraTreesRegressor(n_estimators=100, random_state=0).fit(\n    ...    X_train, y_train)\n    >>> reg.score(X_test, y_test)\n    0.2727..."
      },
      "methods": [
        {
          "name": "apply",
          "signature": "apply(self, X)",
          "documentation": {
            "description": "Apply trees in the forest to X, return leaf indices.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, its dtype will be converted to\n            ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csr_matrix``.\n\n        Returns\n        -------\n        X_leaves : ndarray of shape (n_samples, n_estimators)\n            For each datapoint x in X and for each tree in the forest,",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples. Internally, its dtype will be converted to",
                "description": "``dtype=np.float32``. If a sparse matrix is provided, it will be"
              },
              "converted": {
                "type": "into a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "X_leaves": {
                "type": "ndarray of shape (n_samples, n_estimators)",
                "description": ""
              },
              "For": {
                "type": "each datapoint x in X and for each tree in the forest,",
                "description": ""
              },
              "return": {
                "type": "the index of the leaf x ends up in.",
                "description": ""
              }
            },
            "returns": "the index of the leaf x ends up in.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "decision_path",
          "signature": "decision_path(self, X)",
          "documentation": {
            "description": "",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "columns from indicator[n_nodes_ptr[i]:n_nodes_ptr[i+1]]",
                "description": ""
              },
              "converted": {
                "type": "into a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "indicator": {
                "type": "sparse matrix of shape (n_samples, n_nodes)",
                "description": ""
              },
              "Return": {
                "type": "a node indicator matrix where non zero elements indicates",
                "description": ""
              },
              "that": {
                "type": "the samples goes through the nodes. The matrix is of CSR",
                "description": "format."
              },
              "n_nodes_ptr": {
                "type": "ndarray of shape (n_estimators + 1,)",
                "description": ""
              },
              "gives": {
                "type": "the indicator value for the i-th estimator.",
                "description": ""
              }
            },
            "returns": "the decision path in the forest.\n\n        .. versionadded:: 0.18\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, its dtype will be converted to\n            ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csr_matrix``.\n\n        Returns\n        -------\n        indicator : sparse matrix of shape (n_samples, n_nodes)",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Build a forest of trees from the training set (X, y).\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Internally, its dtype will be converted\n            to ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csc_matrix``.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            The target values (class labels in classification, real numbers in\n            regression).\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted. Splits\n            that would create child nodes with net zero or negative weight are\n            ignored while searching for a split in each node. In the case of\n            classification, splits are also ignored if they would result in any\n            single class carrying a negative weight in either child node.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "target values (class labels in classification, real numbers in",
                "description": "regression)."
              },
              "to": {
                "type": "``dtype=np.float32``. If a sparse matrix is provided, it will be",
                "description": ""
              },
              "converted": {
                "type": "into a sparse ``csc_matrix``.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted. Splits",
                "description": ""
              },
              "that": {
                "type": "would create child nodes with net zero or negative weight are",
                "description": ""
              },
              "ignored": {
                "type": "while searching for a split in each node. In the case of",
                "description": "classification, splits are also ignored if they would result in any"
              },
              "single": {
                "type": "class carrying a negative weight in either child node.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "Fitted": {
                "type": "estimator.",
                "description": ""
              }
            },
            "returns": "-------\n        self : object\n            Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRequest\n            A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "documentation": {
            "description": "Predict regression target for X.\n\n        The predicted regression target of an input sample is computed as the\n        mean predicted regression targets of the trees in the forest.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, its dtype will be converted to\n            ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csr_matrix``.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted values.",
                "description": ""
              },
              "converted": {
                "type": "into a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "y": {
                "type": "ndarray of shape (n_samples,) or (n_samples, n_outputs)",
                "description": ""
              }
            },
            "returns": "-------\n        y : ndarray of shape (n_samples,) or (n_samples, n_outputs)\n            The predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Return the coefficient of determination of the prediction.\n\n        The coefficient of determination :math:`R^2` is defined as\n        :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\n        sum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\n        is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\n        The best possible score is 1.0 and it can be negative (because the\n        model can be arbitrarily worse). A constant model that always predicts\n        the expected value of `y`, disregarding the input features, would get\n        a :math:`R^2` score of 0.0.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples. For some estimators this may be a precomputed\n            kernel matrix or a list of generic objects instead with shape\n            ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n            is the number of samples used in the fitting for the estimator.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True values for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples. For some estimators this may be a precomputed",
                "description": ""
              },
              "kernel": {
                "type": "matrix or a list of generic objects instead with shape",
                "description": "``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``"
              },
              "is": {
                "type": "the number of samples used in the fitting for the estimator.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "values for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ":math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\nNotes\n-----"
              },
              "The": {
                "type": "math:`R^2` score used when calling ``score`` on a regressor uses",
                "description": "``multioutput='uniform_average'`` from version 0.23 to keep consistent"
              },
              "with": {
                "type": "default value of :func:`~sklearn.metrics.r2_score`.",
                "description": ""
              },
              "This": {
                "type": "influences the ``score`` method of all the multioutput",
                "description": ""
              },
              "regressors": {
                "type": "(except for",
                "description": ":class:`~sklearn.multioutput.MultiOutputRegressor`)."
              }
            },
            "returns": "-------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\n\n        Notes\n        -----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "raises": "",
            "see_also": "",
            "notes": "-----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.ensemble._forest.ExtraTreesRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._forest.ExtraTreesRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.ensemble._forest.ExtraTreesRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._forest.ExtraTreesRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "GradientBoostingClassifier",
      "documentation": {
        "description": "Gradient Boosting for classification.\n\n    This algorithm builds an additive model in a forward stage-wise fashion; it\n    allows for the optimization of arbitrary differentiable loss functions. In\n    each stage ``n_classes_`` regression trees are fit on the negative gradient\n    of the loss function, e.g. binary or multiclass log loss. Binary\n    classification is a special case where only a single regression tree is\n    induced.\n\n    :class:`~sklearn.ensemble.HistGradientBoostingClassifier` is a much faster variant\n    of this algorithm for intermediate and large datasets (`n_samples >= 10_000`) and\n    supports monotonic constraints.\n\n    Read more in the :ref:`User Guide <gradient_boosting>`.\n\n    Parameters\n    ----------\n    loss : {'log_loss', 'exponential'}, default='log_loss'\n        The loss function to be optimized. 'log_loss' refers to binomial and\n        multinomial deviance, the same as used in logistic regression.\n        It is a good choice for classification with probabilistic outputs.\n        For loss 'exponential', gradient boosting recovers the AdaBoost algorithm.\n\n    learning_rate : float, default=0.1\n        Learning rate shrinks the contribution of each tree by `learning_rate`.\n        There is a trade-off between learning_rate and n_estimators.\n        Values must be in the range `[0.0, inf)`.\n\n    n_estimators : int, default=100\n        The number of boosting stages to perform. Gradient boosting\n        is fairly robust to over-fitting so a large number usually\n        results in better performance.\n        Values must be in the range `[1, inf)`.\n\n    subsample : float, default=1.0\n        The fraction of samples to be used for fitting the individual base\n        learners. If smaller than 1.0 this results in Stochastic Gradient\n        Boosting. `subsample` interacts with the parameter `n_estimators`.\n        Choosing `subsample < 1.0` leads to a reduction of variance\n        and an increase in bias.\n        Values must be in the range `(0.0, 1.0]`.\n\n    criterion : {'friedman_mse', 'squared_error'}, default='friedman_mse'\n        The function to measure the quality of a split. Supported criteria are\n        'friedman_mse' for the mean squared error with improvement score by\n        Friedman, 'squared_error' for mean squared error. The default value of\n        'friedman_mse' is generally the best as it can provide a better\n        approximation in some cases.\n\n        .. versionadded:: 0.18\n\n    min_samples_split : int or float, default=2\n        The minimum number of samples required to split an internal node:\n\n        - If int, values must be in the range `[2, inf)`.\n        - If float, values must be in the range `(0.0, 1.0]` and `min_samples_split`\n          will be `ceil(min_samples_split * n_samples)`.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_samples_leaf : int or float, default=1\n        The minimum number of samples required to be at a leaf node.\n        A split point at any depth will only be considered if it leaves at\n        least ``min_samples_leaf`` training samples in each of the left and\n        right branches.  This may have the effect of smoothing the model,\n        especially in regression.\n\n        - If int, values must be in the range `[1, inf)`.\n        - If float, values must be in the range `(0.0, 1.0)` and `min_samples_leaf`\n          will be `ceil(min_samples_leaf * n_samples)`.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_weight_fraction_leaf : float, default=0.0\n        The minimum weighted fraction of the sum total of weights (of all\n        the input samples) required to be at a leaf node. Samples have\n        equal weight when sample_weight is not provided.\n        Values must be in the range `[0.0, 0.5]`.\n\n    max_depth : int or None, default=3\n        Maximum depth of the individual regression estimators. The maximum\n        depth limits the number of nodes in the tree. Tune this parameter\n        for best performance; the best value depends on the interaction\n        of the input variables. If None, then nodes are expanded until\n        all leaves are pure or until all leaves contain less than\n        min_samples_split samples.\n        If int, values must be in the range `[1, inf)`.\n\n    min_impurity_decrease : float, default=0.0\n        A node will be split if this split induces a decrease of the impurity\n        greater than or equal to this value.\n        Values must be in the range `[0.0, inf)`.\n\n        The weighted impurity decrease equation is the following::\n\n            N_t / N * (impurity - N_t_R / N_t * right_impurity\n                                - N_t_L / N_t * left_impurity)\n\n        where ``N`` is the total number of samples, ``N_t`` is the number of\n        samples at the current node, ``N_t_L`` is the number of samples in the\n        left child, and ``N_t_R`` is the number of samples in the right child.\n\n        ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n        if ``sample_weight`` is passed.\n\n        .. versionadded:: 0.19\n\n    init : estimator or 'zero', default=None\n        An estimator object that is used to compute the initial predictions.\n        ``init`` has to provide :term:`fit` and :term:`predict_proba`. If\n        'zero', the initial raw predictions are set to zero. By default, a\n        ``DummyEstimator`` predicting the classes priors is used.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls the random seed given to each Tree estimator at each\n        boosting iteration.\n        In addition, it controls the random permutation of the features at\n        each split (see Notes for more details).\n        It also controls the random splitting of the training data to obtain a\n        validation set if `n_iter_no_change` is not None.\n        Pass an int for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    max_features : {'sqrt', 'log2'}, int or float, default=None\n        The number of features to consider when looking for the best split:\n\n        - If int, values must be in the range `[1, inf)`.\n        - If float, values must be in the range `(0.0, 1.0]` and the features\n          considered at each split will be `max(1, int(max_features * n_features_in_))`.\n        - If 'sqrt', then `max_features=sqrt(n_features)`.\n        - If 'log2', then `max_features=log2(n_features)`.\n        - If None, then `max_features=n_features`.\n\n        Choosing `max_features < n_features` leads to a reduction of variance\n        and an increase in bias.\n\n        Note: the search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features.\n\n    verbose : int, default=0\n        Enable verbose output. If 1 then it prints progress and performance\n        once in a while (the more trees the lower the frequency). If greater\n        than 1 then it prints progress and performance for every tree.\n        Values must be in the range `[0, inf)`.\n\n    max_leaf_nodes : int, default=None\n        Grow trees with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        Values must be in the range `[2, inf)`.\n        If `None`, then unlimited number of leaf nodes.\n\n    warm_start : bool, default=False\n        When set to ``True``, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble, otherwise, just erase the\n        previous solution. See :term:`the Glossary <warm_start>`.\n\n    validation_fraction : float, default=0.1\n        The proportion of training data to set aside as validation set for\n        early stopping. Values must be in the range `(0.0, 1.0)`.\n        Only used if ``n_iter_no_change`` is set to an integer.\n\n        .. versionadded:: 0.20\n\n    n_iter_no_change : int, default=None\n        ``n_iter_no_change`` is used to decide if early stopping will be used\n        to terminate training when validation score is not improving. By\n        default it is set to None to disable early stopping. If set to a\n        number, it will set aside ``validation_fraction`` size of the training\n        data as validation and terminate training when validation score is not\n        improving in all of the previous ``n_iter_no_change`` numbers of\n        iterations. The split is stratified.\n        Values must be in the range `[1, inf)`.\n        See\n        :ref:`sphx_glr_auto_examples_ensemble_plot_gradient_boosting_early_stopping.py`.\n\n        .. versionadded:: 0.20\n\n    tol : float, default=1e-4\n        Tolerance for the early stopping. When the loss is not improving\n        by at least tol for ``n_iter_no_change`` iterations (if set to a\n        number), the training stops.\n        Values must be in the range `[0.0, inf)`.\n\n        .. versionadded:: 0.20\n\n    ccp_alpha : non-negative float, default=0.0\n        Complexity parameter used for Minimal Cost-Complexity Pruning. The\n        subtree with the largest cost complexity that is smaller than\n        ``ccp_alpha`` will be chosen. By default, no pruning is performed.\n        Values must be in the range `[0.0, inf)`.\n        See :ref:`minimal_cost_complexity_pruning` for details. See\n        :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n        for an example of such pruning.\n\n        .. versionadded:: 0.22\n\n    Attributes\n    ----------\n    n_estimators_ : int\n        The number of estimators as selected by early stopping (if\n        ``n_iter_no_change`` is specified). Otherwise it is set to\n        ``n_estimators``.\n\n        .. versionadded:: 0.20\n\n    n_trees_per_iteration_ : int\n        The number of trees that are built at each iteration. For binary classifiers,\n        this is always 1.\n\n        .. versionadded:: 1.4.0\n\n    feature_importances_ : ndarray of shape (n_features,)\n        The impurity-based feature importances.\n        The higher, the more important the feature.\n        The importance of a feature is computed as the (normalized)\n        total reduction of the criterion brought by that feature.  It is also\n        known as the Gini importance.\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    oob_improvement_ : ndarray of shape (n_estimators,)\n        The improvement in loss on the out-of-bag samples\n        relative to the previous iteration.\n        ``oob_improvement_[0]`` is the improvement in\n        loss of the first stage over the ``init`` estimator.\n        Only available if ``subsample < 1.0``.\n\n    oob_scores_ : ndarray of shape (n_estimators,)\n        The full history of the loss values on the out-of-bag\n        samples. Only available if `subsample < 1.0`.\n\n        .. versionadded:: 1.3\n\n    oob_score_ : float\n        The last value of the loss on the out-of-bag samples. It is\n        the same as `oob_scores_[-1]`. Only available if `subsample < 1.0`.\n\n        .. versionadded:: 1.3\n\n    train_score_ : ndarray of shape (n_estimators,)\n        The i-th score ``train_score_[i]`` is the loss of the\n        model at iteration ``i`` on the in-bag sample.\n        If ``subsample == 1`` this is the loss on the training data.\n\n    init_ : estimator\n        The estimator that provides the initial predictions. Set via the ``init``\n        argument.\n\n    estimators_ : ndarray of DecisionTreeRegressor of             shape (n_estimators, ``n_trees_per_iteration_``)\n        The collection of fitted sub-estimators. ``n_trees_per_iteration_`` is 1 for\n        binary classification, otherwise ``n_classes``.\n\n    classes_ : ndarray of shape (n_classes,)\n        The classes labels.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_classes_ : int\n        The number of classes.\n\n    max_features_ : int\n        The inferred value of max_features.\n\n    See Also\n    --------\n    HistGradientBoostingClassifier : Histogram-based Gradient Boosting\n        Classification Tree.\n    sklearn.tree.DecisionTreeClassifier : A decision tree classifier.\n    RandomForestClassifier : A meta-estimator that fits a number of decision\n        tree classifiers on various sub-samples of the dataset and uses\n        averaging to improve the predictive accuracy and control over-fitting.\n    AdaBoostClassifier : A meta-estimator that begins by fitting a classifier\n        on the original dataset and then fits additional copies of the\n        classifier on the same dataset where the weights of incorrectly\n        classified instances are adjusted such that subsequent classifiers\n        focus more on difficult cases.\n\n    Notes\n    -----\n    The features are always randomly permuted at each split. Therefore,\n    the best found split may vary, even with the same training data and\n    ``max_features=n_features``, if the improvement of the criterion is\n    identical for several splits enumerated during the search of the best\n    split. To obtain a deterministic behaviour during fitting,\n    ``random_state`` has to be fixed.\n\n    References\n    ----------\n    J. Friedman, Greedy Function Approximation: A Gradient Boosting\n    Machine, The Annals of Statistics, Vol. 29, No. 5, 2001.\n\n    J. Friedman, Stochastic Gradient Boosting, 1999\n\n    T. Hastie, R. Tibshirani and J. Friedman.\n    Elements of Statistical Learning Ed. 2, Springer, 2009.",
        "parameters": {
          "loss": {
            "type": "of the first stage over the ``init`` estimator.",
            "description": ""
          },
          "The": {
            "type": "following example shows how to fit a gradient boosting classifier with",
            "description": ""
          },
          "multinomial": {
            "type": "deviance, the same as used in logistic regression.",
            "description": ""
          },
          "It": {
            "type": "also controls the random splitting of the training data to obtain a",
            "description": ""
          },
          "For": {
            "type": "loss 'exponential', gradient boosting recovers the AdaBoost algorithm.",
            "description": ""
          },
          "learning_rate": {
            "type": "float, default=0.1",
            "description": ""
          },
          "Learning": {
            "type": "rate shrinks the contribution of each tree by `learning_rate`.",
            "description": ""
          },
          "There": {
            "type": "is a trade-off between learning_rate and n_estimators.",
            "description": ""
          },
          "Values": {
            "type": "must be in the range `[0.0, inf)`.",
            "description": ""
          },
          "n_estimators": {
            "type": "int, default=100",
            "description": ""
          },
          "is": {
            "type": "fairly robust to over-fitting so a large number usually",
            "description": ""
          },
          "results": {
            "type": "in better performance.",
            "description": ""
          },
          "subsample": {
            "type": "float, default=1.0",
            "description": ""
          },
          "Choosing": {
            "type": "`max_features < n_features` leads to a reduction of variance",
            "description": ""
          },
          "and": {
            "type": "add more estimators to the ensemble, otherwise, just erase the",
            "description": ""
          },
          "criterion": {
            "type": "{'friedman_mse', 'squared_error'}, default='friedman_mse'",
            "description": ""
          },
          "approximation": {
            "type": "in some cases.",
            "description": ".. versionadded:: 0.18"
          },
          "min_samples_split": {
            "type": "samples.",
            "description": ""
          },
          "will": {
            "type": "be `ceil(min_samples_leaf * n_samples)`.",
            "description": ".. versionchanged:: 0.18"
          },
          "Added": {
            "type": "float values for fractions.",
            "description": ""
          },
          "min_samples_leaf": {
            "type": "int or float, default=1",
            "description": ""
          },
          "A": {
            "type": "node will be split if this split induces a decrease of the impurity",
            "description": ""
          },
          "least": {
            "type": "``min_samples_leaf`` training samples in each of the left and",
            "description": ""
          },
          "right": {
            "type": "branches.  This may have the effect of smoothing the model,",
            "description": ""
          },
          "especially": {
            "type": "in regression.",
            "description": "- If int, values must be in the range `[1, inf)`.\n- If float, values must be in the range `(0.0, 1.0)` and `min_samples_leaf`"
          },
          "min_weight_fraction_leaf": {
            "type": "float, default=0.0",
            "description": ""
          },
          "the": {
            "type": "best found split may vary, even with the same training data and",
            "description": "``max_features=n_features``, if the improvement of the criterion is"
          },
          "equal": {
            "type": "weight when sample_weight is not provided.",
            "description": ""
          },
          "max_depth": {
            "type": "int or None, default=3",
            "description": ""
          },
          "Maximum": {
            "type": "depth of the individual regression estimators. The maximum",
            "description": ""
          },
          "depth": {
            "type": "limits the number of nodes in the tree. Tune this parameter",
            "description": ""
          },
          "for": {
            "type": "an example of such pruning.",
            "description": ".. versionadded:: 0.22\nAttributes\n----------"
          },
          "of": {
            "type": "the input variables. If None, then nodes are expanded until",
            "description": ""
          },
          "all": {
            "type": "leaves are pure or until all leaves contain less than",
            "description": ""
          },
          "If": {
            "type": "``subsample == 1`` this is the loss on the training data.",
            "description": ""
          },
          "min_impurity_decrease": {
            "type": "float, default=0.0",
            "description": ""
          },
          "greater": {
            "type": "than or equal to this value.",
            "description": ""
          },
          "N_t": {
            "type": "/ N * (impurity - N_t_R / N_t * right_impurity",
            "description": "- N_t_L / N_t * left_impurity)"
          },
          "where": {
            "type": "``N`` is the total number of samples, ``N_t`` is the number of",
            "description": ""
          },
          "samples": {
            "type": "at the current node, ``N_t_L`` is the number of samples in the",
            "description": ""
          },
          "left": {
            "type": "child, and ``N_t_R`` is the number of samples in the right child.",
            "description": "``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,"
          },
          "if": {
            "type": "``sample_weight`` is passed.",
            "description": ".. versionadded:: 0.19"
          },
          "init": {
            "type": "estimator or 'zero', default=None",
            "description": ""
          },
          "An": {
            "type": "estimator object that is used to compute the initial predictions.",
            "description": "``init`` has to provide :term:`fit` and :term:`predict_proba`. If\n'zero', the initial raw predictions are set to zero. By default, a\n``DummyEstimator`` predicting the classes priors is used."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Controls": {
            "type": "the random seed given to each Tree estimator at each",
            "description": ""
          },
          "boosting": {
            "type": "iteration.",
            "description": ""
          },
          "In": {
            "type": "addition, it controls the random permutation of the features at",
            "description": ""
          },
          "each": {
            "type": "split (see Notes for more details).",
            "description": ""
          },
          "validation": {
            "type": "set if `n_iter_no_change` is not None.",
            "description": ""
          },
          "Pass": {
            "type": "an int for reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "max_features": {
            "type": "{'sqrt', 'log2'}, int or float, default=None",
            "description": ""
          },
          "considered": {
            "type": "at each split will be `max(1, int(max_features * n_features_in_))`.",
            "description": "- If 'sqrt', then `max_features=sqrt(n_features)`.\n- If 'log2', then `max_features=log2(n_features)`.\n- If None, then `max_features=n_features`."
          },
          "Note": {
            "type": "the search for a split does not stop until at least one",
            "description": ""
          },
          "valid": {
            "type": "partition of the node samples is found, even if it requires to",
            "description": ""
          },
          "effectively": {
            "type": "inspect more than ``max_features`` features.",
            "description": ""
          },
          "verbose": {
            "type": "int, default=0",
            "description": ""
          },
          "Enable": {
            "type": "verbose output. If 1 then it prints progress and performance",
            "description": ""
          },
          "once": {
            "type": "in a while (the more trees the lower the frequency). If greater",
            "description": ""
          },
          "than": {
            "type": "1 then it prints progress and performance for every tree.",
            "description": ""
          },
          "max_leaf_nodes": {
            "type": "int, default=None",
            "description": ""
          },
          "Grow": {
            "type": "trees with ``max_leaf_nodes`` in best-first fashion.",
            "description": ""
          },
          "Best": {
            "type": "nodes are defined as relative reduction in impurity.",
            "description": ""
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": ""
          },
          "When": {
            "type": "set to ``True``, reuse the solution of the previous call to fit",
            "description": ""
          },
          "previous": {
            "type": "solution. See :term:`the Glossary <warm_start>`.",
            "description": ""
          },
          "validation_fraction": {
            "type": "float, default=0.1",
            "description": ""
          },
          "early": {
            "type": "stopping. Values must be in the range `(0.0, 1.0)`.",
            "description": ""
          },
          "Only": {
            "type": "available if ``subsample < 1.0``.",
            "description": ""
          },
          "n_iter_no_change": {
            "type": "int, default=None",
            "description": "``n_iter_no_change`` is used to decide if early stopping will be used"
          },
          "to": {
            "type": "terminate training when validation score is not improving. By",
            "description": ""
          },
          "default": {
            "type": "it is set to None to disable early stopping. If set to a",
            "description": "number, it will set aside ``validation_fraction`` size of the training"
          },
          "data": {
            "type": "as validation and terminate training when validation score is not",
            "description": ""
          },
          "improving": {
            "type": "in all of the previous ``n_iter_no_change`` numbers of",
            "description": "iterations. The split is stratified."
          },
          "tol": {
            "type": "float, default=1e",
            "description": "4"
          },
          "Tolerance": {
            "type": "for the early stopping. When the loss is not improving",
            "description": ""
          },
          "by": {
            "type": "at least tol for ``n_iter_no_change`` iterations (if set to a",
            "description": "number), the training stops."
          },
          "ccp_alpha": {
            "type": "non",
            "description": "negative float, default=0.0"
          },
          "Complexity": {
            "type": "parameter used for Minimal Cost-Complexity Pruning. The",
            "description": ""
          },
          "subtree": {
            "type": "with the largest cost complexity that is smaller than",
            "description": "``ccp_alpha`` will be chosen. By default, no pruning is performed."
          },
          "n_estimators_": {
            "type": "int",
            "description": ""
          },
          "n_trees_per_iteration_": {
            "type": "int",
            "description": ""
          },
          "this": {
            "type": "is always 1.",
            "description": ".. versionadded:: 1.4.0"
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": ""
          },
          "total": {
            "type": "reduction of the criterion brought by that feature.  It is also",
            "description": ""
          },
          "known": {
            "type": "as the Gini importance.",
            "description": ""
          },
          "Warning": {
            "type": "impurity",
            "description": "based feature importances can be misleading for"
          },
          "high": {
            "type": "cardinality features (many unique values). See",
            "description": ":func:`sklearn.inspection.permutation_importance` as an alternative."
          },
          "oob_improvement_": {
            "type": "ndarray of shape (n_estimators,)",
            "description": ""
          },
          "relative": {
            "type": "to the previous iteration.",
            "description": "``oob_improvement_[0]`` is the improvement in"
          },
          "oob_scores_": {
            "type": "ndarray of shape (n_estimators,)",
            "description": ""
          },
          "oob_score_": {
            "type": "float",
            "description": ""
          },
          "train_score_": {
            "type": "ndarray of shape (n_estimators,)",
            "description": ""
          },
          "model": {
            "type": "at iteration ``i`` on the in-bag sample.",
            "description": ""
          },
          "init_": {
            "type": "estimator",
            "description": ""
          },
          "estimators_": {
            "type": "ndarray of DecisionTreeRegressor of             shape (n_estimators, ``n_trees_per_iteration_``)",
            "description": ""
          },
          "binary": {
            "type": "classification, otherwise ``n_classes``.",
            "description": ""
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,)",
            "description": ""
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`.",
            "description": ".. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "n_classes_": {
            "type": "int",
            "description": ""
          },
          "max_features_": {
            "type": "int",
            "description": ""
          },
          "HistGradientBoostingClassifier": {
            "type": "Histogram",
            "description": "based Gradient Boosting"
          },
          "Classification": {
            "type": "Tree.",
            "description": "sklearn.tree.DecisionTreeClassifier : A decision tree classifier."
          },
          "RandomForestClassifier": {
            "type": "A meta",
            "description": "estimator that fits a number of decision"
          },
          "tree": {
            "type": "classifiers on various sub-samples of the dataset and uses",
            "description": ""
          },
          "averaging": {
            "type": "to improve the predictive accuracy and control over-fitting.",
            "description": ""
          },
          "AdaBoostClassifier": {
            "type": "A meta",
            "description": "estimator that begins by fitting a classifier"
          },
          "on": {
            "type": "the original dataset and then fits additional copies of the",
            "description": ""
          },
          "classifier": {
            "type": "on the same dataset where the weights of incorrectly",
            "description": ""
          },
          "classified": {
            "type": "instances are adjusted such that subsequent classifiers",
            "description": ""
          },
          "focus": {
            "type": "more on difficult cases.",
            "description": "Notes\n-----"
          },
          "identical": {
            "type": "for several splits enumerated during the search of the best",
            "description": "split. To obtain a deterministic behaviour during fitting,\n``random_state`` has to be fixed.\nReferences\n----------\nJ. Friedman, Greedy Function Approximation: A Gradient Boosting\nMachine, The Annals of Statistics, Vol. 29, No. 5, 2001.\nJ. Friedman, Stochastic Gradient Boosting, 1999\nT. Hastie, R. Tibshirani and J. Friedman."
          },
          "Elements": {
            "type": "of Statistical Learning Ed. 2, Springer, 2009.",
            "description": "Examples\n--------"
          },
          "100": {
            "type": "decision stumps as weak learners.",
            "description": ">>> from sklearn.datasets import make_hastie_10_2\n>>> from sklearn.ensemble import GradientBoostingClassifier\n>>> X, y = make_hastie_10_2(random_state=0)\n>>> X_train, X_test = X[:2000], X[2000:]\n>>> y_train, y_test = y[:2000], y[2000:]\n>>> clf = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0,\n...     max_depth=1, random_state=0).fit(X_train, y_train)\n>>> clf.score(X_test, y_test)\n0.913..."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    HistGradientBoostingClassifier : Histogram-based Gradient Boosting\n        Classification Tree.\n    sklearn.tree.DecisionTreeClassifier : A decision tree classifier.\n    RandomForestClassifier : A meta-estimator that fits a number of decision\n        tree classifiers on various sub-samples of the dataset and uses\n        averaging to improve the predictive accuracy and control over-fitting.\n    AdaBoostClassifier : A meta-estimator that begins by fitting a classifier\n        on the original dataset and then fits additional copies of the\n        classifier on the same dataset where the weights of incorrectly\n        classified instances are adjusted such that subsequent classifiers\n        focus more on difficult cases.\n\n    Notes\n    -----\n    The features are always randomly permuted at each split. Therefore,\n    the best found split may vary, even with the same training data and\n    ``max_features=n_features``, if the improvement of the criterion is\n    identical for several splits enumerated during the search of the best\n    split. To obtain a deterministic behaviour during fitting,\n    ``random_state`` has to be fixed.\n\n    References\n    ----------\n    J. Friedman, Greedy Function Approximation: A Gradient Boosting\n    Machine, The Annals of Statistics, Vol. 29, No. 5, 2001.\n\n    J. Friedman, Stochastic Gradient Boosting, 1999\n\n    T. Hastie, R. Tibshirani and J. Friedman.\n    Elements of Statistical Learning Ed. 2, Springer, 2009.\n\n    Examples\n    --------\n    The following example shows how to fit a gradient boosting classifier with\n    100 decision stumps as weak learners.\n\n    >>> from sklearn.datasets import make_hastie_10_2\n    >>> from sklearn.ensemble import GradientBoostingClassifier\n\n    >>> X, y = make_hastie_10_2(random_state=0)\n    >>> X_train, X_test = X[:2000], X[2000:]\n    >>> y_train, y_test = y[:2000], y[2000:]\n\n    >>> clf = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0,\n    ...     max_depth=1, random_state=0).fit(X_train, y_train)\n    >>> clf.score(X_test, y_test)\n    0.913...",
        "notes": "the search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features.\n\n    verbose : int, default=0\n        Enable verbose output. If 1 then it prints progress and performance\n        once in a while (the more trees the lower the frequency). If greater\n        than 1 then it prints progress and performance for every tree.\n        Values must be in the range `[0, inf)`.\n\n    max_leaf_nodes : int, default=None\n        Grow trees with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        Values must be in the range `[2, inf)`.\n        If `None`, then unlimited number of leaf nodes.\n\n    warm_start : bool, default=False\n        When set to ``True``, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble, otherwise, just erase the\n        previous solution. See :term:`the Glossary <warm_start>`.\n\n    validation_fraction : float, default=0.1\n        The proportion of training data to set aside as validation set for\n        early stopping. Values must be in the range `(0.0, 1.0)`.\n        Only used if ``n_iter_no_change`` is set to an integer.\n\n        .. versionadded:: 0.20\n\n    n_iter_no_change : int, default=None\n        ``n_iter_no_change`` is used to decide if early stopping will be used\n        to terminate training when validation score is not improving. By\n        default it is set to None to disable early stopping. If set to a\n        number, it will set aside ``validation_fraction`` size of the training\n        data as validation and terminate training when validation score is not\n        improving in all of the previous ``n_iter_no_change`` numbers of\n        iterations. The split is stratified.\n        Values must be in the range `[1, inf)`.\n        See\n        :ref:`sphx_glr_auto_examples_ensemble_plot_gradient_boosting_early_stopping.py`.\n\n        .. versionadded:: 0.20\n\n    tol : float, default=1e-4\n        Tolerance for the early stopping. When the loss is not improving\n        by at least tol for ``n_iter_no_change`` iterations (if set to a\n        number), the training stops.\n        Values must be in the range `[0.0, inf)`.\n\n        .. versionadded:: 0.20\n\n    ccp_alpha : non-negative float, default=0.0\n        Complexity parameter used for Minimal Cost-Complexity Pruning. The\n        subtree with the largest cost complexity that is smaller than\n        ``ccp_alpha`` will be chosen. By default, no pruning is performed.\n        Values must be in the range `[0.0, inf)`.\n        See :ref:`minimal_cost_complexity_pruning` for details. See\n        :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n        for an example of such pruning.\n\n        .. versionadded:: 0.22\n\n    Attributes\n    ----------\n    n_estimators_ : int\n        The number of estimators as selected by early stopping (if\n        ``n_iter_no_change`` is specified). Otherwise it is set to\n        ``n_estimators``.\n\n        .. versionadded:: 0.20\n\n    n_trees_per_iteration_ : int\n        The number of trees that are built at each iteration. For binary classifiers,\n        this is always 1.\n\n        .. versionadded:: 1.4.0\n\n    feature_importances_ : ndarray of shape (n_features,)\n        The impurity-based feature importances.\n        The higher, the more important the feature.\n        The importance of a feature is computed as the (normalized)\n        total reduction of the criterion brought by that feature.  It is also\n        known as the Gini importance.\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    oob_improvement_ : ndarray of shape (n_estimators,)\n        The improvement in loss on the out-of-bag samples\n        relative to the previous iteration.\n        ``oob_improvement_[0]`` is the improvement in\n        loss of the first stage over the ``init`` estimator.\n        Only available if ``subsample < 1.0``.\n\n    oob_scores_ : ndarray of shape (n_estimators,)\n        The full history of the loss values on the out-of-bag\n        samples. Only available if `subsample < 1.0`.\n\n        .. versionadded:: 1.3\n\n    oob_score_ : float\n        The last value of the loss on the out-of-bag samples. It is\n        the same as `oob_scores_[-1]`. Only available if `subsample < 1.0`.\n\n        .. versionadded:: 1.3\n\n    train_score_ : ndarray of shape (n_estimators,)\n        The i-th score ``train_score_[i]`` is the loss of the\n        model at iteration ``i`` on the in-bag sample.\n        If ``subsample == 1`` this is the loss on the training data.\n\n    init_ : estimator\n        The estimator that provides the initial predictions. Set via the ``init``\n        argument.\n\n    estimators_ : ndarray of DecisionTreeRegressor of             shape (n_estimators, ``n_trees_per_iteration_``)\n        The collection of fitted sub-estimators. ``n_trees_per_iteration_`` is 1 for\n        binary classification, otherwise ``n_classes``.\n\n    classes_ : ndarray of shape (n_classes,)\n        The classes labels.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_classes_ : int\n        The number of classes.\n\n    max_features_ : int\n        The inferred value of max_features.\n\n    See Also\n    --------\n    HistGradientBoostingClassifier : Histogram-based Gradient Boosting\n        Classification Tree.\n    sklearn.tree.DecisionTreeClassifier : A decision tree classifier.\n    RandomForestClassifier : A meta-estimator that fits a number of decision\n        tree classifiers on various sub-samples of the dataset and uses\n        averaging to improve the predictive accuracy and control over-fitting.\n    AdaBoostClassifier : A meta-estimator that begins by fitting a classifier\n        on the original dataset and then fits additional copies of the\n        classifier on the same dataset where the weights of incorrectly\n        classified instances are adjusted such that subsequent classifiers\n        focus more on difficult cases.\n\n    Notes\n    -----\n    The features are always randomly permuted at each split. Therefore,\n    the best found split may vary, even with the same training data and\n    ``max_features=n_features``, if the improvement of the criterion is\n    identical for several splits enumerated during the search of the best\n    split. To obtain a deterministic behaviour during fitting,\n    ``random_state`` has to be fixed.\n\n    References\n    ----------\n    J. Friedman, Greedy Function Approximation: A Gradient Boosting\n    Machine, The Annals of Statistics, Vol. 29, No. 5, 2001.\n\n    J. Friedman, Stochastic Gradient Boosting, 1999\n\n    T. Hastie, R. Tibshirani and J. Friedman.\n    Elements of Statistical Learning Ed. 2, Springer, 2009.\n\n    Examples\n    --------\n    The following example shows how to fit a gradient boosting classifier with\n    100 decision stumps as weak learners.\n\n    >>> from sklearn.datasets import make_hastie_10_2\n    >>> from sklearn.ensemble import GradientBoostingClassifier\n\n    >>> X, y = make_hastie_10_2(random_state=0)\n    >>> X_train, X_test = X[:2000], X[2000:]\n    >>> y_train, y_test = y[:2000], y[2000:]\n\n    >>> clf = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0,\n    ...     max_depth=1, random_state=0).fit(X_train, y_train)\n    >>> clf.score(X_test, y_test)\n    0.913...",
        "examples": "--------\n    The following example shows how to fit a gradient boosting classifier with\n    100 decision stumps as weak learners.\n\n    >>> from sklearn.datasets import make_hastie_10_2\n    >>> from sklearn.ensemble import GradientBoostingClassifier\n\n    >>> X, y = make_hastie_10_2(random_state=0)\n    >>> X_train, X_test = X[:2000], X[2000:]\n    >>> y_train, y_test = y[:2000], y[2000:]\n\n    >>> clf = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0,\n    ...     max_depth=1, random_state=0).fit(X_train, y_train)\n    >>> clf.score(X_test, y_test)\n    0.913..."
      },
      "methods": [
        {
          "name": "apply",
          "signature": "apply(self, X)",
          "documentation": {
            "description": "Apply trees in the ensemble to X, return leaf indices.\n\n        .. versionadded:: 0.17\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, its dtype will be converted to\n            ``dtype=np.float32``. If a sparse matrix is provided, it will\n            be converted to a sparse ``csr_matrix``.\n\n        Returns\n        -------\n        X_leaves : array-like of shape (n_samples, n_estimators, n_classes)\n            For each datapoint x in X and for each tree in the ensemble,",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples. Internally, its dtype will be converted to",
                "description": "``dtype=np.float32``. If a sparse matrix is provided, it will"
              },
              "be": {
                "type": "converted to a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "X_leaves": {
                "type": "array",
                "description": "like of shape (n_samples, n_estimators, n_classes)"
              },
              "For": {
                "type": "each datapoint x in X and for each tree in the ensemble,",
                "description": ""
              },
              "return": {
                "type": "the index of the leaf x ends up in each estimator.",
                "description": ""
              },
              "In": {
                "type": "the case of binary classification n_classes is 1.",
                "description": ""
              }
            },
            "returns": "the index of the leaf x ends up in each estimator.\n            In the case of binary classification n_classes is 1.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "decision_function",
          "signature": "decision_function(self, X)",
          "documentation": {
            "description": "Compute the decision function of ``X``.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "decision function of the input samples, which corresponds to",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "ndarray of shape (n_samples, n_classes) or (n_samples,)",
                "description": ""
              },
              "the": {
                "type": "raw values predicted from the trees of the ensemble . The",
                "description": ""
              },
              "order": {
                "type": "of the classes corresponds to that in the attribute",
                "description": ":term:`classes_`. Regression and binary classification produce an"
              },
              "array": {
                "type": "of shape (n_samples,).",
                "description": ""
              }
            },
            "returns": "-------\n        score : ndarray of shape (n_samples, n_classes) or (n_samples,)\n            The decision function of the input samples, which corresponds to\n            the raw values predicted from the trees of the ensemble . The\n            order of the classes corresponds to that in the attribute\n            :term:`classes_`. Regression and binary classification produce an\n            array of shape (n_samples,).",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None, monitor=None)",
          "documentation": {
            "description": "Fit the gradient boosting model.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        y : array-like of shape (n_samples,)\n            Target values (strings or integers in classification, real numbers\n            in regression)\n            For classification, labels must correspond to classes.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted. Splits\n            that would create child nodes with net zero or negative weight are\n            ignored while searching for a split in each node. In the case of\n            classification, splits are also ignored if they would result in any\n            single class carrying a negative weight in either child node.\n\n        monitor : callable, default=None\n            The monitor is called after each iteration with the current\n            iteration, a reference to the estimator and the local variables of\n            ``_fit_stages`` as keyword arguments ``callable(i, self,\n            locals())``. If the callable returns ``True`` the fitting procedure\n            is stopped. The monitor can be used for various things such as\n            computing held-out estimates, early stopping, model introspect, and\n            snapshotting.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "monitor is called after each iteration with the current",
                "description": "iteration, a reference to the estimator and the local variables of\n``_fit_stages`` as keyword arguments ``callable(i, self,"
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "Target": {
                "type": "values (strings or integers in classification, real numbers",
                "description": ""
              },
              "in": {
                "type": "regression)",
                "description": ""
              },
              "For": {
                "type": "classification, labels must correspond to classes.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted. Splits",
                "description": ""
              },
              "that": {
                "type": "would create child nodes with net zero or negative weight are",
                "description": ""
              },
              "ignored": {
                "type": "while searching for a split in each node. In the case of",
                "description": "classification, splits are also ignored if they would result in any"
              },
              "single": {
                "type": "class carrying a negative weight in either child node.",
                "description": ""
              },
              "monitor": {
                "type": "callable, default=None",
                "description": ""
              },
              "locals": {
                "type": "",
                "description": ")``. If the callable returns ``True`` the fitting procedure"
              },
              "is": {
                "type": "stopped. The monitor can be used for various things such as",
                "description": ""
              },
              "computing": {
                "type": "held-out estimates, early stopping, model introspect, and",
                "description": "snapshotting.\nReturns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "Fitted": {
                "type": "estimator.",
                "description": ""
              }
            },
            "returns": "-------\n        self : object\n            Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRequest\n            A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "documentation": {
            "description": "Predict class for X.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted values.",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "y": {
                "type": "ndarray of shape (n_samples,)",
                "description": ""
              }
            },
            "returns": "-------\n        y : ndarray of shape (n_samples,)\n            The predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_log_proba",
          "signature": "predict_log_proba(self, X)",
          "documentation": {
            "description": "Predict class log-probabilities for X.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        Returns\n        -------\n        p : ndarray of shape (n_samples, n_classes)\n            The class log-probabilities of the input samples. The order of the\n            classes corresponds to that in the attribute :term:`classes_`.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "class log-probabilities of the input samples. The order of the",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "p": {
                "type": "ndarray of shape (n_samples, n_classes)",
                "description": ""
              },
              "classes": {
                "type": "corresponds to that in the attribute :term:`classes_`.",
                "description": "Raises\n------\nAttributeError"
              },
              "If": {
                "type": "the ``loss`` does not support probabilities.",
                "description": ""
              }
            },
            "returns": "-------\n        p : ndarray of shape (n_samples, n_classes)\n            The class log-probabilities of the input samples. The order of the\n            classes corresponds to that in the attribute :term:`classes_`.\n\n        Raises\n        ------\n        AttributeError\n            If the ``loss`` does not support probabilities.",
            "raises": "------\n        AttributeError\n            If the ``loss`` does not support probabilities.",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_proba",
          "signature": "predict_proba(self, X)",
          "documentation": {
            "description": "Predict class probabilities for X.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        Returns\n        -------\n        p : ndarray of shape (n_samples, n_classes)\n            The class probabilities of the input samples. The order of the\n            classes corresponds to that in the attribute :term:`classes_`.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "class probabilities of the input samples. The order of the",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "p": {
                "type": "ndarray of shape (n_samples, n_classes)",
                "description": ""
              },
              "classes": {
                "type": "corresponds to that in the attribute :term:`classes_`.",
                "description": "Raises\n------\nAttributeError"
              },
              "If": {
                "type": "the ``loss`` does not support probabilities.",
                "description": ""
              }
            },
            "returns": "-------\n        p : ndarray of shape (n_samples, n_classes)\n            The class probabilities of the input samples. The order of the\n            classes corresponds to that in the attribute :term:`classes_`.\n\n        Raises\n        ------\n        AttributeError\n            If the ``loss`` does not support probabilities.",
            "raises": "------\n        AttributeError\n            If the ``loss`` does not support probabilities.",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "labels for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ""
              },
              "Mean": {
                "type": "accuracy of ``self.predict(X)`` w.r.t. `y`.",
                "description": ""
              }
            },
            "returns": "the mean accuracy on the given test data and labels.\n\n        In multi-label classification, this is the subset accuracy\n        which is a harsh metric since you require for each sample that\n        each label set be correctly predicted.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True labels for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.ensemble._gb.GradientBoostingClassifier, *, monitor: Union[bool, NoneType, str] = '$UNCHANGED$', sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._gb.GradientBoostingClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "monitor": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        monitor : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``monitor`` parameter in ``fit``.\n\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.ensemble._gb.GradientBoostingClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._gb.GradientBoostingClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "staged_decision_function",
          "signature": "staged_decision_function(self, X)",
          "documentation": {
            "description": "Compute decision function of ``X`` for each iteration.\n\n        This method allows monitoring (i.e. determine error on testing set)\n        after each stage.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "decision function of the input samples, which corresponds to",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": "Yields\n------"
              },
              "score": {
                "type": "generator of ndarray of shape (n_samples, k)",
                "description": ""
              },
              "the": {
                "type": "raw values predicted from the trees of the ensemble . The",
                "description": ""
              },
              "classes": {
                "type": "corresponds to that in the attribute :term:`classes_`.",
                "description": ""
              },
              "Regression": {
                "type": "and binary classification are special cases with",
                "description": "``k == 1``, otherwise ``k==n_classes``."
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "staged_predict",
          "signature": "staged_predict(self, X)",
          "documentation": {
            "description": "Predict class at each stage for X.\n\n        This method allows monitoring (i.e. determine error on testing set)\n        after each stage.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted value of the input samples.",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": "Yields\n------"
              },
              "y": {
                "type": "generator of ndarray of shape (n_samples,)",
                "description": ""
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "staged_predict_proba",
          "signature": "staged_predict_proba(self, X)",
          "documentation": {
            "description": "Predict class probabilities at each stage for X.\n\n        This method allows monitoring (i.e. determine error on testing set)\n        after each stage.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted value of the input samples.",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": "Yields\n------"
              },
              "y": {
                "type": "generator of ndarray of shape (n_samples,)",
                "description": ""
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "GradientBoostingRegressor",
      "documentation": {
        "description": "Gradient Boosting for regression.\n\n    This estimator builds an additive model in a forward stage-wise fashion; it\n    allows for the optimization of arbitrary differentiable loss functions. In\n    each stage a regression tree is fit on the negative gradient of the given\n    loss function.\n\n    :class:`~sklearn.ensemble.HistGradientBoostingRegressor` is a much faster variant\n    of this algorithm for intermediate and large datasets (`n_samples >= 10_000`) and\n    supports monotonic constraints.\n\n    Read more in the :ref:`User Guide <gradient_boosting>`.\n\n    Parameters\n    ----------\n    loss : {'squared_error', 'absolute_error', 'huber', 'quantile'},             default='squared_error'\n        Loss function to be optimized. 'squared_error' refers to the squared\n        error for regression. 'absolute_error' refers to the absolute error of\n        regression and is a robust loss function. 'huber' is a\n        combination of the two. 'quantile' allows quantile regression (use\n        `alpha` to specify the quantile).\n        See\n        :ref:`sphx_glr_auto_examples_ensemble_plot_gradient_boosting_quantile.py`\n        for an example that demonstrates quantile regression for creating\n        prediction intervals with `loss='quantile'`.\n\n    learning_rate : float, default=0.1\n        Learning rate shrinks the contribution of each tree by `learning_rate`.\n        There is a trade-off between learning_rate and n_estimators.\n        Values must be in the range `[0.0, inf)`.\n\n    n_estimators : int, default=100\n        The number of boosting stages to perform. Gradient boosting\n        is fairly robust to over-fitting so a large number usually\n        results in better performance.\n        Values must be in the range `[1, inf)`.\n\n    subsample : float, default=1.0\n        The fraction of samples to be used for fitting the individual base\n        learners. If smaller than 1.0 this results in Stochastic Gradient\n        Boosting. `subsample` interacts with the parameter `n_estimators`.\n        Choosing `subsample < 1.0` leads to a reduction of variance\n        and an increase in bias.\n        Values must be in the range `(0.0, 1.0]`.\n\n    criterion : {'friedman_mse', 'squared_error'}, default='friedman_mse'\n        The function to measure the quality of a split. Supported criteria are\n        \"friedman_mse\" for the mean squared error with improvement score by\n        Friedman, \"squared_error\" for mean squared error. The default value of\n        \"friedman_mse\" is generally the best as it can provide a better\n        approximation in some cases.\n\n        .. versionadded:: 0.18\n\n    min_samples_split : int or float, default=2\n        The minimum number of samples required to split an internal node:\n\n        - If int, values must be in the range `[2, inf)`.\n        - If float, values must be in the range `(0.0, 1.0]` and `min_samples_split`\n          will be `ceil(min_samples_split * n_samples)`.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_samples_leaf : int or float, default=1\n        The minimum number of samples required to be at a leaf node.\n        A split point at any depth will only be considered if it leaves at\n        least ``min_samples_leaf`` training samples in each of the left and\n        right branches.  This may have the effect of smoothing the model,\n        especially in regression.\n\n        - If int, values must be in the range `[1, inf)`.\n        - If float, values must be in the range `(0.0, 1.0)` and `min_samples_leaf`\n          will be `ceil(min_samples_leaf * n_samples)`.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_weight_fraction_leaf : float, default=0.0\n        The minimum weighted fraction of the sum total of weights (of all\n        the input samples) required to be at a leaf node. Samples have\n        equal weight when sample_weight is not provided.\n        Values must be in the range `[0.0, 0.5]`.\n\n    max_depth : int or None, default=3\n        Maximum depth of the individual regression estimators. The maximum\n        depth limits the number of nodes in the tree. Tune this parameter\n        for best performance; the best value depends on the interaction\n        of the input variables. If None, then nodes are expanded until\n        all leaves are pure or until all leaves contain less than\n        min_samples_split samples.\n        If int, values must be in the range `[1, inf)`.\n\n    min_impurity_decrease : float, default=0.0\n        A node will be split if this split induces a decrease of the impurity\n        greater than or equal to this value.\n        Values must be in the range `[0.0, inf)`.\n\n        The weighted impurity decrease equation is the following::\n\n            N_t / N * (impurity - N_t_R / N_t * right_impurity\n                                - N_t_L / N_t * left_impurity)\n\n        where ``N`` is the total number of samples, ``N_t`` is the number of\n        samples at the current node, ``N_t_L`` is the number of samples in the\n        left child, and ``N_t_R`` is the number of samples in the right child.\n\n        ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n        if ``sample_weight`` is passed.\n\n        .. versionadded:: 0.19\n\n    init : estimator or 'zero', default=None\n        An estimator object that is used to compute the initial predictions.\n        ``init`` has to provide :term:`fit` and :term:`predict`. If 'zero', the\n        initial raw predictions are set to zero. By default a\n        ``DummyEstimator`` is used, predicting either the average target value\n        (for loss='squared_error'), or a quantile for the other losses.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls the random seed given to each Tree estimator at each\n        boosting iteration.\n        In addition, it controls the random permutation of the features at\n        each split (see Notes for more details).\n        It also controls the random splitting of the training data to obtain a\n        validation set if `n_iter_no_change` is not None.\n        Pass an int for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    max_features : {'sqrt', 'log2'}, int or float, default=None\n        The number of features to consider when looking for the best split:\n\n        - If int, values must be in the range `[1, inf)`.\n        - If float, values must be in the range `(0.0, 1.0]` and the features\n          considered at each split will be `max(1, int(max_features * n_features_in_))`.\n        - If \"sqrt\", then `max_features=sqrt(n_features)`.\n        - If \"log2\", then `max_features=log2(n_features)`.\n        - If None, then `max_features=n_features`.\n\n        Choosing `max_features < n_features` leads to a reduction of variance\n        and an increase in bias.\n\n        Note: the search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features.\n\n    alpha : float, default=0.9\n        The alpha-quantile of the huber loss function and the quantile\n        loss function. Only if ``loss='huber'`` or ``loss='quantile'``.\n        Values must be in the range `(0.0, 1.0)`.\n\n    verbose : int, default=0\n        Enable verbose output. If 1 then it prints progress and performance\n        once in a while (the more trees the lower the frequency). If greater\n        than 1 then it prints progress and performance for every tree.\n        Values must be in the range `[0, inf)`.\n\n    max_leaf_nodes : int, default=None\n        Grow trees with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        Values must be in the range `[2, inf)`.\n        If None, then unlimited number of leaf nodes.\n\n    warm_start : bool, default=False\n        When set to ``True``, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble, otherwise, just erase the\n        previous solution. See :term:`the Glossary <warm_start>`.\n\n    validation_fraction : float, default=0.1\n        The proportion of training data to set aside as validation set for\n        early stopping. Values must be in the range `(0.0, 1.0)`.\n        Only used if ``n_iter_no_change`` is set to an integer.\n\n        .. versionadded:: 0.20\n\n    n_iter_no_change : int, default=None\n        ``n_iter_no_change`` is used to decide if early stopping will be used\n        to terminate training when validation score is not improving. By\n        default it is set to None to disable early stopping. If set to a\n        number, it will set aside ``validation_fraction`` size of the training\n        data as validation and terminate training when validation score is not\n        improving in all of the previous ``n_iter_no_change`` numbers of\n        iterations.\n        Values must be in the range `[1, inf)`.\n        See\n        :ref:`sphx_glr_auto_examples_ensemble_plot_gradient_boosting_early_stopping.py`.\n\n        .. versionadded:: 0.20\n\n    tol : float, default=1e-4\n        Tolerance for the early stopping. When the loss is not improving\n        by at least tol for ``n_iter_no_change`` iterations (if set to a\n        number), the training stops.\n        Values must be in the range `[0.0, inf)`.\n\n        .. versionadded:: 0.20\n\n    ccp_alpha : non-negative float, default=0.0\n        Complexity parameter used for Minimal Cost-Complexity Pruning. The\n        subtree with the largest cost complexity that is smaller than\n        ``ccp_alpha`` will be chosen. By default, no pruning is performed.\n        Values must be in the range `[0.0, inf)`.\n        See :ref:`minimal_cost_complexity_pruning` for details. See\n        :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n        for an example of such pruning.\n\n        .. versionadded:: 0.22\n\n    Attributes\n    ----------\n    n_estimators_ : int\n        The number of estimators as selected by early stopping (if\n        ``n_iter_no_change`` is specified). Otherwise it is set to\n        ``n_estimators``.\n\n    n_trees_per_iteration_ : int\n        The number of trees that are built at each iteration. For regressors, this is\n        always 1.\n\n        .. versionadded:: 1.4.0\n\n    feature_importances_ : ndarray of shape (n_features,)\n        The impurity-based feature importances.\n        The higher, the more important the feature.\n        The importance of a feature is computed as the (normalized)\n        total reduction of the criterion brought by that feature.  It is also\n        known as the Gini importance.\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    oob_improvement_ : ndarray of shape (n_estimators,)\n        The improvement in loss on the out-of-bag samples\n        relative to the previous iteration.\n        ``oob_improvement_[0]`` is the improvement in\n        loss of the first stage over the ``init`` estimator.\n        Only available if ``subsample < 1.0``.\n\n    oob_scores_ : ndarray of shape (n_estimators,)\n        The full history of the loss values on the out-of-bag\n        samples. Only available if `subsample < 1.0`.\n\n        .. versionadded:: 1.3\n\n    oob_score_ : float\n        The last value of the loss on the out-of-bag samples. It is\n        the same as `oob_scores_[-1]`. Only available if `subsample < 1.0`.\n\n        .. versionadded:: 1.3\n\n    train_score_ : ndarray of shape (n_estimators,)\n        The i-th score ``train_score_[i]`` is the loss of the\n        model at iteration ``i`` on the in-bag sample.\n        If ``subsample == 1`` this is the loss on the training data.\n\n    init_ : estimator\n        The estimator that provides the initial predictions. Set via the ``init``\n        argument.\n\n    estimators_ : ndarray of DecisionTreeRegressor of shape (n_estimators, 1)\n        The collection of fitted sub-estimators.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    max_features_ : int\n        The inferred value of max_features.\n\n    See Also\n    --------\n    HistGradientBoostingRegressor : Histogram-based Gradient Boosting\n        Classification Tree.\n    sklearn.tree.DecisionTreeRegressor : A decision tree regressor.\n    sklearn.ensemble.RandomForestRegressor : A random forest regressor.\n\n    Notes\n    -----\n    The features are always randomly permuted at each split. Therefore,\n    the best found split may vary, even with the same training data and\n    ``max_features=n_features``, if the improvement of the criterion is\n    identical for several splits enumerated during the search of the best\n    split. To obtain a deterministic behaviour during fitting,\n    ``random_state`` has to be fixed.\n\n    References\n    ----------\n    J. Friedman, Greedy Function Approximation: A Gradient Boosting\n    Machine, The Annals of Statistics, Vol. 29, No. 5, 2001.\n\n    J. Friedman, Stochastic Gradient Boosting, 1999\n\n    T. Hastie, R. Tibshirani and J. Friedman.\n    Elements of Statistical Learning Ed. 2, Springer, 2009.",
        "parameters": {
          "loss": {
            "type": "of the first stage over the ``init`` estimator.",
            "description": ""
          },
          "Loss": {
            "type": "function to be optimized. 'squared_error' refers to the squared",
            "description": ""
          },
          "error": {
            "type": "for regression. 'absolute_error' refers to the absolute error of",
            "description": ""
          },
          "regression": {
            "type": "and is a robust loss function. 'huber' is a",
            "description": ""
          },
          "combination": {
            "type": "of the two. 'quantile' allows quantile regression (use",
            "description": "`alpha` to specify the quantile).\nSee\n:ref:`sphx_glr_auto_examples_ensemble_plot_gradient_boosting_quantile.py`"
          },
          "for": {
            "type": "an example of such pruning.",
            "description": ".. versionadded:: 0.22\nAttributes\n----------"
          },
          "prediction": {
            "type": "intervals with `loss='quantile'`.",
            "description": ""
          },
          "learning_rate": {
            "type": "float, default=0.1",
            "description": ""
          },
          "Learning": {
            "type": "rate shrinks the contribution of each tree by `learning_rate`.",
            "description": ""
          },
          "There": {
            "type": "is a trade-off between learning_rate and n_estimators.",
            "description": ""
          },
          "Values": {
            "type": "must be in the range `[0.0, inf)`.",
            "description": ""
          },
          "n_estimators": {
            "type": "int, default=100",
            "description": ""
          },
          "The": {
            "type": "features are always randomly permuted at each split. Therefore,",
            "description": ""
          },
          "is": {
            "type": "fairly robust to over-fitting so a large number usually",
            "description": ""
          },
          "results": {
            "type": "in better performance.",
            "description": ""
          },
          "subsample": {
            "type": "float, default=1.0",
            "description": ""
          },
          "Choosing": {
            "type": "`max_features < n_features` leads to a reduction of variance",
            "description": ""
          },
          "and": {
            "type": "add more estimators to the ensemble, otherwise, just erase the",
            "description": ""
          },
          "criterion": {
            "type": "{'friedman_mse', 'squared_error'}, default='friedman_mse'",
            "description": ""
          },
          "approximation": {
            "type": "in some cases.",
            "description": ".. versionadded:: 0.18"
          },
          "min_samples_split": {
            "type": "samples.",
            "description": ""
          },
          "will": {
            "type": "be `ceil(min_samples_leaf * n_samples)`.",
            "description": ".. versionchanged:: 0.18"
          },
          "Added": {
            "type": "float values for fractions.",
            "description": ""
          },
          "min_samples_leaf": {
            "type": "int or float, default=1",
            "description": ""
          },
          "A": {
            "type": "node will be split if this split induces a decrease of the impurity",
            "description": ""
          },
          "least": {
            "type": "``min_samples_leaf`` training samples in each of the left and",
            "description": ""
          },
          "right": {
            "type": "branches.  This may have the effect of smoothing the model,",
            "description": ""
          },
          "especially": {
            "type": "in regression.",
            "description": "- If int, values must be in the range `[1, inf)`.\n- If float, values must be in the range `(0.0, 1.0)` and `min_samples_leaf`"
          },
          "min_weight_fraction_leaf": {
            "type": "float, default=0.0",
            "description": ""
          },
          "the": {
            "type": "best found split may vary, even with the same training data and",
            "description": "``max_features=n_features``, if the improvement of the criterion is"
          },
          "equal": {
            "type": "weight when sample_weight is not provided.",
            "description": ""
          },
          "max_depth": {
            "type": "int or None, default=3",
            "description": ""
          },
          "Maximum": {
            "type": "depth of the individual regression estimators. The maximum",
            "description": ""
          },
          "depth": {
            "type": "limits the number of nodes in the tree. Tune this parameter",
            "description": ""
          },
          "of": {
            "type": "the input variables. If None, then nodes are expanded until",
            "description": ""
          },
          "all": {
            "type": "leaves are pure or until all leaves contain less than",
            "description": ""
          },
          "If": {
            "type": "``subsample == 1`` this is the loss on the training data.",
            "description": ""
          },
          "min_impurity_decrease": {
            "type": "float, default=0.0",
            "description": ""
          },
          "greater": {
            "type": "than or equal to this value.",
            "description": ""
          },
          "N_t": {
            "type": "/ N * (impurity - N_t_R / N_t * right_impurity",
            "description": "- N_t_L / N_t * left_impurity)"
          },
          "where": {
            "type": "``N`` is the total number of samples, ``N_t`` is the number of",
            "description": ""
          },
          "samples": {
            "type": "at the current node, ``N_t_L`` is the number of samples in the",
            "description": ""
          },
          "left": {
            "type": "child, and ``N_t_R`` is the number of samples in the right child.",
            "description": "``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,"
          },
          "if": {
            "type": "``sample_weight`` is passed.",
            "description": ".. versionadded:: 0.19"
          },
          "init": {
            "type": "estimator or 'zero', default=None",
            "description": ""
          },
          "An": {
            "type": "estimator object that is used to compute the initial predictions.",
            "description": "``init`` has to provide :term:`fit` and :term:`predict`. If 'zero', the"
          },
          "initial": {
            "type": "raw predictions are set to zero. By default a",
            "description": "``DummyEstimator`` is used, predicting either the average target value\n(for loss='squared_error'), or a quantile for the other losses."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Controls": {
            "type": "the random seed given to each Tree estimator at each",
            "description": ""
          },
          "boosting": {
            "type": "iteration.",
            "description": ""
          },
          "In": {
            "type": "addition, it controls the random permutation of the features at",
            "description": ""
          },
          "each": {
            "type": "split (see Notes for more details).",
            "description": ""
          },
          "It": {
            "type": "also controls the random splitting of the training data to obtain a",
            "description": ""
          },
          "validation": {
            "type": "set if `n_iter_no_change` is not None.",
            "description": ""
          },
          "Pass": {
            "type": "an int for reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "max_features": {
            "type": "{'sqrt', 'log2'}, int or float, default=None",
            "description": ""
          },
          "considered": {
            "type": "at each split will be `max(1, int(max_features * n_features_in_))`.",
            "description": "- If \"sqrt\", then `max_features=sqrt(n_features)`.\n- If \"log2\", then `max_features=log2(n_features)`.\n- If None, then `max_features=n_features`."
          },
          "Note": {
            "type": "the search for a split does not stop until at least one",
            "description": ""
          },
          "valid": {
            "type": "partition of the node samples is found, even if it requires to",
            "description": ""
          },
          "effectively": {
            "type": "inspect more than ``max_features`` features.",
            "description": ""
          },
          "alpha": {
            "type": "float, default=0.9",
            "description": ""
          },
          "verbose": {
            "type": "int, default=0",
            "description": ""
          },
          "Enable": {
            "type": "verbose output. If 1 then it prints progress and performance",
            "description": ""
          },
          "once": {
            "type": "in a while (the more trees the lower the frequency). If greater",
            "description": ""
          },
          "than": {
            "type": "1 then it prints progress and performance for every tree.",
            "description": ""
          },
          "max_leaf_nodes": {
            "type": "int, default=None",
            "description": ""
          },
          "Grow": {
            "type": "trees with ``max_leaf_nodes`` in best-first fashion.",
            "description": ""
          },
          "Best": {
            "type": "nodes are defined as relative reduction in impurity.",
            "description": ""
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": ""
          },
          "When": {
            "type": "set to ``True``, reuse the solution of the previous call to fit",
            "description": ""
          },
          "previous": {
            "type": "solution. See :term:`the Glossary <warm_start>`.",
            "description": ""
          },
          "validation_fraction": {
            "type": "float, default=0.1",
            "description": ""
          },
          "early": {
            "type": "stopping. Values must be in the range `(0.0, 1.0)`.",
            "description": ""
          },
          "Only": {
            "type": "available if ``subsample < 1.0``.",
            "description": ""
          },
          "n_iter_no_change": {
            "type": "int, default=None",
            "description": "``n_iter_no_change`` is used to decide if early stopping will be used"
          },
          "to": {
            "type": "fit an ensemble of weak predictive models, please refer to",
            "description": ":ref:`sphx_glr_auto_examples_ensemble_plot_gradient_boosting_regression.py`."
          },
          "default": {
            "type": "it is set to None to disable early stopping. If set to a",
            "description": "number, it will set aside ``validation_fraction`` size of the training"
          },
          "data": {
            "type": "as validation and terminate training when validation score is not",
            "description": ""
          },
          "improving": {
            "type": "in all of the previous ``n_iter_no_change`` numbers of",
            "description": "iterations."
          },
          "tol": {
            "type": "float, default=1e",
            "description": "4"
          },
          "Tolerance": {
            "type": "for the early stopping. When the loss is not improving",
            "description": ""
          },
          "by": {
            "type": "at least tol for ``n_iter_no_change`` iterations (if set to a",
            "description": "number), the training stops."
          },
          "ccp_alpha": {
            "type": "non",
            "description": "negative float, default=0.0"
          },
          "Complexity": {
            "type": "parameter used for Minimal Cost-Complexity Pruning. The",
            "description": ""
          },
          "subtree": {
            "type": "with the largest cost complexity that is smaller than",
            "description": "``ccp_alpha`` will be chosen. By default, no pruning is performed."
          },
          "n_estimators_": {
            "type": "int",
            "description": ""
          },
          "n_trees_per_iteration_": {
            "type": "int",
            "description": ""
          },
          "always": {
            "type": "1.",
            "description": ".. versionadded:: 1.4.0"
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": ""
          },
          "total": {
            "type": "reduction of the criterion brought by that feature.  It is also",
            "description": ""
          },
          "known": {
            "type": "as the Gini importance.",
            "description": ""
          },
          "Warning": {
            "type": "impurity",
            "description": "based feature importances can be misleading for"
          },
          "high": {
            "type": "cardinality features (many unique values). See",
            "description": ":func:`sklearn.inspection.permutation_importance` as an alternative."
          },
          "oob_improvement_": {
            "type": "ndarray of shape (n_estimators,)",
            "description": ""
          },
          "relative": {
            "type": "to the previous iteration.",
            "description": "``oob_improvement_[0]`` is the improvement in"
          },
          "oob_scores_": {
            "type": "ndarray of shape (n_estimators,)",
            "description": ""
          },
          "oob_score_": {
            "type": "float",
            "description": ""
          },
          "train_score_": {
            "type": "ndarray of shape (n_estimators,)",
            "description": ""
          },
          "model": {
            "type": "at iteration ``i`` on the in-bag sample.",
            "description": ""
          },
          "init_": {
            "type": "estimator",
            "description": ""
          },
          "estimators_": {
            "type": "ndarray of DecisionTreeRegressor of shape (n_estimators, 1)",
            "description": ""
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`.",
            "description": ".. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "max_features_": {
            "type": "int",
            "description": ""
          },
          "HistGradientBoostingRegressor": {
            "type": "Histogram",
            "description": "based Gradient Boosting"
          },
          "Classification": {
            "type": "Tree.",
            "description": "sklearn.tree.DecisionTreeRegressor : A decision tree regressor.\nsklearn.ensemble.RandomForestRegressor : A random forest regressor.\nNotes\n-----"
          },
          "identical": {
            "type": "for several splits enumerated during the search of the best",
            "description": "split. To obtain a deterministic behaviour during fitting,\n``random_state`` has to be fixed.\nReferences\n----------\nJ. Friedman, Greedy Function Approximation: A Gradient Boosting\nMachine, The Annals of Statistics, Vol. 29, No. 5, 2001.\nJ. Friedman, Stochastic Gradient Boosting, 1999\nT. Hastie, R. Tibshirani and J. Friedman."
          },
          "Elements": {
            "type": "of Statistical Learning Ed. 2, Springer, 2009.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import make_regression\n>>> from sklearn.ensemble import GradientBoostingRegressor\n>>> from sklearn.model_selection import train_test_split\n>>> X, y = make_regression(random_state=0)\n>>> X_train, X_test, y_train, y_test = train_test_split(\n...     X, y, random_state=0)\n>>> reg = GradientBoostingRegressor(random_state=0)\n>>> reg.fit(X_train, y_train)"
          },
          "GradientBoostingRegressor": {
            "type": "random_state=0",
            "description": ">>> reg.predict(X_test[1:2])"
          },
          "array": {
            "type": "[-61...]",
            "description": ">>> reg.score(X_test, y_test)\n0.4..."
          },
          "For": {
            "type": "a detailed example of utilizing",
            "description": ":class:`~sklearn.ensemble.GradientBoostingRegressor`"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    HistGradientBoostingRegressor : Histogram-based Gradient Boosting\n        Classification Tree.\n    sklearn.tree.DecisionTreeRegressor : A decision tree regressor.\n    sklearn.ensemble.RandomForestRegressor : A random forest regressor.\n\n    Notes\n    -----\n    The features are always randomly permuted at each split. Therefore,\n    the best found split may vary, even with the same training data and\n    ``max_features=n_features``, if the improvement of the criterion is\n    identical for several splits enumerated during the search of the best\n    split. To obtain a deterministic behaviour during fitting,\n    ``random_state`` has to be fixed.\n\n    References\n    ----------\n    J. Friedman, Greedy Function Approximation: A Gradient Boosting\n    Machine, The Annals of Statistics, Vol. 29, No. 5, 2001.\n\n    J. Friedman, Stochastic Gradient Boosting, 1999\n\n    T. Hastie, R. Tibshirani and J. Friedman.\n    Elements of Statistical Learning Ed. 2, Springer, 2009.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_regression\n    >>> from sklearn.ensemble import GradientBoostingRegressor\n    >>> from sklearn.model_selection import train_test_split\n    >>> X, y = make_regression(random_state=0)\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...     X, y, random_state=0)\n    >>> reg = GradientBoostingRegressor(random_state=0)\n    >>> reg.fit(X_train, y_train)\n    GradientBoostingRegressor(random_state=0)\n    >>> reg.predict(X_test[1:2])\n    array([-61...])\n    >>> reg.score(X_test, y_test)\n    0.4...\n\n    For a detailed example of utilizing\n    :class:`~sklearn.ensemble.GradientBoostingRegressor`\n    to fit an ensemble of weak predictive models, please refer to\n    :ref:`sphx_glr_auto_examples_ensemble_plot_gradient_boosting_regression.py`.",
        "notes": "the search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features.\n\n    alpha : float, default=0.9\n        The alpha-quantile of the huber loss function and the quantile\n        loss function. Only if ``loss='huber'`` or ``loss='quantile'``.\n        Values must be in the range `(0.0, 1.0)`.\n\n    verbose : int, default=0\n        Enable verbose output. If 1 then it prints progress and performance\n        once in a while (the more trees the lower the frequency). If greater\n        than 1 then it prints progress and performance for every tree.\n        Values must be in the range `[0, inf)`.\n\n    max_leaf_nodes : int, default=None\n        Grow trees with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        Values must be in the range `[2, inf)`.\n        If None, then unlimited number of leaf nodes.\n\n    warm_start : bool, default=False\n        When set to ``True``, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble, otherwise, just erase the\n        previous solution. See :term:`the Glossary <warm_start>`.\n\n    validation_fraction : float, default=0.1\n        The proportion of training data to set aside as validation set for\n        early stopping. Values must be in the range `(0.0, 1.0)`.\n        Only used if ``n_iter_no_change`` is set to an integer.\n\n        .. versionadded:: 0.20\n\n    n_iter_no_change : int, default=None\n        ``n_iter_no_change`` is used to decide if early stopping will be used\n        to terminate training when validation score is not improving. By\n        default it is set to None to disable early stopping. If set to a\n        number, it will set aside ``validation_fraction`` size of the training\n        data as validation and terminate training when validation score is not\n        improving in all of the previous ``n_iter_no_change`` numbers of\n        iterations.\n        Values must be in the range `[1, inf)`.\n        See\n        :ref:`sphx_glr_auto_examples_ensemble_plot_gradient_boosting_early_stopping.py`.\n\n        .. versionadded:: 0.20\n\n    tol : float, default=1e-4\n        Tolerance for the early stopping. When the loss is not improving\n        by at least tol for ``n_iter_no_change`` iterations (if set to a\n        number), the training stops.\n        Values must be in the range `[0.0, inf)`.\n\n        .. versionadded:: 0.20\n\n    ccp_alpha : non-negative float, default=0.0\n        Complexity parameter used for Minimal Cost-Complexity Pruning. The\n        subtree with the largest cost complexity that is smaller than\n        ``ccp_alpha`` will be chosen. By default, no pruning is performed.\n        Values must be in the range `[0.0, inf)`.\n        See :ref:`minimal_cost_complexity_pruning` for details. See\n        :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n        for an example of such pruning.\n\n        .. versionadded:: 0.22\n\n    Attributes\n    ----------\n    n_estimators_ : int\n        The number of estimators as selected by early stopping (if\n        ``n_iter_no_change`` is specified). Otherwise it is set to\n        ``n_estimators``.\n\n    n_trees_per_iteration_ : int\n        The number of trees that are built at each iteration. For regressors, this is\n        always 1.\n\n        .. versionadded:: 1.4.0\n\n    feature_importances_ : ndarray of shape (n_features,)\n        The impurity-based feature importances.\n        The higher, the more important the feature.\n        The importance of a feature is computed as the (normalized)\n        total reduction of the criterion brought by that feature.  It is also\n        known as the Gini importance.\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    oob_improvement_ : ndarray of shape (n_estimators,)\n        The improvement in loss on the out-of-bag samples\n        relative to the previous iteration.\n        ``oob_improvement_[0]`` is the improvement in\n        loss of the first stage over the ``init`` estimator.\n        Only available if ``subsample < 1.0``.\n\n    oob_scores_ : ndarray of shape (n_estimators,)\n        The full history of the loss values on the out-of-bag\n        samples. Only available if `subsample < 1.0`.\n\n        .. versionadded:: 1.3\n\n    oob_score_ : float\n        The last value of the loss on the out-of-bag samples. It is\n        the same as `oob_scores_[-1]`. Only available if `subsample < 1.0`.\n\n        .. versionadded:: 1.3\n\n    train_score_ : ndarray of shape (n_estimators,)\n        The i-th score ``train_score_[i]`` is the loss of the\n        model at iteration ``i`` on the in-bag sample.\n        If ``subsample == 1`` this is the loss on the training data.\n\n    init_ : estimator\n        The estimator that provides the initial predictions. Set via the ``init``\n        argument.\n\n    estimators_ : ndarray of DecisionTreeRegressor of shape (n_estimators, 1)\n        The collection of fitted sub-estimators.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    max_features_ : int\n        The inferred value of max_features.\n\n    See Also\n    --------\n    HistGradientBoostingRegressor : Histogram-based Gradient Boosting\n        Classification Tree.\n    sklearn.tree.DecisionTreeRegressor : A decision tree regressor.\n    sklearn.ensemble.RandomForestRegressor : A random forest regressor.\n\n    Notes\n    -----\n    The features are always randomly permuted at each split. Therefore,\n    the best found split may vary, even with the same training data and\n    ``max_features=n_features``, if the improvement of the criterion is\n    identical for several splits enumerated during the search of the best\n    split. To obtain a deterministic behaviour during fitting,\n    ``random_state`` has to be fixed.\n\n    References\n    ----------\n    J. Friedman, Greedy Function Approximation: A Gradient Boosting\n    Machine, The Annals of Statistics, Vol. 29, No. 5, 2001.\n\n    J. Friedman, Stochastic Gradient Boosting, 1999\n\n    T. Hastie, R. Tibshirani and J. Friedman.\n    Elements of Statistical Learning Ed. 2, Springer, 2009.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_regression\n    >>> from sklearn.ensemble import GradientBoostingRegressor\n    >>> from sklearn.model_selection import train_test_split\n    >>> X, y = make_regression(random_state=0)\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...     X, y, random_state=0)\n    >>> reg = GradientBoostingRegressor(random_state=0)\n    >>> reg.fit(X_train, y_train)\n    GradientBoostingRegressor(random_state=0)\n    >>> reg.predict(X_test[1:2])\n    array([-61...])\n    >>> reg.score(X_test, y_test)\n    0.4...\n\n    For a detailed example of utilizing\n    :class:`~sklearn.ensemble.GradientBoostingRegressor`\n    to fit an ensemble of weak predictive models, please refer to\n    :ref:`sphx_glr_auto_examples_ensemble_plot_gradient_boosting_regression.py`.",
        "examples": "--------\n    >>> from sklearn.datasets import make_regression\n    >>> from sklearn.ensemble import GradientBoostingRegressor\n    >>> from sklearn.model_selection import train_test_split\n    >>> X, y = make_regression(random_state=0)\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...     X, y, random_state=0)\n    >>> reg = GradientBoostingRegressor(random_state=0)\n    >>> reg.fit(X_train, y_train)\n    GradientBoostingRegressor(random_state=0)\n    >>> reg.predict(X_test[1:2])\n    array([-61...])\n    >>> reg.score(X_test, y_test)\n    0.4...\n\n    For a detailed example of utilizing\n    :class:`~sklearn.ensemble.GradientBoostingRegressor`\n    to fit an ensemble of weak predictive models, please refer to\n    :ref:`sphx_glr_auto_examples_ensemble_plot_gradient_boosting_regression.py`."
      },
      "methods": [
        {
          "name": "apply",
          "signature": "apply(self, X)",
          "documentation": {
            "description": "Apply trees in the ensemble to X, return leaf indices.\n\n        .. versionadded:: 0.17\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, its dtype will be converted to\n            ``dtype=np.float32``. If a sparse matrix is provided, it will\n            be converted to a sparse ``csr_matrix``.\n\n        Returns\n        -------\n        X_leaves : array-like of shape (n_samples, n_estimators)\n            For each datapoint x in X and for each tree in the ensemble,",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples. Internally, its dtype will be converted to",
                "description": "``dtype=np.float32``. If a sparse matrix is provided, it will"
              },
              "be": {
                "type": "converted to a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "X_leaves": {
                "type": "array",
                "description": "like of shape (n_samples, n_estimators)"
              },
              "For": {
                "type": "each datapoint x in X and for each tree in the ensemble,",
                "description": ""
              },
              "return": {
                "type": "the index of the leaf x ends up in each estimator.",
                "description": ""
              }
            },
            "returns": "the index of the leaf x ends up in each estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None, monitor=None)",
          "documentation": {
            "description": "Fit the gradient boosting model.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        y : array-like of shape (n_samples,)\n            Target values (strings or integers in classification, real numbers\n            in regression)\n            For classification, labels must correspond to classes.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted. Splits\n            that would create child nodes with net zero or negative weight are\n            ignored while searching for a split in each node. In the case of\n            classification, splits are also ignored if they would result in any\n            single class carrying a negative weight in either child node.\n\n        monitor : callable, default=None\n            The monitor is called after each iteration with the current\n            iteration, a reference to the estimator and the local variables of\n            ``_fit_stages`` as keyword arguments ``callable(i, self,\n            locals())``. If the callable returns ``True`` the fitting procedure\n            is stopped. The monitor can be used for various things such as\n            computing held-out estimates, early stopping, model introspect, and\n            snapshotting.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "monitor is called after each iteration with the current",
                "description": "iteration, a reference to the estimator and the local variables of\n``_fit_stages`` as keyword arguments ``callable(i, self,"
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "Target": {
                "type": "values (strings or integers in classification, real numbers",
                "description": ""
              },
              "in": {
                "type": "regression)",
                "description": ""
              },
              "For": {
                "type": "classification, labels must correspond to classes.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted. Splits",
                "description": ""
              },
              "that": {
                "type": "would create child nodes with net zero or negative weight are",
                "description": ""
              },
              "ignored": {
                "type": "while searching for a split in each node. In the case of",
                "description": "classification, splits are also ignored if they would result in any"
              },
              "single": {
                "type": "class carrying a negative weight in either child node.",
                "description": ""
              },
              "monitor": {
                "type": "callable, default=None",
                "description": ""
              },
              "locals": {
                "type": "",
                "description": ")``. If the callable returns ``True`` the fitting procedure"
              },
              "is": {
                "type": "stopped. The monitor can be used for various things such as",
                "description": ""
              },
              "computing": {
                "type": "held-out estimates, early stopping, model introspect, and",
                "description": "snapshotting.\nReturns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "Fitted": {
                "type": "estimator.",
                "description": ""
              }
            },
            "returns": "-------\n        self : object\n            Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRequest\n            A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "documentation": {
            "description": "Predict regression target for X.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted values.",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "y": {
                "type": "ndarray of shape (n_samples,)",
                "description": ""
              }
            },
            "returns": "-------\n        y : ndarray of shape (n_samples,)\n            The predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Return the coefficient of determination of the prediction.\n\n        The coefficient of determination :math:`R^2` is defined as\n        :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\n        sum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\n        is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\n        The best possible score is 1.0 and it can be negative (because the\n        model can be arbitrarily worse). A constant model that always predicts\n        the expected value of `y`, disregarding the input features, would get\n        a :math:`R^2` score of 0.0.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples. For some estimators this may be a precomputed\n            kernel matrix or a list of generic objects instead with shape\n            ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n            is the number of samples used in the fitting for the estimator.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True values for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples. For some estimators this may be a precomputed",
                "description": ""
              },
              "kernel": {
                "type": "matrix or a list of generic objects instead with shape",
                "description": "``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``"
              },
              "is": {
                "type": "the number of samples used in the fitting for the estimator.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "values for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ":math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\nNotes\n-----"
              },
              "The": {
                "type": "math:`R^2` score used when calling ``score`` on a regressor uses",
                "description": "``multioutput='uniform_average'`` from version 0.23 to keep consistent"
              },
              "with": {
                "type": "default value of :func:`~sklearn.metrics.r2_score`.",
                "description": ""
              },
              "This": {
                "type": "influences the ``score`` method of all the multioutput",
                "description": ""
              },
              "regressors": {
                "type": "(except for",
                "description": ":class:`~sklearn.multioutput.MultiOutputRegressor`)."
              }
            },
            "returns": "-------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\n\n        Notes\n        -----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "raises": "",
            "see_also": "",
            "notes": "-----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.ensemble._gb.GradientBoostingRegressor, *, monitor: Union[bool, NoneType, str] = '$UNCHANGED$', sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._gb.GradientBoostingRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "monitor": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        monitor : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``monitor`` parameter in ``fit``.\n\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.ensemble._gb.GradientBoostingRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._gb.GradientBoostingRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "staged_predict",
          "signature": "staged_predict(self, X)",
          "documentation": {
            "description": "Predict regression target at each stage for X.\n\n        This method allows monitoring (i.e. determine error on testing set)\n        after each stage.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted value of the input samples.",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": "Yields\n------"
              },
              "y": {
                "type": "generator of ndarray of shape (n_samples,)",
                "description": ""
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "HistGradientBoostingClassifier",
      "documentation": {
        "description": "Histogram-based Gradient Boosting Classification Tree.\n\n    This estimator is much faster than\n    :class:`GradientBoostingClassifier<sklearn.ensemble.GradientBoostingClassifier>`\n    for big datasets (n_samples >= 10 000).\n\n    This estimator has native support for missing values (NaNs). During\n    training, the tree grower learns at each split point whether samples\n    with missing values should go to the left or right child, based on the\n    potential gain. When predicting, samples with missing values are\n    assigned to the left or right child consequently. If no missing values\n    were encountered for a given feature during training, then samples with\n    missing values are mapped to whichever child has the most samples.\n\n    This implementation is inspired by\n    `LightGBM <https://github.com/Microsoft/LightGBM>`_.\n\n    Read more in the :ref:`User Guide <histogram_based_gradient_boosting>`.\n\n    .. versionadded:: 0.21\n\n    Parameters\n    ----------\n    loss : {'log_loss'}, default='log_loss'\n        The loss function to use in the boosting process.\n\n        For binary classification problems, 'log_loss' is also known as logistic loss,\n        binomial deviance or binary crossentropy. Internally, the model fits one tree\n        per boosting iteration and uses the logistic sigmoid function (expit) as\n        inverse link function to compute the predicted positive class probability.\n\n        For multiclass classification problems, 'log_loss' is also known as multinomial\n        deviance or categorical crossentropy. Internally, the model fits one tree per\n        boosting iteration and per class and uses the softmax function as inverse link\n        function to compute the predicted probabilities of the classes.\n\n    learning_rate : float, default=0.1\n        The learning rate, also known as *shrinkage*. This is used as a\n        multiplicative factor for the leaves values. Use ``1`` for no\n        shrinkage.\n    max_iter : int, default=100\n        The maximum number of iterations of the boosting process, i.e. the\n        maximum number of trees for binary classification. For multiclass\n        classification, `n_classes` trees per iteration are built.\n    max_leaf_nodes : int or None, default=31\n        The maximum number of leaves for each tree. Must be strictly greater\n        than 1. If None, there is no maximum limit.\n    max_depth : int or None, default=None\n        The maximum depth of each tree. The depth of a tree is the number of\n        edges to go from the root to the deepest leaf.\n        Depth isn't constrained by default.\n    min_samples_leaf : int, default=20\n        The minimum number of samples per leaf. For small datasets with less\n        than a few hundred samples, it is recommended to lower this value\n        since only very shallow trees would be built.\n    l2_regularization : float, default=0\n        The L2 regularization parameter penalizing leaves with small hessians.\n        Use ``0`` for no regularization (default).\n    max_features : float, default=1.0\n        Proportion of randomly chosen features in each and every node split.\n        This is a form of regularization, smaller values make the trees weaker\n        learners and might prevent overfitting.\n        If interaction constraints from `interaction_cst` are present, only allowed\n        features are taken into account for the subsampling.\n\n        .. versionadded:: 1.4\n\n    max_bins : int, default=255\n        The maximum number of bins to use for non-missing values. Before\n        training, each feature of the input array `X` is binned into\n        integer-valued bins, which allows for a much faster training stage.\n        Features with a small number of unique values may use less than\n        ``max_bins`` bins. In addition to the ``max_bins`` bins, one more bin\n        is always reserved for missing values. Must be no larger than 255.\n    categorical_features : array-like of {bool, int, str} of shape (n_features)             or shape (n_categorical_features,), default=None\n        Indicates the categorical features.\n\n        - None : no feature will be considered categorical.\n        - boolean array-like : boolean mask indicating categorical features.\n        - integer array-like : integer indices indicating categorical\n          features.\n        - str array-like: names of categorical features (assuming the training\n          data has feature names).\n        - `\"from_dtype\"`: dataframe columns with dtype \"category\" are\n          considered to be categorical features. The input must be an object\n          exposing a ``__dataframe__`` method such as pandas or polars\n          DataFrames to use this feature.\n\n        For each categorical feature, there must be at most `max_bins` unique\n        categories. Negative values for categorical features encoded as numeric\n        dtypes are treated as missing values. All categorical values are\n        converted to floating point numbers. This means that categorical values\n        of 1.0 and 1 are treated as the same category.\n\n        Read more in the :ref:`User Guide <categorical_support_gbdt>`.\n\n        .. versionadded:: 0.24\n\n        .. versionchanged:: 1.2\n           Added support for feature names.\n\n        .. versionchanged:: 1.4\n           Added `\"from_dtype\"` option.\n\n        .. versionchanged::1.6\n           The default will changed from `None` to `\"from_dtype\"`.\n\n    monotonic_cst : array-like of int of shape (n_features) or dict, default=None\n        Monotonic constraint to enforce on each feature are specified using the\n        following integer values:\n\n        - 1: monotonic increase\n        - 0: no constraint\n        - -1: monotonic decrease\n\n        If a dict with str keys, map feature to monotonic constraints by name.\n        If an array, the features are mapped to constraints by position. See\n        :ref:`monotonic_cst_features_names` for a usage example.\n\n        The constraints are only valid for binary classifications and hold\n        over the probability of the positive class.\n        Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n        .. versionadded:: 0.23\n\n        .. versionchanged:: 1.2\n           Accept dict of constraints with feature names as keys.\n\n    interaction_cst : {\"pairwise\", \"no_interactions\"} or sequence of lists/tuples/sets             of int, default=None\n        Specify interaction constraints, the sets of features which can\n        interact with each other in child node splits.\n\n        Each item specifies the set of feature indices that are allowed\n        to interact with each other. If there are more features than\n        specified in these constraints, they are treated as if they were\n        specified as an additional set.\n\n        The strings \"pairwise\" and \"no_interactions\" are shorthands for\n        allowing only pairwise or no interactions, respectively.\n\n        For instance, with 5 features in total, `interaction_cst=[{0, 1}]`\n        is equivalent to `interaction_cst=[{0, 1}, {2, 3, 4}]`,\n        and specifies that each branch of a tree will either only split\n        on features 0 and 1 or only split on features 2, 3 and 4.\n\n        .. versionadded:: 1.2\n\n    warm_start : bool, default=False\n        When set to ``True``, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble. For results to be valid, the\n        estimator should be re-trained on the same data only.\n        See :term:`the Glossary <warm_start>`.\n    early_stopping : 'auto' or bool, default='auto'\n        If 'auto', early stopping is enabled if the sample size is larger than\n        10000. If True, early stopping is enabled, otherwise early stopping is\n        disabled.\n\n        .. versionadded:: 0.23\n\n    scoring : str or callable or None, default='loss'\n        Scoring parameter to use for early stopping. It can be a single\n        string (see :ref:`scoring_parameter`) or a callable (see\n        :ref:`scoring_callable`). If None, the estimator's default scorer\n        is used. If ``scoring='loss'``, early stopping is checked\n        w.r.t the loss value. Only used if early stopping is performed.\n    validation_fraction : int or float or None, default=0.1\n        Proportion (or absolute size) of training data to set aside as\n        validation data for early stopping. If None, early stopping is done on\n        the training data. Only used if early stopping is performed.\n    n_iter_no_change : int, default=10\n        Used to determine when to \"early stop\". The fitting process is\n        stopped when none of the last ``n_iter_no_change`` scores are better\n        than the ``n_iter_no_change - 1`` -th-to-last one, up to some\n        tolerance. Only used if early stopping is performed.\n    tol : float, default=1e-7\n        The absolute tolerance to use when comparing scores. The higher the\n        tolerance, the more likely we are to early stop: higher tolerance\n        means that it will be harder for subsequent iterations to be\n        considered an improvement upon the reference score.\n    verbose : int, default=0\n        The verbosity level. If not zero, print some information about the\n        fitting process. ``1`` prints only summary info, ``2`` prints info per\n        iteration.\n    random_state : int, RandomState instance or None, default=None\n        Pseudo-random number generator to control the subsampling in the\n        binning process, and the train/validation data split if early stopping\n        is enabled.\n        Pass an int for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n    class_weight : dict or 'balanced', default=None\n        Weights associated with classes in the form `{class_label: weight}`.\n        If not given, all classes are supposed to have weight one.\n        The \"balanced\" mode uses the values of y to automatically adjust\n        weights inversely proportional to class frequencies in the input data\n        as `n_samples / (n_classes * np.bincount(y))`.\n        Note that these weights will be multiplied with sample_weight (passed\n        through the fit method) if `sample_weight` is specified.\n\n        .. versionadded:: 1.2\n\n    Attributes\n    ----------\n    classes_ : array, shape = (n_classes,)\n        Class labels.\n    do_early_stopping_ : bool\n        Indicates whether early stopping is used during training.\n    n_iter_ : int\n        The number of iterations as selected by early stopping, depending on\n        the `early_stopping` parameter. Otherwise it corresponds to max_iter.\n    n_trees_per_iteration_ : int\n        The number of tree that are built at each iteration. This is equal to 1\n        for binary classification, and to ``n_classes`` for multiclass\n        classification.\n    train_score_ : ndarray, shape (n_iter_+1,)\n        The scores at each iteration on the training data. The first entry\n        is the score of the ensemble before the first iteration. Scores are\n        computed according to the ``scoring`` parameter. If ``scoring`` is\n        not 'loss', scores are computed on a subset of at most 10 000\n        samples. Empty if no early stopping.\n    validation_score_ : ndarray, shape (n_iter_+1,)\n        The scores at each iteration on the held-out validation data. The\n        first entry is the score of the ensemble before the first iteration.\n        Scores are computed according to the ``scoring`` parameter. Empty if\n        no early stopping or if ``validation_fraction`` is None.\n    is_categorical_ : ndarray, shape (n_features, ) or None\n        Boolean mask for the categorical features. ``None`` if there are no\n        categorical features.\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    See Also\n    --------\n    GradientBoostingClassifier : Exact gradient boosting method that does not\n        scale as good on datasets with a large number of samples.\n    sklearn.tree.DecisionTreeClassifier : A decision tree classifier.\n    RandomForestClassifier : A meta-estimator that fits a number of decision\n        tree classifiers on various sub-samples of the dataset and uses\n        averaging to improve the predictive accuracy and control over-fitting.\n    AdaBoostClassifier : A meta-estimator that begins by fitting a classifier\n        on the original dataset and then fits additional copies of the\n        classifier on the same dataset where the weights of incorrectly\n        classified instances are adjusted such that subsequent classifiers\n        focus more on difficult cases.",
        "parameters": {
          "loss": {
            "type": "{'log_loss'}, default='log_loss'",
            "description": ""
          },
          "The": {
            "type": "scores at each iteration on the held-out validation data. The",
            "description": ""
          },
          "For": {
            "type": "instance, with 5 features in total, `interaction_cst=[{0, 1}]`",
            "description": ""
          },
          "binomial": {
            "type": "deviance or binary crossentropy. Internally, the model fits one tree",
            "description": ""
          },
          "per": {
            "type": "boosting iteration and uses the logistic sigmoid function (expit) as",
            "description": ""
          },
          "inverse": {
            "type": "link function to compute the predicted positive class probability.",
            "description": ""
          },
          "deviance": {
            "type": "or categorical crossentropy. Internally, the model fits one tree per",
            "description": ""
          },
          "boosting": {
            "type": "iteration and per class and uses the softmax function as inverse link",
            "description": ""
          },
          "function": {
            "type": "to compute the predicted probabilities of the classes.",
            "description": ""
          },
          "learning_rate": {
            "type": "float, default=0.1",
            "description": ""
          },
          "multiplicative": {
            "type": "factor for the leaves values. Use ``1`` for no",
            "description": "shrinkage."
          },
          "max_iter": {
            "type": "int, default=100",
            "description": ""
          },
          "maximum": {
            "type": "number of trees for binary classification. For multiclass",
            "description": "classification, `n_classes` trees per iteration are built."
          },
          "max_leaf_nodes": {
            "type": "int or None, default=31",
            "description": ""
          },
          "than": {
            "type": "the ``n_iter_no_change - 1`` -th-to-last one, up to some",
            "description": "tolerance. Only used if early stopping is performed."
          },
          "max_depth": {
            "type": "int or None, default=None",
            "description": ""
          },
          "edges": {
            "type": "to go from the root to the deepest leaf.",
            "description": ""
          },
          "Depth": {
            "type": "isn't constrained by default.",
            "description": ""
          },
          "min_samples_leaf": {
            "type": "int, default=20",
            "description": ""
          },
          "since": {
            "type": "only very shallow trees would be built.",
            "description": ""
          },
          "l2_regularization": {
            "type": "float, default=0",
            "description": ""
          },
          "Use": {
            "type": "``0`` for no regularization (default).",
            "description": ""
          },
          "max_features": {
            "type": "float, default=1.0",
            "description": ""
          },
          "Proportion": {
            "type": "or absolute size",
            "description": "of training data to set aside as"
          },
          "This": {
            "type": "is a form of regularization, smaller values make the trees weaker",
            "description": ""
          },
          "learners": {
            "type": "and might prevent overfitting.",
            "description": ""
          },
          "If": {
            "type": "not given, all classes are supposed to have weight one.",
            "description": ""
          },
          "features": {
            "type": "are taken into account for the subsampling.",
            "description": ".. versionadded:: 1.4"
          },
          "max_bins": {
            "type": "int, default=255",
            "description": ""
          },
          "Features": {
            "type": "with a small number of unique values may use less than",
            "description": "``max_bins`` bins. In addition to the ``max_bins`` bins, one more bin"
          },
          "is": {
            "type": "the score of the ensemble before the first iteration. Scores are",
            "description": ""
          },
          "categorical_features": {
            "type": "array",
            "description": "like of {bool, int, str} of shape (n_features)             or shape (n_categorical_features,), default=None"
          },
          "Indicates": {
            "type": "whether early stopping is used during training.",
            "description": ""
          },
          "data": {
            "type": "has feature names).",
            "description": "- `\"from_dtype\"`: dataframe columns with dtype \"category\" are"
          },
          "considered": {
            "type": "an improvement upon the reference score.",
            "description": ""
          },
          "exposing": {
            "type": "a ``__dataframe__`` method such as pandas or polars",
            "description": ""
          },
          "DataFrames": {
            "type": "to use this feature.",
            "description": ""
          },
          "dtypes": {
            "type": "are treated as missing values. All categorical values are",
            "description": ""
          },
          "converted": {
            "type": "to floating point numbers. This means that categorical values",
            "description": ""
          },
          "of": {
            "type": "1.0 and 1 are treated as the same category.",
            "description": ""
          },
          "Read": {
            "type": "more in the :ref:`User Guide <monotonic_cst_gbdt>`.",
            "description": ".. versionadded:: 0.23\n.. versionchanged:: 1.2"
          },
          "Added": {
            "type": "`\"from_dtype\"` option.",
            "description": ".. versionchanged::1.6"
          },
          "monotonic_cst": {
            "type": "array",
            "description": "like of int of shape (n_features) or dict, default=None"
          },
          "Monotonic": {
            "type": "constraint to enforce on each feature are specified using the",
            "description": ""
          },
          "following": {
            "type": "integer values:",
            "description": "- 1: monotonic increase\n- 0: no constraint\n- -1: monotonic decrease"
          },
          "over": {
            "type": "the probability of the positive class.",
            "description": ""
          },
          "Accept": {
            "type": "dict of constraints with feature names as keys.",
            "description": ""
          },
          "interaction_cst": {
            "type": "{\"pairwise\", \"no_interactions\"} or sequence of lists/tuples/sets             of int, default=None",
            "description": ""
          },
          "Specify": {
            "type": "interaction constraints, the sets of features which can",
            "description": ""
          },
          "interact": {
            "type": "with each other in child node splits.",
            "description": ""
          },
          "Each": {
            "type": "item specifies the set of feature indices that are allowed",
            "description": ""
          },
          "to": {
            "type": "interact with each other. If there are more features than",
            "description": ""
          },
          "specified": {
            "type": "as an additional set.",
            "description": ""
          },
          "allowing": {
            "type": "only pairwise or no interactions, respectively.",
            "description": ""
          },
          "and": {
            "type": "add more estimators to the ensemble. For results to be valid, the",
            "description": ""
          },
          "on": {
            "type": "the original dataset and then fits additional copies of the",
            "description": ""
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": ""
          },
          "When": {
            "type": "set to ``True``, reuse the solution of the previous call to fit",
            "description": ""
          },
          "estimator": {
            "type": "should be re-trained on the same data only.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "early_stopping": {
            "type": "'auto' or bool, default='auto'",
            "description": ""
          },
          "scoring": {
            "type": "str or callable or None, default='loss'",
            "description": ""
          },
          "Scoring": {
            "type": "parameter to use for early stopping. It can be a single",
            "description": ""
          },
          "string": {
            "type": "see :ref:`scoring_parameter`",
            "description": "or a callable (see\n:ref:`scoring_callable`). If None, the estimator's default scorer"
          },
          "validation_fraction": {
            "type": "int or float or None, default=0.1",
            "description": ""
          },
          "validation": {
            "type": "data for early stopping. If None, early stopping is done on",
            "description": ""
          },
          "the": {
            "type": "`early_stopping` parameter. Otherwise it corresponds to max_iter.",
            "description": ""
          },
          "n_iter_no_change": {
            "type": "int, default=10",
            "description": ""
          },
          "Used": {
            "type": "to determine when to \"early stop\". The fitting process is",
            "description": ""
          },
          "stopped": {
            "type": "when none of the last ``n_iter_no_change`` scores are better",
            "description": ""
          },
          "tol": {
            "type": "float, default=1e",
            "description": "7"
          },
          "means": {
            "type": "that it will be harder for subsequent iterations to be",
            "description": ""
          },
          "verbose": {
            "type": "int, default=0",
            "description": ""
          },
          "fitting": {
            "type": "process. ``1`` prints only summary info, ``2`` prints info per",
            "description": "iteration."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Pseudo-random number generator to control the subsampling in the"
          },
          "binning": {
            "type": "process, and the train/validation data split if early stopping",
            "description": ""
          },
          "Pass": {
            "type": "an int for reproducible output across multiple function calls.",
            "description": ""
          },
          "class_weight": {
            "type": "dict or 'balanced', default=None",
            "description": ""
          },
          "Weights": {
            "type": "associated with classes in the form `{class_label: weight}`.",
            "description": ""
          },
          "weights": {
            "type": "inversely proportional to class frequencies in the input data",
            "description": ""
          },
          "as": {
            "type": "`n_samples / (n_classes * np.bincount(y))`.",
            "description": ""
          },
          "Note": {
            "type": "that these weights will be multiplied with sample_weight (passed",
            "description": ""
          },
          "through": {
            "type": "the fit method) if `sample_weight` is specified.",
            "description": ".. versionadded:: 1.2\nAttributes\n----------"
          },
          "classes_": {
            "type": "array, shape = (n_classes,)",
            "description": ""
          },
          "Class": {
            "type": "labels.",
            "description": ""
          },
          "do_early_stopping_": {
            "type": "bool",
            "description": ""
          },
          "n_iter_": {
            "type": "int",
            "description": ""
          },
          "n_trees_per_iteration_": {
            "type": "int",
            "description": ""
          },
          "for": {
            "type": "binary classification, and to ``n_classes`` for multiclass",
            "description": "classification."
          },
          "train_score_": {
            "type": "ndarray, shape (n_iter_+1,)",
            "description": ""
          },
          "computed": {
            "type": "according to the ``scoring`` parameter. If ``scoring`` is",
            "description": ""
          },
          "not": {
            "type": "'loss', scores are computed on a subset of at most 10 000",
            "description": "samples. Empty if no early stopping."
          },
          "validation_score_": {
            "type": "ndarray, shape (n_iter_+1,)",
            "description": ""
          },
          "first": {
            "type": "entry is the score of the ensemble before the first iteration.",
            "description": ""
          },
          "Scores": {
            "type": "are computed according to the ``scoring`` parameter. Empty if",
            "description": ""
          },
          "no": {
            "type": "early stopping or if ``validation_fraction`` is None.",
            "description": ""
          },
          "is_categorical_": {
            "type": "ndarray, shape (n_features, ) or None",
            "description": ""
          },
          "Boolean": {
            "type": "mask for the categorical features. ``None`` if there are no",
            "description": ""
          },
          "categorical": {
            "type": "features.",
            "description": ""
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`.",
            "description": ".. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "GradientBoostingClassifier": {
            "type": "Exact gradient boosting method that does not",
            "description": ""
          },
          "scale": {
            "type": "as good on datasets with a large number of samples.",
            "description": "sklearn.tree.DecisionTreeClassifier : A decision tree classifier."
          },
          "RandomForestClassifier": {
            "type": "A meta",
            "description": "estimator that fits a number of decision"
          },
          "tree": {
            "type": "classifiers on various sub-samples of the dataset and uses",
            "description": ""
          },
          "averaging": {
            "type": "to improve the predictive accuracy and control over-fitting.",
            "description": ""
          },
          "AdaBoostClassifier": {
            "type": "A meta",
            "description": "estimator that begins by fitting a classifier"
          },
          "classifier": {
            "type": "on the same dataset where the weights of incorrectly",
            "description": ""
          },
          "classified": {
            "type": "instances are adjusted such that subsequent classifiers",
            "description": ""
          },
          "focus": {
            "type": "more on difficult cases.",
            "description": "Examples\n--------\n>>> from sklearn.ensemble import HistGradientBoostingClassifier\n>>> from sklearn.datasets import load_iris\n>>> X, y = load_iris(return_X_y=True)\n>>> clf = HistGradientBoostingClassifier().fit(X, y)\n>>> clf.score(X, y)\n1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    GradientBoostingClassifier : Exact gradient boosting method that does not\n        scale as good on datasets with a large number of samples.\n    sklearn.tree.DecisionTreeClassifier : A decision tree classifier.\n    RandomForestClassifier : A meta-estimator that fits a number of decision\n        tree classifiers on various sub-samples of the dataset and uses\n        averaging to improve the predictive accuracy and control over-fitting.\n    AdaBoostClassifier : A meta-estimator that begins by fitting a classifier\n        on the original dataset and then fits additional copies of the\n        classifier on the same dataset where the weights of incorrectly\n        classified instances are adjusted such that subsequent classifiers\n        focus more on difficult cases.\n\n    Examples\n    --------\n    >>> from sklearn.ensemble import HistGradientBoostingClassifier\n    >>> from sklearn.datasets import load_iris\n    >>> X, y = load_iris(return_X_y=True)\n    >>> clf = HistGradientBoostingClassifier().fit(X, y)\n    >>> clf.score(X, y)\n    1.0",
        "notes": "that these weights will be multiplied with sample_weight (passed\n        through the fit method) if `sample_weight` is specified.\n\n        .. versionadded:: 1.2\n\n    Attributes\n    ----------\n    classes_ : array, shape = (n_classes,)\n        Class labels.\n    do_early_stopping_ : bool\n        Indicates whether early stopping is used during training.\n    n_iter_ : int\n        The number of iterations as selected by early stopping, depending on\n        the `early_stopping` parameter. Otherwise it corresponds to max_iter.\n    n_trees_per_iteration_ : int\n        The number of tree that are built at each iteration. This is equal to 1\n        for binary classification, and to ``n_classes`` for multiclass\n        classification.\n    train_score_ : ndarray, shape (n_iter_+1,)\n        The scores at each iteration on the training data. The first entry\n        is the score of the ensemble before the first iteration. Scores are\n        computed according to the ``scoring`` parameter. If ``scoring`` is\n        not 'loss', scores are computed on a subset of at most 10 000\n        samples. Empty if no early stopping.\n    validation_score_ : ndarray, shape (n_iter_+1,)\n        The scores at each iteration on the held-out validation data. The\n        first entry is the score of the ensemble before the first iteration.\n        Scores are computed according to the ``scoring`` parameter. Empty if\n        no early stopping or if ``validation_fraction`` is None.\n    is_categorical_ : ndarray, shape (n_features, ) or None\n        Boolean mask for the categorical features. ``None`` if there are no\n        categorical features.\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    See Also\n    --------\n    GradientBoostingClassifier : Exact gradient boosting method that does not\n        scale as good on datasets with a large number of samples.\n    sklearn.tree.DecisionTreeClassifier : A decision tree classifier.\n    RandomForestClassifier : A meta-estimator that fits a number of decision\n        tree classifiers on various sub-samples of the dataset and uses\n        averaging to improve the predictive accuracy and control over-fitting.\n    AdaBoostClassifier : A meta-estimator that begins by fitting a classifier\n        on the original dataset and then fits additional copies of the\n        classifier on the same dataset where the weights of incorrectly\n        classified instances are adjusted such that subsequent classifiers\n        focus more on difficult cases.\n\n    Examples\n    --------\n    >>> from sklearn.ensemble import HistGradientBoostingClassifier\n    >>> from sklearn.datasets import load_iris\n    >>> X, y = load_iris(return_X_y=True)\n    >>> clf = HistGradientBoostingClassifier().fit(X, y)\n    >>> clf.score(X, y)\n    1.0",
        "examples": "--------\n    >>> from sklearn.ensemble import HistGradientBoostingClassifier\n    >>> from sklearn.datasets import load_iris\n    >>> X, y = load_iris(return_X_y=True)\n    >>> clf = HistGradientBoostingClassifier().fit(X, y)\n    >>> clf.score(X, y)\n    1.0"
      },
      "methods": [
        {
          "name": "decision_function",
          "signature": "decision_function(self, X)",
          "documentation": {
            "description": "Compute the decision function of ``X``.\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_features)\n            The input samples.",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like, shape (n_samples, n_features)"
              },
              "The": {
                "type": "raw predicted values (i.e. the sum of the trees leaves) for",
                "description": ""
              },
              "decision": {
                "type": "ndarray, shape (n_samples,) or                 (n_samples, n_trees_per_iteration)",
                "description": ""
              },
              "each": {
                "type": "sample. n_trees_per_iteration is equal to the number of",
                "description": ""
              },
              "classes": {
                "type": "in multiclass classification.",
                "description": ""
              }
            },
            "returns": "-------\n        decision : ndarray, shape (n_samples,) or                 (n_samples, n_trees_per_iteration)\n            The raw predicted values (i.e. the sum of the trees leaves) for\n            each sample. n_trees_per_iteration is equal to the number of\n            classes in multiclass classification.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Fit the gradient boosting model.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            The input samples.\n\n        y : array-like of shape (n_samples,)\n            Target values.\n\n        sample_weight : array-like of shape (n_samples,) default=None\n            Weights of training data.\n\n            .. versionadded:: 0.23",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "Target": {
                "type": "values.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,) default=None"
              },
              "Weights": {
                "type": "of training data.",
                "description": ".. versionadded:: 0.23\nReturns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "Fitted": {
                "type": "estimator.",
                "description": ""
              }
            },
            "returns": "-------\n        self : object\n            Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRequest\n            A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "documentation": {
            "description": "Predict classes for X.\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_features)\n            The input samples.",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like, shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted classes.",
                "description": ""
              },
              "y": {
                "type": "ndarray, shape (n_samples,)",
                "description": ""
              }
            },
            "returns": "-------\n        y : ndarray, shape (n_samples,)\n            The predicted classes.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_proba",
          "signature": "predict_proba(self, X)",
          "documentation": {
            "description": "Predict class probabilities for X.\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_features)\n            The input samples.",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like, shape (n_samples, n_features)"
              },
              "The": {
                "type": "class probabilities of the input samples.",
                "description": ""
              },
              "p": {
                "type": "ndarray, shape (n_samples, n_classes)",
                "description": ""
              }
            },
            "returns": "-------\n        p : ndarray, shape (n_samples, n_classes)\n            The class probabilities of the input samples.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "labels for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ""
              },
              "Mean": {
                "type": "accuracy of ``self.predict(X)`` w.r.t. `y`.",
                "description": ""
              }
            },
            "returns": "the mean accuracy on the given test data and labels.\n\n        In multi-label classification, this is the subset accuracy\n        which is a harsh metric since you require for each sample that\n        each label set be correctly predicted.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True labels for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "staged_decision_function",
          "signature": "staged_decision_function(self, X)",
          "documentation": {
            "description": "Compute decision function of ``X`` for each iteration.\n\n        This method allows monitoring (i.e. determine error on testing set)\n        after each stage.",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "The": {
                "type": "decision function of the input samples, which corresponds to",
                "description": ""
              },
              "decision": {
                "type": "generator of ndarray of shape (n_samples,) or                 (n_samples, n_trees_per_iteration)",
                "description": ""
              },
              "the": {
                "type": "raw values predicted from the trees of the ensemble . The",
                "description": ""
              },
              "classes": {
                "type": "corresponds to that in the attribute :term:`classes_`.",
                "description": ""
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "staged_predict",
          "signature": "staged_predict(self, X)",
          "documentation": {
            "description": "Predict classes at each iteration.\n\n        This method allows monitoring (i.e. determine error on testing set)\n        after each stage.\n\n        .. versionadded:: 0.24",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted classes of the input samples, for each iteration.",
                "description": ""
              },
              "y": {
                "type": "generator of ndarray of shape (n_samples,)",
                "description": ""
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "staged_predict_proba",
          "signature": "staged_predict_proba(self, X)",
          "documentation": {
            "description": "Predict class probabilities at each iteration.\n\n        This method allows monitoring (i.e. determine error on testing set)\n        after each stage.",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted class probabilities of the input samples,",
                "description": ""
              },
              "y": {
                "type": "generator of ndarray of shape (n_samples,)",
                "description": ""
              },
              "for": {
                "type": "each iteration.",
                "description": ""
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "HistGradientBoostingRegressor",
      "documentation": {
        "description": "Histogram-based Gradient Boosting Regression Tree.\n\n    This estimator is much faster than\n    :class:`GradientBoostingRegressor<sklearn.ensemble.GradientBoostingRegressor>`\n    for big datasets (n_samples >= 10 000).\n\n    This estimator has native support for missing values (NaNs). During\n    training, the tree grower learns at each split point whether samples\n    with missing values should go to the left or right child, based on the\n    potential gain. When predicting, samples with missing values are\n    assigned to the left or right child consequently. If no missing values\n    were encountered for a given feature during training, then samples with\n    missing values are mapped to whichever child has the most samples.\n    See :ref:`sphx_glr_auto_examples_ensemble_plot_hgbt_regression.py` for a\n    usecase example of this feature.\n\n    This implementation is inspired by\n    `LightGBM <https://github.com/Microsoft/LightGBM>`_.\n\n    Read more in the :ref:`User Guide <histogram_based_gradient_boosting>`.\n\n    .. versionadded:: 0.21\n\n    Parameters\n    ----------\n    loss : {'squared_error', 'absolute_error', 'gamma', 'poisson', 'quantile'},             default='squared_error'\n        The loss function to use in the boosting process. Note that the\n        \"squared error\", \"gamma\" and \"poisson\" losses actually implement\n        \"half least squares loss\", \"half gamma deviance\" and \"half poisson\n        deviance\" to simplify the computation of the gradient. Furthermore,\n        \"gamma\" and \"poisson\" losses internally use a log-link, \"gamma\"\n        requires ``y > 0`` and \"poisson\" requires ``y >= 0``.\n        \"quantile\" uses the pinball loss.\n\n        .. versionchanged:: 0.23\n           Added option 'poisson'.\n\n        .. versionchanged:: 1.1\n           Added option 'quantile'.\n\n        .. versionchanged:: 1.3\n           Added option 'gamma'.\n\n    quantile : float, default=None\n        If loss is \"quantile\", this parameter specifies which quantile to be estimated\n        and must be between 0 and 1.\n    learning_rate : float, default=0.1\n        The learning rate, also known as *shrinkage*. This is used as a\n        multiplicative factor for the leaves values. Use ``1`` for no\n        shrinkage.\n    max_iter : int, default=100\n        The maximum number of iterations of the boosting process, i.e. the\n        maximum number of trees.\n    max_leaf_nodes : int or None, default=31\n        The maximum number of leaves for each tree. Must be strictly greater\n        than 1. If None, there is no maximum limit.\n    max_depth : int or None, default=None\n        The maximum depth of each tree. The depth of a tree is the number of\n        edges to go from the root to the deepest leaf.\n        Depth isn't constrained by default.\n    min_samples_leaf : int, default=20\n        The minimum number of samples per leaf. For small datasets with less\n        than a few hundred samples, it is recommended to lower this value\n        since only very shallow trees would be built.\n    l2_regularization : float, default=0\n        The L2 regularization parameter penalizing leaves with small hessians.\n        Use ``0`` for no regularization (default).\n    max_features : float, default=1.0\n        Proportion of randomly chosen features in each and every node split.\n        This is a form of regularization, smaller values make the trees weaker\n        learners and might prevent overfitting.\n        If interaction constraints from `interaction_cst` are present, only allowed\n        features are taken into account for the subsampling.\n\n        .. versionadded:: 1.4\n\n    max_bins : int, default=255\n        The maximum number of bins to use for non-missing values. Before\n        training, each feature of the input array `X` is binned into\n        integer-valued bins, which allows for a much faster training stage.\n        Features with a small number of unique values may use less than\n        ``max_bins`` bins. In addition to the ``max_bins`` bins, one more bin\n        is always reserved for missing values. Must be no larger than 255.\n    categorical_features : array-like of {bool, int, str} of shape (n_features)             or shape (n_categorical_features,), default=None\n        Indicates the categorical features.\n\n        - None : no feature will be considered categorical.\n        - boolean array-like : boolean mask indicating categorical features.\n        - integer array-like : integer indices indicating categorical\n          features.\n        - str array-like: names of categorical features (assuming the training\n          data has feature names).\n        - `\"from_dtype\"`: dataframe columns with dtype \"category\" are\n          considered to be categorical features. The input must be an object\n          exposing a ``__dataframe__`` method such as pandas or polars\n          DataFrames to use this feature.\n\n        For each categorical feature, there must be at most `max_bins` unique\n        categories. Negative values for categorical features encoded as numeric\n        dtypes are treated as missing values. All categorical values are\n        converted to floating point numbers. This means that categorical values\n        of 1.0 and 1 are treated as the same category.\n\n        Read more in the :ref:`User Guide <categorical_support_gbdt>`.\n\n        .. versionadded:: 0.24\n\n        .. versionchanged:: 1.2\n           Added support for feature names.\n\n        .. versionchanged:: 1.4\n           Added `\"from_dtype\"` option.\n\n        .. versionchanged:: 1.6\n           The default value changed from `None` to `\"from_dtype\"`.\n\n    monotonic_cst : array-like of int of shape (n_features) or dict, default=None\n        Monotonic constraint to enforce on each feature are specified using the\n        following integer values:\n\n        - 1: monotonic increase\n        - 0: no constraint\n        - -1: monotonic decrease\n\n        If a dict with str keys, map feature to monotonic constraints by name.\n        If an array, the features are mapped to constraints by position. See\n        :ref:`monotonic_cst_features_names` for a usage example.\n\n        Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n        .. versionadded:: 0.23\n\n        .. versionchanged:: 1.2\n           Accept dict of constraints with feature names as keys.\n\n    interaction_cst : {\"pairwise\", \"no_interactions\"} or sequence of lists/tuples/sets             of int, default=None\n        Specify interaction constraints, the sets of features which can\n        interact with each other in child node splits.\n\n        Each item specifies the set of feature indices that are allowed\n        to interact with each other. If there are more features than\n        specified in these constraints, they are treated as if they were\n        specified as an additional set.\n\n        The strings \"pairwise\" and \"no_interactions\" are shorthands for\n        allowing only pairwise or no interactions, respectively.\n\n        For instance, with 5 features in total, `interaction_cst=[{0, 1}]`\n        is equivalent to `interaction_cst=[{0, 1}, {2, 3, 4}]`,\n        and specifies that each branch of a tree will either only split\n        on features 0 and 1 or only split on features 2, 3 and 4.\n\n        .. versionadded:: 1.2\n\n    warm_start : bool, default=False\n        When set to ``True``, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble. For results to be valid, the\n        estimator should be re-trained on the same data only.\n        See :term:`the Glossary <warm_start>`.\n    early_stopping : 'auto' or bool, default='auto'\n        If 'auto', early stopping is enabled if the sample size is larger than\n        10000. If True, early stopping is enabled, otherwise early stopping is\n        disabled.\n\n        .. versionadded:: 0.23\n\n    scoring : str or callable or None, default='loss'\n        Scoring parameter to use for early stopping. It can be a single\n        string (see :ref:`scoring_parameter`) or a callable (see\n        :ref:`scoring_callable`). If None, the estimator's default scorer is used. If\n        ``scoring='loss'``, early stopping is checked w.r.t the loss value.\n        Only used if early stopping is performed.\n    validation_fraction : int or float or None, default=0.1\n        Proportion (or absolute size) of training data to set aside as\n        validation data for early stopping. If None, early stopping is done on\n        the training data. Only used if early stopping is performed.\n    n_iter_no_change : int, default=10\n        Used to determine when to \"early stop\". The fitting process is\n        stopped when none of the last ``n_iter_no_change`` scores are better\n        than the ``n_iter_no_change - 1`` -th-to-last one, up to some\n        tolerance. Only used if early stopping is performed.\n    tol : float, default=1e-7\n        The absolute tolerance to use when comparing scores during early\n        stopping. The higher the tolerance, the more likely we are to early\n        stop: higher tolerance means that it will be harder for subsequent\n        iterations to be considered an improvement upon the reference score.\n    verbose : int, default=0\n        The verbosity level. If not zero, print some information about the\n        fitting process. ``1`` prints only summary info, ``2`` prints info per\n        iteration.\n    random_state : int, RandomState instance or None, default=None\n        Pseudo-random number generator to control the subsampling in the\n        binning process, and the train/validation data split if early stopping\n        is enabled.\n        Pass an int for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Attributes\n    ----------\n    do_early_stopping_ : bool\n        Indicates whether early stopping is used during training.\n    n_iter_ : int\n        The number of iterations as selected by early stopping, depending on\n        the `early_stopping` parameter. Otherwise it corresponds to max_iter.\n    n_trees_per_iteration_ : int\n        The number of tree that are built at each iteration. For regressors,\n        this is always 1.\n    train_score_ : ndarray, shape (n_iter_+1,)\n        The scores at each iteration on the training data. The first entry\n        is the score of the ensemble before the first iteration. Scores are\n        computed according to the ``scoring`` parameter. If ``scoring`` is\n        not 'loss', scores are computed on a subset of at most 10 000\n        samples. Empty if no early stopping.\n    validation_score_ : ndarray, shape (n_iter_+1,)\n        The scores at each iteration on the held-out validation data. The\n        first entry is the score of the ensemble before the first iteration.\n        Scores are computed according to the ``scoring`` parameter. Empty if\n        no early stopping or if ``validation_fraction`` is None.\n    is_categorical_ : ndarray, shape (n_features, ) or None\n        Boolean mask for the categorical features. ``None`` if there are no\n        categorical features.\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    See Also\n    --------\n    GradientBoostingRegressor : Exact gradient boosting method that does not\n        scale as good on datasets with a large number of samples.\n    sklearn.tree.DecisionTreeRegressor : A decision tree regressor.\n    RandomForestRegressor : A meta-estimator that fits a number of decision\n        tree regressors on various sub-samples of the dataset and uses\n        averaging to improve the statistical performance and control\n        over-fitting.\n    AdaBoostRegressor : A meta-estimator that begins by fitting a regressor\n        on the original dataset and then fits additional copies of the\n        regressor on the same dataset but where the weights of instances are\n        adjusted according to the error of the current prediction. As such,\n        subsequent regressors focus more on difficult cases.",
        "parameters": {
          "loss": {
            "type": "{'squared_error', 'absolute_error', 'gamma', 'poisson', 'quantile'},             default='squared_error'",
            "description": ""
          },
          "The": {
            "type": "scores at each iteration on the held-out validation data. The",
            "description": ""
          },
          "requires": {
            "type": "``y > 0`` and \"poisson\" requires ``y >= 0``.",
            "description": "\"quantile\" uses the pinball loss.\n.. versionchanged:: 0.23"
          },
          "Added": {
            "type": "`\"from_dtype\"` option.",
            "description": ".. versionchanged:: 1.6"
          },
          "quantile": {
            "type": "float, default=None",
            "description": ""
          },
          "If": {
            "type": "'auto', early stopping is enabled if the sample size is larger than",
            "description": "10000. If True, early stopping is enabled, otherwise early stopping is\ndisabled.\n.. versionadded:: 0.23"
          },
          "and": {
            "type": "add more estimators to the ensemble. For results to be valid, the",
            "description": ""
          },
          "learning_rate": {
            "type": "float, default=0.1",
            "description": ""
          },
          "multiplicative": {
            "type": "factor for the leaves values. Use ``1`` for no",
            "description": "shrinkage."
          },
          "max_iter": {
            "type": "int, default=100",
            "description": ""
          },
          "maximum": {
            "type": "number of trees.",
            "description": ""
          },
          "max_leaf_nodes": {
            "type": "int or None, default=31",
            "description": ""
          },
          "than": {
            "type": "the ``n_iter_no_change - 1`` -th-to-last one, up to some",
            "description": "tolerance. Only used if early stopping is performed."
          },
          "max_depth": {
            "type": "int or None, default=None",
            "description": ""
          },
          "edges": {
            "type": "to go from the root to the deepest leaf.",
            "description": ""
          },
          "Depth": {
            "type": "isn't constrained by default.",
            "description": ""
          },
          "min_samples_leaf": {
            "type": "int, default=20",
            "description": ""
          },
          "since": {
            "type": "only very shallow trees would be built.",
            "description": ""
          },
          "l2_regularization": {
            "type": "float, default=0",
            "description": ""
          },
          "Use": {
            "type": "``0`` for no regularization (default).",
            "description": ""
          },
          "max_features": {
            "type": "float, default=1.0",
            "description": ""
          },
          "Proportion": {
            "type": "or absolute size",
            "description": "of training data to set aside as"
          },
          "This": {
            "type": "is a form of regularization, smaller values make the trees weaker",
            "description": ""
          },
          "learners": {
            "type": "and might prevent overfitting.",
            "description": ""
          },
          "features": {
            "type": "are taken into account for the subsampling.",
            "description": ".. versionadded:: 1.4"
          },
          "max_bins": {
            "type": "int, default=255",
            "description": ""
          },
          "Features": {
            "type": "with a small number of unique values may use less than",
            "description": "``max_bins`` bins. In addition to the ``max_bins`` bins, one more bin"
          },
          "is": {
            "type": "the score of the ensemble before the first iteration. Scores are",
            "description": ""
          },
          "categorical_features": {
            "type": "array",
            "description": "like of {bool, int, str} of shape (n_features)             or shape (n_categorical_features,), default=None"
          },
          "Indicates": {
            "type": "whether early stopping is used during training.",
            "description": ""
          },
          "data": {
            "type": "has feature names).",
            "description": "- `\"from_dtype\"`: dataframe columns with dtype \"category\" are"
          },
          "considered": {
            "type": "to be categorical features. The input must be an object",
            "description": ""
          },
          "exposing": {
            "type": "a ``__dataframe__`` method such as pandas or polars",
            "description": ""
          },
          "DataFrames": {
            "type": "to use this feature.",
            "description": ""
          },
          "For": {
            "type": "instance, with 5 features in total, `interaction_cst=[{0, 1}]`",
            "description": ""
          },
          "dtypes": {
            "type": "are treated as missing values. All categorical values are",
            "description": ""
          },
          "converted": {
            "type": "to floating point numbers. This means that categorical values",
            "description": ""
          },
          "of": {
            "type": "1.0 and 1 are treated as the same category.",
            "description": ""
          },
          "Read": {
            "type": "more in the :ref:`User Guide <monotonic_cst_gbdt>`.",
            "description": ".. versionadded:: 0.23\n.. versionchanged:: 1.2"
          },
          "monotonic_cst": {
            "type": "array",
            "description": "like of int of shape (n_features) or dict, default=None"
          },
          "Monotonic": {
            "type": "constraint to enforce on each feature are specified using the",
            "description": ""
          },
          "following": {
            "type": "integer values:",
            "description": "- 1: monotonic increase\n- 0: no constraint\n- -1: monotonic decrease"
          },
          "Accept": {
            "type": "dict of constraints with feature names as keys.",
            "description": ""
          },
          "interaction_cst": {
            "type": "{\"pairwise\", \"no_interactions\"} or sequence of lists/tuples/sets             of int, default=None",
            "description": ""
          },
          "Specify": {
            "type": "interaction constraints, the sets of features which can",
            "description": ""
          },
          "interact": {
            "type": "with each other in child node splits.",
            "description": ""
          },
          "Each": {
            "type": "item specifies the set of feature indices that are allowed",
            "description": ""
          },
          "to": {
            "type": "interact with each other. If there are more features than",
            "description": ""
          },
          "specified": {
            "type": "as an additional set.",
            "description": ""
          },
          "allowing": {
            "type": "only pairwise or no interactions, respectively.",
            "description": ""
          },
          "on": {
            "type": "the original dataset and then fits additional copies of the",
            "description": ""
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": ""
          },
          "When": {
            "type": "set to ``True``, reuse the solution of the previous call to fit",
            "description": ""
          },
          "estimator": {
            "type": "should be re-trained on the same data only.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "early_stopping": {
            "type": "'auto' or bool, default='auto'",
            "description": ""
          },
          "scoring": {
            "type": "str or callable or None, default='loss'",
            "description": ""
          },
          "Scoring": {
            "type": "parameter to use for early stopping. It can be a single",
            "description": ""
          },
          "string": {
            "type": "see :ref:`scoring_parameter`",
            "description": "or a callable (see\n:ref:`scoring_callable`). If None, the estimator's default scorer is used. If\n``scoring='loss'``, early stopping is checked w.r.t the loss value."
          },
          "Only": {
            "type": "used if early stopping is performed.",
            "description": ""
          },
          "validation_fraction": {
            "type": "int or float or None, default=0.1",
            "description": ""
          },
          "validation": {
            "type": "data for early stopping. If None, early stopping is done on",
            "description": ""
          },
          "the": {
            "type": "`early_stopping` parameter. Otherwise it corresponds to max_iter.",
            "description": ""
          },
          "n_iter_no_change": {
            "type": "int, default=10",
            "description": ""
          },
          "Used": {
            "type": "to determine when to \"early stop\". The fitting process is",
            "description": ""
          },
          "stopped": {
            "type": "when none of the last ``n_iter_no_change`` scores are better",
            "description": ""
          },
          "tol": {
            "type": "float, default=1e",
            "description": "7"
          },
          "stop": {
            "type": "higher tolerance means that it will be harder for subsequent",
            "description": ""
          },
          "iterations": {
            "type": "to be considered an improvement upon the reference score.",
            "description": ""
          },
          "verbose": {
            "type": "int, default=0",
            "description": ""
          },
          "fitting": {
            "type": "process. ``1`` prints only summary info, ``2`` prints info per",
            "description": "iteration."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Pseudo-random number generator to control the subsampling in the"
          },
          "binning": {
            "type": "process, and the train/validation data split if early stopping",
            "description": ""
          },
          "Pass": {
            "type": "an int for reproducible output across multiple function calls.",
            "description": ""
          },
          "do_early_stopping_": {
            "type": "bool",
            "description": ""
          },
          "n_iter_": {
            "type": "int",
            "description": ""
          },
          "n_trees_per_iteration_": {
            "type": "int",
            "description": ""
          },
          "this": {
            "type": "is always 1.",
            "description": ""
          },
          "train_score_": {
            "type": "ndarray, shape (n_iter_+1,)",
            "description": ""
          },
          "computed": {
            "type": "according to the ``scoring`` parameter. If ``scoring`` is",
            "description": ""
          },
          "not": {
            "type": "'loss', scores are computed on a subset of at most 10 000",
            "description": "samples. Empty if no early stopping."
          },
          "validation_score_": {
            "type": "ndarray, shape (n_iter_+1,)",
            "description": ""
          },
          "first": {
            "type": "entry is the score of the ensemble before the first iteration.",
            "description": ""
          },
          "Scores": {
            "type": "are computed according to the ``scoring`` parameter. Empty if",
            "description": ""
          },
          "no": {
            "type": "early stopping or if ``validation_fraction`` is None.",
            "description": ""
          },
          "is_categorical_": {
            "type": "ndarray, shape (n_features, ) or None",
            "description": ""
          },
          "Boolean": {
            "type": "mask for the categorical features. ``None`` if there are no",
            "description": ""
          },
          "categorical": {
            "type": "features.",
            "description": ""
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`.",
            "description": ".. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "GradientBoostingRegressor": {
            "type": "Exact gradient boosting method that does not",
            "description": ""
          },
          "scale": {
            "type": "as good on datasets with a large number of samples.",
            "description": "sklearn.tree.DecisionTreeRegressor : A decision tree regressor."
          },
          "RandomForestRegressor": {
            "type": "A meta",
            "description": "estimator that fits a number of decision"
          },
          "tree": {
            "type": "regressors on various sub-samples of the dataset and uses",
            "description": ""
          },
          "averaging": {
            "type": "to improve the statistical performance and control",
            "description": "over-fitting."
          },
          "AdaBoostRegressor": {
            "type": "A meta",
            "description": "estimator that begins by fitting a regressor"
          },
          "regressor": {
            "type": "on the same dataset but where the weights of instances are",
            "description": ""
          },
          "adjusted": {
            "type": "according to the error of the current prediction. As such,",
            "description": ""
          },
          "subsequent": {
            "type": "regressors focus more on difficult cases.",
            "description": "Examples\n--------\n>>> from sklearn.ensemble import HistGradientBoostingRegressor\n>>> from sklearn.datasets import load_diabetes\n>>> X, y = load_diabetes(return_X_y=True)\n>>> est = HistGradientBoostingRegressor().fit(X, y)\n>>> est.score(X, y)\n0.92..."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    GradientBoostingRegressor : Exact gradient boosting method that does not\n        scale as good on datasets with a large number of samples.\n    sklearn.tree.DecisionTreeRegressor : A decision tree regressor.\n    RandomForestRegressor : A meta-estimator that fits a number of decision\n        tree regressors on various sub-samples of the dataset and uses\n        averaging to improve the statistical performance and control\n        over-fitting.\n    AdaBoostRegressor : A meta-estimator that begins by fitting a regressor\n        on the original dataset and then fits additional copies of the\n        regressor on the same dataset but where the weights of instances are\n        adjusted according to the error of the current prediction. As such,\n        subsequent regressors focus more on difficult cases.\n\n    Examples\n    --------\n    >>> from sklearn.ensemble import HistGradientBoostingRegressor\n    >>> from sklearn.datasets import load_diabetes\n    >>> X, y = load_diabetes(return_X_y=True)\n    >>> est = HistGradientBoostingRegressor().fit(X, y)\n    >>> est.score(X, y)\n    0.92...",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.ensemble import HistGradientBoostingRegressor\n    >>> from sklearn.datasets import load_diabetes\n    >>> X, y = load_diabetes(return_X_y=True)\n    >>> est = HistGradientBoostingRegressor().fit(X, y)\n    >>> est.score(X, y)\n    0.92..."
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Fit the gradient boosting model.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            The input samples.\n\n        y : array-like of shape (n_samples,)\n            Target values.\n\n        sample_weight : array-like of shape (n_samples,) default=None\n            Weights of training data.\n\n            .. versionadded:: 0.23",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "Target": {
                "type": "values.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,) default=None"
              },
              "Weights": {
                "type": "of training data.",
                "description": ".. versionadded:: 0.23\nReturns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "Fitted": {
                "type": "estimator.",
                "description": ""
              }
            },
            "returns": "-------\n        self : object\n            Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRequest\n            A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "documentation": {
            "description": "Predict values for X.\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_features)\n            The input samples.",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like, shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted values.",
                "description": ""
              },
              "y": {
                "type": "ndarray, shape (n_samples,)",
                "description": ""
              }
            },
            "returns": "-------\n        y : ndarray, shape (n_samples,)\n            The predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Return the coefficient of determination of the prediction.\n\n        The coefficient of determination :math:`R^2` is defined as\n        :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\n        sum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\n        is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\n        The best possible score is 1.0 and it can be negative (because the\n        model can be arbitrarily worse). A constant model that always predicts\n        the expected value of `y`, disregarding the input features, would get\n        a :math:`R^2` score of 0.0.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples. For some estimators this may be a precomputed\n            kernel matrix or a list of generic objects instead with shape\n            ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n            is the number of samples used in the fitting for the estimator.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True values for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples. For some estimators this may be a precomputed",
                "description": ""
              },
              "kernel": {
                "type": "matrix or a list of generic objects instead with shape",
                "description": "``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``"
              },
              "is": {
                "type": "the number of samples used in the fitting for the estimator.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "values for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ":math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\nNotes\n-----"
              },
              "The": {
                "type": "math:`R^2` score used when calling ``score`` on a regressor uses",
                "description": "``multioutput='uniform_average'`` from version 0.23 to keep consistent"
              },
              "with": {
                "type": "default value of :func:`~sklearn.metrics.r2_score`.",
                "description": ""
              },
              "This": {
                "type": "influences the ``score`` method of all the multioutput",
                "description": ""
              },
              "regressors": {
                "type": "(except for",
                "description": ":class:`~sklearn.multioutput.MultiOutputRegressor`)."
              }
            },
            "returns": "-------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\n\n        Notes\n        -----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "raises": "",
            "see_also": "",
            "notes": "-----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "staged_predict",
          "signature": "staged_predict(self, X)",
          "documentation": {
            "description": "Predict regression target for each iteration.\n\n        This method allows monitoring (i.e. determine error on testing set)\n        after each stage.\n\n        .. versionadded:: 0.24",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted values of the input samples, for each iteration.",
                "description": ""
              },
              "y": {
                "type": "generator of ndarray of shape (n_samples,)",
                "description": ""
              }
            },
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "IsolationForest",
      "documentation": {
        "description": "Isolation Forest Algorithm.\n\n    Return the anomaly score of each sample using the IsolationForest algorithm\n\n    The IsolationForest 'isolates' observations by randomly selecting a feature\n    and then randomly selecting a split value between the maximum and minimum\n    values of the selected feature.\n\n    Since recursive partitioning can be represented by a tree structure, the\n    number of splittings required to isolate a sample is equivalent to the path\n    length from the root node to the terminating node.\n\n    This path length, averaged over a forest of such random trees, is a\n    measure of normality and our decision function.\n\n    Random partitioning produces noticeably shorter paths for anomalies.\n    Hence, when a forest of random trees collectively produce shorter path\n    lengths for particular samples, they are highly likely to be anomalies.\n\n    Read more in the :ref:`User Guide <isolation_forest>`.\n\n    .. versionadded:: 0.18\n\n    Parameters\n    ----------\n    n_estimators : int, default=100\n        The number of base estimators in the ensemble.\n\n    max_samples : \"auto\", int or float, default=\"auto\"\n        The number of samples to draw from X to train each base estimator.\n\n        - If int, then draw `max_samples` samples.\n        - If float, then draw `max_samples * X.shape[0]` samples.\n        - If \"auto\", then `max_samples=min(256, n_samples)`.\n\n        If max_samples is larger than the number of samples provided,\n        all samples will be used for all trees (no sampling).\n\n    contamination : 'auto' or float, default='auto'\n        The amount of contamination of the data set, i.e. the proportion\n        of outliers in the data set. Used when fitting to define the threshold\n        on the scores of the samples.\n\n        - If 'auto', the threshold is determined as in the\n          original paper.\n        - If float, the contamination should be in the range (0, 0.5].\n\n        .. versionchanged:: 0.22\n           The default value of ``contamination`` changed from 0.1\n           to ``'auto'``.\n\n    max_features : int or float, default=1.0\n        The number of features to draw from X to train each base estimator.\n\n        - If int, then draw `max_features` features.\n        - If float, then draw `max(1, int(max_features * n_features_in_))` features.\n\n        Note: using a float number less than 1.0 or integer less than number of\n        features will enable feature subsampling and leads to a longer runtime.\n\n    bootstrap : bool, default=False\n        If True, individual trees are fit on random subsets of the training\n        data sampled with replacement. If False, sampling without replacement\n        is performed.\n\n    n_jobs : int, default=None\n        The number of jobs to run in parallel for :meth:`fit`. ``None`` means 1\n        unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using\n        all processors. See :term:`Glossary <n_jobs>` for more details.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls the pseudo-randomness of the selection of the feature\n        and split values for each branching step and each tree in the forest.\n\n        Pass an int for reproducible results across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    verbose : int, default=0\n        Controls the verbosity of the tree building process.\n\n    warm_start : bool, default=False\n        When set to ``True``, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble, otherwise, just fit a whole\n        new forest. See :term:`the Glossary <warm_start>`.\n\n        .. versionadded:: 0.21\n\n    Attributes\n    ----------\n    estimator_ : :class:`~sklearn.tree.ExtraTreeRegressor` instance\n        The child estimator template used to create the collection of\n        fitted sub-estimators.\n\n        .. versionadded:: 1.2\n           `base_estimator_` was renamed to `estimator_`.\n\n    estimators_ : list of ExtraTreeRegressor instances\n        The collection of fitted sub-estimators.\n\n    estimators_features_ : list of ndarray\n        The subset of drawn features for each base estimator.\n\n    estimators_samples_ : list of ndarray\n        The subset of drawn samples (i.e., the in-bag samples) for each base\n        estimator.\n\n    max_samples_ : int\n        The actual number of samples.\n\n    offset_ : float\n        Offset used to define the decision function from the raw scores. We\n        have the relation: ``decision_function = score_samples - offset_``.\n        ``offset_`` is defined as follows. When the contamination parameter is\n        set to \"auto\", the offset is equal to -0.5 as the scores of inliers are\n        close to 0 and the scores of outliers are close to -1. When a\n        contamination parameter different than \"auto\" is provided, the offset\n        is defined in such a way we obtain the expected number of outliers\n        (samples with decision function < 0) in training.\n\n        .. versionadded:: 0.20\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    See Also\n    --------\n    sklearn.covariance.EllipticEnvelope : An object for detecting outliers in a\n        Gaussian distributed dataset.\n    sklearn.svm.OneClassSVM : Unsupervised Outlier Detection.\n        Estimate the support of a high-dimensional distribution.\n        The implementation is based on libsvm.\n    sklearn.neighbors.LocalOutlierFactor : Unsupervised Outlier Detection\n        using Local Outlier Factor (LOF).\n\n    Notes\n    -----\n    The implementation is based on an ensemble of ExtraTreeRegressor. The\n    maximum depth of each tree is set to ``ceil(log_2(n))`` where\n    :math:`n` is the number of samples used to build the tree\n    (see (Liu et al., 2008) for more details).\n\n    References\n    ----------\n    .. [1] Liu, Fei Tony, Ting, Kai Ming and Zhou, Zhi-Hua. \"Isolation forest.\"\n           Data Mining, 2008. ICDM'08. Eighth IEEE International Conference on.\n    .. [2] Liu, Fei Tony, Ting, Kai Ming and Zhou, Zhi-Hua. \"Isolation-based\n           anomaly detection.\" ACM Transactions on Knowledge Discovery from\n           Data (TKDD) 6.1 (2012): 3.",
        "parameters": {
          "n_estimators": {
            "type": "int, default=100",
            "description": ""
          },
          "The": {
            "type": "implementation is based on an ensemble of ExtraTreeRegressor. The",
            "description": ""
          },
          "max_samples": {
            "type": "\"auto\", int or float, default=\"auto\"",
            "description": ""
          },
          "If": {
            "type": "True, individual trees are fit on random subsets of the training",
            "description": ""
          },
          "all": {
            "type": "processors. See :term:`Glossary <n_jobs>` for more details.",
            "description": ""
          },
          "contamination": {
            "type": "parameter different than \"auto\" is provided, the offset",
            "description": ""
          },
          "of": {
            "type": "outliers in the data set. Used when fitting to define the threshold",
            "description": ""
          },
          "on": {
            "type": "the scores of the samples.",
            "description": "- If 'auto', the threshold is determined as in the"
          },
          "original": {
            "type": "paper.",
            "description": "- If float, the contamination should be in the range (0, 0.5].\n.. versionchanged:: 0.22"
          },
          "to": {
            "type": "``'auto'``.",
            "description": ""
          },
          "max_features": {
            "type": "int or float, default=1.0",
            "description": ""
          },
          "Note": {
            "type": "using a float number less than 1.0 or integer less than number of",
            "description": ""
          },
          "features": {
            "type": "will enable feature subsampling and leads to a longer runtime.",
            "description": ""
          },
          "bootstrap": {
            "type": "bool, default=False",
            "description": ""
          },
          "data": {
            "type": "sampled with replacement. If False, sampling without replacement",
            "description": ""
          },
          "is": {
            "type": "defined in such a way we obtain the expected number of outliers",
            "description": "(samples with decision function < 0) in training.\n.. versionadded:: 0.20"
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": ""
          },
          "unless": {
            "type": "in a :obj:`joblib.parallel_backend` context. ``-1`` means using",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Controls": {
            "type": "the verbosity of the tree building process.",
            "description": ""
          },
          "and": {
            "type": "add more estimators to the ensemble, otherwise, just fit a whole",
            "description": ""
          },
          "Pass": {
            "type": "an int for reproducible results across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------\nsklearn.covariance.EllipticEnvelope : An object for detecting outliers in a"
          },
          "verbose": {
            "type": "int, default=0",
            "description": ""
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": ""
          },
          "When": {
            "type": "set to ``True``, reuse the solution of the previous call to fit",
            "description": ""
          },
          "new": {
            "type": "forest. See :term:`the Glossary <warm_start>`.",
            "description": ".. versionadded:: 0.21\nAttributes\n----------"
          },
          "estimator_": {
            "type": ":class:`~sklearn.tree.ExtraTreeRegressor` instance",
            "description": ""
          },
          "fitted": {
            "type": "sub-estimators.",
            "description": ".. versionadded:: 1.2\n`base_estimator_` was renamed to `estimator_`."
          },
          "estimators_": {
            "type": "list of ExtraTreeRegressor instances",
            "description": ""
          },
          "estimators_features_": {
            "type": "list of ndarray",
            "description": ""
          },
          "estimators_samples_": {
            "type": "list of ndarray",
            "description": ""
          },
          "max_samples_": {
            "type": "int",
            "description": ""
          },
          "offset_": {
            "type": "float",
            "description": ""
          },
          "Offset": {
            "type": "used to define the decision function from the raw scores. We",
            "description": ""
          },
          "have": {
            "type": "the relation: ``decision_function = score_samples - offset_``.",
            "description": "``offset_`` is defined as follows. When the contamination parameter is"
          },
          "set": {
            "type": "to \"auto\", the offset is equal to -0.5 as the scores of inliers are",
            "description": ""
          },
          "close": {
            "type": "to 0 and the scores of outliers are close to -1. When a",
            "description": ""
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`.",
            "description": ".. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "Gaussian": {
            "type": "distributed dataset.",
            "description": "sklearn.svm.OneClassSVM : Unsupervised Outlier Detection."
          },
          "Estimate": {
            "type": "the support of a high-dimensional distribution.",
            "description": ""
          },
          "using": {
            "type": "Local Outlier Factor (LOF).",
            "description": "Notes\n-----"
          },
          "maximum": {
            "type": "depth of each tree is set to ``ceil(log_2(n))`` where",
            "description": ":math:`n` is the number of samples used to build the tree\n(see (Liu et al., 2008) for more details).\nReferences\n----------\n.. [1] Liu, Fei Tony, Ting, Kai Ming and Zhou, Zhi-Hua. \"Isolation forest.\""
          },
          "Data": {
            "type": "TKDD",
            "description": "6.1 (2012): 3.\nExamples\n--------\n>>> from sklearn.ensemble import IsolationForest\n>>> X = [[-1.1], [0.3], [0.5], [100]]\n>>> clf = IsolationForest(random_state=0).fit(X)\n>>> clf.predict([[0.1], [0], [90]])"
          },
          "anomaly": {
            "type": "detection.\" ACM Transactions on Knowledge Discovery from",
            "description": ""
          },
          "array": {
            "type": "[ 1,  1, -1]",
            "description": ""
          },
          "For": {
            "type": "an example of using isolation forest for anomaly detection see",
            "description": ":ref:`sphx_glr_auto_examples_ensemble_plot_isolation_forest.py`."
          }
        },
        "returns": "the anomaly score of each sample using the IsolationForest algorithm\n\n    The IsolationForest 'isolates' observations by randomly selecting a feature\n    and then randomly selecting a split value between the maximum and minimum\n    values of the selected feature.\n\n    Since recursive partitioning can be represented by a tree structure, the\n    number of splittings required to isolate a sample is equivalent to the path\n    length from the root node to the terminating node.\n\n    This path length, averaged over a forest of such random trees, is a\n    measure of normality and our decision function.\n\n    Random partitioning produces noticeably shorter paths for anomalies.\n    Hence, when a forest of random trees collectively produce shorter path\n    lengths for particular samples, they are highly likely to be anomalies.\n\n    Read more in the :ref:`User Guide <isolation_forest>`.\n\n    .. versionadded:: 0.18\n\n    Parameters\n    ----------\n    n_estimators : int, default=100\n        The number of base estimators in the ensemble.\n\n    max_samples : \"auto\", int or float, default=\"auto\"\n        The number of samples to draw from X to train each base estimator.\n\n        - If int, then draw `max_samples` samples.\n        - If float, then draw `max_samples * X.shape[0]` samples.\n        - If \"auto\", then `max_samples=min(256, n_samples)`.\n\n        If max_samples is larger than the number of samples provided,\n        all samples will be used for all trees (no sampling).\n\n    contamination : 'auto' or float, default='auto'\n        The amount of contamination of the data set, i.e. the proportion\n        of outliers in the data set. Used when fitting to define the threshold\n        on the scores of the samples.\n\n        - If 'auto', the threshold is determined as in the\n          original paper.\n        - If float, the contamination should be in the range (0, 0.5].\n\n        .. versionchanged:: 0.22\n           The default value of ``contamination`` changed from 0.1\n           to ``'auto'``.\n\n    max_features : int or float, default=1.0\n        The number of features to draw from X to train each base estimator.\n\n        - If int, then draw `max_features` features.\n        - If float, then draw `max(1, int(max_features * n_features_in_))` features.\n\n        Note: using a float number less than 1.0 or integer less than number of\n        features will enable feature subsampling and leads to a longer runtime.\n\n    bootstrap : bool, default=False\n        If True, individual trees are fit on random subsets of the training\n        data sampled with replacement. If False, sampling without replacement\n        is performed.\n\n    n_jobs : int, default=None\n        The number of jobs to run in parallel for :meth:`fit`. ``None`` means 1\n        unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using\n        all processors. See :term:`Glossary <n_jobs>` for more details.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls the pseudo-randomness of the selection of the feature\n        and split values for each branching step and each tree in the forest.\n\n        Pass an int for reproducible results across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    verbose : int, default=0\n        Controls the verbosity of the tree building process.\n\n    warm_start : bool, default=False\n        When set to ``True``, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble, otherwise, just fit a whole\n        new forest. See :term:`the Glossary <warm_start>`.\n\n        .. versionadded:: 0.21\n\n    Attributes\n    ----------\n    estimator_ : :class:`~sklearn.tree.ExtraTreeRegressor` instance\n        The child estimator template used to create the collection of\n        fitted sub-estimators.\n\n        .. versionadded:: 1.2\n           `base_estimator_` was renamed to `estimator_`.\n\n    estimators_ : list of ExtraTreeRegressor instances\n        The collection of fitted sub-estimators.\n\n    estimators_features_ : list of ndarray\n        The subset of drawn features for each base estimator.\n\n    estimators_samples_ : list of ndarray\n        The subset of drawn samples (i.e., the in-bag samples) for each base\n        estimator.\n\n    max_samples_ : int\n        The actual number of samples.\n\n    offset_ : float\n        Offset used to define the decision function from the raw scores. We\n        have the relation: ``decision_function = score_samples - offset_``.\n        ``offset_`` is defined as follows. When the contamination parameter is\n        set to \"auto\", the offset is equal to -0.5 as the scores of inliers are\n        close to 0 and the scores of outliers are close to -1. When a\n        contamination parameter different than \"auto\" is provided, the offset\n        is defined in such a way we obtain the expected number of outliers\n        (samples with decision function < 0) in training.\n\n        .. versionadded:: 0.20\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    See Also\n    --------\n    sklearn.covariance.EllipticEnvelope : An object for detecting outliers in a\n        Gaussian distributed dataset.\n    sklearn.svm.OneClassSVM : Unsupervised Outlier Detection.\n        Estimate the support of a high-dimensional distribution.\n        The implementation is based on libsvm.\n    sklearn.neighbors.LocalOutlierFactor : Unsupervised Outlier Detection\n        using Local Outlier Factor (LOF).\n\n    Notes\n    -----\n    The implementation is based on an ensemble of ExtraTreeRegressor. The\n    maximum depth of each tree is set to ``ceil(log_2(n))`` where\n    :math:`n` is the number of samples used to build the tree\n    (see (Liu et al., 2008) for more details).\n\n    References\n    ----------\n    .. [1] Liu, Fei Tony, Ting, Kai Ming and Zhou, Zhi-Hua. \"Isolation forest.\"\n           Data Mining, 2008. ICDM'08. Eighth IEEE International Conference on.\n    .. [2] Liu, Fei Tony, Ting, Kai Ming and Zhou, Zhi-Hua. \"Isolation-based\n           anomaly detection.\" ACM Transactions on Knowledge Discovery from\n           Data (TKDD) 6.1 (2012): 3.\n\n    Examples\n    --------\n    >>> from sklearn.ensemble import IsolationForest\n    >>> X = [[-1.1], [0.3], [0.5], [100]]\n    >>> clf = IsolationForest(random_state=0).fit(X)\n    >>> clf.predict([[0.1], [0], [90]])\n    array([ 1,  1, -1])\n\n    For an example of using isolation forest for anomaly detection see\n    :ref:`sphx_glr_auto_examples_ensemble_plot_isolation_forest.py`.",
        "raises": "",
        "see_also": "--------\n    sklearn.covariance.EllipticEnvelope : An object for detecting outliers in a\n        Gaussian distributed dataset.\n    sklearn.svm.OneClassSVM : Unsupervised Outlier Detection.\n        Estimate the support of a high-dimensional distribution.\n        The implementation is based on libsvm.\n    sklearn.neighbors.LocalOutlierFactor : Unsupervised Outlier Detection\n        using Local Outlier Factor (LOF).\n\n    Notes\n    -----\n    The implementation is based on an ensemble of ExtraTreeRegressor. The\n    maximum depth of each tree is set to ``ceil(log_2(n))`` where\n    :math:`n` is the number of samples used to build the tree\n    (see (Liu et al., 2008) for more details).\n\n    References\n    ----------\n    .. [1] Liu, Fei Tony, Ting, Kai Ming and Zhou, Zhi-Hua. \"Isolation forest.\"\n           Data Mining, 2008. ICDM'08. Eighth IEEE International Conference on.\n    .. [2] Liu, Fei Tony, Ting, Kai Ming and Zhou, Zhi-Hua. \"Isolation-based\n           anomaly detection.\" ACM Transactions on Knowledge Discovery from\n           Data (TKDD) 6.1 (2012): 3.\n\n    Examples\n    --------\n    >>> from sklearn.ensemble import IsolationForest\n    >>> X = [[-1.1], [0.3], [0.5], [100]]\n    >>> clf = IsolationForest(random_state=0).fit(X)\n    >>> clf.predict([[0.1], [0], [90]])\n    array([ 1,  1, -1])\n\n    For an example of using isolation forest for anomaly detection see\n    :ref:`sphx_glr_auto_examples_ensemble_plot_isolation_forest.py`.",
        "notes": "using a float number less than 1.0 or integer less than number of\n        features will enable feature subsampling and leads to a longer runtime.\n\n    bootstrap : bool, default=False\n        If True, individual trees are fit on random subsets of the training\n        data sampled with replacement. If False, sampling without replacement\n        is performed.\n\n    n_jobs : int, default=None\n        The number of jobs to run in parallel for :meth:`fit`. ``None`` means 1\n        unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using\n        all processors. See :term:`Glossary <n_jobs>` for more details.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls the pseudo-randomness of the selection of the feature\n        and split values for each branching step and each tree in the forest.\n\n        Pass an int for reproducible results across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    verbose : int, default=0\n        Controls the verbosity of the tree building process.\n\n    warm_start : bool, default=False\n        When set to ``True``, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble, otherwise, just fit a whole\n        new forest. See :term:`the Glossary <warm_start>`.\n\n        .. versionadded:: 0.21\n\n    Attributes\n    ----------\n    estimator_ : :class:`~sklearn.tree.ExtraTreeRegressor` instance\n        The child estimator template used to create the collection of\n        fitted sub-estimators.\n\n        .. versionadded:: 1.2\n           `base_estimator_` was renamed to `estimator_`.\n\n    estimators_ : list of ExtraTreeRegressor instances\n        The collection of fitted sub-estimators.\n\n    estimators_features_ : list of ndarray\n        The subset of drawn features for each base estimator.\n\n    estimators_samples_ : list of ndarray\n        The subset of drawn samples (i.e., the in-bag samples) for each base\n        estimator.\n\n    max_samples_ : int\n        The actual number of samples.\n\n    offset_ : float\n        Offset used to define the decision function from the raw scores. We\n        have the relation: ``decision_function = score_samples - offset_``.\n        ``offset_`` is defined as follows. When the contamination parameter is\n        set to \"auto\", the offset is equal to -0.5 as the scores of inliers are\n        close to 0 and the scores of outliers are close to -1. When a\n        contamination parameter different than \"auto\" is provided, the offset\n        is defined in such a way we obtain the expected number of outliers\n        (samples with decision function < 0) in training.\n\n        .. versionadded:: 0.20\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    See Also\n    --------\n    sklearn.covariance.EllipticEnvelope : An object for detecting outliers in a\n        Gaussian distributed dataset.\n    sklearn.svm.OneClassSVM : Unsupervised Outlier Detection.\n        Estimate the support of a high-dimensional distribution.\n        The implementation is based on libsvm.\n    sklearn.neighbors.LocalOutlierFactor : Unsupervised Outlier Detection\n        using Local Outlier Factor (LOF).\n\n    Notes\n    -----\n    The implementation is based on an ensemble of ExtraTreeRegressor. The\n    maximum depth of each tree is set to ``ceil(log_2(n))`` where\n    :math:`n` is the number of samples used to build the tree\n    (see (Liu et al., 2008) for more details).\n\n    References\n    ----------\n    .. [1] Liu, Fei Tony, Ting, Kai Ming and Zhou, Zhi-Hua. \"Isolation forest.\"\n           Data Mining, 2008. ICDM'08. Eighth IEEE International Conference on.\n    .. [2] Liu, Fei Tony, Ting, Kai Ming and Zhou, Zhi-Hua. \"Isolation-based\n           anomaly detection.\" ACM Transactions on Knowledge Discovery from\n           Data (TKDD) 6.1 (2012): 3.\n\n    Examples\n    --------\n    >>> from sklearn.ensemble import IsolationForest\n    >>> X = [[-1.1], [0.3], [0.5], [100]]\n    >>> clf = IsolationForest(random_state=0).fit(X)\n    >>> clf.predict([[0.1], [0], [90]])\n    array([ 1,  1, -1])\n\n    For an example of using isolation forest for anomaly detection see\n    :ref:`sphx_glr_auto_examples_ensemble_plot_isolation_forest.py`.",
        "examples": "--------\n    >>> from sklearn.ensemble import IsolationForest\n    >>> X = [[-1.1], [0.3], [0.5], [100]]\n    >>> clf = IsolationForest(random_state=0).fit(X)\n    >>> clf.predict([[0.1], [0], [90]])\n    array([ 1,  1, -1])\n\n    For an example of using isolation forest for anomaly detection see\n    :ref:`sphx_glr_auto_examples_ensemble_plot_isolation_forest.py`."
      },
      "methods": [
        {
          "name": "decision_function",
          "signature": "decision_function(self, X)",
          "documentation": {
            "description": "Average anomaly score of X of the base classifiers.\n\n        The anomaly score of an input sample is computed as\n        the mean anomaly score of the trees in the forest.\n\n        The measure of normality of an observation given a tree is the depth\n        of the leaf containing this observation, which is equivalent to\n        the number of splittings required to isolate this point. In case of\n        several observations n_left in the leaf, the average path length of\n        a n_left samples isolation tree is added.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        Returns\n        -------\n        scores : ndarray of shape (n_samples,)\n            The anomaly score of the input samples.\n            The lower, the more abnormal. Negative scores represent outliers,\n            positive scores represent inliers.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "user can set the number of jobs in the joblib context to control the",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "scores": {
                "type": "ndarray of shape (n_samples,)",
                "description": ""
              },
              "positive": {
                "type": "scores represent inliers.",
                "description": "Notes\n-----"
              },
              "This": {
                "type": "inherently does NOT use the ``n_jobs`` parameter initialized in the class,",
                "description": ""
              },
              "which": {
                "type": "is used during ``fit``. This is because, calculating the score may",
                "description": ""
              },
              "actually": {
                "type": "be faster without parallelization for a small number of samples,",
                "description": ""
              },
              "such": {
                "type": "as for 1000 samples or less.",
                "description": ""
              },
              "number": {
                "type": "of parallel jobs.",
                "description": ".. code-block:: python"
              },
              "from": {
                "type": "joblib import parallel_backend",
                "description": "# Note, we use threading here as the decision_function method is\n# not CPU bound."
              },
              "with": {
                "type": "parallel_backend(\"threading\", n_jobs=4):",
                "description": "model.decision_function(X)"
              }
            },
            "returns": "-------\n        scores : ndarray of shape (n_samples,)\n            The anomaly score of the input samples.\n            The lower, the more abnormal. Negative scores represent outliers,\n            positive scores represent inliers.\n\n        Notes\n        -----\n        The decision_function method can be parallelized by setting a joblib context.\n        This inherently does NOT use the ``n_jobs`` parameter initialized in the class,\n        which is used during ``fit``. This is because, calculating the score may\n        actually be faster without parallelization for a small number of samples,\n        such as for 1000 samples or less.\n        The user can set the number of jobs in the joblib context to control the\n        number of parallel jobs.\n\n        .. code-block:: python\n\n            from joblib import parallel_backend\n\n            # Note, we use threading here as the decision_function method is\n            # not CPU bound.\n            with parallel_backend(\"threading\", n_jobs=4):\n                model.decision_function(X)",
            "raises": "",
            "see_also": "",
            "notes": "-----\n        The decision_function method can be parallelized by setting a joblib context.\n        This inherently does NOT use the ``n_jobs`` parameter initialized in the class,\n        which is used during ``fit``. This is because, calculating the score may\n        actually be faster without parallelization for a small number of samples,\n        such as for 1000 samples or less.\n        The user can set the number of jobs in the joblib context to control the\n        number of parallel jobs.\n\n        .. code-block:: python\n\n            from joblib import parallel_backend\n\n            # Note, we use threading here as the decision_function method is\n            # not CPU bound.\n            with parallel_backend(\"threading\", n_jobs=4):\n                model.decision_function(X)",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y=None, sample_weight=None)",
          "documentation": {
            "description": "Fit estimator.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Use ``dtype=np.float32`` for maximum\n            efficiency. Sparse matrices are also supported, use sparse\n            ``csc_matrix`` for maximum efficiency.\n\n        y : Ignored\n            Not used, present for API consistency by convention.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples. Use ``dtype=np.float32`` for maximum",
                "description": "efficiency. Sparse matrices are also supported, use sparse\n``csc_matrix`` for maximum efficiency."
              },
              "y": {
                "type": "Ignored",
                "description": ""
              },
              "Not": {
                "type": "used, present for API consistency by convention.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "Fitted": {
                "type": "estimator.",
                "description": ""
              }
            },
            "returns": "-------\n        self : object\n            Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit_predict",
          "signature": "fit_predict(self, X, y=None, **kwargs)",
          "documentation": {
            "description": "Perform fit on X and returns labels for X.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples.",
                "description": ""
              },
              "y": {
                "type": "ndarray of shape (n_samples,)",
                "description": ""
              },
              "Not": {
                "type": "used, present for API consistency by convention.",
                "description": "**kwargs : dict"
              },
              "Arguments": {
                "type": "to be passed to ``fit``.",
                "description": ".. versionadded:: 1.4\nReturns\n-------"
              },
              "1": {
                "type": "for inliers, -1 for outliers.",
                "description": ""
              },
              "to": {
                "type": "be passed to ``fit``.",
                "description": ".. versionadded:: 1.4\nReturns\n-------"
              }
            },
            "returns": "-1 for outliers and 1 for inliers.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples.\n\n        y : Ignored\n            Not used, present for API consistency by convention.\n\n        **kwargs : dict\n            Arguments to be passed to ``fit``.\n\n            .. versionadded:: 1.4",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        .. versionadded:: 1.5",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRouter\n            A :class:`~sklearn.utils.metadata_routing.MetadataRouter` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "documentation": {
            "description": "Predict if a particular sample is an outlier or not.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, it will be converted to\n            ``dtype=np.float32`` and if a sparse matrix is provided\n            to a sparse ``csr_matrix``.\n\n        Returns\n        -------\n        is_inlier : ndarray of shape (n_samples,)\n            For each observation, tells whether or not (+1 or -1) it should\n            be considered as an inlier according to the fitted model.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predict method can be parallelized by setting a joblib context. This",
                "description": ""
              },
              "to": {
                "type": "a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "is_inlier": {
                "type": "ndarray of shape (n_samples,)",
                "description": ""
              },
              "For": {
                "type": "each observation, tells whether or not (+1 or -1) it should",
                "description": ""
              },
              "be": {
                "type": "considered as an inlier according to the fitted model.",
                "description": "Notes\n-----"
              },
              "inherently": {
                "type": "does NOT use the ``n_jobs`` parameter initialized in the class,",
                "description": ""
              },
              "which": {
                "type": "is used during ``fit``. This is because, predict may actually be faster",
                "description": ""
              },
              "without": {
                "type": "parallelization for a small number of samples,",
                "description": ""
              },
              "such": {
                "type": "as for 1000 samples or less. The user can set the",
                "description": ""
              },
              "number": {
                "type": "of jobs in the joblib context to control the number of parallel jobs.",
                "description": ".. code-block:: python"
              },
              "from": {
                "type": "joblib import parallel_backend",
                "description": "# Note, we use threading here as the predict method is not CPU bound."
              },
              "with": {
                "type": "parallel_backend(\"threading\", n_jobs=4):",
                "description": "model.predict(X)"
              }
            },
            "returns": "-------\n        is_inlier : ndarray of shape (n_samples,)\n            For each observation, tells whether or not (+1 or -1) it should\n            be considered as an inlier according to the fitted model.\n\n        Notes\n        -----\n        The predict method can be parallelized by setting a joblib context. This\n        inherently does NOT use the ``n_jobs`` parameter initialized in the class,\n        which is used during ``fit``. This is because, predict may actually be faster\n        without parallelization for a small number of samples,\n        such as for 1000 samples or less. The user can set the\n        number of jobs in the joblib context to control the number of parallel jobs.\n\n        .. code-block:: python\n\n            from joblib import parallel_backend\n\n            # Note, we use threading here as the predict method is not CPU bound.\n            with parallel_backend(\"threading\", n_jobs=4):\n                model.predict(X)",
            "raises": "",
            "see_also": "",
            "notes": "-----\n        The predict method can be parallelized by setting a joblib context. This\n        inherently does NOT use the ``n_jobs`` parameter initialized in the class,\n        which is used during ``fit``. This is because, predict may actually be faster\n        without parallelization for a small number of samples,\n        such as for 1000 samples or less. The user can set the\n        number of jobs in the joblib context to control the number of parallel jobs.\n\n        .. code-block:: python\n\n            from joblib import parallel_backend\n\n            # Note, we use threading here as the predict method is not CPU bound.\n            with parallel_backend(\"threading\", n_jobs=4):\n                model.predict(X)",
            "examples": ""
          }
        },
        {
          "name": "score_samples",
          "signature": "score_samples(self, X)",
          "documentation": {
            "description": "Opposite of the anomaly score defined in the original paper.\n\n        The anomaly score of an input sample is computed as\n        the mean anomaly score of the trees in the forest.\n\n        The measure of normality of an observation given a tree is the depth\n        of the leaf containing this observation, which is equivalent to\n        the number of splittings required to isolate this point. In case of\n        several observations n_left in the leaf, the average path length of\n        a n_left samples isolation tree is added.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples.\n\n        Returns\n        -------\n        scores : ndarray of shape (n_samples,)\n            The anomaly score of the input samples.\n            The lower, the more abnormal.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "user can set the number of jobs in the joblib context to control the",
                "description": ""
              },
              "scores": {
                "type": "ndarray of shape (n_samples,)",
                "description": ""
              },
              "inherently": {
                "type": "does NOT use the ``n_jobs`` parameter initialized in the class,",
                "description": ""
              },
              "which": {
                "type": "is used during ``fit``. This is because, calculating the score may",
                "description": ""
              },
              "actually": {
                "type": "be faster without parallelization for a small number of samples,",
                "description": ""
              },
              "such": {
                "type": "as for 1000 samples or less.",
                "description": ""
              },
              "number": {
                "type": "of parallel jobs.",
                "description": ".. code-block:: python"
              },
              "from": {
                "type": "joblib import parallel_backend",
                "description": "# Note, we use threading here as the score_samples method is not CPU bound."
              },
              "with": {
                "type": "parallel_backend(\"threading\", n_jobs=4):",
                "description": "model.score(X)"
              }
            },
            "returns": "-------\n        scores : ndarray of shape (n_samples,)\n            The anomaly score of the input samples.\n            The lower, the more abnormal.\n\n        Notes\n        -----\n        The score function method can be parallelized by setting a joblib context. This\n        inherently does NOT use the ``n_jobs`` parameter initialized in the class,\n        which is used during ``fit``. This is because, calculating the score may\n        actually be faster without parallelization for a small number of samples,\n        such as for 1000 samples or less.\n        The user can set the number of jobs in the joblib context to control the\n        number of parallel jobs.\n\n        .. code-block:: python\n\n            from joblib import parallel_backend\n\n            # Note, we use threading here as the score_samples method is not CPU bound.\n            with parallel_backend(\"threading\", n_jobs=4):\n                model.score(X)",
            "raises": "",
            "see_also": "",
            "notes": "-----\n        The score function method can be parallelized by setting a joblib context. This\n        inherently does NOT use the ``n_jobs`` parameter initialized in the class,\n        which is used during ``fit``. This is because, calculating the score may\n        actually be faster without parallelization for a small number of samples,\n        such as for 1000 samples or less.\n        The user can set the number of jobs in the joblib context to control the\n        number of parallel jobs.\n\n        .. code-block:: python\n\n            from joblib import parallel_backend\n\n            # Note, we use threading here as the score_samples method is not CPU bound.\n            with parallel_backend(\"threading\", n_jobs=4):\n                model.score(X)",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.ensemble._iforest.IsolationForest, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._iforest.IsolationForest",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "RandomForestClassifier",
      "documentation": {
        "description": "A random forest classifier.\n\n    A random forest is a meta estimator that fits a number of decision tree\n    classifiers on various sub-samples of the dataset and uses averaging to\n    improve the predictive accuracy and control over-fitting.\n    Trees in the forest use the best split strategy, i.e. equivalent to passing\n    `splitter=\"best\"` to the underlying :class:`~sklearn.tree.DecisionTreeClassifier`.\n    The sub-sample size is controlled with the `max_samples` parameter if\n    `bootstrap=True` (default), otherwise the whole dataset is used to build\n    each tree.\n\n    For a comparison between tree-based ensemble models see the example\n    :ref:`sphx_glr_auto_examples_ensemble_plot_forest_hist_grad_boosting_comparison.py`.\n\n    Read more in the :ref:`User Guide <forest>`.\n\n    Parameters\n    ----------\n    n_estimators : int, default=100\n        The number of trees in the forest.\n\n        .. versionchanged:: 0.22\n           The default value of ``n_estimators`` changed from 10 to 100\n           in 0.22.\n\n    criterion : {\"gini\", \"entropy\", \"log_loss\"}, default=\"gini\"\n        The function to measure the quality of a split. Supported criteria are\n        \"gini\" for the Gini impurity and \"log_loss\" and \"entropy\" both for the\n        Shannon information gain, see :ref:`tree_mathematical_formulation`.\n        Note: This parameter is tree-specific.\n\n    max_depth : int, default=None\n        The maximum depth of the tree. If None, then nodes are expanded until\n        all leaves are pure or until all leaves contain less than\n        min_samples_split samples.\n\n    min_samples_split : int or float, default=2\n        The minimum number of samples required to split an internal node:\n\n        - If int, then consider `min_samples_split` as the minimum number.\n        - If float, then `min_samples_split` is a fraction and\n          `ceil(min_samples_split * n_samples)` are the minimum\n          number of samples for each split.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_samples_leaf : int or float, default=1\n        The minimum number of samples required to be at a leaf node.\n        A split point at any depth will only be considered if it leaves at\n        least ``min_samples_leaf`` training samples in each of the left and\n        right branches.  This may have the effect of smoothing the model,\n        especially in regression.\n\n        - If int, then consider `min_samples_leaf` as the minimum number.\n        - If float, then `min_samples_leaf` is a fraction and\n          `ceil(min_samples_leaf * n_samples)` are the minimum\n          number of samples for each node.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_weight_fraction_leaf : float, default=0.0\n        The minimum weighted fraction of the sum total of weights (of all\n        the input samples) required to be at a leaf node. Samples have\n        equal weight when sample_weight is not provided.\n\n    max_features : {\"sqrt\", \"log2\", None}, int or float, default=\"sqrt\"\n        The number of features to consider when looking for the best split:\n\n        - If int, then consider `max_features` features at each split.\n        - If float, then `max_features` is a fraction and\n          `max(1, int(max_features * n_features_in_))` features are considered at each\n          split.\n        - If \"sqrt\", then `max_features=sqrt(n_features)`.\n        - If \"log2\", then `max_features=log2(n_features)`.\n        - If None, then `max_features=n_features`.\n\n        .. versionchanged:: 1.1\n            The default of `max_features` changed from `\"auto\"` to `\"sqrt\"`.\n\n        Note: the search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features.\n\n    max_leaf_nodes : int, default=None\n        Grow trees with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        If None then unlimited number of leaf nodes.\n\n    min_impurity_decrease : float, default=0.0\n        A node will be split if this split induces a decrease of the impurity\n        greater than or equal to this value.\n\n        The weighted impurity decrease equation is the following::\n\n            N_t / N * (impurity - N_t_R / N_t * right_impurity\n                                - N_t_L / N_t * left_impurity)\n\n        where ``N`` is the total number of samples, ``N_t`` is the number of\n        samples at the current node, ``N_t_L`` is the number of samples in the\n        left child, and ``N_t_R`` is the number of samples in the right child.\n\n        ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n        if ``sample_weight`` is passed.\n\n        .. versionadded:: 0.19\n\n    bootstrap : bool, default=True\n        Whether bootstrap samples are used when building trees. If False, the\n        whole dataset is used to build each tree.\n\n    oob_score : bool or callable, default=False\n        Whether to use out-of-bag samples to estimate the generalization score.\n        By default, :func:`~sklearn.metrics.accuracy_score` is used.\n        Provide a callable with signature `metric(y_true, y_pred)` to use a\n        custom metric. Only available if `bootstrap=True`.\n\n    n_jobs : int, default=None\n        The number of jobs to run in parallel. :meth:`fit`, :meth:`predict`,\n        :meth:`decision_path` and :meth:`apply` are all parallelized over the\n        trees. ``None`` means 1 unless in a :obj:`joblib.parallel_backend`\n        context. ``-1`` means using all processors. See :term:`Glossary\n        <n_jobs>` for more details.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls both the randomness of the bootstrapping of the samples used\n        when building trees (if ``bootstrap=True``) and the sampling of the\n        features to consider when looking for the best split at each node\n        (if ``max_features < n_features``).\n        See :term:`Glossary <random_state>` for details.\n\n    verbose : int, default=0\n        Controls the verbosity when fitting and predicting.\n\n    warm_start : bool, default=False\n        When set to ``True``, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble, otherwise, just fit a whole\n        new forest. See :term:`Glossary <warm_start>` and\n        :ref:`tree_ensemble_warm_start` for details.\n\n    class_weight : {\"balanced\", \"balanced_subsample\"}, dict or list of dicts,             default=None\n        Weights associated with classes in the form ``{class_label: weight}``.\n        If not given, all classes are supposed to have weight one. For\n        multi-output problems, a list of dicts can be provided in the same\n        order as the columns of y.\n\n        Note that for multioutput (including multilabel) weights should be\n        defined for each class of every column in its own dict. For example,\n        for four-class multilabel classification weights should be\n        [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of\n        [{1:1}, {2:5}, {3:1}, {4:1}].\n\n        The \"balanced\" mode uses the values of y to automatically adjust\n        weights inversely proportional to class frequencies in the input data\n        as ``n_samples / (n_classes * np.bincount(y))``\n\n        The \"balanced_subsample\" mode is the same as \"balanced\" except that\n        weights are computed based on the bootstrap sample for every tree\n        grown.\n\n        For multi-output, the weights of each column of y will be multiplied.\n\n        Note that these weights will be multiplied with sample_weight (passed\n        through the fit method) if sample_weight is specified.\n\n    ccp_alpha : non-negative float, default=0.0\n        Complexity parameter used for Minimal Cost-Complexity Pruning. The\n        subtree with the largest cost complexity that is smaller than\n        ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n        :ref:`minimal_cost_complexity_pruning` for details. See\n        :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n        for an example of such pruning.\n\n        .. versionadded:: 0.22\n\n    max_samples : int or float, default=None\n        If bootstrap is True, the number of samples to draw from X\n        to train each base estimator.\n\n        - If None (default), then draw `X.shape[0]` samples.\n        - If int, then draw `max_samples` samples.\n        - If float, then draw `max(round(n_samples * max_samples), 1)` samples. Thus,\n          `max_samples` should be in the interval `(0.0, 1.0]`.\n\n        .. versionadded:: 0.22\n\n    monotonic_cst : array-like of int of shape (n_features), default=None\n        Indicates the monotonicity constraint to enforce on each feature.\n          - 1: monotonic increase\n          - 0: no constraint\n          - -1: monotonic decrease\n\n        If monotonic_cst is None, no constraints are applied.\n\n        Monotonicity constraints are not supported for:\n          - multiclass classifications (i.e. when `n_classes > 2`),\n          - multioutput classifications (i.e. when `n_outputs_ > 1`),\n          - classifications trained on data with missing values.\n\n        The constraints hold over the probability of the positive class.\n\n        Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n        .. versionadded:: 1.4\n\n    Attributes\n    ----------\n    estimator_ : :class:`~sklearn.tree.DecisionTreeClassifier`\n        The child estimator template used to create the collection of fitted\n        sub-estimators.\n\n        .. versionadded:: 1.2\n           `base_estimator_` was renamed to `estimator_`.\n\n    estimators_ : list of DecisionTreeClassifier\n        The collection of fitted sub-estimators.\n\n    classes_ : ndarray of shape (n_classes,) or a list of such arrays\n        The classes labels (single output problem), or a list of arrays of\n        class labels (multi-output problem).\n\n    n_classes_ : int or list\n        The number of classes (single output problem), or a list containing the\n        number of classes for each output (multi-output problem).\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_outputs_ : int\n        The number of outputs when ``fit`` is performed.\n\n    feature_importances_ : ndarray of shape (n_features,)\n        The impurity-based feature importances.\n        The higher, the more important the feature.\n        The importance of a feature is computed as the (normalized)\n        total reduction of the criterion brought by that feature.  It is also\n        known as the Gini importance.\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    oob_score_ : float\n        Score of the training dataset obtained using an out-of-bag estimate.\n        This attribute exists only when ``oob_score`` is True.\n\n    oob_decision_function_ : ndarray of shape (n_samples, n_classes) or             (n_samples, n_classes, n_outputs)\n        Decision function computed with out-of-bag estimate on the training\n        set. If n_estimators is small it might be possible that a data point\n        was never left out during the bootstrap. In this case,\n        `oob_decision_function_` might contain NaN. This attribute exists\n        only when ``oob_score`` is True.\n\n    estimators_samples_ : list of arrays\n        The subset of drawn samples (i.e., the in-bag samples) for each base\n        estimator. Each subset is defined by an array of the indices selected.\n\n        .. versionadded:: 1.4\n\n    See Also\n    --------\n    sklearn.tree.DecisionTreeClassifier : A decision tree classifier.\n    sklearn.ensemble.ExtraTreesClassifier : Ensemble of extremely randomized\n        tree classifiers.\n    sklearn.ensemble.HistGradientBoostingClassifier : A Histogram-based Gradient\n        Boosting Classification Tree, very fast for big datasets (n_samples >=\n        10_000).\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    The features are always randomly permuted at each split. Therefore,\n    the best found split may vary, even with the same training data,\n    ``max_features=n_features`` and ``bootstrap=False``, if the improvement\n    of the criterion is identical for several splits enumerated during the\n    search of the best split. To obtain a deterministic behaviour during\n    fitting, ``random_state`` has to be fixed.\n\n    References\n    ----------\n    .. [1] L. Breiman, \"Random Forests\", Machine Learning, 45(1), 5-32, 2001.",
        "parameters": {
          "n_estimators": {
            "type": "int, default=100",
            "description": ""
          },
          "The": {
            "type": "features are always randomly permuted at each split. Therefore,",
            "description": ""
          },
          "in": {
            "type": "0.22.",
            "description": ""
          },
          "criterion": {
            "type": "{\"gini\", \"entropy\", \"log_loss\"}, default=\"gini\"",
            "description": ""
          },
          "Shannon": {
            "type": "information gain, see :ref:`tree_mathematical_formulation`.",
            "description": ""
          },
          "Note": {
            "type": "that these weights will be multiplied with sample_weight (passed",
            "description": ""
          },
          "max_depth": {
            "type": "int, default=None",
            "description": ""
          },
          "all": {
            "type": "leaves are pure or until all leaves contain less than",
            "description": ""
          },
          "min_samples_split": {
            "type": "int or float, default=2",
            "description": ""
          },
          "number": {
            "type": "of classes for each output (multi-output problem).",
            "description": ""
          },
          "Added": {
            "type": "float values for fractions.",
            "description": ""
          },
          "min_samples_leaf": {
            "type": "int or float, default=1",
            "description": ""
          },
          "A": {
            "type": "node will be split if this split induces a decrease of the impurity",
            "description": ""
          },
          "least": {
            "type": "``min_samples_leaf`` training samples in each of the left and",
            "description": ""
          },
          "right": {
            "type": "branches.  This may have the effect of smoothing the model,",
            "description": ""
          },
          "especially": {
            "type": "in regression.",
            "description": "- If int, then consider `min_samples_leaf` as the minimum number.\n- If float, then `min_samples_leaf` is a fraction and\n`ceil(min_samples_leaf * n_samples)` are the minimum"
          },
          "min_weight_fraction_leaf": {
            "type": "float, default=0.0",
            "description": ""
          },
          "the": {
            "type": "best found split may vary, even with the same training data,",
            "description": "``max_features=n_features`` and ``bootstrap=False``, if the improvement"
          },
          "equal": {
            "type": "weight when sample_weight is not provided.",
            "description": ""
          },
          "max_features": {
            "type": "{\"sqrt\", \"log2\", None}, int or float, default=\"sqrt\"",
            "description": ""
          },
          "valid": {
            "type": "partition of the node samples is found, even if it requires to",
            "description": ""
          },
          "effectively": {
            "type": "inspect more than ``max_features`` features.",
            "description": ""
          },
          "max_leaf_nodes": {
            "type": "int, default=None",
            "description": ""
          },
          "Grow": {
            "type": "trees with ``max_leaf_nodes`` in best-first fashion.",
            "description": ""
          },
          "Best": {
            "type": "nodes are defined as relative reduction in impurity.",
            "description": ""
          },
          "If": {
            "type": "monotonic_cst is None, no constraints are applied.",
            "description": ""
          },
          "min_impurity_decrease": {
            "type": "float, default=0.0",
            "description": ""
          },
          "greater": {
            "type": "than or equal to this value.",
            "description": ""
          },
          "N_t": {
            "type": "/ N * (impurity - N_t_R / N_t * right_impurity",
            "description": "- N_t_L / N_t * left_impurity)"
          },
          "where": {
            "type": "``N`` is the total number of samples, ``N_t`` is the number of",
            "description": ""
          },
          "samples": {
            "type": "at the current node, ``N_t_L`` is the number of samples in the",
            "description": ""
          },
          "left": {
            "type": "child, and ``N_t_R`` is the number of samples in the right child.",
            "description": "``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,"
          },
          "if": {
            "type": "``sample_weight`` is passed.",
            "description": ".. versionadded:: 0.19"
          },
          "bootstrap": {
            "type": "bool, default=True",
            "description": ""
          },
          "Whether": {
            "type": "to use out-of-bag samples to estimate the generalization score.",
            "description": ""
          },
          "whole": {
            "type": "dataset is used to build each tree.",
            "description": ""
          },
          "oob_score": {
            "type": "bool or callable, default=False",
            "description": ""
          },
          "By": {
            "type": "default, :func:`~sklearn.metrics.accuracy_score` is used.",
            "description": ""
          },
          "Provide": {
            "type": "a callable with signature `metric(y_true, y_pred)` to use a",
            "description": ""
          },
          "custom": {
            "type": "metric. Only available if `bootstrap=True`.",
            "description": ""
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Controls": {
            "type": "the verbosity when fitting and predicting.",
            "description": ""
          },
          "when": {
            "type": "building trees (if ``bootstrap=True``) and the sampling of the",
            "description": ""
          },
          "features": {
            "type": "to consider when looking for the best split at each node",
            "description": "(if ``max_features < n_features``)."
          },
          "See": {
            "type": "Also",
            "description": "--------\nsklearn.tree.DecisionTreeClassifier : A decision tree classifier.\nsklearn.ensemble.ExtraTreesClassifier : Ensemble of extremely randomized"
          },
          "verbose": {
            "type": "int, default=0",
            "description": ""
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": ""
          },
          "When": {
            "type": "set to ``True``, reuse the solution of the previous call to fit",
            "description": ""
          },
          "and": {
            "type": "add more estimators to the ensemble, otherwise, just fit a whole",
            "description": ""
          },
          "new": {
            "type": "forest. See :term:`Glossary <warm_start>` and",
            "description": ":ref:`tree_ensemble_warm_start` for details."
          },
          "class_weight": {
            "type": "{\"balanced\", \"balanced_subsample\"}, dict or list of dicts,             default=None",
            "description": ""
          },
          "Weights": {
            "type": "associated with classes in the form ``{class_label: weight}``.",
            "description": ""
          },
          "order": {
            "type": "as the columns of y.",
            "description": ""
          },
          "defined": {
            "type": "for each class of every column in its own dict. For example,",
            "description": ""
          },
          "for": {
            "type": "an example of such pruning.",
            "description": ".. versionadded:: 0.22"
          },
          "weights": {
            "type": "are computed based on the bootstrap sample for every tree",
            "description": "grown."
          },
          "as": {
            "type": "``n_samples / (n_classes * np.bincount(y))``",
            "description": ""
          },
          "For": {
            "type": "multi-output, the weights of each column of y will be multiplied.",
            "description": ""
          },
          "through": {
            "type": "the fit method) if sample_weight is specified.",
            "description": ""
          },
          "ccp_alpha": {
            "type": "non",
            "description": "negative float, default=0.0"
          },
          "Complexity": {
            "type": "parameter used for Minimal Cost-Complexity Pruning. The",
            "description": ""
          },
          "subtree": {
            "type": "with the largest cost complexity that is smaller than",
            "description": "``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n:ref:`minimal_cost_complexity_pruning` for details. See\n:ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`"
          },
          "max_samples": {
            "type": "int or float, default=None",
            "description": ""
          },
          "to": {
            "type": "train each base estimator.",
            "description": "- If None (default), then draw `X.shape[0]` samples.\n- If int, then draw `max_samples` samples.\n- If float, then draw `max(round(n_samples * max_samples), 1)` samples. Thus,\n`max_samples` should be in the interval `(0.0, 1.0]`.\n.. versionadded:: 0.22"
          },
          "monotonic_cst": {
            "type": "array",
            "description": "like of int of shape (n_features), default=None"
          },
          "Indicates": {
            "type": "the monotonicity constraint to enforce on each feature.",
            "description": "- 1: monotonic increase\n- 0: no constraint\n- -1: monotonic decrease"
          },
          "Monotonicity": {
            "type": "constraints are not supported for:",
            "description": "- multiclass classifications (i.e. when `n_classes > 2`),\n- multioutput classifications (i.e. when `n_outputs_ > 1`),\n- classifications trained on data with missing values."
          },
          "Read": {
            "type": "more in the :ref:`User Guide <monotonic_cst_gbdt>`.",
            "description": ".. versionadded:: 1.4\nAttributes\n----------"
          },
          "estimator_": {
            "type": ":class:`~sklearn.tree.DecisionTreeClassifier`",
            "description": ""
          },
          "estimators_": {
            "type": "list of DecisionTreeClassifier",
            "description": ""
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,) or a list of such arrays",
            "description": ""
          },
          "class": {
            "type": "labels (multi-output problem).",
            "description": ""
          },
          "n_classes_": {
            "type": "int or list",
            "description": ""
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`.",
            "description": ".. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "n_outputs_": {
            "type": "int",
            "description": ""
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": ""
          },
          "total": {
            "type": "reduction of the criterion brought by that feature.  It is also",
            "description": ""
          },
          "known": {
            "type": "as the Gini importance.",
            "description": ""
          },
          "Warning": {
            "type": "impurity",
            "description": "based feature importances can be misleading for"
          },
          "high": {
            "type": "cardinality features (many unique values). See",
            "description": ":func:`sklearn.inspection.permutation_importance` as an alternative."
          },
          "oob_score_": {
            "type": "float",
            "description": ""
          },
          "Score": {
            "type": "of the training dataset obtained using an out-of-bag estimate.",
            "description": ""
          },
          "This": {
            "type": "attribute exists only when ``oob_score`` is True.",
            "description": ""
          },
          "oob_decision_function_": {
            "type": "ndarray of shape (n_samples, n_classes) or             (n_samples, n_classes, n_outputs)",
            "description": ""
          },
          "Decision": {
            "type": "function computed with out-of-bag estimate on the training",
            "description": "set. If n_estimators is small it might be possible that a data point"
          },
          "was": {
            "type": "never left out during the bootstrap. In this case,",
            "description": "`oob_decision_function_` might contain NaN. This attribute exists"
          },
          "only": {
            "type": "when ``oob_score`` is True.",
            "description": ""
          },
          "estimators_samples_": {
            "type": "list of arrays",
            "description": ""
          },
          "tree": {
            "type": "classifiers.",
            "description": "sklearn.ensemble.HistGradientBoostingClassifier : A Histogram-based Gradient"
          },
          "Boosting": {
            "type": "Classification Tree, very fast for big datasets (n_samples >=",
            "description": "10_000).\nNotes\n-----"
          },
          "unpruned": {
            "type": "trees which can potentially be very large on some data sets. To",
            "description": ""
          },
          "reduce": {
            "type": "memory consumption, the complexity and size of the trees should be",
            "description": ""
          },
          "controlled": {
            "type": "by setting those parameter values.",
            "description": ""
          },
          "of": {
            "type": "the criterion is identical for several splits enumerated during the",
            "description": ""
          },
          "search": {
            "type": "of the best split. To obtain a deterministic behaviour during",
            "description": "fitting, ``random_state`` has to be fixed.\nReferences\n----------\n.. [1] L. Breiman, \"Random Forests\", Machine Learning, 45(1), 5-32, 2001.\nExamples\n--------\n>>> from sklearn.ensemble import RandomForestClassifier\n>>> from sklearn.datasets import make_classification\n>>> X, y = make_classification(n_samples=1000, n_features=4,\n...                            n_informative=2, n_redundant=0,\n...                            random_state=0, shuffle=False)\n>>> clf = RandomForestClassifier(max_depth=2, random_state=0)\n>>> clf.fit(X, y)"
          },
          "RandomForestClassifier": {
            "type": "...",
            "description": ">>> print(clf.predict([[0, 0, 0, 0]]))\n[1]"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    sklearn.tree.DecisionTreeClassifier : A decision tree classifier.\n    sklearn.ensemble.ExtraTreesClassifier : Ensemble of extremely randomized\n        tree classifiers.\n    sklearn.ensemble.HistGradientBoostingClassifier : A Histogram-based Gradient\n        Boosting Classification Tree, very fast for big datasets (n_samples >=\n        10_000).\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    The features are always randomly permuted at each split. Therefore,\n    the best found split may vary, even with the same training data,\n    ``max_features=n_features`` and ``bootstrap=False``, if the improvement\n    of the criterion is identical for several splits enumerated during the\n    search of the best split. To obtain a deterministic behaviour during\n    fitting, ``random_state`` has to be fixed.\n\n    References\n    ----------\n    .. [1] L. Breiman, \"Random Forests\", Machine Learning, 45(1), 5-32, 2001.\n\n    Examples\n    --------\n    >>> from sklearn.ensemble import RandomForestClassifier\n    >>> from sklearn.datasets import make_classification\n    >>> X, y = make_classification(n_samples=1000, n_features=4,\n    ...                            n_informative=2, n_redundant=0,\n    ...                            random_state=0, shuffle=False)\n    >>> clf = RandomForestClassifier(max_depth=2, random_state=0)\n    >>> clf.fit(X, y)\n    RandomForestClassifier(...)\n    >>> print(clf.predict([[0, 0, 0, 0]]))\n    [1]",
        "notes": "that for multioutput (including multilabel) weights should be\n        defined for each class of every column in its own dict. For example,\n        for four-class multilabel classification weights should be\n        [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of\n        [{1:1}, {2:5}, {3:1}, {4:1}].\n\n        The \"balanced\" mode uses the values of y to automatically adjust\n        weights inversely proportional to class frequencies in the input data\n        as ``n_samples / (n_classes * np.bincount(y))``\n\n        The \"balanced_subsample\" mode is the same as \"balanced\" except that\n        weights are computed based on the bootstrap sample for every tree\n        grown.\n\n        For multi-output, the weights of each column of y will be multiplied.",
        "examples": "--------\n    >>> from sklearn.ensemble import RandomForestClassifier\n    >>> from sklearn.datasets import make_classification\n    >>> X, y = make_classification(n_samples=1000, n_features=4,\n    ...                            n_informative=2, n_redundant=0,\n    ...                            random_state=0, shuffle=False)\n    >>> clf = RandomForestClassifier(max_depth=2, random_state=0)\n    >>> clf.fit(X, y)\n    RandomForestClassifier(...)\n    >>> print(clf.predict([[0, 0, 0, 0]]))\n    [1]"
      },
      "methods": [
        {
          "name": "apply",
          "signature": "apply(self, X)",
          "documentation": {
            "description": "Apply trees in the forest to X, return leaf indices.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, its dtype will be converted to\n            ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csr_matrix``.\n\n        Returns\n        -------\n        X_leaves : ndarray of shape (n_samples, n_estimators)\n            For each datapoint x in X and for each tree in the forest,",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples. Internally, its dtype will be converted to",
                "description": "``dtype=np.float32``. If a sparse matrix is provided, it will be"
              },
              "converted": {
                "type": "into a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "X_leaves": {
                "type": "ndarray of shape (n_samples, n_estimators)",
                "description": ""
              },
              "For": {
                "type": "each datapoint x in X and for each tree in the forest,",
                "description": ""
              },
              "return": {
                "type": "the index of the leaf x ends up in.",
                "description": ""
              }
            },
            "returns": "the index of the leaf x ends up in.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "decision_path",
          "signature": "decision_path(self, X)",
          "documentation": {
            "description": "",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "columns from indicator[n_nodes_ptr[i]:n_nodes_ptr[i+1]]",
                "description": ""
              },
              "converted": {
                "type": "into a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "indicator": {
                "type": "sparse matrix of shape (n_samples, n_nodes)",
                "description": ""
              },
              "Return": {
                "type": "a node indicator matrix where non zero elements indicates",
                "description": ""
              },
              "that": {
                "type": "the samples goes through the nodes. The matrix is of CSR",
                "description": "format."
              },
              "n_nodes_ptr": {
                "type": "ndarray of shape (n_estimators + 1,)",
                "description": ""
              },
              "gives": {
                "type": "the indicator value for the i-th estimator.",
                "description": ""
              }
            },
            "returns": "the decision path in the forest.\n\n        .. versionadded:: 0.18\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, its dtype will be converted to\n            ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csr_matrix``.\n\n        Returns\n        -------\n        indicator : sparse matrix of shape (n_samples, n_nodes)",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Build a forest of trees from the training set (X, y).\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Internally, its dtype will be converted\n            to ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csc_matrix``.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            The target values (class labels in classification, real numbers in\n            regression).\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted. Splits\n            that would create child nodes with net zero or negative weight are\n            ignored while searching for a split in each node. In the case of\n            classification, splits are also ignored if they would result in any\n            single class carrying a negative weight in either child node.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "target values (class labels in classification, real numbers in",
                "description": "regression)."
              },
              "to": {
                "type": "``dtype=np.float32``. If a sparse matrix is provided, it will be",
                "description": ""
              },
              "converted": {
                "type": "into a sparse ``csc_matrix``.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted. Splits",
                "description": ""
              },
              "that": {
                "type": "would create child nodes with net zero or negative weight are",
                "description": ""
              },
              "ignored": {
                "type": "while searching for a split in each node. In the case of",
                "description": "classification, splits are also ignored if they would result in any"
              },
              "single": {
                "type": "class carrying a negative weight in either child node.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "Fitted": {
                "type": "estimator.",
                "description": ""
              }
            },
            "returns": "-------\n        self : object\n            Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRequest\n            A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "documentation": {
            "description": "Predict class for X.\n\n        The predicted class of an input sample is a vote by the trees in\n        the forest, weighted by their probability estimates. That is,\n        the predicted class is the one with highest mean probability\n        estimate across the trees.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, its dtype will be converted to\n            ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csr_matrix``.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted classes.",
                "description": ""
              },
              "converted": {
                "type": "into a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "y": {
                "type": "ndarray of shape (n_samples,) or (n_samples, n_outputs)",
                "description": ""
              }
            },
            "returns": "-------\n        y : ndarray of shape (n_samples,) or (n_samples, n_outputs)\n            The predicted classes.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_log_proba",
          "signature": "predict_log_proba(self, X)",
          "documentation": {
            "description": "Predict class log-probabilities for X.\n\n        The predicted class log-probabilities of an input sample is computed as\n        the log of the mean predicted class probabilities of the trees in the\n        forest.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, its dtype will be converted to\n            ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csr_matrix``.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "class probabilities of the input samples. The order of the",
                "description": ""
              },
              "converted": {
                "type": "into a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "p": {
                "type": "ndarray of shape (n_samples, n_classes), or a list of such arrays",
                "description": ""
              },
              "classes": {
                "type": "corresponds to that in the attribute :term:`classes_`.",
                "description": ""
              }
            },
            "returns": "-------\n        p : ndarray of shape (n_samples, n_classes), or a list of such arrays\n            The class probabilities of the input samples. The order of the\n            classes corresponds to that in the attribute :term:`classes_`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_proba",
          "signature": "predict_proba(self, X)",
          "documentation": {
            "description": "Predict class probabilities for X.\n\n        The predicted class probabilities of an input sample are computed as\n        the mean predicted class probabilities of the trees in the forest.\n        The class probability of a single tree is the fraction of samples of\n        the same class in a leaf.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, its dtype will be converted to\n            ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csr_matrix``.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "class probabilities of the input samples. The order of the",
                "description": ""
              },
              "converted": {
                "type": "into a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "p": {
                "type": "ndarray of shape (n_samples, n_classes), or a list of such arrays",
                "description": ""
              },
              "classes": {
                "type": "corresponds to that in the attribute :term:`classes_`.",
                "description": ""
              }
            },
            "returns": "-------\n        p : ndarray of shape (n_samples, n_classes), or a list of such arrays\n            The class probabilities of the input samples. The order of the\n            classes corresponds to that in the attribute :term:`classes_`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "labels for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ""
              },
              "Mean": {
                "type": "accuracy of ``self.predict(X)`` w.r.t. `y`.",
                "description": ""
              }
            },
            "returns": "the mean accuracy on the given test data and labels.\n\n        In multi-label classification, this is the subset accuracy\n        which is a harsh metric since you require for each sample that\n        each label set be correctly predicted.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True labels for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.ensemble._forest.RandomForestClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._forest.RandomForestClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.ensemble._forest.RandomForestClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._forest.RandomForestClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "RandomForestRegressor",
      "documentation": {
        "description": "A random forest regressor.\n\n    A random forest is a meta estimator that fits a number of decision tree\n    regressors on various sub-samples of the dataset and uses averaging to\n    improve the predictive accuracy and control over-fitting.\n    Trees in the forest use the best split strategy, i.e. equivalent to passing\n    `splitter=\"best\"` to the underlying :class:`~sklearn.tree.DecisionTreeRegressor`.\n    The sub-sample size is controlled with the `max_samples` parameter if\n    `bootstrap=True` (default), otherwise the whole dataset is used to build\n    each tree.\n\n    For a comparison between tree-based ensemble models see the example\n    :ref:`sphx_glr_auto_examples_ensemble_plot_forest_hist_grad_boosting_comparison.py`.\n\n    Read more in the :ref:`User Guide <forest>`.\n\n    Parameters\n    ----------\n    n_estimators : int, default=100\n        The number of trees in the forest.\n\n        .. versionchanged:: 0.22\n           The default value of ``n_estimators`` changed from 10 to 100\n           in 0.22.\n\n    criterion : {\"squared_error\", \"absolute_error\", \"friedman_mse\", \"poisson\"},             default=\"squared_error\"\n        The function to measure the quality of a split. Supported criteria\n        are \"squared_error\" for the mean squared error, which is equal to\n        variance reduction as feature selection criterion and minimizes the L2\n        loss using the mean of each terminal node, \"friedman_mse\", which uses\n        mean squared error with Friedman's improvement score for potential\n        splits, \"absolute_error\" for the mean absolute error, which minimizes\n        the L1 loss using the median of each terminal node, and \"poisson\" which\n        uses reduction in Poisson deviance to find splits.\n        Training using \"absolute_error\" is significantly slower\n        than when using \"squared_error\".\n\n        .. versionadded:: 0.18\n           Mean Absolute Error (MAE) criterion.\n\n        .. versionadded:: 1.0\n           Poisson criterion.\n\n    max_depth : int, default=None\n        The maximum depth of the tree. If None, then nodes are expanded until\n        all leaves are pure or until all leaves contain less than\n        min_samples_split samples.\n\n    min_samples_split : int or float, default=2\n        The minimum number of samples required to split an internal node:\n\n        - If int, then consider `min_samples_split` as the minimum number.\n        - If float, then `min_samples_split` is a fraction and\n          `ceil(min_samples_split * n_samples)` are the minimum\n          number of samples for each split.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_samples_leaf : int or float, default=1\n        The minimum number of samples required to be at a leaf node.\n        A split point at any depth will only be considered if it leaves at\n        least ``min_samples_leaf`` training samples in each of the left and\n        right branches.  This may have the effect of smoothing the model,\n        especially in regression.\n\n        - If int, then consider `min_samples_leaf` as the minimum number.\n        - If float, then `min_samples_leaf` is a fraction and\n          `ceil(min_samples_leaf * n_samples)` are the minimum\n          number of samples for each node.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_weight_fraction_leaf : float, default=0.0\n        The minimum weighted fraction of the sum total of weights (of all\n        the input samples) required to be at a leaf node. Samples have\n        equal weight when sample_weight is not provided.\n\n    max_features : {\"sqrt\", \"log2\", None}, int or float, default=1.0\n        The number of features to consider when looking for the best split:\n\n        - If int, then consider `max_features` features at each split.\n        - If float, then `max_features` is a fraction and\n          `max(1, int(max_features * n_features_in_))` features are considered at each\n          split.\n        - If \"sqrt\", then `max_features=sqrt(n_features)`.\n        - If \"log2\", then `max_features=log2(n_features)`.\n        - If None or 1.0, then `max_features=n_features`.\n\n        .. note::\n            The default of 1.0 is equivalent to bagged trees and more\n            randomness can be achieved by setting smaller values, e.g. 0.3.\n\n        .. versionchanged:: 1.1\n            The default of `max_features` changed from `\"auto\"` to 1.0.\n\n        Note: the search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features.\n\n    max_leaf_nodes : int, default=None\n        Grow trees with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        If None then unlimited number of leaf nodes.\n\n    min_impurity_decrease : float, default=0.0\n        A node will be split if this split induces a decrease of the impurity\n        greater than or equal to this value.\n\n        The weighted impurity decrease equation is the following::\n\n            N_t / N * (impurity - N_t_R / N_t * right_impurity\n                                - N_t_L / N_t * left_impurity)\n\n        where ``N`` is the total number of samples, ``N_t`` is the number of\n        samples at the current node, ``N_t_L`` is the number of samples in the\n        left child, and ``N_t_R`` is the number of samples in the right child.\n\n        ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n        if ``sample_weight`` is passed.\n\n        .. versionadded:: 0.19\n\n    bootstrap : bool, default=True\n        Whether bootstrap samples are used when building trees. If False, the\n        whole dataset is used to build each tree.\n\n    oob_score : bool or callable, default=False\n        Whether to use out-of-bag samples to estimate the generalization score.\n        By default, :func:`~sklearn.metrics.r2_score` is used.\n        Provide a callable with signature `metric(y_true, y_pred)` to use a\n        custom metric. Only available if `bootstrap=True`.\n\n    n_jobs : int, default=None\n        The number of jobs to run in parallel. :meth:`fit`, :meth:`predict`,\n        :meth:`decision_path` and :meth:`apply` are all parallelized over the\n        trees. ``None`` means 1 unless in a :obj:`joblib.parallel_backend`\n        context. ``-1`` means using all processors. See :term:`Glossary\n        <n_jobs>` for more details.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls both the randomness of the bootstrapping of the samples used\n        when building trees (if ``bootstrap=True``) and the sampling of the\n        features to consider when looking for the best split at each node\n        (if ``max_features < n_features``).\n        See :term:`Glossary <random_state>` for details.\n\n    verbose : int, default=0\n        Controls the verbosity when fitting and predicting.\n\n    warm_start : bool, default=False\n        When set to ``True``, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble, otherwise, just fit a whole\n        new forest. See :term:`Glossary <warm_start>` and\n        :ref:`tree_ensemble_warm_start` for details.\n\n    ccp_alpha : non-negative float, default=0.0\n        Complexity parameter used for Minimal Cost-Complexity Pruning. The\n        subtree with the largest cost complexity that is smaller than\n        ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n        :ref:`minimal_cost_complexity_pruning` for details. See\n        :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n        for an example of such pruning.\n\n        .. versionadded:: 0.22\n\n    max_samples : int or float, default=None\n        If bootstrap is True, the number of samples to draw from X\n        to train each base estimator.\n\n        - If None (default), then draw `X.shape[0]` samples.\n        - If int, then draw `max_samples` samples.\n        - If float, then draw `max(round(n_samples * max_samples), 1)` samples. Thus,\n          `max_samples` should be in the interval `(0.0, 1.0]`.\n\n        .. versionadded:: 0.22\n\n    monotonic_cst : array-like of int of shape (n_features), default=None\n        Indicates the monotonicity constraint to enforce on each feature.\n          - 1: monotonically increasing\n          - 0: no constraint\n          - -1: monotonically decreasing\n\n        If monotonic_cst is None, no constraints are applied.\n\n        Monotonicity constraints are not supported for:\n          - multioutput regressions (i.e. when `n_outputs_ > 1`),\n          - regressions trained on data with missing values.\n\n        Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n        .. versionadded:: 1.4\n\n    Attributes\n    ----------\n    estimator_ : :class:`~sklearn.tree.DecisionTreeRegressor`\n        The child estimator template used to create the collection of fitted\n        sub-estimators.\n\n        .. versionadded:: 1.2\n           `base_estimator_` was renamed to `estimator_`.\n\n    estimators_ : list of DecisionTreeRegressor\n        The collection of fitted sub-estimators.\n\n    feature_importances_ : ndarray of shape (n_features,)\n        The impurity-based feature importances.\n        The higher, the more important the feature.\n        The importance of a feature is computed as the (normalized)\n        total reduction of the criterion brought by that feature.  It is also\n        known as the Gini importance.\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_outputs_ : int\n        The number of outputs when ``fit`` is performed.\n\n    oob_score_ : float\n        Score of the training dataset obtained using an out-of-bag estimate.\n        This attribute exists only when ``oob_score`` is True.\n\n    oob_prediction_ : ndarray of shape (n_samples,) or (n_samples, n_outputs)\n        Prediction computed with out-of-bag estimate on the training set.\n        This attribute exists only when ``oob_score`` is True.\n\n    estimators_samples_ : list of arrays\n        The subset of drawn samples (i.e., the in-bag samples) for each base\n        estimator. Each subset is defined by an array of the indices selected.\n\n        .. versionadded:: 1.4\n\n    See Also\n    --------\n    sklearn.tree.DecisionTreeRegressor : A decision tree regressor.\n    sklearn.ensemble.ExtraTreesRegressor : Ensemble of extremely randomized\n        tree regressors.\n    sklearn.ensemble.HistGradientBoostingRegressor : A Histogram-based Gradient\n        Boosting Regression Tree, very fast for big datasets (n_samples >=\n        10_000).\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    The features are always randomly permuted at each split. Therefore,\n    the best found split may vary, even with the same training data,\n    ``max_features=n_features`` and ``bootstrap=False``, if the improvement\n    of the criterion is identical for several splits enumerated during the\n    search of the best split. To obtain a deterministic behaviour during\n    fitting, ``random_state`` has to be fixed.\n\n    The default value ``max_features=1.0`` uses ``n_features``\n    rather than ``n_features / 3``. The latter was originally suggested in\n    [1], whereas the former was more recently justified empirically in [2].\n\n    References\n    ----------\n    .. [1] L. Breiman, \"Random Forests\", Machine Learning, 45(1), 5-32, 2001.\n\n    .. [2] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized\n           trees\", Machine Learning, 63(1), 3-42, 2006.",
        "parameters": {
          "n_estimators": {
            "type": "int, default=100",
            "description": ""
          },
          "The": {
            "type": "default value ``max_features=1.0`` uses ``n_features``",
            "description": ""
          },
          "in": {
            "type": "0.22.",
            "description": ""
          },
          "criterion": {
            "type": "{\"squared_error\", \"absolute_error\", \"friedman_mse\", \"poisson\"},             default=\"squared_error\"",
            "description": ""
          },
          "are": {
            "type": "\"squared_error\" for the mean squared error, which is equal to",
            "description": ""
          },
          "variance": {
            "type": "reduction as feature selection criterion and minimizes the L2",
            "description": ""
          },
          "loss": {
            "type": "using the mean of each terminal node, \"friedman_mse\", which uses",
            "description": ""
          },
          "mean": {
            "type": "squared error with Friedman's improvement score for potential",
            "description": "splits, \"absolute_error\" for the mean absolute error, which minimizes"
          },
          "the": {
            "type": "best found split may vary, even with the same training data,",
            "description": "``max_features=n_features`` and ``bootstrap=False``, if the improvement"
          },
          "uses": {
            "type": "reduction in Poisson deviance to find splits.",
            "description": ""
          },
          "Training": {
            "type": "using \"absolute_error\" is significantly slower",
            "description": ""
          },
          "than": {
            "type": "when using \"squared_error\".",
            "description": ".. versionadded:: 0.18"
          },
          "Mean": {
            "type": "Absolute Error (MAE) criterion.",
            "description": ".. versionadded:: 1.0"
          },
          "Poisson": {
            "type": "criterion.",
            "description": ""
          },
          "max_depth": {
            "type": "int, default=None",
            "description": ""
          },
          "all": {
            "type": "leaves are pure or until all leaves contain less than",
            "description": ""
          },
          "min_samples_split": {
            "type": "int or float, default=2",
            "description": ""
          },
          "number": {
            "type": "of samples for each node.",
            "description": ".. versionchanged:: 0.18"
          },
          "Added": {
            "type": "float values for fractions.",
            "description": ""
          },
          "min_samples_leaf": {
            "type": "int or float, default=1",
            "description": ""
          },
          "A": {
            "type": "node will be split if this split induces a decrease of the impurity",
            "description": ""
          },
          "least": {
            "type": "``min_samples_leaf`` training samples in each of the left and",
            "description": ""
          },
          "right": {
            "type": "branches.  This may have the effect of smoothing the model,",
            "description": ""
          },
          "especially": {
            "type": "in regression.",
            "description": "- If int, then consider `min_samples_leaf` as the minimum number.\n- If float, then `min_samples_leaf` is a fraction and\n`ceil(min_samples_leaf * n_samples)` are the minimum"
          },
          "min_weight_fraction_leaf": {
            "type": "float, default=0.0",
            "description": ""
          },
          "equal": {
            "type": "weight when sample_weight is not provided.",
            "description": ""
          },
          "max_features": {
            "type": "{\"sqrt\", \"log2\", None}, int or float, default=1.0",
            "description": ""
          },
          "randomness": {
            "type": "can be achieved by setting smaller values, e.g. 0.3.",
            "description": ".. versionchanged:: 1.1"
          },
          "Note": {
            "type": "the search for a split does not stop until at least one",
            "description": ""
          },
          "valid": {
            "type": "partition of the node samples is found, even if it requires to",
            "description": ""
          },
          "effectively": {
            "type": "inspect more than ``max_features`` features.",
            "description": ""
          },
          "max_leaf_nodes": {
            "type": "int, default=None",
            "description": ""
          },
          "Grow": {
            "type": "trees with ``max_leaf_nodes`` in best-first fashion.",
            "description": ""
          },
          "Best": {
            "type": "nodes are defined as relative reduction in impurity.",
            "description": ""
          },
          "If": {
            "type": "monotonic_cst is None, no constraints are applied.",
            "description": ""
          },
          "min_impurity_decrease": {
            "type": "float, default=0.0",
            "description": ""
          },
          "greater": {
            "type": "than or equal to this value.",
            "description": ""
          },
          "N_t": {
            "type": "/ N * (impurity - N_t_R / N_t * right_impurity",
            "description": "- N_t_L / N_t * left_impurity)"
          },
          "where": {
            "type": "``N`` is the total number of samples, ``N_t`` is the number of",
            "description": ""
          },
          "samples": {
            "type": "at the current node, ``N_t_L`` is the number of samples in the",
            "description": ""
          },
          "left": {
            "type": "child, and ``N_t_R`` is the number of samples in the right child.",
            "description": "``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,"
          },
          "if": {
            "type": "``sample_weight`` is passed.",
            "description": ".. versionadded:: 0.19"
          },
          "bootstrap": {
            "type": "bool, default=True",
            "description": ""
          },
          "Whether": {
            "type": "to use out-of-bag samples to estimate the generalization score.",
            "description": ""
          },
          "whole": {
            "type": "dataset is used to build each tree.",
            "description": ""
          },
          "oob_score": {
            "type": "bool or callable, default=False",
            "description": ""
          },
          "By": {
            "type": "default, :func:`~sklearn.metrics.r2_score` is used.",
            "description": ""
          },
          "Provide": {
            "type": "a callable with signature `metric(y_true, y_pred)` to use a",
            "description": ""
          },
          "custom": {
            "type": "metric. Only available if `bootstrap=True`.",
            "description": ""
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Controls": {
            "type": "the verbosity when fitting and predicting.",
            "description": ""
          },
          "when": {
            "type": "building trees (if ``bootstrap=True``) and the sampling of the",
            "description": ""
          },
          "features": {
            "type": "to consider when looking for the best split at each node",
            "description": "(if ``max_features < n_features``)."
          },
          "See": {
            "type": "Also",
            "description": "--------\nsklearn.tree.DecisionTreeRegressor : A decision tree regressor.\nsklearn.ensemble.ExtraTreesRegressor : Ensemble of extremely randomized"
          },
          "verbose": {
            "type": "int, default=0",
            "description": ""
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": ""
          },
          "When": {
            "type": "set to ``True``, reuse the solution of the previous call to fit",
            "description": ""
          },
          "and": {
            "type": "add more estimators to the ensemble, otherwise, just fit a whole",
            "description": ""
          },
          "new": {
            "type": "forest. See :term:`Glossary <warm_start>` and",
            "description": ":ref:`tree_ensemble_warm_start` for details."
          },
          "ccp_alpha": {
            "type": "non",
            "description": "negative float, default=0.0"
          },
          "Complexity": {
            "type": "parameter used for Minimal Cost-Complexity Pruning. The",
            "description": ""
          },
          "subtree": {
            "type": "with the largest cost complexity that is smaller than",
            "description": "``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n:ref:`minimal_cost_complexity_pruning` for details. See\n:ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`"
          },
          "for": {
            "type": "an example of such pruning.",
            "description": ".. versionadded:: 0.22"
          },
          "max_samples": {
            "type": "int or float, default=None",
            "description": ""
          },
          "to": {
            "type": "train each base estimator.",
            "description": "- If None (default), then draw `X.shape[0]` samples.\n- If int, then draw `max_samples` samples.\n- If float, then draw `max(round(n_samples * max_samples), 1)` samples. Thus,\n`max_samples` should be in the interval `(0.0, 1.0]`.\n.. versionadded:: 0.22"
          },
          "monotonic_cst": {
            "type": "array",
            "description": "like of int of shape (n_features), default=None"
          },
          "Indicates": {
            "type": "the monotonicity constraint to enforce on each feature.",
            "description": "- 1: monotonically increasing\n- 0: no constraint\n- -1: monotonically decreasing"
          },
          "Monotonicity": {
            "type": "constraints are not supported for:",
            "description": "- multioutput regressions (i.e. when `n_outputs_ > 1`),\n- regressions trained on data with missing values."
          },
          "Read": {
            "type": "more in the :ref:`User Guide <monotonic_cst_gbdt>`.",
            "description": ".. versionadded:: 1.4\nAttributes\n----------"
          },
          "estimator_": {
            "type": ":class:`~sklearn.tree.DecisionTreeRegressor`",
            "description": ""
          },
          "estimators_": {
            "type": "list of DecisionTreeRegressor",
            "description": ""
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": ""
          },
          "total": {
            "type": "reduction of the criterion brought by that feature.  It is also",
            "description": ""
          },
          "known": {
            "type": "as the Gini importance.",
            "description": ""
          },
          "Warning": {
            "type": "impurity",
            "description": "based feature importances can be misleading for"
          },
          "high": {
            "type": "cardinality features (many unique values). See",
            "description": ":func:`sklearn.inspection.permutation_importance` as an alternative."
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`.",
            "description": ".. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "n_outputs_": {
            "type": "int",
            "description": ""
          },
          "oob_score_": {
            "type": "float",
            "description": ""
          },
          "Score": {
            "type": "of the training dataset obtained using an out-of-bag estimate.",
            "description": ""
          },
          "This": {
            "type": "attribute exists only when ``oob_score`` is True.",
            "description": ""
          },
          "oob_prediction_": {
            "type": "ndarray of shape (n_samples,) or (n_samples, n_outputs)",
            "description": ""
          },
          "Prediction": {
            "type": "computed with out-of-bag estimate on the training set.",
            "description": ""
          },
          "estimators_samples_": {
            "type": "list of arrays",
            "description": ""
          },
          "tree": {
            "type": "regressors.",
            "description": "sklearn.ensemble.HistGradientBoostingRegressor : A Histogram-based Gradient"
          },
          "Boosting": {
            "type": "Regression Tree, very fast for big datasets (n_samples >=",
            "description": "10_000).\nNotes\n-----"
          },
          "unpruned": {
            "type": "trees which can potentially be very large on some data sets. To",
            "description": ""
          },
          "reduce": {
            "type": "memory consumption, the complexity and size of the trees should be",
            "description": ""
          },
          "controlled": {
            "type": "by setting those parameter values.",
            "description": ""
          },
          "of": {
            "type": "the criterion is identical for several splits enumerated during the",
            "description": ""
          },
          "search": {
            "type": "of the best split. To obtain a deterministic behaviour during",
            "description": "fitting, ``random_state`` has to be fixed."
          },
          "rather": {
            "type": "than ``n_features / 3``. The latter was originally suggested in",
            "description": "[1], whereas the former was more recently justified empirically in [2].\nReferences\n----------\n.. [1] L. Breiman, \"Random Forests\", Machine Learning, 45(1), 5-32, 2001.\n.. [2] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized\ntrees\", Machine Learning, 63(1), 3-42, 2006.\nExamples\n--------\n>>> from sklearn.ensemble import RandomForestRegressor\n>>> from sklearn.datasets import make_regression\n>>> X, y = make_regression(n_features=4, n_informative=2,\n...                        random_state=0, shuffle=False)\n>>> regr = RandomForestRegressor(max_depth=2, random_state=0)\n>>> regr.fit(X, y)"
          },
          "RandomForestRegressor": {
            "type": "...",
            "description": ">>> print(regr.predict([[0, 0, 0, 0]]))\n[-8.32987858]"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    sklearn.tree.DecisionTreeRegressor : A decision tree regressor.\n    sklearn.ensemble.ExtraTreesRegressor : Ensemble of extremely randomized\n        tree regressors.\n    sklearn.ensemble.HistGradientBoostingRegressor : A Histogram-based Gradient\n        Boosting Regression Tree, very fast for big datasets (n_samples >=\n        10_000).\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    The features are always randomly permuted at each split. Therefore,\n    the best found split may vary, even with the same training data,\n    ``max_features=n_features`` and ``bootstrap=False``, if the improvement\n    of the criterion is identical for several splits enumerated during the\n    search of the best split. To obtain a deterministic behaviour during\n    fitting, ``random_state`` has to be fixed.\n\n    The default value ``max_features=1.0`` uses ``n_features``\n    rather than ``n_features / 3``. The latter was originally suggested in\n    [1], whereas the former was more recently justified empirically in [2].\n\n    References\n    ----------\n    .. [1] L. Breiman, \"Random Forests\", Machine Learning, 45(1), 5-32, 2001.\n\n    .. [2] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized\n           trees\", Machine Learning, 63(1), 3-42, 2006.\n\n    Examples\n    --------\n    >>> from sklearn.ensemble import RandomForestRegressor\n    >>> from sklearn.datasets import make_regression\n    >>> X, y = make_regression(n_features=4, n_informative=2,\n    ...                        random_state=0, shuffle=False)\n    >>> regr = RandomForestRegressor(max_depth=2, random_state=0)\n    >>> regr.fit(X, y)\n    RandomForestRegressor(...)\n    >>> print(regr.predict([[0, 0, 0, 0]]))\n    [-8.32987858]",
        "notes": "the search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features.\n\n    max_leaf_nodes : int, default=None\n        Grow trees with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        If None then unlimited number of leaf nodes.\n\n    min_impurity_decrease : float, default=0.0\n        A node will be split if this split induces a decrease of the impurity\n        greater than or equal to this value.\n\n        The weighted impurity decrease equation is the following::\n\n            N_t / N * (impurity - N_t_R / N_t * right_impurity\n                                - N_t_L / N_t * left_impurity)\n\n        where ``N`` is the total number of samples, ``N_t`` is the number of\n        samples at the current node, ``N_t_L`` is the number of samples in the\n        left child, and ``N_t_R`` is the number of samples in the right child.\n\n        ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n        if ``sample_weight`` is passed.\n\n        .. versionadded:: 0.19\n\n    bootstrap : bool, default=True\n        Whether bootstrap samples are used when building trees. If False, the\n        whole dataset is used to build each tree.\n\n    oob_score : bool or callable, default=False\n        Whether to use out-of-bag samples to estimate the generalization score.\n        By default, :func:`~sklearn.metrics.r2_score` is used.\n        Provide a callable with signature `metric(y_true, y_pred)` to use a\n        custom metric. Only available if `bootstrap=True`.\n\n    n_jobs : int, default=None\n        The number of jobs to run in parallel. :meth:`fit`, :meth:`predict`,\n        :meth:`decision_path` and :meth:`apply` are all parallelized over the\n        trees. ``None`` means 1 unless in a :obj:`joblib.parallel_backend`\n        context. ``-1`` means using all processors. See :term:`Glossary\n        <n_jobs>` for more details.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls both the randomness of the bootstrapping of the samples used\n        when building trees (if ``bootstrap=True``) and the sampling of the\n        features to consider when looking for the best split at each node\n        (if ``max_features < n_features``).\n        See :term:`Glossary <random_state>` for details.\n\n    verbose : int, default=0\n        Controls the verbosity when fitting and predicting.\n\n    warm_start : bool, default=False\n        When set to ``True``, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble, otherwise, just fit a whole\n        new forest. See :term:`Glossary <warm_start>` and\n        :ref:`tree_ensemble_warm_start` for details.\n\n    ccp_alpha : non-negative float, default=0.0\n        Complexity parameter used for Minimal Cost-Complexity Pruning. The\n        subtree with the largest cost complexity that is smaller than\n        ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n        :ref:`minimal_cost_complexity_pruning` for details. See\n        :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n        for an example of such pruning.\n\n        .. versionadded:: 0.22\n\n    max_samples : int or float, default=None\n        If bootstrap is True, the number of samples to draw from X\n        to train each base estimator.\n\n        - If None (default), then draw `X.shape[0]` samples.\n        - If int, then draw `max_samples` samples.\n        - If float, then draw `max(round(n_samples * max_samples), 1)` samples. Thus,\n          `max_samples` should be in the interval `(0.0, 1.0]`.\n\n        .. versionadded:: 0.22\n\n    monotonic_cst : array-like of int of shape (n_features), default=None\n        Indicates the monotonicity constraint to enforce on each feature.\n          - 1: monotonically increasing\n          - 0: no constraint\n          - -1: monotonically decreasing\n\n        If monotonic_cst is None, no constraints are applied.\n\n        Monotonicity constraints are not supported for:\n          - multioutput regressions (i.e. when `n_outputs_ > 1`),\n          - regressions trained on data with missing values.\n\n        Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n        .. versionadded:: 1.4\n\n    Attributes\n    ----------\n    estimator_ : :class:`~sklearn.tree.DecisionTreeRegressor`\n        The child estimator template used to create the collection of fitted\n        sub-estimators.\n\n        .. versionadded:: 1.2\n           `base_estimator_` was renamed to `estimator_`.\n\n    estimators_ : list of DecisionTreeRegressor\n        The collection of fitted sub-estimators.\n\n    feature_importances_ : ndarray of shape (n_features,)\n        The impurity-based feature importances.\n        The higher, the more important the feature.\n        The importance of a feature is computed as the (normalized)\n        total reduction of the criterion brought by that feature.  It is also\n        known as the Gini importance.\n\n        Warning: impurity-based feature importances can be misleading for\n        high cardinality features (many unique values). See\n        :func:`sklearn.inspection.permutation_importance` as an alternative.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_outputs_ : int\n        The number of outputs when ``fit`` is performed.\n\n    oob_score_ : float\n        Score of the training dataset obtained using an out-of-bag estimate.\n        This attribute exists only when ``oob_score`` is True.\n\n    oob_prediction_ : ndarray of shape (n_samples,) or (n_samples, n_outputs)\n        Prediction computed with out-of-bag estimate on the training set.\n        This attribute exists only when ``oob_score`` is True.\n\n    estimators_samples_ : list of arrays\n        The subset of drawn samples (i.e., the in-bag samples) for each base\n        estimator. Each subset is defined by an array of the indices selected.\n\n        .. versionadded:: 1.4\n\n    See Also\n    --------\n    sklearn.tree.DecisionTreeRegressor : A decision tree regressor.\n    sklearn.ensemble.ExtraTreesRegressor : Ensemble of extremely randomized\n        tree regressors.\n    sklearn.ensemble.HistGradientBoostingRegressor : A Histogram-based Gradient\n        Boosting Regression Tree, very fast for big datasets (n_samples >=\n        10_000).\n\n    Notes\n    -----\n    The default values for the parameters controlling the size of the trees\n    (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\n    unpruned trees which can potentially be very large on some data sets. To\n    reduce memory consumption, the complexity and size of the trees should be\n    controlled by setting those parameter values.\n\n    The features are always randomly permuted at each split. Therefore,\n    the best found split may vary, even with the same training data,\n    ``max_features=n_features`` and ``bootstrap=False``, if the improvement\n    of the criterion is identical for several splits enumerated during the\n    search of the best split. To obtain a deterministic behaviour during\n    fitting, ``random_state`` has to be fixed.\n\n    The default value ``max_features=1.0`` uses ``n_features``\n    rather than ``n_features / 3``. The latter was originally suggested in\n    [1], whereas the former was more recently justified empirically in [2].\n\n    References\n    ----------\n    .. [1] L. Breiman, \"Random Forests\", Machine Learning, 45(1), 5-32, 2001.\n\n    .. [2] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized\n           trees\", Machine Learning, 63(1), 3-42, 2006.\n\n    Examples\n    --------\n    >>> from sklearn.ensemble import RandomForestRegressor\n    >>> from sklearn.datasets import make_regression\n    >>> X, y = make_regression(n_features=4, n_informative=2,\n    ...                        random_state=0, shuffle=False)\n    >>> regr = RandomForestRegressor(max_depth=2, random_state=0)\n    >>> regr.fit(X, y)\n    RandomForestRegressor(...)\n    >>> print(regr.predict([[0, 0, 0, 0]]))\n    [-8.32987858]",
        "examples": "--------\n    >>> from sklearn.ensemble import RandomForestRegressor\n    >>> from sklearn.datasets import make_regression\n    >>> X, y = make_regression(n_features=4, n_informative=2,\n    ...                        random_state=0, shuffle=False)\n    >>> regr = RandomForestRegressor(max_depth=2, random_state=0)\n    >>> regr.fit(X, y)\n    RandomForestRegressor(...)\n    >>> print(regr.predict([[0, 0, 0, 0]]))\n    [-8.32987858]"
      },
      "methods": [
        {
          "name": "apply",
          "signature": "apply(self, X)",
          "documentation": {
            "description": "Apply trees in the forest to X, return leaf indices.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, its dtype will be converted to\n            ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csr_matrix``.\n\n        Returns\n        -------\n        X_leaves : ndarray of shape (n_samples, n_estimators)\n            For each datapoint x in X and for each tree in the forest,",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples. Internally, its dtype will be converted to",
                "description": "``dtype=np.float32``. If a sparse matrix is provided, it will be"
              },
              "converted": {
                "type": "into a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "X_leaves": {
                "type": "ndarray of shape (n_samples, n_estimators)",
                "description": ""
              },
              "For": {
                "type": "each datapoint x in X and for each tree in the forest,",
                "description": ""
              },
              "return": {
                "type": "the index of the leaf x ends up in.",
                "description": ""
              }
            },
            "returns": "the index of the leaf x ends up in.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "decision_path",
          "signature": "decision_path(self, X)",
          "documentation": {
            "description": "",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "columns from indicator[n_nodes_ptr[i]:n_nodes_ptr[i+1]]",
                "description": ""
              },
              "converted": {
                "type": "into a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "indicator": {
                "type": "sparse matrix of shape (n_samples, n_nodes)",
                "description": ""
              },
              "Return": {
                "type": "a node indicator matrix where non zero elements indicates",
                "description": ""
              },
              "that": {
                "type": "the samples goes through the nodes. The matrix is of CSR",
                "description": "format."
              },
              "n_nodes_ptr": {
                "type": "ndarray of shape (n_estimators + 1,)",
                "description": ""
              },
              "gives": {
                "type": "the indicator value for the i-th estimator.",
                "description": ""
              }
            },
            "returns": "the decision path in the forest.\n\n        .. versionadded:: 0.18\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, its dtype will be converted to\n            ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csr_matrix``.\n\n        Returns\n        -------\n        indicator : sparse matrix of shape (n_samples, n_nodes)",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Build a forest of trees from the training set (X, y).\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The training input samples. Internally, its dtype will be converted\n            to ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csc_matrix``.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            The target values (class labels in classification, real numbers in\n            regression).\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted. Splits\n            that would create child nodes with net zero or negative weight are\n            ignored while searching for a split in each node. In the case of\n            classification, splits are also ignored if they would result in any\n            single class carrying a negative weight in either child node.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "target values (class labels in classification, real numbers in",
                "description": "regression)."
              },
              "to": {
                "type": "``dtype=np.float32``. If a sparse matrix is provided, it will be",
                "description": ""
              },
              "converted": {
                "type": "into a sparse ``csc_matrix``.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted. Splits",
                "description": ""
              },
              "that": {
                "type": "would create child nodes with net zero or negative weight are",
                "description": ""
              },
              "ignored": {
                "type": "while searching for a split in each node. In the case of",
                "description": "classification, splits are also ignored if they would result in any"
              },
              "single": {
                "type": "class carrying a negative weight in either child node.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "Fitted": {
                "type": "estimator.",
                "description": ""
              }
            },
            "returns": "-------\n        self : object\n            Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRequest\n            A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "documentation": {
            "description": "Predict regression target for X.\n\n        The predicted regression target of an input sample is computed as the\n        mean predicted regression targets of the trees in the forest.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, its dtype will be converted to\n            ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csr_matrix``.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted values.",
                "description": ""
              },
              "converted": {
                "type": "into a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "y": {
                "type": "ndarray of shape (n_samples,) or (n_samples, n_outputs)",
                "description": ""
              }
            },
            "returns": "-------\n        y : ndarray of shape (n_samples,) or (n_samples, n_outputs)\n            The predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Return the coefficient of determination of the prediction.\n\n        The coefficient of determination :math:`R^2` is defined as\n        :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\n        sum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\n        is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\n        The best possible score is 1.0 and it can be negative (because the\n        model can be arbitrarily worse). A constant model that always predicts\n        the expected value of `y`, disregarding the input features, would get\n        a :math:`R^2` score of 0.0.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples. For some estimators this may be a precomputed\n            kernel matrix or a list of generic objects instead with shape\n            ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n            is the number of samples used in the fitting for the estimator.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True values for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples. For some estimators this may be a precomputed",
                "description": ""
              },
              "kernel": {
                "type": "matrix or a list of generic objects instead with shape",
                "description": "``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``"
              },
              "is": {
                "type": "the number of samples used in the fitting for the estimator.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "values for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ":math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\nNotes\n-----"
              },
              "The": {
                "type": "math:`R^2` score used when calling ``score`` on a regressor uses",
                "description": "``multioutput='uniform_average'`` from version 0.23 to keep consistent"
              },
              "with": {
                "type": "default value of :func:`~sklearn.metrics.r2_score`.",
                "description": ""
              },
              "This": {
                "type": "influences the ``score`` method of all the multioutput",
                "description": ""
              },
              "regressors": {
                "type": "(except for",
                "description": ":class:`~sklearn.multioutput.MultiOutputRegressor`)."
              }
            },
            "returns": "-------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\n\n        Notes\n        -----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "raises": "",
            "see_also": "",
            "notes": "-----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.ensemble._forest.RandomForestRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._forest.RandomForestRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.ensemble._forest.RandomForestRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._forest.RandomForestRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "RandomTreesEmbedding",
      "documentation": {
        "description": "An ensemble of totally random trees.\n\n    An unsupervised transformation of a dataset to a high-dimensional\n    sparse representation. A datapoint is coded according to which leaf of\n    each tree it is sorted into. Using a one-hot encoding of the leaves,\n    this leads to a binary coding with as many ones as there are trees in\n    the forest.\n\n    The dimensionality of the resulting representation is\n    ``n_out <= n_estimators * max_leaf_nodes``. If ``max_leaf_nodes == None``,\n    the number of leaf nodes is at most ``n_estimators * 2 ** max_depth``.\n\n    For an example of applying Random Trees Embedding to non-linear\n    classification, see\n    :ref:`sphx_glr_auto_examples_ensemble_plot_random_forest_embedding.py`.\n\n    Read more in the :ref:`User Guide <random_trees_embedding>`.\n\n    Parameters\n    ----------\n    n_estimators : int, default=100\n        Number of trees in the forest.\n\n        .. versionchanged:: 0.22\n           The default value of ``n_estimators`` changed from 10 to 100\n           in 0.22.\n\n    max_depth : int, default=5\n        The maximum depth of each tree. If None, then nodes are expanded until\n        all leaves are pure or until all leaves contain less than\n        min_samples_split samples.\n\n    min_samples_split : int or float, default=2\n        The minimum number of samples required to split an internal node:\n\n        - If int, then consider `min_samples_split` as the minimum number.\n        - If float, then `min_samples_split` is a fraction and\n          `ceil(min_samples_split * n_samples)` is the minimum\n          number of samples for each split.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_samples_leaf : int or float, default=1\n        The minimum number of samples required to be at a leaf node.\n        A split point at any depth will only be considered if it leaves at\n        least ``min_samples_leaf`` training samples in each of the left and\n        right branches.  This may have the effect of smoothing the model,\n        especially in regression.\n\n        - If int, then consider `min_samples_leaf` as the minimum number.\n        - If float, then `min_samples_leaf` is a fraction and\n          `ceil(min_samples_leaf * n_samples)` is the minimum\n          number of samples for each node.\n\n        .. versionchanged:: 0.18\n           Added float values for fractions.\n\n    min_weight_fraction_leaf : float, default=0.0\n        The minimum weighted fraction of the sum total of weights (of all\n        the input samples) required to be at a leaf node. Samples have\n        equal weight when sample_weight is not provided.\n\n    max_leaf_nodes : int, default=None\n        Grow trees with ``max_leaf_nodes`` in best-first fashion.\n        Best nodes are defined as relative reduction in impurity.\n        If None then unlimited number of leaf nodes.\n\n    min_impurity_decrease : float, default=0.0\n        A node will be split if this split induces a decrease of the impurity\n        greater than or equal to this value.\n\n        The weighted impurity decrease equation is the following::\n\n            N_t / N * (impurity - N_t_R / N_t * right_impurity\n                                - N_t_L / N_t * left_impurity)\n\n        where ``N`` is the total number of samples, ``N_t`` is the number of\n        samples at the current node, ``N_t_L`` is the number of samples in the\n        left child, and ``N_t_R`` is the number of samples in the right child.\n\n        ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n        if ``sample_weight`` is passed.\n\n        .. versionadded:: 0.19\n\n    sparse_output : bool, default=True\n        Whether or not to return a sparse CSR matrix, as default behavior,\n        or to return a dense array compatible with dense pipeline operators.\n\n    n_jobs : int, default=None\n        The number of jobs to run in parallel. :meth:`fit`, :meth:`transform`,\n        :meth:`decision_path` and :meth:`apply` are all parallelized over the\n        trees. ``None`` means 1 unless in a :obj:`joblib.parallel_backend`\n        context. ``-1`` means using all processors. See :term:`Glossary\n        <n_jobs>` for more details.\n\n    random_state : int, RandomState instance or None, default=None\n        Controls the generation of the random `y` used to fit the trees\n        and the draw of the splits for each feature at the trees' nodes.\n        See :term:`Glossary <random_state>` for details.\n\n    verbose : int, default=0\n        Controls the verbosity when fitting and predicting.\n\n    warm_start : bool, default=False\n        When set to ``True``, reuse the solution of the previous call to fit\n        and add more estimators to the ensemble, otherwise, just fit a whole\n        new forest. See :term:`Glossary <warm_start>` and\n        :ref:`tree_ensemble_warm_start` for details.\n\n    Attributes\n    ----------\n    estimator_ : :class:`~sklearn.tree.ExtraTreeRegressor` instance\n        The child estimator template used to create the collection of fitted\n        sub-estimators.\n\n        .. versionadded:: 1.2\n           `base_estimator_` was renamed to `estimator_`.\n\n    estimators_ : list of :class:`~sklearn.tree.ExtraTreeRegressor` instances\n        The collection of fitted sub-estimators.\n\n    feature_importances_ : ndarray of shape (n_features,)\n        The feature importances (the higher, the more important the feature).\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Defined only when `X`\n        has feature names that are all strings.\n\n        .. versionadded:: 1.0\n\n    n_outputs_ : int\n        The number of outputs when ``fit`` is performed.\n\n    one_hot_encoder_ : OneHotEncoder instance\n        One-hot encoder used to create the sparse embedding.\n\n    estimators_samples_ : list of arrays\n        The subset of drawn samples (i.e., the in-bag samples) for each base\n        estimator. Each subset is defined by an array of the indices selected.\n\n        .. versionadded:: 1.4\n\n    See Also\n    --------\n    ExtraTreesClassifier : An extra-trees classifier.\n    ExtraTreesRegressor : An extra-trees regressor.\n    RandomForestClassifier : A random forest classifier.\n    RandomForestRegressor : A random forest regressor.\n    sklearn.tree.ExtraTreeClassifier: An extremely randomized\n        tree classifier.\n    sklearn.tree.ExtraTreeRegressor : An extremely randomized\n        tree regressor.\n\n    References\n    ----------\n    .. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\",\n           Machine Learning, 63(1), 3-42, 2006.\n    .. [2] Moosmann, F. and Triggs, B. and Jurie, F.  \"Fast discriminative\n           visual codebooks using randomized clustering forests\"\n           NIPS 2007",
        "parameters": {
          "n_estimators": {
            "type": "int, default=100",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`.",
            "description": ".. versionadded:: 0.24"
          },
          "The": {
            "type": "subset of drawn samples (i.e., the in-bag samples) for each base",
            "description": "estimator. Each subset is defined by an array of the indices selected.\n.. versionadded:: 1.4"
          },
          "in": {
            "type": "0.22.",
            "description": ""
          },
          "max_depth": {
            "type": "int, default=5",
            "description": ""
          },
          "all": {
            "type": "leaves are pure or until all leaves contain less than",
            "description": ""
          },
          "min_samples_split": {
            "type": "int or float, default=2",
            "description": ""
          },
          "number": {
            "type": "of samples for each node.",
            "description": ".. versionchanged:: 0.18"
          },
          "Added": {
            "type": "float values for fractions.",
            "description": ""
          },
          "min_samples_leaf": {
            "type": "int or float, default=1",
            "description": ""
          },
          "A": {
            "type": "node will be split if this split induces a decrease of the impurity",
            "description": ""
          },
          "least": {
            "type": "``min_samples_leaf`` training samples in each of the left and",
            "description": ""
          },
          "right": {
            "type": "branches.  This may have the effect of smoothing the model,",
            "description": ""
          },
          "especially": {
            "type": "in regression.",
            "description": "- If int, then consider `min_samples_leaf` as the minimum number.\n- If float, then `min_samples_leaf` is a fraction and\n`ceil(min_samples_leaf * n_samples)` is the minimum"
          },
          "min_weight_fraction_leaf": {
            "type": "float, default=0.0",
            "description": ""
          },
          "the": {
            "type": "input samples) required to be at a leaf node. Samples have",
            "description": ""
          },
          "equal": {
            "type": "weight when sample_weight is not provided.",
            "description": ""
          },
          "max_leaf_nodes": {
            "type": "int, default=None",
            "description": ""
          },
          "Grow": {
            "type": "trees with ``max_leaf_nodes`` in best-first fashion.",
            "description": ""
          },
          "Best": {
            "type": "nodes are defined as relative reduction in impurity.",
            "description": ""
          },
          "If": {
            "type": "None then unlimited number of leaf nodes.",
            "description": ""
          },
          "min_impurity_decrease": {
            "type": "float, default=0.0",
            "description": ""
          },
          "greater": {
            "type": "than or equal to this value.",
            "description": ""
          },
          "N_t": {
            "type": "/ N * (impurity - N_t_R / N_t * right_impurity",
            "description": "- N_t_L / N_t * left_impurity)"
          },
          "where": {
            "type": "``N`` is the total number of samples, ``N_t`` is the number of",
            "description": ""
          },
          "samples": {
            "type": "at the current node, ``N_t_L`` is the number of samples in the",
            "description": ""
          },
          "left": {
            "type": "child, and ``N_t_R`` is the number of samples in the right child.",
            "description": "``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,"
          },
          "if": {
            "type": "``sample_weight`` is passed.",
            "description": ".. versionadded:: 0.19"
          },
          "sparse_output": {
            "type": "bool, default=True",
            "description": ""
          },
          "Whether": {
            "type": "or not to return a sparse CSR matrix, as default behavior,",
            "description": ""
          },
          "or": {
            "type": "to return a dense array compatible with dense pipeline operators.",
            "description": ""
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Controls": {
            "type": "the verbosity when fitting and predicting.",
            "description": ""
          },
          "and": {
            "type": "add more estimators to the ensemble, otherwise, just fit a whole",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "verbose": {
            "type": "int, default=0",
            "description": ""
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": ""
          },
          "When": {
            "type": "set to ``True``, reuse the solution of the previous call to fit",
            "description": ""
          },
          "new": {
            "type": "forest. See :term:`Glossary <warm_start>` and",
            "description": ":ref:`tree_ensemble_warm_start` for details.\nAttributes\n----------"
          },
          "estimator_": {
            "type": ":class:`~sklearn.tree.ExtraTreeRegressor` instance",
            "description": ""
          },
          "estimators_": {
            "type": "list of :class:`~sklearn.tree.ExtraTreeRegressor` instances",
            "description": ""
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": ""
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Defined only when `X`",
            "description": ""
          },
          "has": {
            "type": "feature names that are all strings.",
            "description": ".. versionadded:: 1.0"
          },
          "n_outputs_": {
            "type": "int",
            "description": ""
          },
          "one_hot_encoder_": {
            "type": "OneHotEncoder instance",
            "description": "One-hot encoder used to create the sparse embedding."
          },
          "estimators_samples_": {
            "type": "list of arrays",
            "description": ""
          },
          "ExtraTreesClassifier": {
            "type": "An extra",
            "description": "trees classifier."
          },
          "ExtraTreesRegressor": {
            "type": "An extra",
            "description": "trees regressor."
          },
          "RandomForestClassifier": {
            "type": "A random forest classifier.",
            "description": ""
          },
          "RandomForestRegressor": {
            "type": "A random forest regressor.",
            "description": "sklearn.tree.ExtraTreeClassifier: An extremely randomized"
          },
          "tree": {
            "type": "regressor.",
            "description": "References\n----------\n.. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\","
          },
          "Machine": {
            "type": "Learning, 63(1), 3-42, 2006.",
            "description": ".. [2] Moosmann, F. and Triggs, B. and Jurie, F.  \"Fast discriminative"
          },
          "visual": {
            "type": "codebooks using randomized clustering forests\"",
            "description": ""
          },
          "NIPS": {
            "type": "2007",
            "description": "Examples\n--------\n>>> from sklearn.ensemble import RandomTreesEmbedding\n>>> X = [[0,0], [1,0], [0,1], [-1,0], [0,-1]]\n>>> random_trees = RandomTreesEmbedding(\n...    n_estimators=5, random_state=0, max_depth=1).fit(X)\n>>> X_sparse_embedding = random_trees.transform(X)\n>>> X_sparse_embedding.toarray()\narray([[0., 1., 1., 0., 1., 0., 0., 1., 1., 0.],\n[0., 1., 1., 0., 1., 0., 0., 1., 1., 0.],\n[0., 1., 0., 1., 0., 1., 0., 1., 0., 1.],\n[1., 0., 1., 0., 1., 0., 1., 0., 1., 0.],\n[0., 1., 1., 0., 1., 0., 0., 1., 1., 0.]])"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    ExtraTreesClassifier : An extra-trees classifier.\n    ExtraTreesRegressor : An extra-trees regressor.\n    RandomForestClassifier : A random forest classifier.\n    RandomForestRegressor : A random forest regressor.\n    sklearn.tree.ExtraTreeClassifier: An extremely randomized\n        tree classifier.\n    sklearn.tree.ExtraTreeRegressor : An extremely randomized\n        tree regressor.\n\n    References\n    ----------\n    .. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\",\n           Machine Learning, 63(1), 3-42, 2006.\n    .. [2] Moosmann, F. and Triggs, B. and Jurie, F.  \"Fast discriminative\n           visual codebooks using randomized clustering forests\"\n           NIPS 2007\n\n    Examples\n    --------\n    >>> from sklearn.ensemble import RandomTreesEmbedding\n    >>> X = [[0,0], [1,0], [0,1], [-1,0], [0,-1]]\n    >>> random_trees = RandomTreesEmbedding(\n    ...    n_estimators=5, random_state=0, max_depth=1).fit(X)\n    >>> X_sparse_embedding = random_trees.transform(X)\n    >>> X_sparse_embedding.toarray()\n    array([[0., 1., 1., 0., 1., 0., 0., 1., 1., 0.],\n           [0., 1., 1., 0., 1., 0., 0., 1., 1., 0.],\n           [0., 1., 0., 1., 0., 1., 0., 1., 0., 1.],\n           [1., 0., 1., 0., 1., 0., 1., 0., 1., 0.],\n           [0., 1., 1., 0., 1., 0., 0., 1., 1., 0.]])",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.ensemble import RandomTreesEmbedding\n    >>> X = [[0,0], [1,0], [0,1], [-1,0], [0,-1]]\n    >>> random_trees = RandomTreesEmbedding(\n    ...    n_estimators=5, random_state=0, max_depth=1).fit(X)\n    >>> X_sparse_embedding = random_trees.transform(X)\n    >>> X_sparse_embedding.toarray()\n    array([[0., 1., 1., 0., 1., 0., 0., 1., 1., 0.],\n           [0., 1., 1., 0., 1., 0., 0., 1., 1., 0.],\n           [0., 1., 0., 1., 0., 1., 0., 1., 0., 1.],\n           [1., 0., 1., 0., 1., 0., 1., 0., 1., 0.],\n           [0., 1., 1., 0., 1., 0., 0., 1., 1., 0.]])"
      },
      "methods": [
        {
          "name": "apply",
          "signature": "apply(self, X)",
          "documentation": {
            "description": "Apply trees in the forest to X, return leaf indices.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, its dtype will be converted to\n            ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csr_matrix``.\n\n        Returns\n        -------\n        X_leaves : ndarray of shape (n_samples, n_estimators)\n            For each datapoint x in X and for each tree in the forest,",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples. Internally, its dtype will be converted to",
                "description": "``dtype=np.float32``. If a sparse matrix is provided, it will be"
              },
              "converted": {
                "type": "into a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "X_leaves": {
                "type": "ndarray of shape (n_samples, n_estimators)",
                "description": ""
              },
              "For": {
                "type": "each datapoint x in X and for each tree in the forest,",
                "description": ""
              },
              "return": {
                "type": "the index of the leaf x ends up in.",
                "description": ""
              }
            },
            "returns": "the index of the leaf x ends up in.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "decision_path",
          "signature": "decision_path(self, X)",
          "documentation": {
            "description": "",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "columns from indicator[n_nodes_ptr[i]:n_nodes_ptr[i+1]]",
                "description": ""
              },
              "converted": {
                "type": "into a sparse ``csr_matrix``.",
                "description": "Returns\n-------"
              },
              "indicator": {
                "type": "sparse matrix of shape (n_samples, n_nodes)",
                "description": ""
              },
              "Return": {
                "type": "a node indicator matrix where non zero elements indicates",
                "description": ""
              },
              "that": {
                "type": "the samples goes through the nodes. The matrix is of CSR",
                "description": "format."
              },
              "n_nodes_ptr": {
                "type": "ndarray of shape (n_estimators + 1,)",
                "description": ""
              },
              "gives": {
                "type": "the indicator value for the i-th estimator.",
                "description": ""
              }
            },
            "returns": "the decision path in the forest.\n\n        .. versionadded:: 0.18\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Internally, its dtype will be converted to\n            ``dtype=np.float32``. If a sparse matrix is provided, it will be\n            converted into a sparse ``csr_matrix``.\n\n        Returns\n        -------\n        indicator : sparse matrix of shape (n_samples, n_nodes)",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y=None, sample_weight=None)",
          "documentation": {
            "description": "Fit estimator.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples. Use ``dtype=np.float32`` for maximum\n            efficiency. Sparse matrices are also supported, use sparse\n            ``csc_matrix`` for maximum efficiency.\n\n        y : Ignored\n            Not used, present for API consistency by convention.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted. Splits\n            that would create child nodes with net zero or negative weight are\n            ignored while searching for a split in each node. In the case of\n            classification, splits are also ignored if they would result in any\n            single class carrying a negative weight in either child node.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples. Use ``dtype=np.float32`` for maximum",
                "description": "efficiency. Sparse matrices are also supported, use sparse\n``csc_matrix`` for maximum efficiency."
              },
              "y": {
                "type": "Ignored",
                "description": ""
              },
              "Not": {
                "type": "used, present for API consistency by convention.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted. Splits",
                "description": ""
              },
              "that": {
                "type": "would create child nodes with net zero or negative weight are",
                "description": ""
              },
              "ignored": {
                "type": "while searching for a split in each node. In the case of",
                "description": "classification, splits are also ignored if they would result in any"
              },
              "single": {
                "type": "class carrying a negative weight in either child node.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "Returns": {
                "type": "the instance itself.",
                "description": ""
              }
            },
            "returns": "-------\n        self : object",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit_transform",
          "signature": "fit_transform(self, X, y=None, sample_weight=None)",
          "documentation": {
            "description": "Fit estimator and transform dataset.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            Input data used to build forests. Use ``dtype=np.float32`` for\n            maximum efficiency.\n\n        y : Ignored\n            Not used, present for API consistency by convention.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted. Splits\n            that would create child nodes with net zero or negative weight are\n            ignored while searching for a split in each node. In the case of\n            classification, splits are also ignored if they would result in any\n            single class carrying a negative weight in either child node.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "Input": {
                "type": "data used to build forests. Use ``dtype=np.float32`` for",
                "description": ""
              },
              "maximum": {
                "type": "efficiency.",
                "description": ""
              },
              "y": {
                "type": "Ignored",
                "description": ""
              },
              "Not": {
                "type": "used, present for API consistency by convention.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted. Splits",
                "description": ""
              },
              "that": {
                "type": "would create child nodes with net zero or negative weight are",
                "description": ""
              },
              "ignored": {
                "type": "while searching for a split in each node. In the case of",
                "description": "classification, splits are also ignored if they would result in any"
              },
              "single": {
                "type": "class carrying a negative weight in either child node.",
                "description": "Returns\n-------"
              },
              "X_transformed": {
                "type": "sparse matrix of shape (n_samples, n_out)",
                "description": ""
              },
              "Transformed": {
                "type": "dataset.",
                "description": ""
              }
            },
            "returns": "-------\n        X_transformed : sparse matrix of shape (n_samples, n_out)\n            Transformed dataset.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_feature_names_out",
          "signature": "get_feature_names_out(self, input_features=None)",
          "documentation": {
            "description": "Get output feature names for transformation.\n\n        Parameters\n        ----------\n        input_features : array-like of str or None, default=None\n            Only used to validate feature names with the names seen in :meth:`fit`.",
            "parameters": {
              "input_features": {
                "type": "array",
                "description": "like of str or None, default=None"
              },
              "Only": {
                "type": "the latter can be present as output features.",
                "description": ""
              },
              "feature_names_out": {
                "type": "ndarray of str objects",
                "description": ""
              },
              "Transformed": {
                "type": "feature names, in the format of",
                "description": "`randomtreesembedding_{tree}_{leaf}`, where `tree` is the tree used"
              },
              "to": {
                "type": "generate the leaf and `leaf` is the index of a leaf node",
                "description": ""
              },
              "in": {
                "type": "that tree. Note that the node indexing scheme is used to",
                "description": ""
              },
              "index": {
                "type": "both nodes with children (split nodes) and leaf nodes.",
                "description": ""
              },
              "As": {
                "type": "a consequence, there are missing indices in the output",
                "description": ""
              },
              "feature": {
                "type": "names.",
                "description": ""
              }
            },
            "returns": "-------\n        feature_names_out : ndarray of str objects\n            Transformed feature names, in the format of\n            `randomtreesembedding_{tree}_{leaf}`, where `tree` is the tree used\n            to generate the leaf and `leaf` is the index of a leaf node\n            in that tree. Note that the node indexing scheme is used to\n            index both nodes with children (split nodes) and leaf nodes.\n            Only the latter can be present as output features.\n            As a consequence, there are missing indices in the output\n            feature names.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRequest\n            A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "If": {
                "type": "True, will return the parameters for this estimator and",
                "description": ""
              },
              "contained": {
                "type": "subobjects that are estimators.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "names mapped to their values.",
                "description": ""
              }
            },
            "returns": "-------\n        params : dict\n            Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.ensemble._forest.RandomTreesEmbedding, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._forest.RandomTreesEmbedding",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_output",
          "signature": "set_output(self, *, transform=None)",
          "documentation": {
            "description": "Set output container.\n\n        See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`\n        for an example on how to use the API.\n\n        Parameters\n        ----------\n        transform : {\"default\", \"pandas\", \"polars\"}, default=None\n            Configure output of `transform` and `fit_transform`.\n\n            - `\"default\"`: Default output format of a transformer\n            - `\"pandas\"`: DataFrame output\n            - `\"polars\"`: Polars output\n            - `None`: Transform configuration is unchanged\n\n            .. versionadded:: 1.4\n                `\"polars\"` option was added.",
            "parameters": {
              "transform": {
                "type": "{\"default\", \"pandas\", \"polars\"}, default=None",
                "description": ""
              },
              "Configure": {
                "type": "output of `transform` and `fit_transform`.",
                "description": "- `\"default\"`: Default output format of a transformer\n- `\"pandas\"`: DataFrame output\n- `\"polars\"`: Polars output\n- `None`: Transform configuration is unchanged\n.. versionadded:: 1.4\n`\"polars\"` option was added.\nReturns\n-------"
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "Estimator": {
                "type": "instance.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n        parameters of the form ``<component>__<parameter>`` so that it's\n        possible to update each component of a nested object.\n\n        Parameters\n        ----------\n        **params : dict\n            Estimator parameters.",
            "parameters": {
              "Estimator": {
                "type": "instance.",
                "description": ""
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "of": {
                "type": "the form ``<component>__<parameter>`` so that it's",
                "description": ""
              },
              "possible": {
                "type": "to update each component of a nested object.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "transform",
          "signature": "transform(self, X)",
          "documentation": {
            "description": "Transform dataset.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            Input data to be transformed. Use ``dtype=np.float32`` for maximum\n            efficiency. Sparse matrices are also supported, use sparse\n            ``csr_matrix`` for maximum efficiency.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "Input": {
                "type": "data to be transformed. Use ``dtype=np.float32`` for maximum",
                "description": "efficiency. Sparse matrices are also supported, use sparse\n``csr_matrix`` for maximum efficiency.\nReturns\n-------"
              },
              "X_transformed": {
                "type": "sparse matrix of shape (n_samples, n_out)",
                "description": ""
              },
              "Transformed": {
                "type": "dataset.",
                "description": ""
              }
            },
            "returns": "-------\n        X_transformed : sparse matrix of shape (n_samples, n_out)\n            Transformed dataset.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "StackingClassifier",
      "documentation": {
        "description": "Stack of estimators with a final classifier.\n\n    Stacked generalization consists in stacking the output of individual\n    estimator and use a classifier to compute the final prediction. Stacking\n    allows to use the strength of each individual estimator by using their\n    output as input of a final estimator.\n\n    Note that `estimators_` are fitted on the full `X` while `final_estimator_`\n    is trained using cross-validated predictions of the base estimators using\n    `cross_val_predict`.\n\n    Read more in the :ref:`User Guide <stacking>`.\n\n    .. versionadded:: 0.22\n\n    Parameters\n    ----------\n    estimators : list of (str, estimator)\n        Base estimators which will be stacked together. Each element of the\n        list is defined as a tuple of string (i.e. name) and an estimator\n        instance. An estimator can be set to 'drop' using `set_params`.\n\n        The type of estimator is generally expected to be a classifier.\n        However, one can pass a regressor for some use case (e.g. ordinal\n        regression).\n\n    final_estimator : estimator, default=None\n        A classifier which will be used to combine the base estimators.\n        The default classifier is a\n        :class:`~sklearn.linear_model.LogisticRegression`.\n\n    cv : int, cross-validation generator, iterable, or \"prefit\", default=None\n        Determines the cross-validation splitting strategy used in\n        `cross_val_predict` to train `final_estimator`. Possible inputs for\n        cv are:\n\n        * None, to use the default 5-fold cross validation,\n        * integer, to specify the number of folds in a (Stratified) KFold,\n        * An object to be used as a cross-validation generator,\n        * An iterable yielding train, test splits,\n        * `\"prefit\"`, to assume the `estimators` are prefit. In this case, the\n          estimators will not be refitted.\n\n        For integer/None inputs, if the estimator is a classifier and y is\n        either binary or multiclass,\n        :class:`~sklearn.model_selection.StratifiedKFold` is used.\n        In all other cases, :class:`~sklearn.model_selection.KFold` is used.\n        These splitters are instantiated with `shuffle=False` so the splits\n        will be the same across calls.\n\n        Refer :ref:`User Guide <cross_validation>` for the various\n        cross-validation strategies that can be used here.\n\n        If \"prefit\" is passed, it is assumed that all `estimators` have\n        been fitted already. The `final_estimator_` is trained on the `estimators`\n        predictions on the full training set and are **not** cross validated\n        predictions. Please note that if the models have been trained on the same\n        data to train the stacking model, there is a very high risk of overfitting.\n\n        .. versionadded:: 1.1\n            The 'prefit' option was added in 1.1\n\n        .. note::\n           A larger number of split will provide no benefits if the number\n           of training samples is large enough. Indeed, the training time\n           will increase. ``cv`` is not used for model evaluation but for\n           prediction.\n\n    stack_method : {'auto', 'predict_proba', 'decision_function', 'predict'},             default='auto'\n        Methods called for each base estimator. It can be:\n\n        * if 'auto', it will try to invoke, for each estimator,\n          `'predict_proba'`, `'decision_function'` or `'predict'` in that\n          order.\n        * otherwise, one of `'predict_proba'`, `'decision_function'` or\n          `'predict'`. If the method is not implemented by the estimator, it\n          will raise an error.\n\n    n_jobs : int, default=None\n        The number of jobs to run in parallel for `fit` of all `estimators`.\n        `None` means 1 unless in a `joblib.parallel_backend` context. -1 means\n        using all processors. See :term:`Glossary <n_jobs>` for more details.\n\n    passthrough : bool, default=False\n        When False, only the predictions of estimators will be used as\n        training data for `final_estimator`. When True, the\n        `final_estimator` is trained on the predictions as well as the\n        original training data.\n\n    verbose : int, default=0\n        Verbosity level.\n\n    Attributes\n    ----------\n    classes_ : ndarray of shape (n_classes,) or list of ndarray if `y`         is of type `\"multilabel-indicator\"`.\n        Class labels.\n\n    estimators_ : list of estimators\n        The elements of the `estimators` parameter, having been fitted on the\n        training data. If an estimator has been set to `'drop'`, it\n        will not appear in `estimators_`. When `cv=\"prefit\"`, `estimators_`\n        is set to `estimators` and is not fitted again.\n\n    named_estimators_ : :class:`~sklearn.utils.Bunch`\n        Attribute to access any fitted sub-estimators by name.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`. Only defined if the\n        underlying estimator exposes such an attribute when fit.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Only defined if the\n        underlying estimators expose such an attribute when fit.\n\n        .. versionadded:: 1.0\n\n    final_estimator_ : estimator\n        The classifier fit on the output of `estimators_` and responsible for\n        final predictions.\n\n    stack_method_ : list of str\n        The method used by each base estimator.\n\n    See Also\n    --------\n    StackingRegressor : Stack of estimators with a final regressor.\n\n    Notes\n    -----\n    When `predict_proba` is used by each estimator (i.e. most of the time for\n    `stack_method='auto'` or specifically for `stack_method='predict_proba'`),\n    the first column predicted by each estimator will be dropped in the case\n    of a binary classification problem. Indeed, both feature will be perfectly\n    collinear.\n\n    In some cases (e.g. ordinal regression), one can pass regressors as the\n    first layer of the :class:`StackingClassifier`. However, note that `y` will\n    be internally encoded in a numerically increasing order or lexicographic\n    order. If this ordering is not adequate, one should manually numerically\n    encode the classes in the desired order.\n\n    References\n    ----------\n    .. [1] Wolpert, David H. \"Stacked generalization.\" Neural networks 5.2\n       (1992): 241-259.",
        "parameters": {
          "estimators": {
            "type": "will not be refitted.",
            "description": ""
          },
          "Base": {
            "type": "estimators which will be stacked together. Each element of the",
            "description": ""
          },
          "list": {
            "type": "is defined as a tuple of string (i.e. name) and an estimator",
            "description": "instance. An estimator can be set to 'drop' using `set_params`."
          },
          "The": {
            "type": "method used by each base estimator.",
            "description": ""
          },
          "final_estimator": {
            "type": "estimator, default=None",
            "description": ""
          },
          "A": {
            "type": "larger number of split will provide no benefits if the number",
            "description": ""
          },
          "cv": {
            "type": "are:",
            "description": "* None, to use the default 5-fold cross validation,\n* integer, to specify the number of folds in a (Stratified) KFold,\n* An object to be used as a cross-validation generator,\n* An iterable yielding train, test splits,\n* `\"prefit\"`, to assume the `estimators` are prefit. In this case, the"
          },
          "Determines": {
            "type": "the cross-validation splitting strategy used in",
            "description": "`cross_val_predict` to train `final_estimator`. Possible inputs for"
          },
          "For": {
            "type": "integer/None inputs, if the estimator is a classifier and y is",
            "description": ""
          },
          "either": {
            "type": "binary or multiclass,",
            "description": ":class:`~sklearn.model_selection.StratifiedKFold` is used."
          },
          "In": {
            "type": "some cases (e.g. ordinal regression), one can pass regressors as the",
            "description": ""
          },
          "These": {
            "type": "splitters are instantiated with `shuffle=False` so the splits",
            "description": ""
          },
          "will": {
            "type": "not appear in `estimators_`. When `cv=\"prefit\"`, `estimators_`",
            "description": ""
          },
          "Refer": {
            "type": "ref:`User Guide <cross_validation>` for the various",
            "description": "cross-validation strategies that can be used here."
          },
          "If": {
            "type": "\"prefit\" is passed, it is assumed that all `estimators` have",
            "description": ""
          },
          "been": {
            "type": "fitted already. The `final_estimator_` is trained on the `estimators`",
            "description": ""
          },
          "predictions": {
            "type": "on the full training set and are **not** cross validated",
            "description": "predictions. Please note that if the models have been trained on the same"
          },
          "data": {
            "type": "to train the stacking model, there is a very high risk of overfitting.",
            "description": ".. versionadded:: 1.1"
          },
          "of": {
            "type": "a binary classification problem. Indeed, both feature will be perfectly",
            "description": "collinear."
          },
          "stack_method": {
            "type": "{'auto', 'predict_proba', 'decision_function', 'predict'},             default='auto'",
            "description": ""
          },
          "Methods": {
            "type": "called for each base estimator. It can be:",
            "description": "* if 'auto', it will try to invoke, for each estimator,\n`'predict_proba'`, `'decision_function'` or `'predict'` in that\norder.\n* otherwise, one of `'predict_proba'`, `'decision_function'` or\n`'predict'`. If the method is not implemented by the estimator, it"
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": ""
          },
          "using": {
            "type": "all processors. See :term:`Glossary <n_jobs>` for more details.",
            "description": ""
          },
          "passthrough": {
            "type": "bool, default=False",
            "description": ""
          },
          "When": {
            "type": "`predict_proba` is used by each estimator (i.e. most of the time for",
            "description": "`stack_method='auto'` or specifically for `stack_method='predict_proba'`),"
          },
          "training": {
            "type": "data. If an estimator has been set to `'drop'`, it",
            "description": ""
          },
          "original": {
            "type": "training data.",
            "description": ""
          },
          "verbose": {
            "type": "int, default=0",
            "description": ""
          },
          "Verbosity": {
            "type": "level.",
            "description": "Attributes\n----------"
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,) or list of ndarray if `y`         is of type `\"multilabel",
            "description": "indicator\"`."
          },
          "Class": {
            "type": "labels.",
            "description": ""
          },
          "estimators_": {
            "type": "list of estimators",
            "description": ""
          },
          "is": {
            "type": "set to `estimators` and is not fitted again.",
            "description": ""
          },
          "named_estimators_": {
            "type": ":class:`~sklearn.utils.Bunch`",
            "description": ""
          },
          "Attribute": {
            "type": "to access any fitted sub-estimators by name.",
            "description": ""
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`. Only defined if the",
            "description": ""
          },
          "underlying": {
            "type": "estimators expose such an attribute when fit.",
            "description": ".. versionadded:: 1.0"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Only defined if the",
            "description": ""
          },
          "final_estimator_": {
            "type": "estimator",
            "description": ""
          },
          "final": {
            "type": "predictions.",
            "description": ""
          },
          "stack_method_": {
            "type": "list of str",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "StackingRegressor": {
            "type": "Stack of estimators with a final regressor.",
            "description": "Notes\n-----"
          },
          "the": {
            "type": "first column predicted by each estimator will be dropped in the case",
            "description": ""
          },
          "first": {
            "type": "layer of the :class:`StackingClassifier`. However, note that `y` will",
            "description": ""
          },
          "be": {
            "type": "internally encoded in a numerically increasing order or lexicographic",
            "description": "order. If this ordering is not adequate, one should manually numerically"
          },
          "encode": {
            "type": "the classes in the desired order.",
            "description": "References\n----------\n.. [1] Wolpert, David H. \"Stacked generalization.\" Neural networks 5.2\n(1992): 241-259.\nExamples\n--------\n>>> from sklearn.datasets import load_iris\n>>> from sklearn.ensemble import RandomForestClassifier\n>>> from sklearn.svm import LinearSVC\n>>> from sklearn.linear_model import LogisticRegression\n>>> from sklearn.preprocessing import StandardScaler\n>>> from sklearn.pipeline import make_pipeline\n>>> from sklearn.ensemble import StackingClassifier\n>>> X, y = load_iris(return_X_y=True)\n>>> estimators = [\n...     ('rf', RandomForestClassifier(n_estimators=10, random_state=42)),\n...     ('svr', make_pipeline(StandardScaler(),\n...                           LinearSVC(random_state=42)))\n... ]\n>>> clf = StackingClassifier(\n...     estimators=estimators, final_estimator=LogisticRegression()\n... )\n>>> from sklearn.model_selection import train_test_split\n>>> X_train, X_test, y_train, y_test = train_test_split(\n...     X, y, stratify=y, random_state=42\n... )\n>>> clf.fit(X_train, y_train).score(X_test, y_test)\n0.9..."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    StackingRegressor : Stack of estimators with a final regressor.\n\n    Notes\n    -----\n    When `predict_proba` is used by each estimator (i.e. most of the time for\n    `stack_method='auto'` or specifically for `stack_method='predict_proba'`),\n    the first column predicted by each estimator will be dropped in the case\n    of a binary classification problem. Indeed, both feature will be perfectly\n    collinear.\n\n    In some cases (e.g. ordinal regression), one can pass regressors as the\n    first layer of the :class:`StackingClassifier`. However, note that `y` will\n    be internally encoded in a numerically increasing order or lexicographic\n    order. If this ordering is not adequate, one should manually numerically\n    encode the classes in the desired order.\n\n    References\n    ----------\n    .. [1] Wolpert, David H. \"Stacked generalization.\" Neural networks 5.2\n       (1992): 241-259.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import load_iris\n    >>> from sklearn.ensemble import RandomForestClassifier\n    >>> from sklearn.svm import LinearSVC\n    >>> from sklearn.linear_model import LogisticRegression\n    >>> from sklearn.preprocessing import StandardScaler\n    >>> from sklearn.pipeline import make_pipeline\n    >>> from sklearn.ensemble import StackingClassifier\n    >>> X, y = load_iris(return_X_y=True)\n    >>> estimators = [\n    ...     ('rf', RandomForestClassifier(n_estimators=10, random_state=42)),\n    ...     ('svr', make_pipeline(StandardScaler(),\n    ...                           LinearSVC(random_state=42)))\n    ... ]\n    >>> clf = StackingClassifier(\n    ...     estimators=estimators, final_estimator=LogisticRegression()\n    ... )\n    >>> from sklearn.model_selection import train_test_split\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...     X, y, stratify=y, random_state=42\n    ... )\n    >>> clf.fit(X_train, y_train).score(X_test, y_test)\n    0.9...",
        "notes": "that `estimators_` are fitted on the full `X` while `final_estimator_`\n    is trained using cross-validated predictions of the base estimators using\n    `cross_val_predict`.\n\n    Read more in the :ref:`User Guide <stacking>`.\n\n    .. versionadded:: 0.22\n\n    Parameters\n    ----------\n    estimators : list of (str, estimator)\n        Base estimators which will be stacked together. Each element of the\n        list is defined as a tuple of string (i.e. name) and an estimator\n        instance. An estimator can be set to 'drop' using `set_params`.\n\n        The type of estimator is generally expected to be a classifier.\n        However, one can pass a regressor for some use case (e.g. ordinal\n        regression).\n\n    final_estimator : estimator, default=None\n        A classifier which will be used to combine the base estimators.\n        The default classifier is a\n        :class:`~sklearn.linear_model.LogisticRegression`.\n\n    cv : int, cross-validation generator, iterable, or \"prefit\", default=None\n        Determines the cross-validation splitting strategy used in\n        `cross_val_predict` to train `final_estimator`. Possible inputs for\n        cv are:\n\n        * None, to use the default 5-fold cross validation,\n        * integer, to specify the number of folds in a (Stratified) KFold,\n        * An object to be used as a cross-validation generator,\n        * An iterable yielding train, test splits,\n        * `\"prefit\"`, to assume the `estimators` are prefit. In this case, the\n          estimators will not be refitted.\n\n        For integer/None inputs, if the estimator is a classifier and y is\n        either binary or multiclass,\n        :class:`~sklearn.model_selection.StratifiedKFold` is used.\n        In all other cases, :class:`~sklearn.model_selection.KFold` is used.\n        These splitters are instantiated with `shuffle=False` so the splits\n        will be the same across calls.\n\n        Refer :ref:`User Guide <cross_validation>` for the various\n        cross-validation strategies that can be used here.\n\n        If \"prefit\" is passed, it is assumed that all `estimators` have\n        been fitted already. The `final_estimator_` is trained on the `estimators`\n        predictions on the full training set and are **not** cross validated\n        predictions. Please note that if the models have been trained on the same\n        data to train the stacking model, there is a very high risk of overfitting.\n\n        .. versionadded:: 1.1\n            The 'prefit' option was added in 1.1\n\n        .. note::\n           A larger number of split will provide no benefits if the number\n           of training samples is large enough. Indeed, the training time\n           will increase. ``cv`` is not used for model evaluation but for\n           prediction.\n\n    stack_method : {'auto', 'predict_proba', 'decision_function', 'predict'},             default='auto'\n        Methods called for each base estimator. It can be:\n\n        * if 'auto', it will try to invoke, for each estimator,\n          `'predict_proba'`, `'decision_function'` or `'predict'` in that\n          order.\n        * otherwise, one of `'predict_proba'`, `'decision_function'` or\n          `'predict'`. If the method is not implemented by the estimator, it\n          will raise an error.\n\n    n_jobs : int, default=None\n        The number of jobs to run in parallel for `fit` of all `estimators`.\n        `None` means 1 unless in a `joblib.parallel_backend` context. -1 means\n        using all processors. See :term:`Glossary <n_jobs>` for more details.\n\n    passthrough : bool, default=False\n        When False, only the predictions of estimators will be used as\n        training data for `final_estimator`. When True, the\n        `final_estimator` is trained on the predictions as well as the\n        original training data.\n\n    verbose : int, default=0\n        Verbosity level.\n\n    Attributes\n    ----------\n    classes_ : ndarray of shape (n_classes,) or list of ndarray if `y`         is of type `\"multilabel-indicator\"`.\n        Class labels.\n\n    estimators_ : list of estimators\n        The elements of the `estimators` parameter, having been fitted on the\n        training data. If an estimator has been set to `'drop'`, it\n        will not appear in `estimators_`. When `cv=\"prefit\"`, `estimators_`\n        is set to `estimators` and is not fitted again.\n\n    named_estimators_ : :class:`~sklearn.utils.Bunch`\n        Attribute to access any fitted sub-estimators by name.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`. Only defined if the\n        underlying estimator exposes such an attribute when fit.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Only defined if the\n        underlying estimators expose such an attribute when fit.\n\n        .. versionadded:: 1.0\n\n    final_estimator_ : estimator\n        The classifier fit on the output of `estimators_` and responsible for\n        final predictions.\n\n    stack_method_ : list of str\n        The method used by each base estimator.\n\n    See Also\n    --------\n    StackingRegressor : Stack of estimators with a final regressor.\n\n    Notes\n    -----\n    When `predict_proba` is used by each estimator (i.e. most of the time for\n    `stack_method='auto'` or specifically for `stack_method='predict_proba'`),\n    the first column predicted by each estimator will be dropped in the case\n    of a binary classification problem. Indeed, both feature will be perfectly\n    collinear.\n\n    In some cases (e.g. ordinal regression), one can pass regressors as the\n    first layer of the :class:`StackingClassifier`. However, note that `y` will\n    be internally encoded in a numerically increasing order or lexicographic\n    order. If this ordering is not adequate, one should manually numerically\n    encode the classes in the desired order.\n\n    References\n    ----------\n    .. [1] Wolpert, David H. \"Stacked generalization.\" Neural networks 5.2\n       (1992): 241-259.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import load_iris\n    >>> from sklearn.ensemble import RandomForestClassifier\n    >>> from sklearn.svm import LinearSVC\n    >>> from sklearn.linear_model import LogisticRegression\n    >>> from sklearn.preprocessing import StandardScaler\n    >>> from sklearn.pipeline import make_pipeline\n    >>> from sklearn.ensemble import StackingClassifier\n    >>> X, y = load_iris(return_X_y=True)\n    >>> estimators = [\n    ...     ('rf', RandomForestClassifier(n_estimators=10, random_state=42)),\n    ...     ('svr', make_pipeline(StandardScaler(),\n    ...                           LinearSVC(random_state=42)))\n    ... ]\n    >>> clf = StackingClassifier(\n    ...     estimators=estimators, final_estimator=LogisticRegression()\n    ... )\n    >>> from sklearn.model_selection import train_test_split\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...     X, y, stratify=y, random_state=42\n    ... )\n    >>> clf.fit(X_train, y_train).score(X_test, y_test)\n    0.9...",
        "examples": "--------\n    >>> from sklearn.datasets import load_iris\n    >>> from sklearn.ensemble import RandomForestClassifier\n    >>> from sklearn.svm import LinearSVC\n    >>> from sklearn.linear_model import LogisticRegression\n    >>> from sklearn.preprocessing import StandardScaler\n    >>> from sklearn.pipeline import make_pipeline\n    >>> from sklearn.ensemble import StackingClassifier\n    >>> X, y = load_iris(return_X_y=True)\n    >>> estimators = [\n    ...     ('rf', RandomForestClassifier(n_estimators=10, random_state=42)),\n    ...     ('svr', make_pipeline(StandardScaler(),\n    ...                           LinearSVC(random_state=42)))\n    ... ]\n    >>> clf = StackingClassifier(\n    ...     estimators=estimators, final_estimator=LogisticRegression()\n    ... )\n    >>> from sklearn.model_selection import train_test_split\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...     X, y, stratify=y, random_state=42\n    ... )\n    >>> clf.fit(X_train, y_train).score(X_test, y_test)\n    0.9..."
      },
      "methods": [
        {
          "name": "decision_function",
          "signature": "decision_function(self, X)",
          "documentation": {
            "description": "Decision function for samples in `X` using the final estimator.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            Training vectors, where `n_samples` is the number of samples and\n            `n_features` is the number of features.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "Training": {
                "type": "vectors, where `n_samples` is the number of samples and",
                "description": "`n_features` is the number of features.\nReturns\n-------"
              },
              "decisions": {
                "type": "ndarray of shape (n_samples,), (n_samples, n_classes),             or (n_samples, n_classes * (n_classes",
                "description": "1) / 2)"
              },
              "The": {
                "type": "decision function computed the final estimator.",
                "description": ""
              }
            },
            "returns": "-------\n        decisions : ndarray of shape (n_samples,), (n_samples, n_classes),             or (n_samples, n_classes * (n_classes-1) / 2)\n            The decision function computed the final estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, *, sample_weight=None, **fit_params)",
          "documentation": {
            "description": "Fit the estimators.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            Training vectors, where `n_samples` is the number of samples and\n            `n_features` is the number of features.\n\n        y : array-like of shape (n_samples,)\n            Target values. Note that `y` will be internally encoded in\n            numerically increasing order or lexicographic order. If the order\n            matter (e.g. for ordinal regression), one should numerically encode\n            the target `y` before calling :term:`fit`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "Training": {
                "type": "vectors, where `n_samples` is the number of samples and",
                "description": "`n_features` is the number of features."
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "Target": {
                "type": "values. Note that `y` will be internally encoded in",
                "description": ""
              },
              "numerically": {
                "type": "increasing order or lexicographic order. If the order",
                "description": ""
              },
              "matter": {
                "type": "e.g. for ordinal regression",
                "description": ", one should numerically encode"
              },
              "the": {
                "type": "target `y` before calling :term:`fit`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted.",
                "description": ""
              },
              "Note": {
                "type": "that this is supported only if all underlying estimators",
                "description": ""
              },
              "support": {
                "type": "sample weights.",
                "description": "**fit_params : dict"
              }
            },
            "returns": "-------\n        self : object",
            "raises": "",
            "see_also": "",
            "notes": "that this is supported only if all underlying estimators\n            support sample weights.\n\n        **fit_params : dict\n            Parameters to pass to the underlying estimators.\n\n            .. versionadded:: 1.6\n\n                Only available if `enable_metadata_routing=True`, which can be\n                set by using ``sklearn.set_config(enable_metadata_routing=True)``.\n                See :ref:`Metadata Routing User Guide <metadata_routing>` for\n                more details.\n\n        Returns\n        -------\n        self : object\n            Returns a fitted instance of estimator.",
            "examples": ""
          }
        },
        {
          "name": "fit_transform",
          "signature": "fit_transform(self, X, y=None, **fit_params)",
          "documentation": {
            "description": "Fit to data, then transform it.\n\n        Fits transformer to `X` and `y` with optional parameters `fit_params`\n        and returns a transformed version of `X`.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Input samples.\n\n        y :  array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None\n            Target values (None for unsupervised transformations).\n\n        **fit_params : dict\n            Additional fit parameters.",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Input": {
                "type": "samples.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs),                 default=None"
              },
              "Target": {
                "type": "values (None for unsupervised transformations).",
                "description": "**fit_params : dict"
              },
              "Additional": {
                "type": "fit parameters.",
                "description": "Returns\n-------"
              },
              "X_new": {
                "type": "ndarray array of shape (n_samples, n_features_new)",
                "description": ""
              },
              "Transformed": {
                "type": "array.",
                "description": ""
              }
            },
            "returns": "-------\n        X_new : ndarray array of shape (n_samples, n_features_new)\n            Transformed array.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_feature_names_out",
          "signature": "get_feature_names_out(self, input_features=None)",
          "documentation": {
            "description": "Get output feature names for transformation.\n\n        Parameters\n        ----------\n        input_features : array-like of str or None, default=None\n            Input features. The input feature names are only used when `passthrough` is\n            `True`.\n\n            - If `input_features` is `None`, then `feature_names_in_` is\n              used as feature names in. If `feature_names_in_` is not defined,\n              then names are generated: `[x0, x1, ..., x(n_features_in_ - 1)]`.\n            - If `input_features` is an array-like, then `input_features` must\n              match `feature_names_in_` if `feature_names_in_` is defined.\n\n            If `passthrough` is `False`, then only the names of `estimators` are used\n            to generate the output feature names.",
            "parameters": {
              "input_features": {
                "type": "array",
                "description": "like of str or None, default=None"
              },
              "Input": {
                "type": "features. The input feature names are only used when `passthrough` is",
                "description": "`True`.\n- If `input_features` is `None`, then `feature_names_in_` is"
              },
              "used": {
                "type": "as feature names in. If `feature_names_in_` is not defined,",
                "description": ""
              },
              "then": {
                "type": "names are generated: `[x0, x1, ..., x(n_features_in_ - 1)]`.",
                "description": "- If `input_features` is an array-like, then `input_features` must"
              },
              "match": {
                "type": "`feature_names_in_` if `feature_names_in_` is defined.",
                "description": ""
              },
              "If": {
                "type": "`passthrough` is `False`, then only the names of `estimators` are used",
                "description": ""
              },
              "to": {
                "type": "generate the output feature names.",
                "description": "Returns\n-------"
              },
              "feature_names_out": {
                "type": "ndarray of str objects",
                "description": ""
              },
              "Transformed": {
                "type": "feature names.",
                "description": ""
              }
            },
            "returns": "-------\n        feature_names_out : ndarray of str objects\n            Transformed feature names.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        .. versionadded:: 1.6",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRouter\n            A :class:`~sklearn.utils.metadata_routing.MetadataRouter` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get the parameters of an estimator from the ensemble.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "Setting": {
                "type": "it to True gets the various estimators and the parameters",
                "description": ""
              },
              "of": {
                "type": "the estimators as well.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "and estimator names mapped to their values or parameter",
                "description": ""
              },
              "names": {
                "type": "mapped to their values.",
                "description": ""
              }
            },
            "returns": "the parameters given in the constructor as well as the\n        estimators contained within the `estimators` parameter.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            Setting it to True gets the various estimators and the parameters\n            of the estimators as well.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X, **predict_params)",
          "documentation": {
            "description": "Predict target for X.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            Training vectors, where `n_samples` is the number of samples and\n            `n_features` is the number of features.\n\n        **predict_params : dict of str -> obj\n            Parameters to the `predict` called by the `final_estimator`. Note\n            that this may be used to return uncertainties from some estimators\n            with `return_std` or `return_cov`. Be aware that it will only\n            account for uncertainty in the final estimator.\n\n            - If `enable_metadata_routing=False` (default):\n              Parameters directly passed to the `predict` method of the\n              `final_estimator`.\n\n            - If `enable_metadata_routing=True`: Parameters safely routed to\n              the `predict` method of the `final_estimator`. See :ref:`Metadata\n              Routing User Guide <metadata_routing>` for more details.\n\n            .. versionchanged:: 1.6\n                `**predict_params` can be routed via metadata routing API.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "Training": {
                "type": "vectors, where `n_samples` is the number of samples and",
                "description": "`n_features` is the number of features.\n**predict_params : dict of str -> obj"
              }
            },
            "returns": "-------\n        y_pred : ndarray of shape (n_samples,) or (n_samples, n_output)\n            Predicted targets.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_proba",
          "signature": "predict_proba(self, X)",
          "documentation": {
            "description": "Predict class probabilities for `X` using the final estimator.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            Training vectors, where `n_samples` is the number of samples and\n            `n_features` is the number of features.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "Training": {
                "type": "vectors, where `n_samples` is the number of samples and",
                "description": "`n_features` is the number of features.\nReturns\n-------"
              },
              "probabilities": {
                "type": "ndarray of shape (n_samples, n_classes) or             list of ndarray of shape (n_output,)",
                "description": ""
              },
              "The": {
                "type": "class probabilities of the input samples.",
                "description": ""
              }
            },
            "returns": "-------\n        probabilities : ndarray of shape (n_samples, n_classes) or             list of ndarray of shape (n_output,)\n            The class probabilities of the input samples.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "labels for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ""
              },
              "Mean": {
                "type": "accuracy of ``self.predict(X)`` w.r.t. `y`.",
                "description": ""
              }
            },
            "returns": "the mean accuracy on the given test data and labels.\n\n        In multi-label classification, this is the subset accuracy\n        which is a harsh metric since you require for each sample that\n        each label set be correctly predicted.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True labels for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.ensemble._stacking.StackingClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._stacking.StackingClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_output",
          "signature": "set_output(self, *, transform=None)",
          "documentation": {
            "description": "Set output container.\n\n        See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`\n        for an example on how to use the API.\n\n        Parameters\n        ----------\n        transform : {\"default\", \"pandas\", \"polars\"}, default=None\n            Configure output of `transform` and `fit_transform`.\n\n            - `\"default\"`: Default output format of a transformer\n            - `\"pandas\"`: DataFrame output\n            - `\"polars\"`: Polars output\n            - `None`: Transform configuration is unchanged\n\n            .. versionadded:: 1.4\n                `\"polars\"` option was added.",
            "parameters": {
              "transform": {
                "type": "{\"default\", \"pandas\", \"polars\"}, default=None",
                "description": ""
              },
              "Configure": {
                "type": "output of `transform` and `fit_transform`.",
                "description": "- `\"default\"`: Default output format of a transformer\n- `\"pandas\"`: DataFrame output\n- `\"polars\"`: Polars output\n- `None`: Transform configuration is unchanged\n.. versionadded:: 1.4\n`\"polars\"` option was added.\nReturns\n-------"
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "Estimator": {
                "type": "instance.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of an estimator from the ensemble.\n\n        Valid parameter keys can be listed with `get_params()`. Note that you\n        can directly set the parameters of the estimators contained in\n        `estimators`.\n\n        Parameters\n        ----------\n        **params : keyword arguments\n            Specific parameters using e.g.\n            `set_params(parameter_name=new_value)`. In addition, to setting the\n            parameters of the estimator, the individual estimator of the\n            estimators can also be set, or can be removed by setting them to\n            'drop'.",
            "parameters": {
              "Specific": {
                "type": "parameters using e.g.",
                "description": "`set_params(parameter_name=new_value)`. In addition, to setting the"
              }
            },
            "returns": "-------\n        self : object\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.ensemble._stacking.StackingClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._stacking.StackingClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "transform",
          "signature": "transform(self, X)",
          "documentation": {
            "description": "Return class labels or probabilities for X for each estimator.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            Training vectors, where `n_samples` is the number of samples and\n            `n_features` is the number of features.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "Training": {
                "type": "vectors, where `n_samples` is the number of samples and",
                "description": "`n_features` is the number of features.\nReturns\n-------"
              },
              "y_preds": {
                "type": "ndarray of shape (n_samples, n_estimators) or                 (n_samples, n_classes * n_estimators)",
                "description": ""
              },
              "Prediction": {
                "type": "outputs for each estimator.",
                "description": ""
              }
            },
            "returns": "-------\n        y_preds : ndarray of shape (n_samples, n_estimators) or                 (n_samples, n_classes * n_estimators)\n            Prediction outputs for each estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "StackingRegressor",
      "documentation": {
        "description": "Stack of estimators with a final regressor.\n\n    Stacked generalization consists in stacking the output of individual\n    estimator and use a regressor to compute the final prediction. Stacking\n    allows to use the strength of each individual estimator by using their\n    output as input of a final estimator.\n\n    Note that `estimators_` are fitted on the full `X` while `final_estimator_`\n    is trained using cross-validated predictions of the base estimators using\n    `cross_val_predict`.\n\n    Read more in the :ref:`User Guide <stacking>`.\n\n    .. versionadded:: 0.22\n\n    Parameters\n    ----------\n    estimators : list of (str, estimator)\n        Base estimators which will be stacked together. Each element of the\n        list is defined as a tuple of string (i.e. name) and an estimator\n        instance. An estimator can be set to 'drop' using `set_params`.\n\n    final_estimator : estimator, default=None\n        A regressor which will be used to combine the base estimators.\n        The default regressor is a :class:`~sklearn.linear_model.RidgeCV`.\n\n    cv : int, cross-validation generator, iterable, or \"prefit\", default=None\n        Determines the cross-validation splitting strategy used in\n        `cross_val_predict` to train `final_estimator`. Possible inputs for\n        cv are:\n\n        * None, to use the default 5-fold cross validation,\n        * integer, to specify the number of folds in a (Stratified) KFold,\n        * An object to be used as a cross-validation generator,\n        * An iterable yielding train, test splits,\n        * `\"prefit\"`, to assume the `estimators` are prefit. In this case, the\n          estimators will not be refitted.\n\n        For integer/None inputs, if the estimator is a classifier and y is\n        either binary or multiclass,\n        :class:`~sklearn.model_selection.StratifiedKFold` is used.\n        In all other cases, :class:`~sklearn.model_selection.KFold` is used.\n        These splitters are instantiated with `shuffle=False` so the splits\n        will be the same across calls.\n\n        Refer :ref:`User Guide <cross_validation>` for the various\n        cross-validation strategies that can be used here.\n\n        If \"prefit\" is passed, it is assumed that all `estimators` have\n        been fitted already. The `final_estimator_` is trained on the `estimators`\n        predictions on the full training set and are **not** cross validated\n        predictions. Please note that if the models have been trained on the same\n        data to train the stacking model, there is a very high risk of overfitting.\n\n        .. versionadded:: 1.1\n            The 'prefit' option was added in 1.1\n\n        .. note::\n           A larger number of split will provide no benefits if the number\n           of training samples is large enough. Indeed, the training time\n           will increase. ``cv`` is not used for model evaluation but for\n           prediction.\n\n    n_jobs : int, default=None\n        The number of jobs to run in parallel for `fit` of all `estimators`.\n        `None` means 1 unless in a `joblib.parallel_backend` context. -1 means\n        using all processors. See :term:`Glossary <n_jobs>` for more details.\n\n    passthrough : bool, default=False\n        When False, only the predictions of estimators will be used as\n        training data for `final_estimator`. When True, the\n        `final_estimator` is trained on the predictions as well as the\n        original training data.\n\n    verbose : int, default=0\n        Verbosity level.\n\n    Attributes\n    ----------\n    estimators_ : list of estimators\n        The elements of the `estimators` parameter, having been fitted on the\n        training data. If an estimator has been set to `'drop'`, it\n        will not appear in `estimators_`. When `cv=\"prefit\"`, `estimators_`\n        is set to `estimators` and is not fitted again.\n\n    named_estimators_ : :class:`~sklearn.utils.Bunch`\n        Attribute to access any fitted sub-estimators by name.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`. Only defined if the\n        underlying estimator exposes such an attribute when fit.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Only defined if the\n        underlying estimators expose such an attribute when fit.\n\n        .. versionadded:: 1.0\n\n    final_estimator_ : estimator\n        The regressor fit on the output of `estimators_` and responsible for\n        final predictions.\n\n    stack_method_ : list of str\n        The method used by each base estimator.\n\n    See Also\n    --------\n    StackingClassifier : Stack of estimators with a final classifier.\n\n    References\n    ----------\n    .. [1] Wolpert, David H. \"Stacked generalization.\" Neural networks 5.2\n       (1992): 241-259.",
        "parameters": {
          "estimators": {
            "type": "will not be refitted.",
            "description": ""
          },
          "Base": {
            "type": "estimators which will be stacked together. Each element of the",
            "description": ""
          },
          "list": {
            "type": "is defined as a tuple of string (i.e. name) and an estimator",
            "description": "instance. An estimator can be set to 'drop' using `set_params`."
          },
          "final_estimator": {
            "type": "estimator, default=None",
            "description": ""
          },
          "A": {
            "type": "larger number of split will provide no benefits if the number",
            "description": ""
          },
          "The": {
            "type": "method used by each base estimator.",
            "description": ""
          },
          "cv": {
            "type": "are:",
            "description": "* None, to use the default 5-fold cross validation,\n* integer, to specify the number of folds in a (Stratified) KFold,\n* An object to be used as a cross-validation generator,\n* An iterable yielding train, test splits,\n* `\"prefit\"`, to assume the `estimators` are prefit. In this case, the"
          },
          "Determines": {
            "type": "the cross-validation splitting strategy used in",
            "description": "`cross_val_predict` to train `final_estimator`. Possible inputs for"
          },
          "For": {
            "type": "integer/None inputs, if the estimator is a classifier and y is",
            "description": ""
          },
          "either": {
            "type": "binary or multiclass,",
            "description": ":class:`~sklearn.model_selection.StratifiedKFold` is used."
          },
          "In": {
            "type": "all other cases, :class:`~sklearn.model_selection.KFold` is used.",
            "description": ""
          },
          "These": {
            "type": "splitters are instantiated with `shuffle=False` so the splits",
            "description": ""
          },
          "will": {
            "type": "not appear in `estimators_`. When `cv=\"prefit\"`, `estimators_`",
            "description": ""
          },
          "Refer": {
            "type": "ref:`User Guide <cross_validation>` for the various",
            "description": "cross-validation strategies that can be used here."
          },
          "If": {
            "type": "\"prefit\" is passed, it is assumed that all `estimators` have",
            "description": ""
          },
          "been": {
            "type": "fitted already. The `final_estimator_` is trained on the `estimators`",
            "description": ""
          },
          "predictions": {
            "type": "on the full training set and are **not** cross validated",
            "description": "predictions. Please note that if the models have been trained on the same"
          },
          "data": {
            "type": "to train the stacking model, there is a very high risk of overfitting.",
            "description": ".. versionadded:: 1.1"
          },
          "of": {
            "type": "training samples is large enough. Indeed, the training time",
            "description": ""
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": ""
          },
          "using": {
            "type": "all processors. See :term:`Glossary <n_jobs>` for more details.",
            "description": ""
          },
          "passthrough": {
            "type": "bool, default=False",
            "description": ""
          },
          "When": {
            "type": "False, only the predictions of estimators will be used as",
            "description": ""
          },
          "training": {
            "type": "data. If an estimator has been set to `'drop'`, it",
            "description": ""
          },
          "original": {
            "type": "training data.",
            "description": ""
          },
          "verbose": {
            "type": "int, default=0",
            "description": ""
          },
          "Verbosity": {
            "type": "level.",
            "description": "Attributes\n----------"
          },
          "estimators_": {
            "type": "list of estimators",
            "description": ""
          },
          "is": {
            "type": "set to `estimators` and is not fitted again.",
            "description": ""
          },
          "named_estimators_": {
            "type": ":class:`~sklearn.utils.Bunch`",
            "description": ""
          },
          "Attribute": {
            "type": "to access any fitted sub-estimators by name.",
            "description": ""
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`. Only defined if the",
            "description": ""
          },
          "underlying": {
            "type": "estimators expose such an attribute when fit.",
            "description": ".. versionadded:: 1.0"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Only defined if the",
            "description": ""
          },
          "final_estimator_": {
            "type": "estimator",
            "description": ""
          },
          "final": {
            "type": "predictions.",
            "description": ""
          },
          "stack_method_": {
            "type": "list of str",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "StackingClassifier": {
            "type": "Stack of estimators with a final classifier.",
            "description": "References\n----------\n.. [1] Wolpert, David H. \"Stacked generalization.\" Neural networks 5.2\n(1992): 241-259.\nExamples\n--------\n>>> from sklearn.datasets import load_diabetes\n>>> from sklearn.linear_model import RidgeCV\n>>> from sklearn.svm import LinearSVR\n>>> from sklearn.ensemble import RandomForestRegressor\n>>> from sklearn.ensemble import StackingRegressor\n>>> X, y = load_diabetes(return_X_y=True)\n>>> estimators = [\n...     ('lr', RidgeCV()),\n...     ('svr', LinearSVR(random_state=42))\n... ]\n>>> reg = StackingRegressor(\n...     estimators=estimators,\n...     final_estimator=RandomForestRegressor(n_estimators=10,\n...                                           random_state=42)\n... )\n>>> from sklearn.model_selection import train_test_split\n>>> X_train, X_test, y_train, y_test = train_test_split(\n...     X, y, random_state=42\n... )\n>>> reg.fit(X_train, y_train).score(X_test, y_test)\n0.3..."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    StackingClassifier : Stack of estimators with a final classifier.\n\n    References\n    ----------\n    .. [1] Wolpert, David H. \"Stacked generalization.\" Neural networks 5.2\n       (1992): 241-259.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import load_diabetes\n    >>> from sklearn.linear_model import RidgeCV\n    >>> from sklearn.svm import LinearSVR\n    >>> from sklearn.ensemble import RandomForestRegressor\n    >>> from sklearn.ensemble import StackingRegressor\n    >>> X, y = load_diabetes(return_X_y=True)\n    >>> estimators = [\n    ...     ('lr', RidgeCV()),\n    ...     ('svr', LinearSVR(random_state=42))\n    ... ]\n    >>> reg = StackingRegressor(\n    ...     estimators=estimators,\n    ...     final_estimator=RandomForestRegressor(n_estimators=10,\n    ...                                           random_state=42)\n    ... )\n    >>> from sklearn.model_selection import train_test_split\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...     X, y, random_state=42\n    ... )\n    >>> reg.fit(X_train, y_train).score(X_test, y_test)\n    0.3...",
        "notes": "that `estimators_` are fitted on the full `X` while `final_estimator_`\n    is trained using cross-validated predictions of the base estimators using\n    `cross_val_predict`.\n\n    Read more in the :ref:`User Guide <stacking>`.\n\n    .. versionadded:: 0.22\n\n    Parameters\n    ----------\n    estimators : list of (str, estimator)\n        Base estimators which will be stacked together. Each element of the\n        list is defined as a tuple of string (i.e. name) and an estimator\n        instance. An estimator can be set to 'drop' using `set_params`.\n\n    final_estimator : estimator, default=None\n        A regressor which will be used to combine the base estimators.\n        The default regressor is a :class:`~sklearn.linear_model.RidgeCV`.\n\n    cv : int, cross-validation generator, iterable, or \"prefit\", default=None\n        Determines the cross-validation splitting strategy used in\n        `cross_val_predict` to train `final_estimator`. Possible inputs for\n        cv are:\n\n        * None, to use the default 5-fold cross validation,\n        * integer, to specify the number of folds in a (Stratified) KFold,\n        * An object to be used as a cross-validation generator,\n        * An iterable yielding train, test splits,\n        * `\"prefit\"`, to assume the `estimators` are prefit. In this case, the\n          estimators will not be refitted.\n\n        For integer/None inputs, if the estimator is a classifier and y is\n        either binary or multiclass,\n        :class:`~sklearn.model_selection.StratifiedKFold` is used.\n        In all other cases, :class:`~sklearn.model_selection.KFold` is used.\n        These splitters are instantiated with `shuffle=False` so the splits\n        will be the same across calls.\n\n        Refer :ref:`User Guide <cross_validation>` for the various\n        cross-validation strategies that can be used here.\n\n        If \"prefit\" is passed, it is assumed that all `estimators` have\n        been fitted already. The `final_estimator_` is trained on the `estimators`\n        predictions on the full training set and are **not** cross validated\n        predictions. Please note that if the models have been trained on the same\n        data to train the stacking model, there is a very high risk of overfitting.\n\n        .. versionadded:: 1.1\n            The 'prefit' option was added in 1.1\n\n        .. note::\n           A larger number of split will provide no benefits if the number\n           of training samples is large enough. Indeed, the training time\n           will increase. ``cv`` is not used for model evaluation but for\n           prediction.\n\n    n_jobs : int, default=None\n        The number of jobs to run in parallel for `fit` of all `estimators`.\n        `None` means 1 unless in a `joblib.parallel_backend` context. -1 means\n        using all processors. See :term:`Glossary <n_jobs>` for more details.\n\n    passthrough : bool, default=False\n        When False, only the predictions of estimators will be used as\n        training data for `final_estimator`. When True, the\n        `final_estimator` is trained on the predictions as well as the\n        original training data.\n\n    verbose : int, default=0\n        Verbosity level.\n\n    Attributes\n    ----------\n    estimators_ : list of estimators\n        The elements of the `estimators` parameter, having been fitted on the\n        training data. If an estimator has been set to `'drop'`, it\n        will not appear in `estimators_`. When `cv=\"prefit\"`, `estimators_`\n        is set to `estimators` and is not fitted again.\n\n    named_estimators_ : :class:`~sklearn.utils.Bunch`\n        Attribute to access any fitted sub-estimators by name.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`. Only defined if the\n        underlying estimator exposes such an attribute when fit.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Only defined if the\n        underlying estimators expose such an attribute when fit.\n\n        .. versionadded:: 1.0\n\n    final_estimator_ : estimator\n        The regressor fit on the output of `estimators_` and responsible for\n        final predictions.\n\n    stack_method_ : list of str\n        The method used by each base estimator.\n\n    See Also\n    --------\n    StackingClassifier : Stack of estimators with a final classifier.\n\n    References\n    ----------\n    .. [1] Wolpert, David H. \"Stacked generalization.\" Neural networks 5.2\n       (1992): 241-259.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import load_diabetes\n    >>> from sklearn.linear_model import RidgeCV\n    >>> from sklearn.svm import LinearSVR\n    >>> from sklearn.ensemble import RandomForestRegressor\n    >>> from sklearn.ensemble import StackingRegressor\n    >>> X, y = load_diabetes(return_X_y=True)\n    >>> estimators = [\n    ...     ('lr', RidgeCV()),\n    ...     ('svr', LinearSVR(random_state=42))\n    ... ]\n    >>> reg = StackingRegressor(\n    ...     estimators=estimators,\n    ...     final_estimator=RandomForestRegressor(n_estimators=10,\n    ...                                           random_state=42)\n    ... )\n    >>> from sklearn.model_selection import train_test_split\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...     X, y, random_state=42\n    ... )\n    >>> reg.fit(X_train, y_train).score(X_test, y_test)\n    0.3...",
        "examples": "--------\n    >>> from sklearn.datasets import load_diabetes\n    >>> from sklearn.linear_model import RidgeCV\n    >>> from sklearn.svm import LinearSVR\n    >>> from sklearn.ensemble import RandomForestRegressor\n    >>> from sklearn.ensemble import StackingRegressor\n    >>> X, y = load_diabetes(return_X_y=True)\n    >>> estimators = [\n    ...     ('lr', RidgeCV()),\n    ...     ('svr', LinearSVR(random_state=42))\n    ... ]\n    >>> reg = StackingRegressor(\n    ...     estimators=estimators,\n    ...     final_estimator=RandomForestRegressor(n_estimators=10,\n    ...                                           random_state=42)\n    ... )\n    >>> from sklearn.model_selection import train_test_split\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...     X, y, random_state=42\n    ... )\n    >>> reg.fit(X_train, y_train).score(X_test, y_test)\n    0.3..."
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, *, sample_weight=None, **fit_params)",
          "documentation": {
            "description": "Fit the estimators.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            Training vectors, where `n_samples` is the number of samples and\n            `n_features` is the number of features.\n\n        y : array-like of shape (n_samples,)\n            Target values.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "Training": {
                "type": "vectors, where `n_samples` is the number of samples and",
                "description": "`n_features` is the number of features."
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "Target": {
                "type": "values.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted.",
                "description": ""
              },
              "Note": {
                "type": "that this is supported only if all underlying estimators",
                "description": ""
              },
              "support": {
                "type": "sample weights.",
                "description": "**fit_params : dict"
              }
            },
            "returns": "-------\n        self : object",
            "raises": "",
            "see_also": "",
            "notes": "that this is supported only if all underlying estimators\n            support sample weights.\n\n        **fit_params : dict\n            Parameters to pass to the underlying estimators.\n\n            .. versionadded:: 1.6\n\n                Only available if `enable_metadata_routing=True`, which can be\n                set by using ``sklearn.set_config(enable_metadata_routing=True)``.\n                See :ref:`Metadata Routing User Guide <metadata_routing>` for\n                more details.\n\n        Returns\n        -------\n        self : object\n            Returns a fitted instance.",
            "examples": ""
          }
        },
        {
          "name": "fit_transform",
          "signature": "fit_transform(self, X, y, *, sample_weight=None, **fit_params)",
          "documentation": {
            "description": "Fit the estimators and return the predictions for X for each estimator.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            Training vectors, where `n_samples` is the number of samples and\n            `n_features` is the number of features.\n\n        y : array-like of shape (n_samples,)\n            Target values.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "Training": {
                "type": "vectors, where `n_samples` is the number of samples and",
                "description": "`n_features` is the number of features."
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "Target": {
                "type": "values.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted.",
                "description": ""
              },
              "Note": {
                "type": "that this is supported only if all underlying estimators",
                "description": ""
              },
              "support": {
                "type": "sample weights.",
                "description": "**fit_params : dict"
              }
            },
            "returns": "-------\n        y_preds : ndarray of shape (n_samples, n_estimators)\n            Prediction outputs for each estimator.",
            "raises": "",
            "see_also": "",
            "notes": "that this is supported only if all underlying estimators\n            support sample weights.\n\n        **fit_params : dict\n            Parameters to pass to the underlying estimators.\n\n            .. versionadded:: 1.6\n\n                Only available if `enable_metadata_routing=True`, which can be\n                set by using ``sklearn.set_config(enable_metadata_routing=True)``.\n                See :ref:`Metadata Routing User Guide <metadata_routing>` for\n                more details.\n\n        Returns\n        -------\n        y_preds : ndarray of shape (n_samples, n_estimators)\n            Prediction outputs for each estimator.",
            "examples": ""
          }
        },
        {
          "name": "get_feature_names_out",
          "signature": "get_feature_names_out(self, input_features=None)",
          "documentation": {
            "description": "Get output feature names for transformation.\n\n        Parameters\n        ----------\n        input_features : array-like of str or None, default=None\n            Input features. The input feature names are only used when `passthrough` is\n            `True`.\n\n            - If `input_features` is `None`, then `feature_names_in_` is\n              used as feature names in. If `feature_names_in_` is not defined,\n              then names are generated: `[x0, x1, ..., x(n_features_in_ - 1)]`.\n            - If `input_features` is an array-like, then `input_features` must\n              match `feature_names_in_` if `feature_names_in_` is defined.\n\n            If `passthrough` is `False`, then only the names of `estimators` are used\n            to generate the output feature names.",
            "parameters": {
              "input_features": {
                "type": "array",
                "description": "like of str or None, default=None"
              },
              "Input": {
                "type": "features. The input feature names are only used when `passthrough` is",
                "description": "`True`.\n- If `input_features` is `None`, then `feature_names_in_` is"
              },
              "used": {
                "type": "as feature names in. If `feature_names_in_` is not defined,",
                "description": ""
              },
              "then": {
                "type": "names are generated: `[x0, x1, ..., x(n_features_in_ - 1)]`.",
                "description": "- If `input_features` is an array-like, then `input_features` must"
              },
              "match": {
                "type": "`feature_names_in_` if `feature_names_in_` is defined.",
                "description": ""
              },
              "If": {
                "type": "`passthrough` is `False`, then only the names of `estimators` are used",
                "description": ""
              },
              "to": {
                "type": "generate the output feature names.",
                "description": "Returns\n-------"
              },
              "feature_names_out": {
                "type": "ndarray of str objects",
                "description": ""
              },
              "Transformed": {
                "type": "feature names.",
                "description": ""
              }
            },
            "returns": "-------\n        feature_names_out : ndarray of str objects\n            Transformed feature names.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        .. versionadded:: 1.6",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRouter\n            A :class:`~sklearn.utils.metadata_routing.MetadataRouter` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get the parameters of an estimator from the ensemble.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "Setting": {
                "type": "it to True gets the various estimators and the parameters",
                "description": ""
              },
              "of": {
                "type": "the estimators as well.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "and estimator names mapped to their values or parameter",
                "description": ""
              },
              "names": {
                "type": "mapped to their values.",
                "description": ""
              }
            },
            "returns": "the parameters given in the constructor as well as the\n        estimators contained within the `estimators` parameter.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            Setting it to True gets the various estimators and the parameters\n            of the estimators as well.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X, **predict_params)",
          "documentation": {
            "description": "Predict target for X.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            Training vectors, where `n_samples` is the number of samples and\n            `n_features` is the number of features.\n\n        **predict_params : dict of str -> obj\n            Parameters to the `predict` called by the `final_estimator`. Note\n            that this may be used to return uncertainties from some estimators\n            with `return_std` or `return_cov`. Be aware that it will only\n            account for uncertainty in the final estimator.\n\n            - If `enable_metadata_routing=False` (default):\n              Parameters directly passed to the `predict` method of the\n              `final_estimator`.\n\n            - If `enable_metadata_routing=True`: Parameters safely routed to\n              the `predict` method of the `final_estimator`. See :ref:`Metadata\n              Routing User Guide <metadata_routing>` for more details.\n\n            .. versionchanged:: 1.6\n                `**predict_params` can be routed via metadata routing API.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "Training": {
                "type": "vectors, where `n_samples` is the number of samples and",
                "description": "`n_features` is the number of features.\n**predict_params : dict of str -> obj"
              }
            },
            "returns": "-------\n        y_pred : ndarray of shape (n_samples,) or (n_samples, n_output)\n            Predicted targets.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Return the coefficient of determination of the prediction.\n\n        The coefficient of determination :math:`R^2` is defined as\n        :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\n        sum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\n        is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\n        The best possible score is 1.0 and it can be negative (because the\n        model can be arbitrarily worse). A constant model that always predicts\n        the expected value of `y`, disregarding the input features, would get\n        a :math:`R^2` score of 0.0.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples. For some estimators this may be a precomputed\n            kernel matrix or a list of generic objects instead with shape\n            ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n            is the number of samples used in the fitting for the estimator.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True values for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples. For some estimators this may be a precomputed",
                "description": ""
              },
              "kernel": {
                "type": "matrix or a list of generic objects instead with shape",
                "description": "``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``"
              },
              "is": {
                "type": "the number of samples used in the fitting for the estimator.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "values for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ":math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\nNotes\n-----"
              },
              "The": {
                "type": "math:`R^2` score used when calling ``score`` on a regressor uses",
                "description": "``multioutput='uniform_average'`` from version 0.23 to keep consistent"
              },
              "with": {
                "type": "default value of :func:`~sklearn.metrics.r2_score`.",
                "description": ""
              },
              "This": {
                "type": "influences the ``score`` method of all the multioutput",
                "description": ""
              },
              "regressors": {
                "type": "(except for",
                "description": ":class:`~sklearn.multioutput.MultiOutputRegressor`)."
              }
            },
            "returns": "-------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\n\n        Notes\n        -----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "raises": "",
            "see_also": "",
            "notes": "-----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.ensemble._stacking.StackingRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._stacking.StackingRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_output",
          "signature": "set_output(self, *, transform=None)",
          "documentation": {
            "description": "Set output container.\n\n        See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`\n        for an example on how to use the API.\n\n        Parameters\n        ----------\n        transform : {\"default\", \"pandas\", \"polars\"}, default=None\n            Configure output of `transform` and `fit_transform`.\n\n            - `\"default\"`: Default output format of a transformer\n            - `\"pandas\"`: DataFrame output\n            - `\"polars\"`: Polars output\n            - `None`: Transform configuration is unchanged\n\n            .. versionadded:: 1.4\n                `\"polars\"` option was added.",
            "parameters": {
              "transform": {
                "type": "{\"default\", \"pandas\", \"polars\"}, default=None",
                "description": ""
              },
              "Configure": {
                "type": "output of `transform` and `fit_transform`.",
                "description": "- `\"default\"`: Default output format of a transformer\n- `\"pandas\"`: DataFrame output\n- `\"polars\"`: Polars output\n- `None`: Transform configuration is unchanged\n.. versionadded:: 1.4\n`\"polars\"` option was added.\nReturns\n-------"
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "Estimator": {
                "type": "instance.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of an estimator from the ensemble.\n\n        Valid parameter keys can be listed with `get_params()`. Note that you\n        can directly set the parameters of the estimators contained in\n        `estimators`.\n\n        Parameters\n        ----------\n        **params : keyword arguments\n            Specific parameters using e.g.\n            `set_params(parameter_name=new_value)`. In addition, to setting the\n            parameters of the estimator, the individual estimator of the\n            estimators can also be set, or can be removed by setting them to\n            'drop'.",
            "parameters": {
              "Specific": {
                "type": "parameters using e.g.",
                "description": "`set_params(parameter_name=new_value)`. In addition, to setting the"
              }
            },
            "returns": "-------\n        self : object\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.ensemble._stacking.StackingRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._stacking.StackingRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "transform",
          "signature": "transform(self, X)",
          "documentation": {
            "description": "Return the predictions for X for each estimator.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            Training vectors, where `n_samples` is the number of samples and\n            `n_features` is the number of features.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "Training": {
                "type": "vectors, where `n_samples` is the number of samples and",
                "description": "`n_features` is the number of features.\nReturns\n-------"
              },
              "y_preds": {
                "type": "ndarray of shape (n_samples, n_estimators)",
                "description": ""
              },
              "Prediction": {
                "type": "outputs for each estimator.",
                "description": ""
              }
            },
            "returns": "-------\n        y_preds : ndarray of shape (n_samples, n_estimators)\n            Prediction outputs for each estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "VotingClassifier",
      "documentation": {
        "description": "Soft Voting/Majority Rule classifier for unfitted estimators.\n\n    Read more in the :ref:`User Guide <voting_classifier>`.\n\n    .. versionadded:: 0.17\n\n    Parameters\n    ----------\n    estimators : list of (str, estimator) tuples\n        Invoking the ``fit`` method on the ``VotingClassifier`` will fit clones\n        of those original estimators that will be stored in the class attribute\n        ``self.estimators_``. An estimator can be set to ``'drop'`` using\n        :meth:`set_params`.\n\n        .. versionchanged:: 0.21\n            ``'drop'`` is accepted. Using None was deprecated in 0.22 and\n            support was removed in 0.24.\n\n    voting : {'hard', 'soft'}, default='hard'\n        If 'hard', uses predicted class labels for majority rule voting.\n        Else if 'soft', predicts the class label based on the argmax of\n        the sums of the predicted probabilities, which is recommended for\n        an ensemble of well-calibrated classifiers.\n\n    weights : array-like of shape (n_classifiers,), default=None\n        Sequence of weights (`float` or `int`) to weight the occurrences of\n        predicted class labels (`hard` voting) or class probabilities\n        before averaging (`soft` voting). Uses uniform weights if `None`.\n\n    n_jobs : int, default=None\n        The number of jobs to run in parallel for ``fit``.\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n        for more details.\n\n        .. versionadded:: 0.18\n\n    flatten_transform : bool, default=True\n        Affects shape of transform output only when voting='soft'\n        If voting='soft' and flatten_transform=True, transform method returns\n        matrix with shape (n_samples, n_classifiers * n_classes). If\n        flatten_transform=False, it returns\n        (n_classifiers, n_samples, n_classes).\n\n    verbose : bool, default=False\n        If True, the time elapsed while fitting will be printed as it\n        is completed.\n\n        .. versionadded:: 0.23\n\n    Attributes\n    ----------\n    estimators_ : list of classifiers\n        The collection of fitted sub-estimators as defined in ``estimators``\n        that are not 'drop'.\n\n    named_estimators_ : :class:`~sklearn.utils.Bunch`\n        Attribute to access any fitted sub-estimators by name.\n\n        .. versionadded:: 0.20\n\n    le_ : :class:`~sklearn.preprocessing.LabelEncoder`\n        Transformer used to encode the labels during fit and decode during\n        prediction.\n\n    classes_ : ndarray of shape (n_classes,)\n        The classes labels.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`. Only defined if the\n        underlying classifier exposes such an attribute when fit.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Only defined if the\n        underlying estimators expose such an attribute when fit.\n\n        .. versionadded:: 1.0\n\n    See Also\n    --------\n    VotingRegressor : Prediction voting regressor.",
        "parameters": {
          "estimators": {
            "type": "list of (str, estimator) tuples",
            "description": ""
          },
          "Invoking": {
            "type": "the ``fit`` method on the ``VotingClassifier`` will fit clones",
            "description": ""
          },
          "of": {
            "type": "those original estimators that will be stored in the class attribute",
            "description": "``self.estimators_``. An estimator can be set to ``'drop'`` using\n:meth:`set_params`.\n.. versionchanged:: 0.21\n``'drop'`` is accepted. Using None was deprecated in 0.22 and"
          },
          "support": {
            "type": "was removed in 0.24.",
            "description": ""
          },
          "voting": {
            "type": "{'hard', 'soft'}, default='hard'",
            "description": ""
          },
          "If": {
            "type": "True, the time elapsed while fitting will be printed as it",
            "description": ""
          },
          "Else": {
            "type": "if 'soft', predicts the class label based on the argmax of",
            "description": ""
          },
          "the": {
            "type": "sums of the predicted probabilities, which is recommended for",
            "description": ""
          },
          "an": {
            "type": "ensemble of well-calibrated classifiers.",
            "description": ""
          },
          "weights": {
            "type": "array",
            "description": "like of shape (n_classifiers,), default=None"
          },
          "Sequence": {
            "type": "of weights (`float` or `int`) to weight the occurrences of",
            "description": ""
          },
          "predicted": {
            "type": "class labels (`hard` voting) or class probabilities",
            "description": ""
          },
          "before": {
            "type": "averaging (`soft` voting). Uses uniform weights if `None`.",
            "description": ""
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": ""
          },
          "The": {
            "type": "classes labels.",
            "description": ""
          },
          "for": {
            "type": "more details.",
            "description": ".. versionadded:: 0.18"
          },
          "flatten_transform": {
            "type": "bool, default=True",
            "description": ""
          },
          "Affects": {
            "type": "shape of transform output only when voting='soft'",
            "description": ""
          },
          "matrix": {
            "type": "with shape (n_samples, n_classifiers * n_classes). If",
            "description": "flatten_transform=False, it returns\n(n_classifiers, n_samples, n_classes)."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": ""
          },
          "is": {
            "type": "completed.",
            "description": ".. versionadded:: 0.23\nAttributes\n----------"
          },
          "estimators_": {
            "type": "list of classifiers",
            "description": ""
          },
          "that": {
            "type": "are not 'drop'.",
            "description": ""
          },
          "named_estimators_": {
            "type": ":class:`~sklearn.utils.Bunch`",
            "description": ""
          },
          "Attribute": {
            "type": "to access any fitted sub-estimators by name.",
            "description": ".. versionadded:: 0.20"
          },
          "le_": {
            "type": ":class:`~sklearn.preprocessing.LabelEncoder`",
            "description": ""
          },
          "Transformer": {
            "type": "used to encode the labels during fit and decode during",
            "description": "prediction."
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,)",
            "description": ""
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`. Only defined if the",
            "description": ""
          },
          "underlying": {
            "type": "estimators expose such an attribute when fit.",
            "description": ".. versionadded:: 1.0"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Only defined if the",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "VotingRegressor": {
            "type": "Prediction voting regressor.",
            "description": "Examples\n--------\n>>> import numpy as np\n>>> from sklearn.linear_model import LogisticRegression\n>>> from sklearn.naive_bayes import GaussianNB\n>>> from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n>>> clf1 = LogisticRegression(random_state=1)\n>>> clf2 = RandomForestClassifier(n_estimators=50, random_state=1)\n>>> clf3 = GaussianNB()\n>>> X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\n>>> y = np.array([1, 1, 1, 2, 2, 2])\n>>> eclf1 = VotingClassifier(estimators=[\n...         ('lr', clf1), ('rf', clf2), ('gnb', clf3)], voting='hard')\n>>> eclf1 = eclf1.fit(X, y)\n>>> print(eclf1.predict(X))\n[1 1 1 2 2 2]\n>>> np.array_equal(eclf1.named_estimators_.lr.predict(X),\n...                eclf1.named_estimators_['lr'].predict(X))\nTrue\n>>> eclf2 = VotingClassifier(estimators=[\n...         ('lr', clf1), ('rf', clf2), ('gnb', clf3)],\n...         voting='soft')\n>>> eclf2 = eclf2.fit(X, y)\n>>> print(eclf2.predict(X))\n[1 1 1 2 2 2]"
          },
          "To": {
            "type": "drop an estimator, :meth:`set_params` can be used to remove it. Here we",
            "description": ""
          },
          "dropped": {
            "type": "one of the estimators, resulting in 2 fitted estimators:",
            "description": ">>> eclf2 = eclf2.set_params(lr='drop')\n>>> eclf2 = eclf2.fit(X, y)\n>>> len(eclf2.estimators_)\n2"
          },
          "Setting": {
            "type": "`flatten_transform=True` with `voting='soft'` flattens output shape of",
            "description": "`transform`:\n>>> eclf3 = VotingClassifier(estimators=[\n...        ('lr', clf1), ('rf', clf2), ('gnb', clf3)],\n...        voting='soft', weights=[2,1,1],\n...        flatten_transform=True)\n>>> eclf3 = eclf3.fit(X, y)\n>>> print(eclf3.predict(X))\n[1 1 1 2 2 2]\n>>> print(eclf3.transform(X).shape)\n(6, 6)"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    VotingRegressor : Prediction voting regressor.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from sklearn.linear_model import LogisticRegression\n    >>> from sklearn.naive_bayes import GaussianNB\n    >>> from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n    >>> clf1 = LogisticRegression(random_state=1)\n    >>> clf2 = RandomForestClassifier(n_estimators=50, random_state=1)\n    >>> clf3 = GaussianNB()\n    >>> X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\n    >>> y = np.array([1, 1, 1, 2, 2, 2])\n    >>> eclf1 = VotingClassifier(estimators=[\n    ...         ('lr', clf1), ('rf', clf2), ('gnb', clf3)], voting='hard')\n    >>> eclf1 = eclf1.fit(X, y)\n    >>> print(eclf1.predict(X))\n    [1 1 1 2 2 2]\n    >>> np.array_equal(eclf1.named_estimators_.lr.predict(X),\n    ...                eclf1.named_estimators_['lr'].predict(X))\n    True\n    >>> eclf2 = VotingClassifier(estimators=[\n    ...         ('lr', clf1), ('rf', clf2), ('gnb', clf3)],\n    ...         voting='soft')\n    >>> eclf2 = eclf2.fit(X, y)\n    >>> print(eclf2.predict(X))\n    [1 1 1 2 2 2]\n\n    To drop an estimator, :meth:`set_params` can be used to remove it. Here we\n    dropped one of the estimators, resulting in 2 fitted estimators:\n\n    >>> eclf2 = eclf2.set_params(lr='drop')\n    >>> eclf2 = eclf2.fit(X, y)\n    >>> len(eclf2.estimators_)\n    2\n\n    Setting `flatten_transform=True` with `voting='soft'` flattens output shape of\n    `transform`:\n\n    >>> eclf3 = VotingClassifier(estimators=[\n    ...        ('lr', clf1), ('rf', clf2), ('gnb', clf3)],\n    ...        voting='soft', weights=[2,1,1],\n    ...        flatten_transform=True)\n    >>> eclf3 = eclf3.fit(X, y)\n    >>> print(eclf3.predict(X))\n    [1 1 1 2 2 2]\n    >>> print(eclf3.transform(X).shape)\n    (6, 6)",
        "notes": "",
        "examples": "--------\n    >>> import numpy as np\n    >>> from sklearn.linear_model import LogisticRegression\n    >>> from sklearn.naive_bayes import GaussianNB\n    >>> from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n    >>> clf1 = LogisticRegression(random_state=1)\n    >>> clf2 = RandomForestClassifier(n_estimators=50, random_state=1)\n    >>> clf3 = GaussianNB()\n    >>> X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\n    >>> y = np.array([1, 1, 1, 2, 2, 2])\n    >>> eclf1 = VotingClassifier(estimators=[\n    ...         ('lr', clf1), ('rf', clf2), ('gnb', clf3)], voting='hard')\n    >>> eclf1 = eclf1.fit(X, y)\n    >>> print(eclf1.predict(X))\n    [1 1 1 2 2 2]\n    >>> np.array_equal(eclf1.named_estimators_.lr.predict(X),\n    ...                eclf1.named_estimators_['lr'].predict(X))\n    True\n    >>> eclf2 = VotingClassifier(estimators=[\n    ...         ('lr', clf1), ('rf', clf2), ('gnb', clf3)],\n    ...         voting='soft')\n    >>> eclf2 = eclf2.fit(X, y)\n    >>> print(eclf2.predict(X))\n    [1 1 1 2 2 2]\n\n    To drop an estimator, :meth:`set_params` can be used to remove it. Here we\n    dropped one of the estimators, resulting in 2 fitted estimators:\n\n    >>> eclf2 = eclf2.set_params(lr='drop')\n    >>> eclf2 = eclf2.fit(X, y)\n    >>> len(eclf2.estimators_)\n    2\n\n    Setting `flatten_transform=True` with `voting='soft'` flattens output shape of\n    `transform`:\n\n    >>> eclf3 = VotingClassifier(estimators=[\n    ...        ('lr', clf1), ('rf', clf2), ('gnb', clf3)],\n    ...        voting='soft', weights=[2,1,1],\n    ...        flatten_transform=True)\n    >>> eclf3 = eclf3.fit(X, y)\n    >>> print(eclf3.predict(X))\n    [1 1 1 2 2 2]\n    >>> print(eclf3.transform(X).shape)\n    (6, 6)"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, *, sample_weight=None, **fit_params)",
          "documentation": {
            "description": "Fit the estimators.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            Training vectors, where `n_samples` is the number of samples and\n            `n_features` is the number of features.\n\n        y : array-like of shape (n_samples,)\n            Target values.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "Training": {
                "type": "vectors, where `n_samples` is the number of samples and",
                "description": "`n_features` is the number of features."
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "Target": {
                "type": "values.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted.",
                "description": ""
              },
              "Note": {
                "type": "that this is supported only if all underlying estimators",
                "description": ""
              },
              "support": {
                "type": "sample weights.",
                "description": ".. versionadded:: 0.18\n**fit_params : dict"
              }
            },
            "returns": "-------\n        self : object",
            "raises": "",
            "see_also": "",
            "notes": "that this is supported only if all underlying estimators\n            support sample weights.\n\n            .. versionadded:: 0.18\n\n        **fit_params : dict\n            Parameters to pass to the underlying estimators.\n\n            .. versionadded:: 1.5\n\n                Only available if `enable_metadata_routing=True`,\n                which can be set by using\n                ``sklearn.set_config(enable_metadata_routing=True)``.\n                See :ref:`Metadata Routing User Guide <metadata_routing>` for\n                more details.\n\n        Returns\n        -------\n        self : object\n            Returns the instance itself.",
            "examples": ""
          }
        },
        {
          "name": "fit_transform",
          "signature": "fit_transform(self, X, y=None, **fit_params)",
          "documentation": {
            "description": "Return class labels or probabilities for each estimator.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix, dataframe} of shape                 (n_samples, n_features)"
              },
              "Input": {
                "type": "samples.",
                "description": ""
              },
              "y": {
                "type": "ndarray of shape (n_samples,), default=None",
                "description": ""
              },
              "Target": {
                "type": "values (None for unsupervised transformations).",
                "description": "**fit_params : dict"
              },
              "Additional": {
                "type": "fit parameters.",
                "description": "Returns\n-------"
              },
              "X_new": {
                "type": "ndarray array of shape (n_samples, n_features_new)",
                "description": ""
              },
              "Transformed": {
                "type": "array.",
                "description": ""
              }
            },
            "returns": "predictions for X for each estimator.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix, dataframe} of shape                 (n_samples, n_features)\n            Input samples.\n\n        y : ndarray of shape (n_samples,), default=None\n            Target values (None for unsupervised transformations).\n\n        **fit_params : dict\n            Additional fit parameters.\n\n        Returns\n        -------\n        X_new : ndarray array of shape (n_samples, n_features_new)\n            Transformed array.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_feature_names_out",
          "signature": "get_feature_names_out(self, input_features=None)",
          "documentation": {
            "description": "Get output feature names for transformation.\n\n        Parameters\n        ----------\n        input_features : array-like of str or None, default=None\n            Not used, present here for API consistency by convention.",
            "parameters": {
              "input_features": {
                "type": "array",
                "description": "like of str or None, default=None"
              },
              "Not": {
                "type": "used, present here for API consistency by convention.",
                "description": "Returns\n-------"
              },
              "feature_names_out": {
                "type": "ndarray of str objects",
                "description": ""
              },
              "Transformed": {
                "type": "feature names.",
                "description": ""
              }
            },
            "returns": "-------\n        feature_names_out : ndarray of str objects\n            Transformed feature names.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        .. versionadded:: 1.5",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRouter\n            A :class:`~sklearn.utils.metadata_routing.MetadataRouter` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get the parameters of an estimator from the ensemble.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "Setting": {
                "type": "it to True gets the various estimators and the parameters",
                "description": ""
              },
              "of": {
                "type": "the estimators as well.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "and estimator names mapped to their values or parameter",
                "description": ""
              },
              "names": {
                "type": "mapped to their values.",
                "description": ""
              }
            },
            "returns": "the parameters given in the constructor as well as the\n        estimators contained within the `estimators` parameter.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            Setting it to True gets the various estimators and the parameters\n            of the estimators as well.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "documentation": {
            "description": "Predict class labels for X.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples.",
                "description": "Returns\n-------"
              },
              "maj": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "Predicted": {
                "type": "class labels.",
                "description": ""
              }
            },
            "returns": "-------\n        maj : array-like of shape (n_samples,)\n            Predicted class labels.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_proba",
          "signature": "predict_proba(self, X)",
          "documentation": {
            "description": "Compute probabilities of possible outcomes for samples in X.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples.",
                "description": "Returns\n-------"
              },
              "avg": {
                "type": "array",
                "description": "like of shape (n_samples, n_classes)"
              },
              "Weighted": {
                "type": "average probability for each class per sample.",
                "description": ""
              }
            },
            "returns": "-------\n        avg : array-like of shape (n_samples, n_classes)\n            Weighted average probability for each class per sample.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "labels for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ""
              },
              "Mean": {
                "type": "accuracy of ``self.predict(X)`` w.r.t. `y`.",
                "description": ""
              }
            },
            "returns": "the mean accuracy on the given test data and labels.\n\n        In multi-label classification, this is the subset accuracy\n        which is a harsh metric since you require for each sample that\n        each label set be correctly predicted.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True labels for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.ensemble._voting.VotingClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._voting.VotingClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_output",
          "signature": "set_output(self, *, transform=None)",
          "documentation": {
            "description": "Set output container.\n\n        See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`\n        for an example on how to use the API.\n\n        Parameters\n        ----------\n        transform : {\"default\", \"pandas\", \"polars\"}, default=None\n            Configure output of `transform` and `fit_transform`.\n\n            - `\"default\"`: Default output format of a transformer\n            - `\"pandas\"`: DataFrame output\n            - `\"polars\"`: Polars output\n            - `None`: Transform configuration is unchanged\n\n            .. versionadded:: 1.4\n                `\"polars\"` option was added.",
            "parameters": {
              "transform": {
                "type": "{\"default\", \"pandas\", \"polars\"}, default=None",
                "description": ""
              },
              "Configure": {
                "type": "output of `transform` and `fit_transform`.",
                "description": "- `\"default\"`: Default output format of a transformer\n- `\"pandas\"`: DataFrame output\n- `\"polars\"`: Polars output\n- `None`: Transform configuration is unchanged\n.. versionadded:: 1.4\n`\"polars\"` option was added.\nReturns\n-------"
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "Estimator": {
                "type": "instance.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of an estimator from the ensemble.\n\n        Valid parameter keys can be listed with `get_params()`. Note that you\n        can directly set the parameters of the estimators contained in\n        `estimators`.\n\n        Parameters\n        ----------\n        **params : keyword arguments\n            Specific parameters using e.g.\n            `set_params(parameter_name=new_value)`. In addition, to setting the\n            parameters of the estimator, the individual estimator of the\n            estimators can also be set, or can be removed by setting them to\n            'drop'.",
            "parameters": {
              "Specific": {
                "type": "parameters using e.g.",
                "description": "`set_params(parameter_name=new_value)`. In addition, to setting the"
              }
            },
            "returns": "-------\n        self : object\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.ensemble._voting.VotingClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._voting.VotingClassifier",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "transform",
          "signature": "transform(self, X)",
          "documentation": {
            "description": "Return class labels or probabilities for X for each estimator.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            Training vectors, where `n_samples` is the number of samples and\n            `n_features` is the number of features.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "Training": {
                "type": "vectors, where `n_samples` is the number of samples and",
                "description": "`n_features` is the number of features.\nReturns\n-------\nprobabilities_or_labels"
              },
              "If": {
                "type": "`voting='hard'`:",
                "description": ""
              },
              "returns": {
                "type": "ndarray of shape (n_samples, n_classifiers * n_classes),",
                "description": ""
              },
              "being": {
                "type": "class probabilities calculated by each classifier.",
                "description": ""
              },
              "ndarray": {
                "type": "of shape (n_samples, n_classifiers), being",
                "description": ""
              },
              "class": {
                "type": "labels predicted by each classifier.",
                "description": ""
              }
            },
            "returns": "-------\n        probabilities_or_labels\n            If `voting='soft'` and `flatten_transform=True`:",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "VotingRegressor",
      "documentation": {
        "description": "Prediction voting regressor for unfitted estimators.\n\n    A voting regressor is an ensemble meta-estimator that fits several base\n    regressors, each on the whole dataset. Then it averages the individual\n    predictions to form a final prediction.\n\n    For a detailed example, refer to\n    :ref:`sphx_glr_auto_examples_ensemble_plot_voting_regressor.py`.\n\n    Read more in the :ref:`User Guide <voting_regressor>`.\n\n    .. versionadded:: 0.21\n\n    Parameters\n    ----------\n    estimators : list of (str, estimator) tuples\n        Invoking the ``fit`` method on the ``VotingRegressor`` will fit clones\n        of those original estimators that will be stored in the class attribute\n        ``self.estimators_``. An estimator can be set to ``'drop'`` using\n        :meth:`set_params`.\n\n        .. versionchanged:: 0.21\n            ``'drop'`` is accepted. Using None was deprecated in 0.22 and\n            support was removed in 0.24.\n\n    weights : array-like of shape (n_regressors,), default=None\n        Sequence of weights (`float` or `int`) to weight the occurrences of\n        predicted values before averaging. Uses uniform weights if `None`.\n\n    n_jobs : int, default=None\n        The number of jobs to run in parallel for ``fit``.\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n        for more details.\n\n    verbose : bool, default=False\n        If True, the time elapsed while fitting will be printed as it\n        is completed.\n\n        .. versionadded:: 0.23\n\n    Attributes\n    ----------\n    estimators_ : list of regressors\n        The collection of fitted sub-estimators as defined in ``estimators``\n        that are not 'drop'.\n\n    named_estimators_ : :class:`~sklearn.utils.Bunch`\n        Attribute to access any fitted sub-estimators by name.\n\n        .. versionadded:: 0.20\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`. Only defined if the\n        underlying regressor exposes such an attribute when fit.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Only defined if the\n        underlying estimators expose such an attribute when fit.\n\n        .. versionadded:: 1.0\n\n    See Also\n    --------\n    VotingClassifier : Soft Voting/Majority Rule classifier.",
        "parameters": {
          "estimators": {
            "type": "list of (str, estimator) tuples",
            "description": ""
          },
          "Invoking": {
            "type": "the ``fit`` method on the ``VotingRegressor`` will fit clones",
            "description": ""
          },
          "of": {
            "type": "those original estimators that will be stored in the class attribute",
            "description": "``self.estimators_``. An estimator can be set to ``'drop'`` using\n:meth:`set_params`.\n.. versionchanged:: 0.21\n``'drop'`` is accepted. Using None was deprecated in 0.22 and"
          },
          "support": {
            "type": "was removed in 0.24.",
            "description": ""
          },
          "weights": {
            "type": "array",
            "description": "like of shape (n_regressors,), default=None"
          },
          "Sequence": {
            "type": "of weights (`float` or `int`) to weight the occurrences of",
            "description": ""
          },
          "predicted": {
            "type": "values before averaging. Uses uniform weights if `None`.",
            "description": ""
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": ""
          },
          "The": {
            "type": "collection of fitted sub-estimators as defined in ``estimators``",
            "description": ""
          },
          "for": {
            "type": "more details.",
            "description": ""
          },
          "verbose": {
            "type": "bool, default=False",
            "description": ""
          },
          "If": {
            "type": "True, the time elapsed while fitting will be printed as it",
            "description": ""
          },
          "is": {
            "type": "completed.",
            "description": ".. versionadded:: 0.23\nAttributes\n----------"
          },
          "estimators_": {
            "type": "list of regressors",
            "description": ""
          },
          "that": {
            "type": "are not 'drop'.",
            "description": ""
          },
          "named_estimators_": {
            "type": ":class:`~sklearn.utils.Bunch`",
            "description": ""
          },
          "Attribute": {
            "type": "to access any fitted sub-estimators by name.",
            "description": ".. versionadded:: 0.20"
          },
          "n_features_in_": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of features seen during :term:`fit`. Only defined if the",
            "description": ""
          },
          "underlying": {
            "type": "estimators expose such an attribute when fit.",
            "description": ".. versionadded:: 1.0"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": ""
          },
          "Names": {
            "type": "of features seen during :term:`fit`. Only defined if the",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "VotingClassifier": {
            "type": "Soft Voting/Majority Rule classifier.",
            "description": "Examples\n--------\n>>> import numpy as np\n>>> from sklearn.linear_model import LinearRegression\n>>> from sklearn.ensemble import RandomForestRegressor\n>>> from sklearn.ensemble import VotingRegressor\n>>> from sklearn.neighbors import KNeighborsRegressor\n>>> r1 = LinearRegression()\n>>> r2 = RandomForestRegressor(n_estimators=10, random_state=1)\n>>> r3 = KNeighborsRegressor()\n>>> X = np.array([[1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36]])\n>>> y = np.array([2, 6, 12, 20, 30, 42])\n>>> er = VotingRegressor([('lr', r1), ('rf', r2), ('r3', r3)])\n>>> print(er.fit(X, y).predict(X))\n[ 6.8...  8.4... 12.5... 17.8... 26...  34...]"
          },
          "In": {
            "type": "the following example, we drop the `'lr'` estimator with",
            "description": ":meth:`~VotingRegressor.set_params` and fit the remaining two estimators:\n>>> er = er.set_params(lr='drop')\n>>> er = er.fit(X, y)\n>>> len(er.estimators_)\n2"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "--------\n    VotingClassifier : Soft Voting/Majority Rule classifier.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from sklearn.linear_model import LinearRegression\n    >>> from sklearn.ensemble import RandomForestRegressor\n    >>> from sklearn.ensemble import VotingRegressor\n    >>> from sklearn.neighbors import KNeighborsRegressor\n    >>> r1 = LinearRegression()\n    >>> r2 = RandomForestRegressor(n_estimators=10, random_state=1)\n    >>> r3 = KNeighborsRegressor()\n    >>> X = np.array([[1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36]])\n    >>> y = np.array([2, 6, 12, 20, 30, 42])\n    >>> er = VotingRegressor([('lr', r1), ('rf', r2), ('r3', r3)])\n    >>> print(er.fit(X, y).predict(X))\n    [ 6.8...  8.4... 12.5... 17.8... 26...  34...]\n\n    In the following example, we drop the `'lr'` estimator with\n    :meth:`~VotingRegressor.set_params` and fit the remaining two estimators:\n\n    >>> er = er.set_params(lr='drop')\n    >>> er = er.fit(X, y)\n    >>> len(er.estimators_)\n    2",
        "notes": "",
        "examples": "--------\n    >>> import numpy as np\n    >>> from sklearn.linear_model import LinearRegression\n    >>> from sklearn.ensemble import RandomForestRegressor\n    >>> from sklearn.ensemble import VotingRegressor\n    >>> from sklearn.neighbors import KNeighborsRegressor\n    >>> r1 = LinearRegression()\n    >>> r2 = RandomForestRegressor(n_estimators=10, random_state=1)\n    >>> r3 = KNeighborsRegressor()\n    >>> X = np.array([[1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36]])\n    >>> y = np.array([2, 6, 12, 20, 30, 42])\n    >>> er = VotingRegressor([('lr', r1), ('rf', r2), ('r3', r3)])\n    >>> print(er.fit(X, y).predict(X))\n    [ 6.8...  8.4... 12.5... 17.8... 26...  34...]\n\n    In the following example, we drop the `'lr'` estimator with\n    :meth:`~VotingRegressor.set_params` and fit the remaining two estimators:\n\n    >>> er = er.set_params(lr='drop')\n    >>> er = er.fit(X, y)\n    >>> len(er.estimators_)\n    2"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, *, sample_weight=None, **fit_params)",
          "documentation": {
            "description": "Fit the estimators.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            Training vectors, where `n_samples` is the number of samples and\n            `n_features` is the number of features.\n\n        y : array-like of shape (n_samples,)\n            Target values.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "Training": {
                "type": "vectors, where `n_samples` is the number of samples and",
                "description": "`n_features` is the number of features."
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,)"
              },
              "Target": {
                "type": "values.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights. If None, then samples are equally weighted.",
                "description": ""
              },
              "Note": {
                "type": "that this is supported only if all underlying estimators",
                "description": ""
              },
              "support": {
                "type": "sample weights.",
                "description": "**fit_params : dict"
              }
            },
            "returns": "-------\n        self : object\n            Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "that this is supported only if all underlying estimators\n            support sample weights.\n\n        **fit_params : dict\n            Parameters to pass to the underlying estimators.\n\n            .. versionadded:: 1.5\n\n                Only available if `enable_metadata_routing=True`,\n                which can be set by using\n                ``sklearn.set_config(enable_metadata_routing=True)``.\n                See :ref:`Metadata Routing User Guide <metadata_routing>` for\n                more details.\n\n        Returns\n        -------\n        self : object\n            Fitted estimator.",
            "examples": ""
          }
        },
        {
          "name": "fit_transform",
          "signature": "fit_transform(self, X, y=None, **fit_params)",
          "documentation": {
            "description": "Return class labels or probabilities for each estimator.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix, dataframe} of shape                 (n_samples, n_features)"
              },
              "Input": {
                "type": "samples.",
                "description": ""
              },
              "y": {
                "type": "ndarray of shape (n_samples,), default=None",
                "description": ""
              },
              "Target": {
                "type": "values (None for unsupervised transformations).",
                "description": "**fit_params : dict"
              },
              "Additional": {
                "type": "fit parameters.",
                "description": "Returns\n-------"
              },
              "X_new": {
                "type": "ndarray array of shape (n_samples, n_features_new)",
                "description": ""
              },
              "Transformed": {
                "type": "array.",
                "description": ""
              }
            },
            "returns": "predictions for X for each estimator.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix, dataframe} of shape                 (n_samples, n_features)\n            Input samples.\n\n        y : ndarray of shape (n_samples,), default=None\n            Target values (None for unsupervised transformations).\n\n        **fit_params : dict\n            Additional fit parameters.\n\n        Returns\n        -------\n        X_new : ndarray array of shape (n_samples, n_features_new)\n            Transformed array.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_feature_names_out",
          "signature": "get_feature_names_out(self, input_features=None)",
          "documentation": {
            "description": "Get output feature names for transformation.\n\n        Parameters\n        ----------\n        input_features : array-like of str or None, default=None\n            Not used, present here for API consistency by convention.",
            "parameters": {
              "input_features": {
                "type": "array",
                "description": "like of str or None, default=None"
              },
              "Not": {
                "type": "used, present here for API consistency by convention.",
                "description": "Returns\n-------"
              },
              "feature_names_out": {
                "type": "ndarray of str objects",
                "description": ""
              },
              "Transformed": {
                "type": "feature names.",
                "description": ""
              }
            },
            "returns": "-------\n        feature_names_out : ndarray of str objects\n            Transformed feature names.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "documentation": {
            "description": "Get metadata routing of this object.\n\n        Please check :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        .. versionadded:: 1.5",
            "parameters": {},
            "returns": "-------\n        routing : MetadataRouter\n            A :class:`~sklearn.utils.metadata_routing.MetadataRouter` encapsulating\n            routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "documentation": {
            "description": "Get the parameters of an estimator from the ensemble.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": ""
              },
              "Setting": {
                "type": "it to True gets the various estimators and the parameters",
                "description": ""
              },
              "of": {
                "type": "the estimators as well.",
                "description": "Returns\n-------"
              },
              "params": {
                "type": "dict",
                "description": ""
              },
              "Parameter": {
                "type": "and estimator names mapped to their values or parameter",
                "description": ""
              },
              "names": {
                "type": "mapped to their values.",
                "description": ""
              }
            },
            "returns": "the parameters given in the constructor as well as the\n        estimators contained within the `estimators` parameter.\n\n        Parameters\n        ----------\n        deep : bool, default=True\n            Setting it to True gets the various estimators and the parameters\n            of the estimators as well.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "documentation": {
            "description": "Predict regression target for X.\n\n        The predicted regression target of an input sample is computed as the\n        mean predicted regression targets of the estimators in the ensemble.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "predicted values.",
                "description": ""
              },
              "y": {
                "type": "ndarray of shape (n_samples,)",
                "description": ""
              }
            },
            "returns": "-------\n        y : ndarray of shape (n_samples,)\n            The predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "documentation": {
            "description": "Return the coefficient of determination of the prediction.\n\n        The coefficient of determination :math:`R^2` is defined as\n        :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\n        sum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\n        is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\n        The best possible score is 1.0 and it can be negative (because the\n        model can be arbitrarily worse). A constant model that always predicts\n        the expected value of `y`, disregarding the input features, would get\n        a :math:`R^2` score of 0.0.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Test samples. For some estimators this may be a precomputed\n            kernel matrix or a list of generic objects instead with shape\n            ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n            is the number of samples used in the fitting for the estimator.\n\n        y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n            True values for `X`.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights.\n\n        Returns\n        -------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "parameters": {
              "X": {
                "type": "array",
                "description": "like of shape (n_samples, n_features)"
              },
              "Test": {
                "type": "samples. For some estimators this may be a precomputed",
                "description": ""
              },
              "kernel": {
                "type": "matrix or a list of generic objects instead with shape",
                "description": "``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``"
              },
              "is": {
                "type": "the number of samples used in the fitting for the estimator.",
                "description": ""
              },
              "y": {
                "type": "array",
                "description": "like of shape (n_samples,) or (n_samples, n_outputs)"
              },
              "True": {
                "type": "values for `X`.",
                "description": ""
              },
              "sample_weight": {
                "type": "array",
                "description": "like of shape (n_samples,), default=None"
              },
              "Sample": {
                "type": "weights.",
                "description": "Returns\n-------"
              },
              "score": {
                "type": "float",
                "description": ":math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\nNotes\n-----"
              },
              "The": {
                "type": "math:`R^2` score used when calling ``score`` on a regressor uses",
                "description": "``multioutput='uniform_average'`` from version 0.23 to keep consistent"
              },
              "with": {
                "type": "default value of :func:`~sklearn.metrics.r2_score`.",
                "description": ""
              },
              "This": {
                "type": "influences the ``score`` method of all the multioutput",
                "description": ""
              },
              "regressors": {
                "type": "(except for",
                "description": ":class:`~sklearn.multioutput.MultiOutputRegressor`)."
              }
            },
            "returns": "-------\n        score : float\n            :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.\n\n        Notes\n        -----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "raises": "",
            "see_also": "",
            "notes": "-----\n        The :math:`R^2` score used when calling ``score`` on a regressor uses\n        ``multioutput='uniform_average'`` from version 0.23 to keep consistent\n        with default value of :func:`~sklearn.metrics.r2_score`.\n        This influences the ``score`` method of all the multioutput\n        regressors (except for\n        :class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.ensemble._voting.VotingRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._voting.VotingRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``fit`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``fit``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``fit``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "set_output",
          "signature": "set_output(self, *, transform=None)",
          "documentation": {
            "description": "Set output container.\n\n        See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`\n        for an example on how to use the API.\n\n        Parameters\n        ----------\n        transform : {\"default\", \"pandas\", \"polars\"}, default=None\n            Configure output of `transform` and `fit_transform`.\n\n            - `\"default\"`: Default output format of a transformer\n            - `\"pandas\"`: DataFrame output\n            - `\"polars\"`: Polars output\n            - `None`: Transform configuration is unchanged\n\n            .. versionadded:: 1.4\n                `\"polars\"` option was added.",
            "parameters": {
              "transform": {
                "type": "{\"default\", \"pandas\", \"polars\"}, default=None",
                "description": ""
              },
              "Configure": {
                "type": "output of `transform` and `fit_transform`.",
                "description": "- `\"default\"`: Default output format of a transformer\n- `\"pandas\"`: DataFrame output\n- `\"polars\"`: Polars output\n- `None`: Transform configuration is unchanged\n.. versionadded:: 1.4\n`\"polars\"` option was added.\nReturns\n-------"
              },
              "self": {
                "type": "estimator instance",
                "description": ""
              },
              "Estimator": {
                "type": "instance.",
                "description": ""
              }
            },
            "returns": "-------\n        self : estimator instance\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "documentation": {
            "description": "Set the parameters of an estimator from the ensemble.\n\n        Valid parameter keys can be listed with `get_params()`. Note that you\n        can directly set the parameters of the estimators contained in\n        `estimators`.\n\n        Parameters\n        ----------\n        **params : keyword arguments\n            Specific parameters using e.g.\n            `set_params(parameter_name=new_value)`. In addition, to setting the\n            parameters of the estimator, the individual estimator of the\n            estimators can also be set, or can be removed by setting them to\n            'drop'.",
            "parameters": {
              "Specific": {
                "type": "parameters using e.g.",
                "description": "`set_params(parameter_name=new_value)`. In addition, to setting the"
              }
            },
            "returns": "-------\n        self : object\n            Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.ensemble._voting.VotingRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.ensemble._voting.VotingRegressor",
          "documentation": {
            "description": "Request metadata passed to the ``score`` method.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": ""
              },
              "Metadata": {
                "type": "routing for ``sample_weight`` parameter in ``score``.",
                "description": "Returns\n-------"
              },
              "self": {
                "type": "object",
                "description": ""
              },
              "The": {
                "type": "updated object.",
                "description": ""
              },
              "and": {
                "type": "not others.",
                "description": ".. versionadded:: 1.3\n.. note::"
              },
              "This": {
                "type": "method is only relevant if this estimator is used as a",
                "description": "sub-estimator of a meta-estimator, e.g. used inside a\n:class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect."
              }
            },
            "returns": "-------\n        self : object\n            The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "that this method is only relevant if\n        ``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\n        Please see :ref:`User Guide <metadata_routing>` on how the routing\n        mechanism works.\n\n        The options for each parameter are:\n\n        - ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n        - ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n        - ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n        - ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\n        The default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\n        existing request. This allows you to change the request for some\n        parameters and not others.\n\n        .. versionadded:: 1.3\n\n        .. note::\n            This method is only relevant if this estimator is used as a\n            sub-estimator of a meta-estimator, e.g. used inside a\n            :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.\n\n        Parameters\n        ----------\n        sample_weight : str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED\n            Metadata routing for ``sample_weight`` parameter in ``score``.\n\n        Returns\n        -------\n        self : object\n            The updated object.",
            "examples": ""
          }
        },
        {
          "name": "transform",
          "signature": "transform(self, X)",
          "documentation": {
            "description": "Return predictions for X for each estimator.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            The input samples.",
            "parameters": {
              "X": {
                "type": "{array",
                "description": "like, sparse matrix} of shape (n_samples, n_features)"
              },
              "The": {
                "type": "input samples.",
                "description": "Returns\n-------"
              },
              "predictions": {
                "type": "ndarray of shape (n_samples, n_classifiers)",
                "description": ""
              },
              "Values": {
                "type": "predicted by each regressor.",
                "description": ""
              }
            },
            "returns": "-------\n        predictions : ndarray of shape (n_samples, n_classifiers)\n            Values predicted by each regressor.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    }
  ]
}