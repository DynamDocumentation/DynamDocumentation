{
  "description": "Utilities to load popular datasets and artificial data generators.",
  "functions": [
    {
      "name": "clear_data_home",
      "signature": "clear_data_home(data_home=None)",
      "documentation": {
        "description": "Delete all the content of the data home cache.\n\n    Parameters\n    ----------\n    data_home : str or path-like, default=None\n        The path to scikit-learn data directory. If `None`, the default path\n        is `~/scikit_learn_data`.",
        "parameters": {
          "data_home": {
            "type": "str or path",
            "description": "like, default=None"
          },
          "The": {
            "type": "path to scikit-learn data directory. If `None`, the default path",
            "description": ""
          },
          "is": {
            "type": "`~/scikit_learn_data`.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import clear_data_home\n>>> clear_data_home()  # doctest: +SKIP"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import clear_data_home\n    >>> clear_data_home()  # doctest: +SKIP"
      }
    },
    {
      "name": "dump_svmlight_file",
      "signature": "dump_svmlight_file(X, y, f, *, zero_based=True, comment=None, query_id=None, multilabel=False)",
      "documentation": {
        "description": "Dump the dataset in svmlight / libsvm file format.\n\n    This format is a text-based format, with one sample per line. It does\n    not store zero valued features hence is suitable for sparse dataset.\n\n    The first element of each line can be used to store a target variable\n    to predict.\n\n    Parameters\n    ----------\n    X : {array-like, sparse matrix} of shape (n_samples, n_features)\n        Training vectors, where `n_samples` is the number of samples and\n        `n_features` is the number of features.\n\n    y : {array-like, sparse matrix}, shape = (n_samples,) or (n_samples, n_labels)\n        Target values. Class labels must be an\n        integer or float, or array-like objects of integer or float for\n        multilabel classifications.\n\n    f : str or file-like in binary mode\n        If string, specifies the path that will contain the data.\n        If file-like, data will be written to f. f should be opened in binary\n        mode.\n\n    zero_based : bool, default=True\n        Whether column indices should be written zero-based (True) or one-based\n        (False).\n\n    comment : str or bytes, default=None\n        Comment to insert at the top of the file. This should be either a\n        Unicode string, which will be encoded as UTF-8, or an ASCII byte\n        string.\n        If a comment is given, then it will be preceded by one that identifies\n        the file as having been dumped by scikit-learn. Note that not all\n        tools grok comments in SVMlight files.\n\n    query_id : array-like of shape (n_samples,), default=None\n        Array containing pairwise preference constraints (qid in svmlight\n        format).\n\n    multilabel : bool, default=False\n        Samples may have several labels each (see\n        https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multilabel.html).\n\n        .. versionadded:: 0.17\n           parameter `multilabel` to support multilabel datasets.",
        "parameters": {
          "X": {
            "type": "{array",
            "description": "like, sparse matrix} of shape (n_samples, n_features)"
          },
          "Training": {
            "type": "vectors, where `n_samples` is the number of samples and",
            "description": "`n_features` is the number of features."
          },
          "y": {
            "type": "{array",
            "description": "like, sparse matrix}, shape = (n_samples,) or (n_samples, n_labels)"
          },
          "Target": {
            "type": "values. Class labels must be an",
            "description": ""
          },
          "integer": {
            "type": "or float, or array-like objects of integer or float for",
            "description": ""
          },
          "multilabel": {
            "type": "bool, default=False",
            "description": ""
          },
          "f": {
            "type": "str or file",
            "description": "like in binary mode"
          },
          "If": {
            "type": "a comment is given, then it will be preceded by one that identifies",
            "description": ""
          },
          "zero_based": {
            "type": "bool, default=True",
            "description": ""
          },
          "Whether": {
            "type": "column indices should be written zero-based (True) or one-based",
            "description": "(False)."
          },
          "comment": {
            "type": "str or bytes, default=None",
            "description": ""
          },
          "Comment": {
            "type": "to insert at the top of the file. This should be either a",
            "description": ""
          },
          "Unicode": {
            "type": "string, which will be encoded as UTF-8, or an ASCII byte",
            "description": "string."
          },
          "the": {
            "type": "file as having been dumped by scikit-learn. Note that not all",
            "description": ""
          },
          "tools": {
            "type": "grok comments in SVMlight files.",
            "description": ""
          },
          "query_id": {
            "type": "array",
            "description": "like of shape (n_samples,), default=None"
          },
          "Array": {
            "type": "containing pairwise preference constraints (qid in svmlight",
            "description": "format)."
          },
          "Samples": {
            "type": "may have several labels each (see",
            "description": ""
          },
          "https": {
            "type": "//www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multilabel.html).",
            "description": ".. versionadded:: 0.17"
          },
          "parameter": {
            "type": "`multilabel` to support multilabel datasets.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import dump_svmlight_file, make_classification\n>>> X, y = make_classification(random_state=0)\n>>> output_file = \"my_dataset.svmlight\"\n>>> dump_svmlight_file(X, y, output_file)  # doctest: +SKIP"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import dump_svmlight_file, make_classification\n    >>> X, y = make_classification(random_state=0)\n    >>> output_file = \"my_dataset.svmlight\"\n    >>> dump_svmlight_file(X, y, output_file)  # doctest: +SKIP"
      }
    },
    {
      "name": "fetch_20newsgroups",
      "signature": "fetch_20newsgroups(*, data_home=None, subset='train', categories=None, shuffle=True, random_state=42, remove=(), download_if_missing=True, return_X_y=False, n_retries=3, delay=1.0)",
      "documentation": {
        "description": "Load the filenames and data from the 20 newsgroups dataset (classification).\n\n    Download it if necessary.\n\n    =================   ==========\n    Classes                     20\n    Samples total            18846\n    Dimensionality               1\n    Features                  text\n    =================   ==========\n\n    Read more in the :ref:`User Guide <20newsgroups_dataset>`.\n\n    Parameters\n    ----------\n    data_home : str or path-like, default=None\n        Specify a download and cache folder for the datasets. If None,\n        all scikit-learn data is stored in '~/scikit_learn_data' subfolders.\n\n    subset : {'train', 'test', 'all'}, default='train'\n        Select the dataset to load: 'train' for the training set, 'test'\n        for the test set, 'all' for both, with shuffled ordering.\n\n    categories : array-like, dtype=str, default=None\n        If None (default), load all the categories.\n        If not None, list of category names to load (other categories\n        ignored).\n\n    shuffle : bool, default=True\n        Whether or not to shuffle the data: might be important for models that\n        make the assumption that the samples are independent and identically\n        distributed (i.i.d.), such as stochastic gradient descent.\n\n    random_state : int, RandomState instance or None, default=42\n        Determines random number generation for dataset shuffling. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    remove : tuple, default=()\n        May contain any subset of ('headers', 'footers', 'quotes'). Each of\n        these are kinds of text that will be detected and removed from the\n        newsgroup posts, preventing classifiers from overfitting on\n        metadata.\n\n        'headers' removes newsgroup headers, 'footers' removes blocks at the\n        ends of posts that look like signatures, and 'quotes' removes lines\n        that appear to be quoting another post.\n\n        'headers' follows an exact standard; the other filters are not always\n        correct.\n\n    download_if_missing : bool, default=True\n        If False, raise an OSError if the data is not locally available\n        instead of trying to download the data from the source site.\n\n    return_X_y : bool, default=False\n        If True, returns `(data.data, data.target)` instead of a Bunch\n        object.\n\n        .. versionadded:: 0.22\n\n    n_retries : int, default=3\n        Number of retries when HTTP errors are encountered.\n\n        .. versionadded:: 1.5\n\n    delay : float, default=1.0\n        Number of seconds between retries.\n\n        .. versionadded:: 1.5\n\n    Returns\n    -------\n    bunch : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : list of shape (n_samples,)\n            The data list to learn.\n        target: ndarray of shape (n_samples,)\n            The target labels.\n        filenames: list of shape (n_samples,)\n            The path to the location of the data.\n        DESCR: str\n            The full description of the dataset.\n        target_names: list of shape (n_classes,)\n            The names of target classes.\n\n    (data, target) : tuple if `return_X_y=True`\n        A tuple of two ndarrays. The first contains a 2D array of shape\n        (n_samples, n_classes) with each row representing one sample and each\n        column representing the features. The second array of shape\n        (n_samples,) contains the target samples.\n\n        .. versionadded:: 0.22",
        "parameters": {
          "data_home": {
            "type": "str or path",
            "description": "like, default=None"
          },
          "Specify": {
            "type": "a download and cache folder for the datasets. If None,",
            "description": ""
          },
          "all": {
            "type": "scikit-learn data is stored in '~/scikit_learn_data' subfolders.",
            "description": ""
          },
          "subset": {
            "type": "{'train', 'test', 'all'}, default='train'",
            "description": ""
          },
          "Select": {
            "type": "the dataset to load: 'train' for the training set, 'test'",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "categories": {
            "type": "array",
            "description": "like, dtype=str, default=None"
          },
          "If": {
            "type": "True, returns `(data.data, data.target)` instead of a Bunch",
            "description": "object.\n.. versionadded:: 0.22"
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": ""
          },
          "Whether": {
            "type": "or not to shuffle the data: might be important for models that",
            "description": ""
          },
          "make": {
            "type": "the assumption that the samples are independent and identically",
            "description": ""
          },
          "distributed": {
            "type": "i.i.d.",
            "description": ", such as stochastic gradient descent."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=42",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset shuffling. Pass an int",
            "description": ""
          },
          "See": {
            "type": "term:`Glossary <random_state>`.",
            "description": ""
          },
          "remove": {
            "type": "tuple, default=()",
            "description": ""
          },
          "May": {
            "type": "contain any subset of ('headers', 'footers', 'quotes'). Each of",
            "description": ""
          },
          "these": {
            "type": "are kinds of text that will be detected and removed from the",
            "description": ""
          },
          "newsgroup": {
            "type": "posts, preventing classifiers from overfitting on",
            "description": "metadata.\n'headers' removes newsgroup headers, 'footers' removes blocks at the"
          },
          "ends": {
            "type": "of posts that look like signatures, and 'quotes' removes lines",
            "description": ""
          },
          "that": {
            "type": "appear to be quoting another post.",
            "description": "'headers' follows an exact standard; the other filters are not always\ncorrect."
          },
          "download_if_missing": {
            "type": "bool, default=True",
            "description": ""
          },
          "instead": {
            "type": "of trying to download the data from the source site.",
            "description": ""
          },
          "return_X_y": {
            "type": "bool, default=False",
            "description": ""
          },
          "n_retries": {
            "type": "int, default=3",
            "description": ""
          },
          "Number": {
            "type": "of seconds between retries.",
            "description": ".. versionadded:: 1.5\nReturns\n-------"
          },
          "delay": {
            "type": "float, default=1.0",
            "description": ""
          },
          "bunch": {
            "type": ":class:`~sklearn.utils.Bunch`",
            "description": "Dictionary-like object, with the following attributes."
          },
          "data": {
            "type": "list of shape (n_samples,)",
            "description": ""
          },
          "The": {
            "type": "names of target classes.",
            "description": "(data, target) : tuple if `return_X_y=True`"
          },
          "target": {
            "type": "ndarray of shape (n_samples,)",
            "description": ""
          },
          "filenames": {
            "type": "list of shape (n_samples,)",
            "description": ""
          },
          "DESCR": {
            "type": "str",
            "description": ""
          },
          "target_names": {
            "type": "list of shape (n_classes,)",
            "description": ""
          },
          "A": {
            "type": "tuple of two ndarrays. The first contains a 2D array of shape",
            "description": "(n_samples, n_classes) with each row representing one sample and each"
          },
          "column": {
            "type": "representing the features. The second array of shape",
            "description": "(n_samples,) contains the target samples.\n.. versionadded:: 0.22\nExamples\n--------\n>>> from sklearn.datasets import fetch_20newsgroups\n>>> cats = ['alt.atheism', 'sci.space']\n>>> newsgroups_train = fetch_20newsgroups(subset='train', categories=cats)\n>>> list(newsgroups_train.target_names)\n['alt.atheism', 'sci.space']\n>>> newsgroups_train.filenames.shape\n(1073,)\n>>> newsgroups_train.target.shape\n(1073,)\n>>> newsgroups_train.target[:10]"
          },
          "array": {
            "type": "[0, 1, 1, 1, 0, 1, 1, 0, 0, 0]",
            "description": ""
          }
        },
        "returns": "-------\n    bunch : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : list of shape (n_samples,)\n            The data list to learn.\n        target: ndarray of shape (n_samples,)\n            The target labels.\n        filenames: list of shape (n_samples,)\n            The path to the location of the data.\n        DESCR: str\n            The full description of the dataset.\n        target_names: list of shape (n_classes,)\n            The names of target classes.\n\n    (data, target) : tuple if `return_X_y=True`\n        A tuple of two ndarrays. The first contains a 2D array of shape\n        (n_samples, n_classes) with each row representing one sample and each\n        column representing the features. The second array of shape\n        (n_samples,) contains the target samples.\n\n        .. versionadded:: 0.22\n\n    Examples\n    --------\n    >>> from sklearn.datasets import fetch_20newsgroups\n    >>> cats = ['alt.atheism', 'sci.space']\n    >>> newsgroups_train = fetch_20newsgroups(subset='train', categories=cats)\n    >>> list(newsgroups_train.target_names)\n    ['alt.atheism', 'sci.space']\n    >>> newsgroups_train.filenames.shape\n    (1073,)\n    >>> newsgroups_train.target.shape\n    (1073,)\n    >>> newsgroups_train.target[:10]\n    array([0, 1, 1, 1, 0, 1, 1, 0, 0, 0])",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import fetch_20newsgroups\n    >>> cats = ['alt.atheism', 'sci.space']\n    >>> newsgroups_train = fetch_20newsgroups(subset='train', categories=cats)\n    >>> list(newsgroups_train.target_names)\n    ['alt.atheism', 'sci.space']\n    >>> newsgroups_train.filenames.shape\n    (1073,)\n    >>> newsgroups_train.target.shape\n    (1073,)\n    >>> newsgroups_train.target[:10]\n    array([0, 1, 1, 1, 0, 1, 1, 0, 0, 0])"
      }
    },
    {
      "name": "fetch_20newsgroups_vectorized",
      "signature": "fetch_20newsgroups_vectorized(*, subset='train', remove=(), data_home=None, download_if_missing=True, return_X_y=False, normalize=True, as_frame=False, n_retries=3, delay=1.0)",
      "documentation": {
        "description": "Load and vectorize the 20 newsgroups dataset (classification).\n\n    Download it if necessary.\n\n    This is a convenience function; the transformation is done using the\n    default settings for\n    :class:`~sklearn.feature_extraction.text.CountVectorizer`. For more\n    advanced usage (stopword filtering, n-gram extraction, etc.), combine\n    fetch_20newsgroups with a custom\n    :class:`~sklearn.feature_extraction.text.CountVectorizer`,\n    :class:`~sklearn.feature_extraction.text.HashingVectorizer`,\n    :class:`~sklearn.feature_extraction.text.TfidfTransformer` or\n    :class:`~sklearn.feature_extraction.text.TfidfVectorizer`.\n\n    The resulting counts are normalized using\n    :func:`sklearn.preprocessing.normalize` unless normalize is set to False.\n\n    =================   ==========\n    Classes                     20\n    Samples total            18846\n    Dimensionality          130107\n    Features                  real\n    =================   ==========\n\n    Read more in the :ref:`User Guide <20newsgroups_dataset>`.\n\n    Parameters\n    ----------\n    subset : {'train', 'test', 'all'}, default='train'\n        Select the dataset to load: 'train' for the training set, 'test'\n        for the test set, 'all' for both, with shuffled ordering.\n\n    remove : tuple, default=()\n        May contain any subset of ('headers', 'footers', 'quotes'). Each of\n        these are kinds of text that will be detected and removed from the\n        newsgroup posts, preventing classifiers from overfitting on\n        metadata.\n\n        'headers' removes newsgroup headers, 'footers' removes blocks at the\n        ends of posts that look like signatures, and 'quotes' removes lines\n        that appear to be quoting another post.\n\n    data_home : str or path-like, default=None\n        Specify an download and cache folder for the datasets. If None,\n        all scikit-learn data is stored in '~/scikit_learn_data' subfolders.\n\n    download_if_missing : bool, default=True\n        If False, raise an OSError if the data is not locally available\n        instead of trying to download the data from the source site.\n\n    return_X_y : bool, default=False\n        If True, returns ``(data.data, data.target)`` instead of a Bunch\n        object.\n\n        .. versionadded:: 0.20\n\n    normalize : bool, default=True\n        If True, normalizes each document's feature vector to unit norm using\n        :func:`sklearn.preprocessing.normalize`.\n\n        .. versionadded:: 0.22\n\n    as_frame : bool, default=False\n        If True, the data is a pandas DataFrame including columns with\n        appropriate dtypes (numeric, string, or categorical). The target is\n        a pandas DataFrame or Series depending on the number of\n        `target_columns`.\n\n        .. versionadded:: 0.24\n\n    n_retries : int, default=3\n        Number of retries when HTTP errors are encountered.\n\n        .. versionadded:: 1.5\n\n    delay : float, default=1.0\n        Number of seconds between retries.\n\n        .. versionadded:: 1.5\n\n    Returns\n    -------\n    bunch : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data: {sparse matrix, dataframe} of shape (n_samples, n_features)\n            The input data matrix. If ``as_frame`` is `True`, ``data`` is\n            a pandas DataFrame with sparse columns.\n        target: {ndarray, series} of shape (n_samples,)\n            The target labels. If ``as_frame`` is `True`, ``target`` is a\n            pandas Series.\n        target_names: list of shape (n_classes,)\n            The names of target classes.\n        DESCR: str\n            The full description of the dataset.\n        frame: dataframe of shape (n_samples, n_features + 1)\n            Only present when `as_frame=True`. Pandas DataFrame with ``data``\n            and ``target``.\n\n            .. versionadded:: 0.24\n\n    (data, target) : tuple if ``return_X_y`` is True\n        `data` and `target` would be of the format defined in the `Bunch`\n        description above.\n\n        .. versionadded:: 0.20",
        "parameters": {
          "subset": {
            "type": "{'train', 'test', 'all'}, default='train'",
            "description": ""
          },
          "Select": {
            "type": "the dataset to load: 'train' for the training set, 'test'",
            "description": ""
          },
          "for": {
            "type": "the test set, 'all' for both, with shuffled ordering.",
            "description": ""
          },
          "remove": {
            "type": "tuple, default=()",
            "description": ""
          },
          "May": {
            "type": "contain any subset of ('headers', 'footers', 'quotes'). Each of",
            "description": ""
          },
          "these": {
            "type": "are kinds of text that will be detected and removed from the",
            "description": ""
          },
          "newsgroup": {
            "type": "posts, preventing classifiers from overfitting on",
            "description": "metadata.\n'headers' removes newsgroup headers, 'footers' removes blocks at the"
          },
          "ends": {
            "type": "of posts that look like signatures, and 'quotes' removes lines",
            "description": ""
          },
          "that": {
            "type": "appear to be quoting another post.",
            "description": ""
          },
          "data_home": {
            "type": "str or path",
            "description": "like, default=None"
          },
          "Specify": {
            "type": "an download and cache folder for the datasets. If None,",
            "description": ""
          },
          "all": {
            "type": "scikit-learn data is stored in '~/scikit_learn_data' subfolders.",
            "description": ""
          },
          "download_if_missing": {
            "type": "bool, default=True",
            "description": ""
          },
          "If": {
            "type": "True, the data is a pandas DataFrame including columns with",
            "description": ""
          },
          "instead": {
            "type": "of trying to download the data from the source site.",
            "description": ""
          },
          "return_X_y": {
            "type": "bool, default=False",
            "description": ""
          },
          "normalize": {
            "type": "bool, default=True",
            "description": ""
          },
          "as_frame": {
            "type": "bool, default=False",
            "description": ""
          },
          "appropriate": {
            "type": "dtypes (numeric, string, or categorical). The target is",
            "description": ""
          },
          "a": {
            "type": "pandas DataFrame with sparse columns.",
            "description": ""
          },
          "n_retries": {
            "type": "int, default=3",
            "description": ""
          },
          "Number": {
            "type": "of seconds between retries.",
            "description": ".. versionadded:: 1.5\nReturns\n-------"
          },
          "delay": {
            "type": "float, default=1.0",
            "description": ""
          },
          "bunch": {
            "type": ":class:`~sklearn.utils.Bunch`",
            "description": "Dictionary-like object, with the following attributes."
          },
          "data": {
            "type": "{sparse matrix, dataframe} of shape (n_samples, n_features)",
            "description": ""
          },
          "The": {
            "type": "full description of the dataset.",
            "description": ""
          },
          "target": {
            "type": "{ndarray, series} of shape (n_samples,)",
            "description": ""
          },
          "pandas": {
            "type": "Series.",
            "description": ""
          },
          "target_names": {
            "type": "list of shape (n_classes,)",
            "description": ""
          },
          "DESCR": {
            "type": "str",
            "description": ""
          },
          "frame": {
            "type": "dataframe of shape (n_samples, n_features + 1)",
            "description": ""
          },
          "Only": {
            "type": "present when `as_frame=True`. Pandas DataFrame with ``data``",
            "description": ""
          },
          "and": {
            "type": "``target``.",
            "description": ".. versionadded:: 0.24\n(data, target) : tuple if ``return_X_y`` is True\n`data` and `target` would be of the format defined in the `Bunch`"
          },
          "description": {
            "type": "above.",
            "description": ".. versionadded:: 0.20\nExamples\n--------\n>>> from sklearn.datasets import fetch_20newsgroups_vectorized\n>>> newsgroups_vectorized = fetch_20newsgroups_vectorized(subset='test')\n>>> newsgroups_vectorized.data.shape\n(7532, 130107)\n>>> newsgroups_vectorized.target.shape\n(7532,)"
          }
        },
        "returns": "-------\n    bunch : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data: {sparse matrix, dataframe} of shape (n_samples, n_features)\n            The input data matrix. If ``as_frame`` is `True`, ``data`` is\n            a pandas DataFrame with sparse columns.\n        target: {ndarray, series} of shape (n_samples,)\n            The target labels. If ``as_frame`` is `True`, ``target`` is a\n            pandas Series.\n        target_names: list of shape (n_classes,)\n            The names of target classes.\n        DESCR: str\n            The full description of the dataset.\n        frame: dataframe of shape (n_samples, n_features + 1)\n            Only present when `as_frame=True`. Pandas DataFrame with ``data``\n            and ``target``.\n\n            .. versionadded:: 0.24\n\n    (data, target) : tuple if ``return_X_y`` is True\n        `data` and `target` would be of the format defined in the `Bunch`\n        description above.\n\n        .. versionadded:: 0.20\n\n    Examples\n    --------\n    >>> from sklearn.datasets import fetch_20newsgroups_vectorized\n    >>> newsgroups_vectorized = fetch_20newsgroups_vectorized(subset='test')\n    >>> newsgroups_vectorized.data.shape\n    (7532, 130107)\n    >>> newsgroups_vectorized.target.shape\n    (7532,)",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import fetch_20newsgroups_vectorized\n    >>> newsgroups_vectorized = fetch_20newsgroups_vectorized(subset='test')\n    >>> newsgroups_vectorized.data.shape\n    (7532, 130107)\n    >>> newsgroups_vectorized.target.shape\n    (7532,)"
      }
    },
    {
      "name": "fetch_california_housing",
      "signature": "fetch_california_housing(*, data_home=None, download_if_missing=True, return_X_y=False, as_frame=False, n_retries=3, delay=1.0)",
      "documentation": {
        "description": "Load the California housing dataset (regression).\n\n    ==============   ==============\n    Samples total             20640\n    Dimensionality                8\n    Features                   real\n    Target           real 0.15 - 5.\n    ==============   ==============\n\n    Read more in the :ref:`User Guide <california_housing_dataset>`.\n\n    Parameters\n    ----------\n    data_home : str or path-like, default=None\n        Specify another download and cache folder for the datasets. By default\n        all scikit-learn data is stored in '~/scikit_learn_data' subfolders.\n\n    download_if_missing : bool, default=True\n        If False, raise an OSError if the data is not locally available\n        instead of trying to download the data from the source site.\n\n    return_X_y : bool, default=False\n        If True, returns ``(data.data, data.target)`` instead of a Bunch\n        object.\n\n        .. versionadded:: 0.20\n\n    as_frame : bool, default=False\n        If True, the data is a pandas DataFrame including columns with\n        appropriate dtypes (numeric, string or categorical). The target is\n        a pandas DataFrame or Series depending on the number of target_columns.\n\n        .. versionadded:: 0.23\n\n    n_retries : int, default=3\n        Number of retries when HTTP errors are encountered.\n\n        .. versionadded:: 1.5\n\n    delay : float, default=1.0\n        Number of seconds between retries.\n\n        .. versionadded:: 1.5\n\n    Returns\n    -------\n    dataset : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : ndarray, shape (20640, 8)\n            Each row corresponding to the 8 feature values in order.\n            If ``as_frame`` is True, ``data`` is a pandas object.\n        target : numpy array of shape (20640,)\n            Each value corresponds to the average\n            house value in units of 100,000.\n            If ``as_frame`` is True, ``target`` is a pandas object.\n        feature_names : list of length 8\n            Array of ordered feature names used in the dataset.\n        DESCR : str\n            Description of the California housing dataset.\n        frame : pandas DataFrame\n            Only present when `as_frame=True`. DataFrame with ``data`` and\n            ``target``.\n\n            .. versionadded:: 0.23\n\n    (data, target) : tuple if ``return_X_y`` is True\n        A tuple of two ndarray. The first containing a 2D array of\n        shape (n_samples, n_features) with each row representing one\n        sample and each column representing the features. The second\n        ndarray of shape (n_samples,) containing the target samples.\n\n        .. versionadded:: 0.20\n\n    Notes\n    -----\n\n    This dataset consists of 20,640 samples and 9 features.",
        "parameters": {
          "data_home": {
            "type": "str or path",
            "description": "like, default=None"
          },
          "Specify": {
            "type": "another download and cache folder for the datasets. By default",
            "description": ""
          },
          "all": {
            "type": "scikit-learn data is stored in '~/scikit_learn_data' subfolders.",
            "description": ""
          },
          "download_if_missing": {
            "type": "bool, default=True",
            "description": ""
          },
          "If": {
            "type": "``as_frame`` is True, ``target`` is a pandas object.",
            "description": ""
          },
          "instead": {
            "type": "of trying to download the data from the source site.",
            "description": ""
          },
          "return_X_y": {
            "type": "bool, default=False",
            "description": ""
          },
          "as_frame": {
            "type": "bool, default=False",
            "description": ""
          },
          "appropriate": {
            "type": "dtypes (numeric, string or categorical). The target is",
            "description": ""
          },
          "a": {
            "type": "pandas DataFrame or Series depending on the number of target_columns.",
            "description": ".. versionadded:: 0.23"
          },
          "n_retries": {
            "type": "int, default=3",
            "description": ""
          },
          "Number": {
            "type": "of seconds between retries.",
            "description": ".. versionadded:: 1.5\nReturns\n-------"
          },
          "delay": {
            "type": "float, default=1.0",
            "description": ""
          },
          "dataset": {
            "type": ":class:`~sklearn.utils.Bunch`",
            "description": "Dictionary-like object, with the following attributes."
          },
          "data": {
            "type": "ndarray, shape (20640, 8)",
            "description": ""
          },
          "Each": {
            "type": "value corresponds to the average",
            "description": ""
          },
          "target": {
            "type": "numpy array of shape (20640,)",
            "description": ""
          },
          "house": {
            "type": "value in units of 100,000.",
            "description": ""
          },
          "feature_names": {
            "type": "list of length 8",
            "description": ""
          },
          "Array": {
            "type": "of ordered feature names used in the dataset.",
            "description": ""
          },
          "DESCR": {
            "type": "str",
            "description": ""
          },
          "Description": {
            "type": "of the California housing dataset.",
            "description": ""
          },
          "frame": {
            "type": "pandas DataFrame",
            "description": ""
          },
          "Only": {
            "type": "present when `as_frame=True`. DataFrame with ``data`` and",
            "description": "``target``.\n.. versionadded:: 0.23\n(data, target) : tuple if ``return_X_y`` is True"
          },
          "A": {
            "type": "tuple of two ndarray. The first containing a 2D array of",
            "description": ""
          },
          "shape": {
            "type": "n_samples, n_features",
            "description": "with each row representing one"
          },
          "sample": {
            "type": "and each column representing the features. The second",
            "description": ""
          },
          "ndarray": {
            "type": "of shape (n_samples,) containing the target samples.",
            "description": ".. versionadded:: 0.20\nNotes\n-----"
          },
          "This": {
            "type": "dataset consists of 20,640 samples and 9 features.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import fetch_california_housing\n>>> housing = fetch_california_housing()\n>>> print(housing.data.shape, housing.target.shape)\n(20640, 8) (20640,)\n>>> print(housing.feature_names[0:6])\n['MedInc', 'HouseAge', 'AveRooms', 'AveBedrms', 'Population', 'AveOccup']"
          }
        },
        "returns": "-------\n    dataset : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : ndarray, shape (20640, 8)\n            Each row corresponding to the 8 feature values in order.\n            If ``as_frame`` is True, ``data`` is a pandas object.\n        target : numpy array of shape (20640,)\n            Each value corresponds to the average\n            house value in units of 100,000.\n            If ``as_frame`` is True, ``target`` is a pandas object.\n        feature_names : list of length 8\n            Array of ordered feature names used in the dataset.\n        DESCR : str\n            Description of the California housing dataset.\n        frame : pandas DataFrame\n            Only present when `as_frame=True`. DataFrame with ``data`` and\n            ``target``.\n\n            .. versionadded:: 0.23\n\n    (data, target) : tuple if ``return_X_y`` is True\n        A tuple of two ndarray. The first containing a 2D array of\n        shape (n_samples, n_features) with each row representing one\n        sample and each column representing the features. The second\n        ndarray of shape (n_samples,) containing the target samples.\n\n        .. versionadded:: 0.20\n\n    Notes\n    -----\n\n    This dataset consists of 20,640 samples and 9 features.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import fetch_california_housing\n    >>> housing = fetch_california_housing()\n    >>> print(housing.data.shape, housing.target.shape)\n    (20640, 8) (20640,)\n    >>> print(housing.feature_names[0:6])\n    ['MedInc', 'HouseAge', 'AveRooms', 'AveBedrms', 'Population', 'AveOccup']",
        "raises": "",
        "see_also": "",
        "notes": "-----\n\n    This dataset consists of 20,640 samples and 9 features.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import fetch_california_housing\n    >>> housing = fetch_california_housing()\n    >>> print(housing.data.shape, housing.target.shape)\n    (20640, 8) (20640,)\n    >>> print(housing.feature_names[0:6])\n    ['MedInc', 'HouseAge', 'AveRooms', 'AveBedrms', 'Population', 'AveOccup']",
        "examples": "--------\n    >>> from sklearn.datasets import fetch_california_housing\n    >>> housing = fetch_california_housing()\n    >>> print(housing.data.shape, housing.target.shape)\n    (20640, 8) (20640,)\n    >>> print(housing.feature_names[0:6])\n    ['MedInc', 'HouseAge', 'AveRooms', 'AveBedrms', 'Population', 'AveOccup']"
      }
    },
    {
      "name": "fetch_covtype",
      "signature": "fetch_covtype(*, data_home=None, download_if_missing=True, random_state=None, shuffle=False, return_X_y=False, as_frame=False, n_retries=3, delay=1.0)",
      "documentation": {
        "description": "Load the covertype dataset (classification).\n\n    Download it if necessary.\n\n    =================   ============\n    Classes                        7\n    Samples total             581012\n    Dimensionality                54\n    Features                     int\n    =================   ============\n\n    Read more in the :ref:`User Guide <covtype_dataset>`.\n\n    Parameters\n    ----------\n    data_home : str or path-like, default=None\n        Specify another download and cache folder for the datasets. By default\n        all scikit-learn data is stored in '~/scikit_learn_data' subfolders.\n\n    download_if_missing : bool, default=True\n        If False, raise an OSError if the data is not locally available\n        instead of trying to download the data from the source site.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset shuffling. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    shuffle : bool, default=False\n        Whether to shuffle dataset.\n\n    return_X_y : bool, default=False\n        If True, returns ``(data.data, data.target)`` instead of a Bunch\n        object.\n\n        .. versionadded:: 0.20\n\n    as_frame : bool, default=False\n        If True, the data is a pandas DataFrame including columns with\n        appropriate dtypes (numeric). The target is a pandas DataFrame or\n        Series depending on the number of target columns. If `return_X_y` is\n        True, then (`data`, `target`) will be pandas DataFrames or Series as\n        described below.\n\n        .. versionadded:: 0.24\n\n    n_retries : int, default=3\n        Number of retries when HTTP errors are encountered.\n\n        .. versionadded:: 1.5\n\n    delay : float, default=1.0\n        Number of seconds between retries.\n\n        .. versionadded:: 1.5\n\n    Returns\n    -------\n    dataset : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : ndarray of shape (581012, 54)\n            Each row corresponds to the 54 features in the dataset.\n        target : ndarray of shape (581012,)\n            Each value corresponds to one of\n            the 7 forest covertypes with values\n            ranging between 1 to 7.\n        frame : dataframe of shape (581012, 55)\n            Only present when `as_frame=True`. Contains `data` and `target`.\n        DESCR : str\n            Description of the forest covertype dataset.\n        feature_names : list\n            The names of the dataset columns.\n        target_names: list\n            The names of the target columns.\n\n    (data, target) : tuple if ``return_X_y`` is True\n        A tuple of two ndarray. The first containing a 2D array of\n        shape (n_samples, n_features) with each row representing one\n        sample and each column representing the features. The second\n        ndarray of shape (n_samples,) containing the target samples.\n\n        .. versionadded:: 0.20",
        "parameters": {
          "data_home": {
            "type": "str or path",
            "description": "like, default=None"
          },
          "Specify": {
            "type": "another download and cache folder for the datasets. By default",
            "description": ""
          },
          "all": {
            "type": "scikit-learn data is stored in '~/scikit_learn_data' subfolders.",
            "description": ""
          },
          "download_if_missing": {
            "type": "bool, default=True",
            "description": ""
          },
          "If": {
            "type": "True, the data is a pandas DataFrame including columns with",
            "description": ""
          },
          "instead": {
            "type": "of trying to download the data from the source site.",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset shuffling. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "term:`Glossary <random_state>`.",
            "description": ""
          },
          "shuffle": {
            "type": "bool, default=False",
            "description": ""
          },
          "Whether": {
            "type": "to shuffle dataset.",
            "description": ""
          },
          "return_X_y": {
            "type": "bool, default=False",
            "description": ""
          },
          "as_frame": {
            "type": "bool, default=False",
            "description": ""
          },
          "appropriate": {
            "type": "dtypes (numeric). The target is a pandas DataFrame or",
            "description": ""
          },
          "Series": {
            "type": "depending on the number of target columns. If `return_X_y` is",
            "description": "True, then (`data`, `target`) will be pandas DataFrames or Series as"
          },
          "described": {
            "type": "below.",
            "description": ".. versionadded:: 0.24"
          },
          "n_retries": {
            "type": "int, default=3",
            "description": ""
          },
          "Number": {
            "type": "of seconds between retries.",
            "description": ".. versionadded:: 1.5\nReturns\n-------"
          },
          "delay": {
            "type": "float, default=1.0",
            "description": ""
          },
          "dataset": {
            "type": ":class:`~sklearn.utils.Bunch`",
            "description": "Dictionary-like object, with the following attributes."
          },
          "data": {
            "type": "ndarray of shape (581012, 54)",
            "description": ""
          },
          "Each": {
            "type": "value corresponds to one of",
            "description": ""
          },
          "target": {
            "type": "ndarray of shape (581012,)",
            "description": ""
          },
          "the": {
            "type": "7 forest covertypes with values",
            "description": ""
          },
          "ranging": {
            "type": "between 1 to 7.",
            "description": ""
          },
          "frame": {
            "type": "dataframe of shape (581012, 55)",
            "description": ""
          },
          "Only": {
            "type": "present when `as_frame=True`. Contains `data` and `target`.",
            "description": ""
          },
          "DESCR": {
            "type": "str",
            "description": ""
          },
          "Description": {
            "type": "of the forest covertype dataset.",
            "description": ""
          },
          "feature_names": {
            "type": "list",
            "description": ""
          },
          "The": {
            "type": "names of the target columns.",
            "description": "(data, target) : tuple if ``return_X_y`` is True"
          },
          "target_names": {
            "type": "list",
            "description": ""
          },
          "A": {
            "type": "tuple of two ndarray. The first containing a 2D array of",
            "description": ""
          },
          "shape": {
            "type": "n_samples, n_features",
            "description": "with each row representing one"
          },
          "sample": {
            "type": "and each column representing the features. The second",
            "description": ""
          },
          "ndarray": {
            "type": "of shape (n_samples,) containing the target samples.",
            "description": ".. versionadded:: 0.20\nExamples\n--------\n>>> from sklearn.datasets import fetch_covtype\n>>> cov_type = fetch_covtype()\n>>> cov_type.data.shape\n(581012, 54)\n>>> cov_type.target.shape\n(581012,)\n>>> # Let's check the 4 first feature names\n>>> cov_type.feature_names[:4]\n['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology']"
          }
        },
        "returns": "-------\n    dataset : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : ndarray of shape (581012, 54)\n            Each row corresponds to the 54 features in the dataset.\n        target : ndarray of shape (581012,)\n            Each value corresponds to one of\n            the 7 forest covertypes with values\n            ranging between 1 to 7.\n        frame : dataframe of shape (581012, 55)\n            Only present when `as_frame=True`. Contains `data` and `target`.\n        DESCR : str\n            Description of the forest covertype dataset.\n        feature_names : list\n            The names of the dataset columns.\n        target_names: list\n            The names of the target columns.\n\n    (data, target) : tuple if ``return_X_y`` is True\n        A tuple of two ndarray. The first containing a 2D array of\n        shape (n_samples, n_features) with each row representing one\n        sample and each column representing the features. The second\n        ndarray of shape (n_samples,) containing the target samples.\n\n        .. versionadded:: 0.20\n\n    Examples\n    --------\n    >>> from sklearn.datasets import fetch_covtype\n    >>> cov_type = fetch_covtype()\n    >>> cov_type.data.shape\n    (581012, 54)\n    >>> cov_type.target.shape\n    (581012,)\n    >>> # Let's check the 4 first feature names\n    >>> cov_type.feature_names[:4]\n    ['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology']",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import fetch_covtype\n    >>> cov_type = fetch_covtype()\n    >>> cov_type.data.shape\n    (581012, 54)\n    >>> cov_type.target.shape\n    (581012,)\n    >>> # Let's check the 4 first feature names\n    >>> cov_type.feature_names[:4]\n    ['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology']"
      }
    },
    {
      "name": "fetch_file",
      "signature": "fetch_file(url, folder=None, local_filename=None, sha256=None, n_retries=3, delay=1)",
      "documentation": {
        "description": "Fetch a file from the web if not already present in the local folder.\n\n    If the file already exists locally (and the SHA256 checksums match when\n    provided), the path to the local file is returned without re-downloading.\n\n    .. versionadded:: 1.6\n\n    Parameters\n    ----------\n    url : str\n        URL of the file to download.\n\n    folder : str or Path, default=None\n        Directory to save the file to. If None, the file is downloaded in a\n        folder with a name derived from the URL host name and path under\n        scikit-learn data home folder.\n\n    local_filename : str, default=None\n        Name of the file to save. If None, the filename is inferred from the\n        URL.\n\n    sha256 : str, default=None\n        SHA256 checksum of the file. If None, no checksum is verified.\n\n    n_retries : int, default=3\n        Number of retries when HTTP errors are encountered.\n\n    delay : int, default=1\n        Number of seconds between retries.",
        "parameters": {
          "url": {
            "type": "str",
            "description": ""
          },
          "URL": {
            "type": "of the file to download.",
            "description": ""
          },
          "folder": {
            "type": "with a name derived from the URL host name and path under",
            "description": "scikit-learn data home folder."
          },
          "Directory": {
            "type": "to save the file to. If None, the file is downloaded in a",
            "description": ""
          },
          "local_filename": {
            "type": "str, default=None",
            "description": ""
          },
          "Name": {
            "type": "of the file to save. If None, the filename is inferred from the",
            "description": "URL."
          },
          "sha256": {
            "type": "str, default=None",
            "description": ""
          },
          "SHA256": {
            "type": "checksum of the file. If None, no checksum is verified.",
            "description": ""
          },
          "n_retries": {
            "type": "int, default=3",
            "description": ""
          },
          "Number": {
            "type": "of seconds between retries.",
            "description": "Returns\n-------"
          },
          "delay": {
            "type": "int, default=1",
            "description": ""
          },
          "file_path": {
            "type": "Path",
            "description": ""
          },
          "Full": {
            "type": "path of the downloaded file.",
            "description": ""
          }
        },
        "returns": "-------\n    file_path : Path\n        Full path of the downloaded file.",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "fetch_kddcup99",
      "signature": "fetch_kddcup99(*, subset=None, data_home=None, shuffle=False, random_state=None, percent10=True, download_if_missing=True, return_X_y=False, as_frame=False, n_retries=3, delay=1.0)",
      "documentation": {
        "description": "Load the kddcup99 dataset (classification).\n\n    Download it if necessary.\n\n    =================   ====================================\n    Classes                                               23\n    Samples total                                    4898431\n    Dimensionality                                        41\n    Features            discrete (int) or continuous (float)\n    =================   ====================================\n\n    Read more in the :ref:`User Guide <kddcup99_dataset>`.\n\n    .. versionadded:: 0.18\n\n    Parameters\n    ----------\n    subset : {'SA', 'SF', 'http', 'smtp'}, default=None\n        To return the corresponding classical subsets of kddcup 99.\n        If None, return the entire kddcup 99 dataset.\n\n    data_home : str or path-like, default=None\n        Specify another download and cache folder for the datasets. By default\n        all scikit-learn data is stored in '~/scikit_learn_data' subfolders.\n\n        .. versionadded:: 0.19\n\n    shuffle : bool, default=False\n        Whether to shuffle dataset.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset shuffling and for\n        selection of abnormal samples if `subset='SA'`. Pass an int for\n        reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    percent10 : bool, default=True\n        Whether to load only 10 percent of the data.\n\n    download_if_missing : bool, default=True\n        If False, raise an OSError if the data is not locally available\n        instead of trying to download the data from the source site.\n\n    return_X_y : bool, default=False\n        If True, returns ``(data, target)`` instead of a Bunch object. See\n        below for more information about the `data` and `target` object.\n\n        .. versionadded:: 0.20\n\n    as_frame : bool, default=False\n        If `True`, returns a pandas Dataframe for the ``data`` and ``target``\n        objects in the `Bunch` returned object; `Bunch` return object will also\n        have a ``frame`` member.\n\n        .. versionadded:: 0.24\n\n    n_retries : int, default=3\n        Number of retries when HTTP errors are encountered.\n\n        .. versionadded:: 1.5\n\n    delay : float, default=1.0\n        Number of seconds between retries.\n\n        .. versionadded:: 1.5",
        "parameters": {
          "subset": {
            "type": "{'SA', 'SF', 'http', 'smtp'}, default=None",
            "description": ""
          },
          "To": {
            "type": "return the corresponding classical subsets of kddcup 99.",
            "description": ""
          },
          "If": {
            "type": "`True`, returns a pandas Dataframe for the ``data`` and ``target``",
            "description": ""
          },
          "data_home": {
            "type": "str or path",
            "description": "like, default=None"
          },
          "Specify": {
            "type": "another download and cache folder for the datasets. By default",
            "description": ""
          },
          "all": {
            "type": "scikit-learn data is stored in '~/scikit_learn_data' subfolders.",
            "description": ".. versionadded:: 0.19"
          },
          "shuffle": {
            "type": "bool, default=False",
            "description": ""
          },
          "Whether": {
            "type": "to load only 10 percent of the data.",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset shuffling and for",
            "description": ""
          },
          "selection": {
            "type": "of abnormal samples if `subset='SA'`. Pass an int for",
            "description": ""
          },
          "reproducible": {
            "type": "output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "term:`Glossary <random_state>`.",
            "description": ""
          },
          "percent10": {
            "type": "bool, default=True",
            "description": ""
          },
          "download_if_missing": {
            "type": "bool, default=True",
            "description": ""
          },
          "instead": {
            "type": "of trying to download the data from the source site.",
            "description": ""
          },
          "return_X_y": {
            "type": "bool, default=False",
            "description": ""
          },
          "below": {
            "type": "for more information about the `data` and `target` object.",
            "description": ".. versionadded:: 0.20"
          },
          "as_frame": {
            "type": "bool, default=False",
            "description": ""
          },
          "objects": {
            "type": "in the `Bunch` returned object; `Bunch` return object will also",
            "description": ""
          },
          "have": {
            "type": "a ``frame`` member.",
            "description": ".. versionadded:: 0.24"
          },
          "n_retries": {
            "type": "int, default=3",
            "description": ""
          },
          "Number": {
            "type": "of seconds between retries.",
            "description": ".. versionadded:: 1.5\nReturns\n-------"
          },
          "delay": {
            "type": "float, default=1.0",
            "description": ""
          },
          "data": {
            "type": "{ndarray, dataframe} of shape (494021, 41)",
            "description": ""
          },
          "The": {
            "type": "names of the target columns",
            "description": "(data, target) : tuple if ``return_X_y`` is True"
          },
          "pandas": {
            "type": "DataFrame.",
            "description": ""
          },
          "target": {
            "type": "{ndarray, series} of shape (494021,)",
            "description": ""
          },
          "will": {
            "type": "be a pandas Series.",
            "description": ""
          },
          "frame": {
            "type": "dataframe of shape (494021, 42)",
            "description": ""
          },
          "Only": {
            "type": "present when `as_frame=True`. Contains `data` and `target`.",
            "description": ""
          },
          "DESCR": {
            "type": "str",
            "description": ""
          },
          "feature_names": {
            "type": "list",
            "description": ""
          },
          "target_names": {
            "type": "list",
            "description": ""
          },
          "A": {
            "type": "tuple of two ndarray. The first containing a 2D array of",
            "description": ""
          },
          "shape": {
            "type": "n_samples, n_features",
            "description": "with each row representing one"
          },
          "sample": {
            "type": "and each column representing the features. The second",
            "description": ""
          },
          "ndarray": {
            "type": "of shape (n_samples,) containing the target samples.",
            "description": ".. versionadded:: 0.20"
          }
        },
        "returns": "-------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : {ndarray, dataframe} of shape (494021, 41)\n            The data matrix to learn. If `as_frame=True`, `data` will be a\n            pandas DataFrame.\n        target : {ndarray, series} of shape (494021,)\n            The regression target for each sample. If `as_frame=True`, `target`\n            will be a pandas Series.\n        frame : dataframe of shape (494021, 42)\n            Only present when `as_frame=True`. Contains `data` and `target`.\n        DESCR : str\n            The full description of the dataset.\n        feature_names : list\n            The names of the dataset columns\n        target_names: list\n            The names of the target columns\n\n    (data, target) : tuple if ``return_X_y`` is True\n        A tuple of two ndarray. The first containing a 2D array of\n        shape (n_samples, n_features) with each row representing one\n        sample and each column representing the features. The second\n        ndarray of shape (n_samples,) containing the target samples.\n\n        .. versionadded:: 0.20",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "fetch_lfw_pairs",
      "signature": "fetch_lfw_pairs(*, subset='train', data_home=None, funneled=True, resize=0.5, color=False, slice_=(slice(70, 195, None), slice(78, 172, None)), download_if_missing=True, n_retries=3, delay=1.0)",
      "documentation": {
        "description": "Load the Labeled Faces in the Wild (LFW) pairs dataset (classification).\n\n    Download it if necessary.\n\n    =================   =======================\n    Classes                                   2\n    Samples total                         13233\n    Dimensionality                         5828\n    Features            real, between 0 and 255\n    =================   =======================\n\n    In the official `README.txt`_ this task is described as the\n    \"Restricted\" task.  As I am not sure as to implement the\n    \"Unrestricted\" variant correctly, I left it as unsupported for now.\n\n    .. _`README.txt`: http://vis-www.cs.umass.edu/lfw/README.txt\n\n    The original images are 250 x 250 pixels, but the default slice and resize\n    arguments reduce them to 62 x 47.\n\n    Read more in the :ref:`User Guide <labeled_faces_in_the_wild_dataset>`.\n\n    Parameters\n    ----------\n    subset : {'train', 'test', '10_folds'}, default='train'\n        Select the dataset to load: 'train' for the development training\n        set, 'test' for the development test set, and '10_folds' for the\n        official evaluation set that is meant to be used with a 10-folds\n        cross validation.\n\n    data_home : str or path-like, default=None\n        Specify another download and cache folder for the datasets. By\n        default all scikit-learn data is stored in '~/scikit_learn_data'\n        subfolders.\n\n    funneled : bool, default=True\n        Download and use the funneled variant of the dataset.\n\n    resize : float, default=0.5\n        Ratio used to resize the each face picture.\n\n    color : bool, default=False\n        Keep the 3 RGB channels instead of averaging them to a single\n        gray level channel. If color is True the shape of the data has\n        one more dimension than the shape with color = False.\n\n    slice_ : tuple of slice, default=(slice(70, 195), slice(78, 172))\n        Provide a custom 2D slice (height, width) to extract the\n        'interesting' part of the jpeg files and avoid use statistical\n        correlation from the background.\n\n    download_if_missing : bool, default=True\n        If False, raise an OSError if the data is not locally available\n        instead of trying to download the data from the source site.\n\n    n_retries : int, default=3\n        Number of retries when HTTP errors are encountered.\n\n        .. versionadded:: 1.5\n\n    delay : float, default=1.0\n        Number of seconds between retries.\n\n        .. versionadded:: 1.5\n\n    Returns\n    -------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : ndarray of shape (2200, 5828). Shape depends on ``subset``.\n            Each row corresponds to 2 ravel'd face images\n            of original size 62 x 47 pixels.\n            Changing the ``slice_``, ``resize`` or ``subset`` parameters\n            will change the shape of the output.\n        pairs : ndarray of shape (2200, 2, 62, 47). Shape depends on ``subset``\n            Each row has 2 face images corresponding\n            to same or different person from the dataset\n            containing 5749 people. Changing the ``slice_``,\n            ``resize`` or ``subset`` parameters will change the shape of the\n            output.\n        target : numpy array of shape (2200,). Shape depends on ``subset``.\n            Labels associated to each pair of images.\n            The two label values being different persons or the same person.\n        target_names : numpy array of shape (2,)\n            Explains the target values of the target array.\n            0 corresponds to \"Different person\", 1 corresponds to \"same person\".\n        DESCR : str\n            Description of the Labeled Faces in the Wild (LFW) dataset.",
        "parameters": {
          "subset": {
            "type": "{'train', 'test', '10_folds'}, default='train'",
            "description": ""
          },
          "Select": {
            "type": "the dataset to load: 'train' for the development training",
            "description": "set, 'test' for the development test set, and '10_folds' for the"
          },
          "official": {
            "type": "evaluation set that is meant to be used with a 10-folds",
            "description": ""
          },
          "cross": {
            "type": "validation.",
            "description": ""
          },
          "data_home": {
            "type": "str or path",
            "description": "like, default=None"
          },
          "Specify": {
            "type": "another download and cache folder for the datasets. By",
            "description": ""
          },
          "default": {
            "type": "all scikit-learn data is stored in '~/scikit_learn_data'",
            "description": "subfolders."
          },
          "funneled": {
            "type": "bool, default=True",
            "description": ""
          },
          "Download": {
            "type": "and use the funneled variant of the dataset.",
            "description": ""
          },
          "resize": {
            "type": "float, default=0.5",
            "description": ""
          },
          "Ratio": {
            "type": "used to resize the each face picture.",
            "description": ""
          },
          "color": {
            "type": "bool, default=False",
            "description": ""
          },
          "Keep": {
            "type": "the 3 RGB channels instead of averaging them to a single",
            "description": ""
          },
          "gray": {
            "type": "level channel. If color is True the shape of the data has",
            "description": ""
          },
          "one": {
            "type": "more dimension than the shape with color = False.",
            "description": ""
          },
          "slice_": {
            "type": "tuple of slice, default=(slice(70, 195), slice(78, 172))",
            "description": ""
          },
          "Provide": {
            "type": "a custom 2D slice (height, width) to extract the",
            "description": "'interesting' part of the jpeg files and avoid use statistical"
          },
          "correlation": {
            "type": "from the background.",
            "description": ""
          },
          "download_if_missing": {
            "type": "bool, default=True",
            "description": ""
          },
          "If": {
            "type": "False, raise an OSError if the data is not locally available",
            "description": ""
          },
          "instead": {
            "type": "of trying to download the data from the source site.",
            "description": ""
          },
          "n_retries": {
            "type": "int, default=3",
            "description": ""
          },
          "Number": {
            "type": "of seconds between retries.",
            "description": ".. versionadded:: 1.5\nReturns\n-------"
          },
          "delay": {
            "type": "float, default=1.0",
            "description": ""
          },
          "data": {
            "type": "ndarray of shape (2200, 5828). Shape depends on ``subset``.",
            "description": ""
          },
          "Each": {
            "type": "row has 2 face images corresponding",
            "description": ""
          },
          "of": {
            "type": "original size 62 x 47 pixels.",
            "description": ""
          },
          "Changing": {
            "type": "the ``slice_``, ``resize`` or ``subset`` parameters",
            "description": ""
          },
          "will": {
            "type": "change the shape of the output.",
            "description": ""
          },
          "pairs": {
            "type": "ndarray of shape (2200, 2, 62, 47). Shape depends on ``subset``",
            "description": ""
          },
          "to": {
            "type": "same or different person from the dataset",
            "description": ""
          },
          "containing": {
            "type": "5749 people. Changing the ``slice_``,",
            "description": "``resize`` or ``subset`` parameters will change the shape of the\noutput."
          },
          "target": {
            "type": "numpy array of shape (2200,). Shape depends on ``subset``.",
            "description": ""
          },
          "Labels": {
            "type": "associated to each pair of images.",
            "description": ""
          },
          "The": {
            "type": "two label values being different persons or the same person.",
            "description": ""
          },
          "target_names": {
            "type": "numpy array of shape (2,)",
            "description": ""
          },
          "Explains": {
            "type": "the target values of the target array.",
            "description": ""
          },
          "0": {
            "type": "corresponds to \"Different person\", 1 corresponds to \"same person\".",
            "description": ""
          },
          "DESCR": {
            "type": "str",
            "description": ""
          },
          "Description": {
            "type": "of the Labeled Faces in the Wild (LFW) dataset.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import fetch_lfw_pairs\n>>> lfw_pairs_train = fetch_lfw_pairs(subset='train')\n>>> list(lfw_pairs_train.target_names)\n[np.str_('Different persons'), np.str_('Same person')]\n>>> lfw_pairs_train.pairs.shape\n(2200, 2, 62, 47)\n>>> lfw_pairs_train.data.shape\n(2200, 5828)\n>>> lfw_pairs_train.target.shape\n(2200,)"
          },
          "reduce": {
            "type": "them to 62 x 47.",
            "description": ""
          },
          "Read": {
            "type": "more in the :ref:`User Guide <labeled_faces_in_the_wild_dataset>`.",
            "description": "Parameters\n----------"
          }
        },
        "returns": "-------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : ndarray of shape (2200, 5828). Shape depends on ``subset``.\n            Each row corresponds to 2 ravel'd face images\n            of original size 62 x 47 pixels.\n            Changing the ``slice_``, ``resize`` or ``subset`` parameters\n            will change the shape of the output.\n        pairs : ndarray of shape (2200, 2, 62, 47). Shape depends on ``subset``\n            Each row has 2 face images corresponding\n            to same or different person from the dataset\n            containing 5749 people. Changing the ``slice_``,\n            ``resize`` or ``subset`` parameters will change the shape of the\n            output.\n        target : numpy array of shape (2200,). Shape depends on ``subset``.\n            Labels associated to each pair of images.\n            The two label values being different persons or the same person.\n        target_names : numpy array of shape (2,)\n            Explains the target values of the target array.\n            0 corresponds to \"Different person\", 1 corresponds to \"same person\".\n        DESCR : str\n            Description of the Labeled Faces in the Wild (LFW) dataset.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import fetch_lfw_pairs\n    >>> lfw_pairs_train = fetch_lfw_pairs(subset='train')\n    >>> list(lfw_pairs_train.target_names)\n    [np.str_('Different persons'), np.str_('Same person')]\n    >>> lfw_pairs_train.pairs.shape\n    (2200, 2, 62, 47)\n    >>> lfw_pairs_train.data.shape\n    (2200, 5828)\n    >>> lfw_pairs_train.target.shape\n    (2200,)",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import fetch_lfw_pairs\n    >>> lfw_pairs_train = fetch_lfw_pairs(subset='train')\n    >>> list(lfw_pairs_train.target_names)\n    [np.str_('Different persons'), np.str_('Same person')]\n    >>> lfw_pairs_train.pairs.shape\n    (2200, 2, 62, 47)\n    >>> lfw_pairs_train.data.shape\n    (2200, 5828)\n    >>> lfw_pairs_train.target.shape\n    (2200,)"
      }
    },
    {
      "name": "fetch_lfw_people",
      "signature": "fetch_lfw_people(*, data_home=None, funneled=True, resize=0.5, min_faces_per_person=0, color=False, slice_=(slice(70, 195, None), slice(78, 172, None)), download_if_missing=True, return_X_y=False, n_retries=3, delay=1.0)",
      "documentation": {
        "description": "Load the Labeled Faces in the Wild (LFW) people dataset (classification).\n\n    Download it if necessary.\n\n    =================   =======================\n    Classes                                5749\n    Samples total                         13233\n    Dimensionality                         5828\n    Features            real, between 0 and 255\n    =================   =======================\n\n    For a usage example of this dataset, see\n    :ref:`sphx_glr_auto_examples_applications_plot_face_recognition.py`.\n\n    Read more in the :ref:`User Guide <labeled_faces_in_the_wild_dataset>`.\n\n    Parameters\n    ----------\n    data_home : str or path-like, default=None\n        Specify another download and cache folder for the datasets. By default\n        all scikit-learn data is stored in '~/scikit_learn_data' subfolders.\n\n    funneled : bool, default=True\n        Download and use the funneled variant of the dataset.\n\n    resize : float or None, default=0.5\n        Ratio used to resize the each face picture. If `None`, no resizing is\n        performed.\n\n    min_faces_per_person : int, default=None\n        The extracted dataset will only retain pictures of people that have at\n        least `min_faces_per_person` different pictures.\n\n    color : bool, default=False\n        Keep the 3 RGB channels instead of averaging them to a single\n        gray level channel. If color is True the shape of the data has\n        one more dimension than the shape with color = False.\n\n    slice_ : tuple of slice, default=(slice(70, 195), slice(78, 172))\n        Provide a custom 2D slice (height, width) to extract the\n        'interesting' part of the jpeg files and avoid use statistical\n        correlation from the background.\n\n    download_if_missing : bool, default=True\n        If False, raise an OSError if the data is not locally available\n        instead of trying to download the data from the source site.\n\n    return_X_y : bool, default=False\n        If True, returns ``(dataset.data, dataset.target)`` instead of a Bunch\n        object. See below for more information about the `dataset.data` and\n        `dataset.target` object.\n\n        .. versionadded:: 0.20\n\n    n_retries : int, default=3\n        Number of retries when HTTP errors are encountered.\n\n        .. versionadded:: 1.5\n\n    delay : float, default=1.0\n        Number of seconds between retries.\n\n        .. versionadded:: 1.5\n\n    Returns\n    -------\n    dataset : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : numpy array of shape (13233, 2914)\n            Each row corresponds to a ravelled face image\n            of original size 62 x 47 pixels.\n            Changing the ``slice_`` or resize parameters will change the\n            shape of the output.\n        images : numpy array of shape (13233, 62, 47)\n            Each row is a face image corresponding to one of the 5749 people in\n            the dataset. Changing the ``slice_``\n            or resize parameters will change the shape of the output.\n        target : numpy array of shape (13233,)\n            Labels associated to each face image.\n            Those labels range from 0-5748 and correspond to the person IDs.\n        target_names : numpy array of shape (5749,)\n            Names of all persons in the dataset.\n            Position in array corresponds to the person ID in the target array.\n        DESCR : str\n            Description of the Labeled Faces in the Wild (LFW) dataset.\n\n    (data, target) : tuple if ``return_X_y`` is True\n        A tuple of two ndarray. The first containing a 2D array of\n        shape (n_samples, n_features) with each row representing one\n        sample and each column representing the features. The second\n        ndarray of shape (n_samples,) containing the target samples.\n\n        .. versionadded:: 0.20",
        "parameters": {
          "data_home": {
            "type": "str or path",
            "description": "like, default=None"
          },
          "Specify": {
            "type": "another download and cache folder for the datasets. By default",
            "description": ""
          },
          "all": {
            "type": "scikit-learn data is stored in '~/scikit_learn_data' subfolders.",
            "description": ""
          },
          "funneled": {
            "type": "bool, default=True",
            "description": ""
          },
          "Download": {
            "type": "and use the funneled variant of the dataset.",
            "description": ""
          },
          "resize": {
            "type": "float or None, default=0.5",
            "description": ""
          },
          "Ratio": {
            "type": "used to resize the each face picture. If `None`, no resizing is",
            "description": "performed."
          },
          "min_faces_per_person": {
            "type": "int, default=None",
            "description": ""
          },
          "The": {
            "type": "extracted dataset will only retain pictures of people that have at",
            "description": ""
          },
          "least": {
            "type": "`min_faces_per_person` different pictures.",
            "description": ""
          },
          "color": {
            "type": "bool, default=False",
            "description": ""
          },
          "Keep": {
            "type": "the 3 RGB channels instead of averaging them to a single",
            "description": ""
          },
          "gray": {
            "type": "level channel. If color is True the shape of the data has",
            "description": ""
          },
          "one": {
            "type": "more dimension than the shape with color = False.",
            "description": ""
          },
          "slice_": {
            "type": "tuple of slice, default=(slice(70, 195), slice(78, 172))",
            "description": ""
          },
          "Provide": {
            "type": "a custom 2D slice (height, width) to extract the",
            "description": "'interesting' part of the jpeg files and avoid use statistical"
          },
          "correlation": {
            "type": "from the background.",
            "description": ""
          },
          "download_if_missing": {
            "type": "bool, default=True",
            "description": ""
          },
          "If": {
            "type": "True, returns ``(dataset.data, dataset.target)`` instead of a Bunch",
            "description": "object. See below for more information about the `dataset.data` and\n`dataset.target` object.\n.. versionadded:: 0.20"
          },
          "instead": {
            "type": "of trying to download the data from the source site.",
            "description": ""
          },
          "return_X_y": {
            "type": "bool, default=False",
            "description": ""
          },
          "n_retries": {
            "type": "int, default=3",
            "description": ""
          },
          "Number": {
            "type": "of seconds between retries.",
            "description": ".. versionadded:: 1.5\nReturns\n-------"
          },
          "delay": {
            "type": "float, default=1.0",
            "description": ""
          },
          "dataset": {
            "type": ":class:`~sklearn.utils.Bunch`",
            "description": "Dictionary-like object, with the following attributes."
          },
          "data": {
            "type": "numpy array of shape (13233, 2914)",
            "description": ""
          },
          "Each": {
            "type": "row is a face image corresponding to one of the 5749 people in",
            "description": ""
          },
          "of": {
            "type": "original size 62 x 47 pixels.",
            "description": ""
          },
          "Changing": {
            "type": "the ``slice_`` or resize parameters will change the",
            "description": ""
          },
          "shape": {
            "type": "n_samples, n_features",
            "description": "with each row representing one"
          },
          "images": {
            "type": "numpy array of shape (13233, 62, 47)",
            "description": ""
          },
          "the": {
            "type": "dataset. Changing the ``slice_``",
            "description": ""
          },
          "or": {
            "type": "resize parameters will change the shape of the output.",
            "description": ""
          },
          "target": {
            "type": "numpy array of shape (13233,)",
            "description": ""
          },
          "Labels": {
            "type": "associated to each face image.",
            "description": ""
          },
          "Those": {
            "type": "labels range from 0-5748 and correspond to the person IDs.",
            "description": ""
          },
          "target_names": {
            "type": "numpy array of shape (5749,)",
            "description": ""
          },
          "Names": {
            "type": "of all persons in the dataset.",
            "description": ""
          },
          "Position": {
            "type": "in array corresponds to the person ID in the target array.",
            "description": ""
          },
          "DESCR": {
            "type": "str",
            "description": ""
          },
          "Description": {
            "type": "of the Labeled Faces in the Wild (LFW) dataset.",
            "description": "(data, target) : tuple if ``return_X_y`` is True"
          },
          "A": {
            "type": "tuple of two ndarray. The first containing a 2D array of",
            "description": ""
          },
          "sample": {
            "type": "and each column representing the features. The second",
            "description": ""
          },
          "ndarray": {
            "type": "of shape (n_samples,) containing the target samples.",
            "description": ".. versionadded:: 0.20\nExamples\n--------\n>>> from sklearn.datasets import fetch_lfw_people\n>>> lfw_people = fetch_lfw_people()\n>>> lfw_people.data.shape\n(13233, 2914)\n>>> lfw_people.target.shape\n(13233,)\n>>> for name in lfw_people.target_names[:5]:\n...    print(name)"
          },
          "AJ": {
            "type": "Lamas",
            "description": ""
          },
          "Aaron": {
            "type": "Patterson",
            "description": ""
          }
        },
        "returns": "-------\n    dataset : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : numpy array of shape (13233, 2914)\n            Each row corresponds to a ravelled face image\n            of original size 62 x 47 pixels.\n            Changing the ``slice_`` or resize parameters will change the\n            shape of the output.\n        images : numpy array of shape (13233, 62, 47)\n            Each row is a face image corresponding to one of the 5749 people in\n            the dataset. Changing the ``slice_``\n            or resize parameters will change the shape of the output.\n        target : numpy array of shape (13233,)\n            Labels associated to each face image.\n            Those labels range from 0-5748 and correspond to the person IDs.\n        target_names : numpy array of shape (5749,)\n            Names of all persons in the dataset.\n            Position in array corresponds to the person ID in the target array.\n        DESCR : str\n            Description of the Labeled Faces in the Wild (LFW) dataset.\n\n    (data, target) : tuple if ``return_X_y`` is True\n        A tuple of two ndarray. The first containing a 2D array of\n        shape (n_samples, n_features) with each row representing one\n        sample and each column representing the features. The second\n        ndarray of shape (n_samples,) containing the target samples.\n\n        .. versionadded:: 0.20\n\n    Examples\n    --------\n    >>> from sklearn.datasets import fetch_lfw_people\n    >>> lfw_people = fetch_lfw_people()\n    >>> lfw_people.data.shape\n    (13233, 2914)\n    >>> lfw_people.target.shape\n    (13233,)\n    >>> for name in lfw_people.target_names[:5]:\n    ...    print(name)\n    AJ Cook\n    AJ Lamas\n    Aaron Eckhart\n    Aaron Guiel\n    Aaron Patterson",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import fetch_lfw_people\n    >>> lfw_people = fetch_lfw_people()\n    >>> lfw_people.data.shape\n    (13233, 2914)\n    >>> lfw_people.target.shape\n    (13233,)\n    >>> for name in lfw_people.target_names[:5]:\n    ...    print(name)\n    AJ Cook\n    AJ Lamas\n    Aaron Eckhart\n    Aaron Guiel\n    Aaron Patterson"
      }
    },
    {
      "name": "fetch_olivetti_faces",
      "signature": "fetch_olivetti_faces(*, data_home=None, shuffle=False, random_state=0, download_if_missing=True, return_X_y=False, n_retries=3, delay=1.0)",
      "documentation": {
        "description": "Load the Olivetti faces data-set from AT&T (classification).\n\n    Download it if necessary.\n\n    =================   =====================\n    Classes                                40\n    Samples total                         400\n    Dimensionality                       4096\n    Features            real, between 0 and 1\n    =================   =====================\n\n    Read more in the :ref:`User Guide <olivetti_faces_dataset>`.\n\n    Parameters\n    ----------\n    data_home : str or path-like, default=None\n        Specify another download and cache folder for the datasets. By default\n        all scikit-learn data is stored in '~/scikit_learn_data' subfolders.\n\n    shuffle : bool, default=False\n        If True the order of the dataset is shuffled to avoid having\n        images of the same person grouped.\n\n    random_state : int, RandomState instance or None, default=0\n        Determines random number generation for dataset shuffling. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    download_if_missing : bool, default=True\n        If False, raise an OSError if the data is not locally available\n        instead of trying to download the data from the source site.\n\n    return_X_y : bool, default=False\n        If True, returns `(data, target)` instead of a `Bunch` object. See\n        below for more information about the `data` and `target` object.\n\n        .. versionadded:: 0.22\n\n    n_retries : int, default=3\n        Number of retries when HTTP errors are encountered.\n\n        .. versionadded:: 1.5\n\n    delay : float, default=1.0\n        Number of seconds between retries.\n\n        .. versionadded:: 1.5\n\n    Returns\n    -------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data: ndarray, shape (400, 4096)\n            Each row corresponds to a ravelled\n            face image of original size 64 x 64 pixels.\n        images : ndarray, shape (400, 64, 64)\n            Each row is a face image\n            corresponding to one of the 40 subjects of the dataset.\n        target : ndarray, shape (400,)\n            Labels associated to each face image.\n            Those labels are ranging from 0-39 and correspond to the\n            Subject IDs.\n        DESCR : str\n            Description of the modified Olivetti Faces Dataset.\n\n    (data, target) : tuple if `return_X_y=True`\n        Tuple with the `data` and `target` objects described above.\n\n        .. versionadded:: 0.22",
        "parameters": {
          "data_home": {
            "type": "str or path",
            "description": "like, default=None"
          },
          "Specify": {
            "type": "another download and cache folder for the datasets. By default",
            "description": ""
          },
          "all": {
            "type": "scikit-learn data is stored in '~/scikit_learn_data' subfolders.",
            "description": ""
          },
          "shuffle": {
            "type": "bool, default=False",
            "description": ""
          },
          "If": {
            "type": "True, returns `(data, target)` instead of a `Bunch` object. See",
            "description": ""
          },
          "images": {
            "type": "ndarray, shape (400, 64, 64)",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=0",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset shuffling. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "term:`Glossary <random_state>`.",
            "description": ""
          },
          "download_if_missing": {
            "type": "bool, default=True",
            "description": ""
          },
          "instead": {
            "type": "of trying to download the data from the source site.",
            "description": ""
          },
          "return_X_y": {
            "type": "bool, default=False",
            "description": ""
          },
          "below": {
            "type": "for more information about the `data` and `target` object.",
            "description": ".. versionadded:: 0.22"
          },
          "n_retries": {
            "type": "int, default=3",
            "description": ""
          },
          "Number": {
            "type": "of seconds between retries.",
            "description": ".. versionadded:: 1.5\nReturns\n-------"
          },
          "delay": {
            "type": "float, default=1.0",
            "description": ""
          },
          "data": {
            "type": "ndarray, shape (400, 4096)",
            "description": ""
          },
          "Each": {
            "type": "row is a face image",
            "description": ""
          },
          "face": {
            "type": "image of original size 64 x 64 pixels.",
            "description": ""
          },
          "corresponding": {
            "type": "to one of the 40 subjects of the dataset.",
            "description": ""
          },
          "target": {
            "type": "ndarray, shape (400,)",
            "description": ""
          },
          "Labels": {
            "type": "associated to each face image.",
            "description": ""
          },
          "Those": {
            "type": "labels are ranging from 0-39 and correspond to the",
            "description": ""
          },
          "Subject": {
            "type": "IDs.",
            "description": ""
          },
          "DESCR": {
            "type": "str",
            "description": ""
          },
          "Description": {
            "type": "of the modified Olivetti Faces Dataset.",
            "description": "(data, target) : tuple if `return_X_y=True`"
          },
          "Tuple": {
            "type": "with the `data` and `target` objects described above.",
            "description": ".. versionadded:: 0.22\nExamples\n--------\n>>> from sklearn.datasets import fetch_olivetti_faces\n>>> olivetti_faces = fetch_olivetti_faces()\n>>> olivetti_faces.data.shape\n(400, 4096)\n>>> olivetti_faces.target.shape\n(400,)\n>>> olivetti_faces.images.shape\n(400, 64, 64)"
          }
        },
        "returns": "-------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data: ndarray, shape (400, 4096)\n            Each row corresponds to a ravelled\n            face image of original size 64 x 64 pixels.\n        images : ndarray, shape (400, 64, 64)\n            Each row is a face image\n            corresponding to one of the 40 subjects of the dataset.\n        target : ndarray, shape (400,)\n            Labels associated to each face image.\n            Those labels are ranging from 0-39 and correspond to the\n            Subject IDs.\n        DESCR : str\n            Description of the modified Olivetti Faces Dataset.\n\n    (data, target) : tuple if `return_X_y=True`\n        Tuple with the `data` and `target` objects described above.\n\n        .. versionadded:: 0.22\n\n    Examples\n    --------\n    >>> from sklearn.datasets import fetch_olivetti_faces\n    >>> olivetti_faces = fetch_olivetti_faces()\n    >>> olivetti_faces.data.shape\n    (400, 4096)\n    >>> olivetti_faces.target.shape\n    (400,)\n    >>> olivetti_faces.images.shape\n    (400, 64, 64)",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import fetch_olivetti_faces\n    >>> olivetti_faces = fetch_olivetti_faces()\n    >>> olivetti_faces.data.shape\n    (400, 4096)\n    >>> olivetti_faces.target.shape\n    (400,)\n    >>> olivetti_faces.images.shape\n    (400, 64, 64)"
      }
    },
    {
      "name": "fetch_openml",
      "signature": "fetch_openml(name: Optional[str] = None, *, version: Union[str, int] = 'active', data_id: Optional[int] = None, data_home: Union[str, os.PathLike, NoneType] = None, target_column: Union[str, List, NoneType] = 'default-target', cache: bool = True, return_X_y: bool = False, as_frame: Union[str, bool] = 'auto', n_retries: int = 3, delay: float = 1.0, parser: str = 'auto', read_csv_kwargs: Optional[Dict] = None)",
      "documentation": {
        "description": "Fetch dataset from openml by name or dataset id.\n\n    Datasets are uniquely identified by either an integer ID or by a\n    combination of name and version (i.e. there might be multiple\n    versions of the 'iris' dataset). Please give either name or data_id\n    (not both). In case a name is given, a version can also be\n    provided.\n\n    Read more in the :ref:`User Guide <openml>`.\n\n    .. versionadded:: 0.20\n\n    .. note:: EXPERIMENTAL\n\n        The API is experimental (particularly the return value structure),\n        and might have small backward-incompatible changes without notice\n        or warning in future releases.\n\n    Parameters\n    ----------\n    name : str, default=None\n        String identifier of the dataset. Note that OpenML can have multiple\n        datasets with the same name.\n\n    version : int or 'active', default='active'\n        Version of the dataset. Can only be provided if also ``name`` is given.\n        If 'active' the oldest version that's still active is used. Since\n        there may be more than one active version of a dataset, and those\n        versions may fundamentally be different from one another, setting an\n        exact version is highly recommended.\n\n    data_id : int, default=None\n        OpenML ID of the dataset. The most specific way of retrieving a\n        dataset. If data_id is not given, name (and potential version) are\n        used to obtain a dataset.\n\n    data_home : str or path-like, default=None\n        Specify another download and cache folder for the data sets. By default\n        all scikit-learn data is stored in '~/scikit_learn_data' subfolders.\n\n    target_column : str, list or None, default='default-target'\n        Specify the column name in the data to use as target. If\n        'default-target', the standard target column a stored on the server\n        is used. If ``None``, all columns are returned as data and the\n        target is ``None``. If list (of strings), all columns with these names\n        are returned as multi-target (Note: not all scikit-learn classifiers\n        can handle all types of multi-output combinations).\n\n    cache : bool, default=True\n        Whether to cache the downloaded datasets into `data_home`.\n\n    return_X_y : bool, default=False\n        If True, returns ``(data, target)`` instead of a Bunch object. See\n        below for more information about the `data` and `target` objects.\n\n    as_frame : bool or 'auto', default='auto'\n        If True, the data is a pandas DataFrame including columns with\n        appropriate dtypes (numeric, string or categorical). The target is\n        a pandas DataFrame or Series depending on the number of target_columns.\n        The Bunch will contain a ``frame`` attribute with the target and the\n        data. If ``return_X_y`` is True, then ``(data, target)`` will be pandas\n        DataFrames or Series as describe above.\n\n        If `as_frame` is 'auto', the data and target will be converted to\n        DataFrame or Series as if `as_frame` is set to True, unless the dataset\n        is stored in sparse format.\n\n        If `as_frame` is False, the data and target will be NumPy arrays and\n        the `data` will only contain numerical values when `parser=\"liac-arff\"`\n        where the categories are provided in the attribute `categories` of the\n        `Bunch` instance. When `parser=\"pandas\"`, no ordinal encoding is made.\n\n        .. versionchanged:: 0.24\n           The default value of `as_frame` changed from `False` to `'auto'`\n           in 0.24.\n\n    n_retries : int, default=3\n        Number of retries when HTTP errors or network timeouts are encountered.\n        Error with status code 412 won't be retried as they represent OpenML\n        generic errors.\n\n    delay : float, default=1.0\n        Number of seconds between retries.\n\n    parser : {\"auto\", \"pandas\", \"liac-arff\"}, default=\"auto\"\n        Parser used to load the ARFF file. Two parsers are implemented:\n\n        - `\"pandas\"`: this is the most efficient parser. However, it requires\n          pandas to be installed and can only open dense datasets.\n        - `\"liac-arff\"`: this is a pure Python ARFF parser that is much less\n          memory- and CPU-efficient. It deals with sparse ARFF datasets.\n\n        If `\"auto\"`, the parser is chosen automatically such that `\"liac-arff\"`\n        is selected for sparse ARFF datasets, otherwise `\"pandas\"` is selected.\n\n        .. versionadded:: 1.2\n        .. versionchanged:: 1.4\n           The default value of `parser` changes from `\"liac-arff\"` to\n           `\"auto\"`.\n\n    read_csv_kwargs : dict, default=None\n        Keyword arguments passed to :func:`pandas.read_csv` when loading the data\n        from a ARFF file and using the pandas parser. It can allow to\n        overwrite some default parameters.\n\n        .. versionadded:: 1.3\n\n    Returns\n    -------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : np.array, scipy.sparse.csr_matrix of floats, or pandas DataFrame\n            The feature matrix. Categorical features are encoded as ordinals.\n        target : np.array, pandas Series or DataFrame\n            The regression target or classification labels, if applicable.\n            Dtype is float if numeric, and object if categorical. If\n            ``as_frame`` is True, ``target`` is a pandas object.\n        DESCR : str\n            The full description of the dataset.\n        feature_names : list\n            The names of the dataset columns.\n        target_names: list\n            The names of the target columns.\n\n        .. versionadded:: 0.22\n\n        categories : dict or None\n            Maps each categorical feature name to a list of values, such\n            that the value encoded as i is ith in the list. If ``as_frame``\n            is True, this is None.\n        details : dict\n            More metadata from OpenML.\n        frame : pandas DataFrame\n            Only present when `as_frame=True`. DataFrame with ``data`` and\n            ``target``.\n\n    (data, target) : tuple if ``return_X_y`` is True\n\n        .. note:: EXPERIMENTAL\n\n            This interface is **experimental** and subsequent releases may\n            change attributes without notice (although there should only be\n            minor changes to ``data`` and ``target``).\n\n        Missing values in the 'data' are represented as NaN's. Missing values\n        in 'target' are represented as NaN's (numerical target) or None\n        (categorical target).\n\n    Notes\n    -----\n    The `\"pandas\"` and `\"liac-arff\"` parsers can lead to different data types\n    in the output. The notable differences are the following:\n\n    - The `\"liac-arff\"` parser always encodes categorical features as `str` objects.\n      To the contrary, the `\"pandas\"` parser instead infers the type while\n      reading and numerical categories will be casted into integers whenever\n      possible.\n    - The `\"liac-arff\"` parser uses float64 to encode numerical features\n      tagged as 'REAL' and 'NUMERICAL' in the metadata. The `\"pandas\"`\n      parser instead infers if these numerical features corresponds\n      to integers and uses panda's Integer extension dtype.\n    - In particular, classification datasets with integer categories are\n      typically loaded as such `(0, 1, ...)` with the `\"pandas\"` parser while\n      `\"liac-arff\"` will force the use of string encoded class labels such as\n      `\"0\"`, `\"1\"` and so on.\n    - The `\"pandas\"` parser will not strip single quotes - i.e. `'` - from\n      string columns. For instance, a string `'my string'` will be kept as is\n      while the `\"liac-arff\"` parser will strip the single quotes. For\n      categorical columns, the single quotes are stripped from the values.\n\n    In addition, when `as_frame=False` is used, the `\"liac-arff\"` parser\n    returns ordinally encoded data where the categories are provided in the\n    attribute `categories` of the `Bunch` instance. Instead, `\"pandas\"` returns\n    a NumPy array were the categories are not encoded.",
        "parameters": {
          "name": {
            "type": "str, default=None",
            "description": ""
          },
          "String": {
            "type": "identifier of the dataset. Note that OpenML can have multiple",
            "description": ""
          },
          "datasets": {
            "type": "with the same name.",
            "description": ""
          },
          "version": {
            "type": "int or 'active', default='active'",
            "description": ""
          },
          "Version": {
            "type": "of the dataset. Can only be provided if also ``name`` is given.",
            "description": ""
          },
          "If": {
            "type": "`\"auto\"`, the parser is chosen automatically such that `\"liac-arff\"`",
            "description": ""
          },
          "there": {
            "type": "may be more than one active version of a dataset, and those",
            "description": ""
          },
          "versions": {
            "type": "may fundamentally be different from one another, setting an",
            "description": ""
          },
          "exact": {
            "type": "version is highly recommended.",
            "description": ""
          },
          "data_id": {
            "type": "int, default=None",
            "description": ""
          },
          "OpenML": {
            "type": "ID of the dataset. The most specific way of retrieving a",
            "description": "dataset. If data_id is not given, name (and potential version) are"
          },
          "used": {
            "type": "to obtain a dataset.",
            "description": ""
          },
          "data_home": {
            "type": "str or path",
            "description": "like, default=None"
          },
          "Specify": {
            "type": "the column name in the data to use as target. If",
            "description": "'default-target', the standard target column a stored on the server"
          },
          "all": {
            "type": "scikit-learn data is stored in '~/scikit_learn_data' subfolders.",
            "description": ""
          },
          "target_column": {
            "type": "str, list or None, default='default",
            "description": "target'"
          },
          "is": {
            "type": "True, this is None.",
            "description": ""
          },
          "target": {
            "type": "np.array, pandas Series or DataFrame",
            "description": ""
          },
          "are": {
            "type": "returned as multi-target (Note: not all scikit-learn classifiers",
            "description": ""
          },
          "can": {
            "type": "handle all types of multi-output combinations).",
            "description": ""
          },
          "cache": {
            "type": "bool, default=True",
            "description": ""
          },
          "Whether": {
            "type": "to cache the downloaded datasets into `data_home`.",
            "description": ""
          },
          "return_X_y": {
            "type": "bool, default=False",
            "description": ""
          },
          "below": {
            "type": "for more information about the `data` and `target` objects.",
            "description": ""
          },
          "as_frame": {
            "type": "bool or 'auto', default='auto'",
            "description": ""
          },
          "appropriate": {
            "type": "dtypes (numeric, string or categorical). The target is",
            "description": ""
          },
          "a": {
            "type": "NumPy array were the categories are not encoded.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import fetch_openml\n>>> adult = fetch_openml(\"adult\", version=2)  # doctest: +SKIP\n>>> adult.frame.info()  # doctest: +SKIP\n<class 'pandas.core.frame.DataFrame'>"
          },
          "The": {
            "type": "`\"pandas\"` and `\"liac-arff\"` parsers can lead to different data types",
            "description": ""
          },
          "DataFrames": {
            "type": "or Series as describe above.",
            "description": ""
          },
          "DataFrame": {
            "type": "or Series as if `as_frame` is set to True, unless the dataset",
            "description": ""
          },
          "the": {
            "type": "`data` will only contain numerical values when `parser=\"liac-arff\"`",
            "description": ""
          },
          "where": {
            "type": "the categories are provided in the attribute `categories` of the",
            "description": "`Bunch` instance. When `parser=\"pandas\"`, no ordinal encoding is made.\n.. versionchanged:: 0.24"
          },
          "in": {
            "type": "the output. The notable differences are the following:",
            "description": "- The `\"liac-arff\"` parser always encodes categorical features as `str` objects."
          },
          "n_retries": {
            "type": "int, default=3",
            "description": ""
          },
          "Number": {
            "type": "of seconds between retries.",
            "description": ""
          },
          "Error": {
            "type": "with status code 412 won't be retried as they represent OpenML",
            "description": ""
          },
          "generic": {
            "type": "errors.",
            "description": ""
          },
          "delay": {
            "type": "float, default=1.0",
            "description": ""
          },
          "parser": {
            "type": "instead infers if these numerical features corresponds",
            "description": ""
          },
          "Parser": {
            "type": "used to load the ARFF file. Two parsers are implemented:",
            "description": "- `\"pandas\"`: this is the most efficient parser. However, it requires"
          },
          "pandas": {
            "type": "to be installed and can only open dense datasets.",
            "description": "- `\"liac-arff\"`: this is a pure Python ARFF parser that is much less\nmemory- and CPU-efficient. It deals with sparse ARFF datasets."
          },
          "read_csv_kwargs": {
            "type": "dict, default=None",
            "description": ""
          },
          "Keyword": {
            "type": "arguments passed to :func:`pandas.read_csv` when loading the data",
            "description": ""
          },
          "from": {
            "type": "a ARFF file and using the pandas parser. It can allow to",
            "description": ""
          },
          "overwrite": {
            "type": "some default parameters.",
            "description": ".. versionadded:: 1.3\nReturns\n-------"
          },
          "data": {
            "type": "np.array, scipy.sparse.csr_matrix of floats, or pandas DataFrame",
            "description": ""
          },
          "Dtype": {
            "type": "is float if numeric, and object if categorical. If",
            "description": "``as_frame`` is True, ``target`` is a pandas object."
          },
          "DESCR": {
            "type": "str",
            "description": ""
          },
          "feature_names": {
            "type": "list",
            "description": ""
          },
          "target_names": {
            "type": "list",
            "description": ""
          },
          "categories": {
            "type": "dict or None",
            "description": ""
          },
          "Maps": {
            "type": "each categorical feature name to a list of values, such",
            "description": ""
          },
          "that": {
            "type": "the value encoded as i is ith in the list. If ``as_frame``",
            "description": ""
          },
          "details": {
            "type": "dict",
            "description": ""
          },
          "More": {
            "type": "metadata from OpenML.",
            "description": ""
          },
          "frame": {
            "type": "pandas DataFrame",
            "description": ""
          },
          "Only": {
            "type": "present when `as_frame=True`. DataFrame with ``data`` and",
            "description": "``target``.\n(data, target) : tuple if ``return_X_y`` is True\n.. note:: EXPERIMENTAL"
          },
          "This": {
            "type": "interface is **experimental** and subsequent releases may",
            "description": ""
          },
          "change": {
            "type": "attributes without notice (although there should only be",
            "description": ""
          },
          "minor": {
            "type": "changes to ``data`` and ``target``).",
            "description": ""
          },
          "Missing": {
            "type": "values in the 'data' are represented as NaN's. Missing values",
            "description": ""
          },
          "To": {
            "type": "the contrary, the `\"pandas\"` parser instead infers the type while",
            "description": ""
          },
          "reading": {
            "type": "and numerical categories will be casted into integers whenever",
            "description": "possible.\n- The `\"liac-arff\"` parser uses float64 to encode numerical features"
          },
          "tagged": {
            "type": "as 'REAL' and 'NUMERICAL' in the metadata. The `\"pandas\"`",
            "description": ""
          },
          "to": {
            "type": "integers and uses panda's Integer extension dtype.",
            "description": "- In particular, classification datasets with integer categories are"
          },
          "typically": {
            "type": "loaded as such `(0, 1, ...)` with the `\"pandas\"` parser while",
            "description": "`\"liac-arff\"` will force the use of string encoded class labels such as\n`\"0\"`, `\"1\"` and so on.\n- The `\"pandas\"` parser will not strip single quotes - i.e. `'` - from"
          },
          "string": {
            "type": "columns. For instance, a string `'my string'` will be kept as is",
            "description": ""
          },
          "while": {
            "type": "the `\"liac-arff\"` parser will strip the single quotes. For",
            "description": ""
          },
          "categorical": {
            "type": "columns, the single quotes are stripped from the values.",
            "description": ""
          },
          "In": {
            "type": "addition, when `as_frame=False` is used, the `\"liac-arff\"` parser",
            "description": ""
          },
          "returns": {
            "type": "ordinally encoded data where the categories are provided in the",
            "description": ""
          },
          "attribute": {
            "type": "`categories` of the `Bunch` instance. Instead, `\"pandas\"` returns",
            "description": ""
          },
          "RangeIndex": {
            "type": "48842 entries, 0 to 48841",
            "description": ""
          },
          "Data": {
            "type": "columns (total 15 columns):",
            "description": "#   Column          Non-Null Count  Dtype\n---  ------          --------------  -----"
          },
          "0": {
            "type": "age             48842 non-null  int64",
            "description": ""
          },
          "1": {
            "type": "workclass       46043 non-null  category",
            "description": ""
          },
          "2": {
            "type": "fnlwgt          48842 non-null  int64",
            "description": ""
          },
          "3": {
            "type": "education       48842 non-null  category",
            "description": ""
          },
          "4": {
            "type": "education-num   48842 non-null  int64",
            "description": ""
          },
          "5": {
            "type": "marital-status  48842 non-null  category",
            "description": ""
          },
          "6": {
            "type": "occupation      46033 non-null  category",
            "description": ""
          },
          "7": {
            "type": "relationship    48842 non-null  category",
            "description": ""
          },
          "8": {
            "type": "race            48842 non-null  category",
            "description": ""
          },
          "9": {
            "type": "sex             48842 non-null  category",
            "description": ""
          },
          "10": {
            "type": "capital-gain    48842 non-null  int64",
            "description": ""
          },
          "11": {
            "type": "capital-loss    48842 non-null  int64",
            "description": ""
          },
          "12": {
            "type": "hours-per-week  48842 non-null  int64",
            "description": ""
          },
          "13": {
            "type": "native-country  47985 non-null  category",
            "description": ""
          },
          "14": {
            "type": "class           48842 non-null  category",
            "description": ""
          },
          "dtypes": {
            "type": "category(9), int64(6)",
            "description": ""
          },
          "memory": {
            "type": "usage: 2.7 MB",
            "description": ""
          }
        },
        "returns": "-------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : np.array, scipy.sparse.csr_matrix of floats, or pandas DataFrame\n            The feature matrix. Categorical features are encoded as ordinals.\n        target : np.array, pandas Series or DataFrame\n            The regression target or classification labels, if applicable.\n            Dtype is float if numeric, and object if categorical. If\n            ``as_frame`` is True, ``target`` is a pandas object.\n        DESCR : str\n            The full description of the dataset.\n        feature_names : list\n            The names of the dataset columns.\n        target_names: list\n            The names of the target columns.\n\n        .. versionadded:: 0.22\n\n        categories : dict or None\n            Maps each categorical feature name to a list of values, such\n            that the value encoded as i is ith in the list. If ``as_frame``\n            is True, this is None.\n        details : dict\n            More metadata from OpenML.\n        frame : pandas DataFrame\n            Only present when `as_frame=True`. DataFrame with ``data`` and\n            ``target``.\n\n    (data, target) : tuple if ``return_X_y`` is True\n\n        .. note:: EXPERIMENTAL\n\n            This interface is **experimental** and subsequent releases may\n            change attributes without notice (although there should only be\n            minor changes to ``data`` and ``target``).\n\n        Missing values in the 'data' are represented as NaN's. Missing values\n        in 'target' are represented as NaN's (numerical target) or None\n        (categorical target).\n\n    Notes\n    -----\n    The `\"pandas\"` and `\"liac-arff\"` parsers can lead to different data types\n    in the output. The notable differences are the following:\n\n    - The `\"liac-arff\"` parser always encodes categorical features as `str` objects.\n      To the contrary, the `\"pandas\"` parser instead infers the type while\n      reading and numerical categories will be casted into integers whenever\n      possible.\n    - The `\"liac-arff\"` parser uses float64 to encode numerical features\n      tagged as 'REAL' and 'NUMERICAL' in the metadata. The `\"pandas\"`\n      parser instead infers if these numerical features corresponds\n      to integers and uses panda's Integer extension dtype.\n    - In particular, classification datasets with integer categories are\n      typically loaded as such `(0, 1, ...)` with the `\"pandas\"` parser while\n      `\"liac-arff\"` will force the use of string encoded class labels such as\n      `\"0\"`, `\"1\"` and so on.\n    - The `\"pandas\"` parser will not strip single quotes - i.e. `'` - from\n      string columns. For instance, a string `'my string'` will be kept as is\n      while the `\"liac-arff\"` parser will strip the single quotes. For\n      categorical columns, the single quotes are stripped from the values.\n\n    In addition, when `as_frame=False` is used, the `\"liac-arff\"` parser",
        "raises": "",
        "see_also": "",
        "notes": "-----\n    The `\"pandas\"` and `\"liac-arff\"` parsers can lead to different data types\n    in the output. The notable differences are the following:\n\n    - The `\"liac-arff\"` parser always encodes categorical features as `str` objects.\n      To the contrary, the `\"pandas\"` parser instead infers the type while\n      reading and numerical categories will be casted into integers whenever\n      possible.\n    - The `\"liac-arff\"` parser uses float64 to encode numerical features\n      tagged as 'REAL' and 'NUMERICAL' in the metadata. The `\"pandas\"`\n      parser instead infers if these numerical features corresponds\n      to integers and uses panda's Integer extension dtype.\n    - In particular, classification datasets with integer categories are\n      typically loaded as such `(0, 1, ...)` with the `\"pandas\"` parser while\n      `\"liac-arff\"` will force the use of string encoded class labels such as\n      `\"0\"`, `\"1\"` and so on.\n    - The `\"pandas\"` parser will not strip single quotes - i.e. `'` - from\n      string columns. For instance, a string `'my string'` will be kept as is\n      while the `\"liac-arff\"` parser will strip the single quotes. For\n      categorical columns, the single quotes are stripped from the values.\n\n    In addition, when `as_frame=False` is used, the `\"liac-arff\"` parser\n    returns ordinally encoded data where the categories are provided in the\n    attribute `categories` of the `Bunch` instance. Instead, `\"pandas\"` returns\n    a NumPy array were the categories are not encoded.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import fetch_openml\n    >>> adult = fetch_openml(\"adult\", version=2)  # doctest: +SKIP\n    >>> adult.frame.info()  # doctest: +SKIP\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 48842 entries, 0 to 48841\n    Data columns (total 15 columns):\n     #   Column          Non-Null Count  Dtype\n    ---  ------          --------------  -----\n     0   age             48842 non-null  int64\n     1   workclass       46043 non-null  category\n     2   fnlwgt          48842 non-null  int64\n     3   education       48842 non-null  category\n     4   education-num   48842 non-null  int64\n     5   marital-status  48842 non-null  category\n     6   occupation      46033 non-null  category\n     7   relationship    48842 non-null  category\n     8   race            48842 non-null  category\n     9   sex             48842 non-null  category\n     10  capital-gain    48842 non-null  int64\n     11  capital-loss    48842 non-null  int64\n     12  hours-per-week  48842 non-null  int64\n     13  native-country  47985 non-null  category\n     14  class           48842 non-null  category\n    dtypes: category(9), int64(6)\n    memory usage: 2.7 MB",
        "examples": "--------\n    >>> from sklearn.datasets import fetch_openml\n    >>> adult = fetch_openml(\"adult\", version=2)  # doctest: +SKIP\n    >>> adult.frame.info()  # doctest: +SKIP\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 48842 entries, 0 to 48841\n    Data columns (total 15 columns):\n     #   Column          Non-Null Count  Dtype\n    ---  ------          --------------  -----\n     0   age             48842 non-null  int64\n     1   workclass       46043 non-null  category\n     2   fnlwgt          48842 non-null  int64\n     3   education       48842 non-null  category\n     4   education-num   48842 non-null  int64\n     5   marital-status  48842 non-null  category\n     6   occupation      46033 non-null  category\n     7   relationship    48842 non-null  category\n     8   race            48842 non-null  category\n     9   sex             48842 non-null  category\n     10  capital-gain    48842 non-null  int64\n     11  capital-loss    48842 non-null  int64\n     12  hours-per-week  48842 non-null  int64\n     13  native-country  47985 non-null  category\n     14  class           48842 non-null  category\n    dtypes: category(9), int64(6)\n    memory usage: 2.7 MB"
      }
    },
    {
      "name": "fetch_rcv1",
      "signature": "fetch_rcv1(*, data_home=None, subset='all', download_if_missing=True, random_state=None, shuffle=False, return_X_y=False, n_retries=3, delay=1.0)",
      "documentation": {
        "description": "Load the RCV1 multilabel dataset (classification).\n\n    Download it if necessary.\n\n    Version: RCV1-v2, vectors, full sets, topics multilabels.\n\n    =================   =====================\n    Classes                               103\n    Samples total                      804414\n    Dimensionality                      47236\n    Features            real, between 0 and 1\n    =================   =====================\n\n    Read more in the :ref:`User Guide <rcv1_dataset>`.\n\n    .. versionadded:: 0.17\n\n    Parameters\n    ----------\n    data_home : str or path-like, default=None\n        Specify another download and cache folder for the datasets. By default\n        all scikit-learn data is stored in '~/scikit_learn_data' subfolders.\n\n    subset : {'train', 'test', 'all'}, default='all'\n        Select the dataset to load: 'train' for the training set\n        (23149 samples), 'test' for the test set (781265 samples),\n        'all' for both, with the training samples first if shuffle is False.\n        This follows the official LYRL2004 chronological split.\n\n    download_if_missing : bool, default=True\n        If False, raise an OSError if the data is not locally available\n        instead of trying to download the data from the source site.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset shuffling. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    shuffle : bool, default=False\n        Whether to shuffle dataset.\n\n    return_X_y : bool, default=False\n        If True, returns ``(dataset.data, dataset.target)`` instead of a Bunch\n        object. See below for more information about the `dataset.data` and\n        `dataset.target` object.\n\n        .. versionadded:: 0.20\n\n    n_retries : int, default=3\n        Number of retries when HTTP errors are encountered.\n\n        .. versionadded:: 1.5\n\n    delay : float, default=1.0\n        Number of seconds between retries.\n\n        .. versionadded:: 1.5\n\n    Returns\n    -------\n    dataset : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object. Returned only if `return_X_y` is False.\n        `dataset` has the following attributes:\n\n        - data : sparse matrix of shape (804414, 47236), dtype=np.float64\n            The array has 0.16% of non zero values. Will be of CSR format.\n        - target : sparse matrix of shape (804414, 103), dtype=np.uint8\n            Each sample has a value of 1 in its categories, and 0 in others.\n            The array has 3.15% of non zero values. Will be of CSR format.\n        - sample_id : ndarray of shape (804414,), dtype=np.uint32,\n            Identification number of each sample, as ordered in dataset.data.\n        - target_names : ndarray of shape (103,), dtype=object\n            Names of each target (RCV1 topics), as ordered in dataset.target.\n        - DESCR : str\n            Description of the RCV1 dataset.\n\n    (data, target) : tuple\n        A tuple consisting of `dataset.data` and `dataset.target`, as\n        described above. Returned only if `return_X_y` is True.\n\n        .. versionadded:: 0.20",
        "parameters": {
          "data_home": {
            "type": "str or path",
            "description": "like, default=None"
          },
          "Specify": {
            "type": "another download and cache folder for the datasets. By default",
            "description": ""
          },
          "all": {
            "type": "scikit-learn data is stored in '~/scikit_learn_data' subfolders.",
            "description": ""
          },
          "subset": {
            "type": "{'train', 'test', 'all'}, default='all'",
            "description": ""
          },
          "Select": {
            "type": "the dataset to load: 'train' for the training set",
            "description": "(23149 samples), 'test' for the test set (781265 samples),\n'all' for both, with the training samples first if shuffle is False."
          },
          "This": {
            "type": "follows the official LYRL2004 chronological split.",
            "description": ""
          },
          "download_if_missing": {
            "type": "bool, default=True",
            "description": ""
          },
          "If": {
            "type": "True, returns ``(dataset.data, dataset.target)`` instead of a Bunch",
            "description": "object. See below for more information about the `dataset.data` and\n`dataset.target` object.\n.. versionadded:: 0.20"
          },
          "instead": {
            "type": "of trying to download the data from the source site.",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset shuffling. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "term:`Glossary <random_state>`.",
            "description": ""
          },
          "shuffle": {
            "type": "bool, default=False",
            "description": ""
          },
          "Whether": {
            "type": "to shuffle dataset.",
            "description": ""
          },
          "return_X_y": {
            "type": "bool, default=False",
            "description": ""
          },
          "n_retries": {
            "type": "int, default=3",
            "description": ""
          },
          "Number": {
            "type": "of seconds between retries.",
            "description": ".. versionadded:: 1.5\nReturns\n-------"
          },
          "delay": {
            "type": "float, default=1.0",
            "description": ""
          },
          "dataset": {
            "type": ":class:`~sklearn.utils.Bunch`",
            "description": "Dictionary-like object. Returned only if `return_X_y` is False.\n`dataset` has the following attributes:\n- data : sparse matrix of shape (804414, 47236), dtype=np.float64"
          },
          "The": {
            "type": "array has 3.15% of non zero values. Will be of CSR format.",
            "description": "- sample_id : ndarray of shape (804414,), dtype=np.uint32,"
          },
          "Each": {
            "type": "sample has a value of 1 in its categories, and 0 in others.",
            "description": ""
          },
          "Identification": {
            "type": "number of each sample, as ordered in dataset.data.",
            "description": "- target_names : ndarray of shape (103,), dtype=object"
          },
          "Names": {
            "type": "of each target (RCV1 topics), as ordered in dataset.target.",
            "description": "- DESCR : str"
          },
          "Description": {
            "type": "of the RCV1 dataset.",
            "description": "(data, target) : tuple"
          },
          "A": {
            "type": "tuple consisting of `dataset.data` and `dataset.target`, as",
            "description": ""
          },
          "described": {
            "type": "above. Returned only if `return_X_y` is True.",
            "description": ".. versionadded:: 0.20\nExamples\n--------\n>>> from sklearn.datasets import fetch_rcv1\n>>> rcv1 = fetch_rcv1()\n>>> rcv1.data.shape\n(804414, 47236)\n>>> rcv1.target.shape\n(804414, 103)"
          }
        },
        "returns": "-------\n    dataset : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object. Returned only if `return_X_y` is False.\n        `dataset` has the following attributes:\n\n        - data : sparse matrix of shape (804414, 47236), dtype=np.float64\n            The array has 0.16% of non zero values. Will be of CSR format.\n        - target : sparse matrix of shape (804414, 103), dtype=np.uint8\n            Each sample has a value of 1 in its categories, and 0 in others.\n            The array has 3.15% of non zero values. Will be of CSR format.\n        - sample_id : ndarray of shape (804414,), dtype=np.uint32,\n            Identification number of each sample, as ordered in dataset.data.\n        - target_names : ndarray of shape (103,), dtype=object\n            Names of each target (RCV1 topics), as ordered in dataset.target.\n        - DESCR : str\n            Description of the RCV1 dataset.\n\n    (data, target) : tuple\n        A tuple consisting of `dataset.data` and `dataset.target`, as\n        described above. Returned only if `return_X_y` is True.\n\n        .. versionadded:: 0.20\n\n    Examples\n    --------\n    >>> from sklearn.datasets import fetch_rcv1\n    >>> rcv1 = fetch_rcv1()\n    >>> rcv1.data.shape\n    (804414, 47236)\n    >>> rcv1.target.shape\n    (804414, 103)",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import fetch_rcv1\n    >>> rcv1 = fetch_rcv1()\n    >>> rcv1.data.shape\n    (804414, 47236)\n    >>> rcv1.target.shape\n    (804414, 103)"
      }
    },
    {
      "name": "fetch_species_distributions",
      "signature": "fetch_species_distributions(*, data_home=None, download_if_missing=True, n_retries=3, delay=1.0)",
      "documentation": {
        "description": "Loader for species distribution dataset from Phillips et. al. (2006).\n\n    Read more in the :ref:`User Guide <species_distribution_dataset>`.\n\n    Parameters\n    ----------\n    data_home : str or path-like, default=None\n        Specify another download and cache folder for the datasets. By default\n        all scikit-learn data is stored in '~/scikit_learn_data' subfolders.\n\n    download_if_missing : bool, default=True\n        If False, raise an OSError if the data is not locally available\n        instead of trying to download the data from the source site.\n\n    n_retries : int, default=3\n        Number of retries when HTTP errors are encountered.\n\n        .. versionadded:: 1.5\n\n    delay : float, default=1.0\n        Number of seconds between retries.\n\n        .. versionadded:: 1.5\n\n    Returns\n    -------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        coverages : array, shape = [14, 1592, 1212]\n            These represent the 14 features measured\n            at each point of the map grid.\n            The latitude/longitude values for the grid are discussed below.\n            Missing data is represented by the value -9999.\n        train : record array, shape = (1624,)\n            The training points for the data.  Each point has three fields:\n\n            - train['species'] is the species name\n            - train['dd long'] is the longitude, in degrees\n            - train['dd lat'] is the latitude, in degrees\n        test : record array, shape = (620,)\n            The test points for the data.  Same format as the training data.\n        Nx, Ny : integers\n            The number of longitudes (x) and latitudes (y) in the grid\n        x_left_lower_corner, y_left_lower_corner : floats\n            The (x,y) position of the lower-left corner, in degrees\n        grid_size : float\n            The spacing between points of the grid, in degrees\n\n    Notes\n    -----\n\n    This dataset represents the geographic distribution of species.\n    The dataset is provided by Phillips et. al. (2006).\n\n    The two species are:\n\n    - `\"Bradypus variegatus\"\n      <http://www.iucnredlist.org/details/3038/0>`_ ,\n      the Brown-throated Sloth.\n\n    - `\"Microryzomys minutus\"\n      <http://www.iucnredlist.org/details/13408/0>`_ ,\n      also known as the Forest Small Rice Rat, a rodent that lives in Peru,\n      Colombia, Ecuador, Peru, and Venezuela.\n\n    References\n    ----------\n\n    * `\"Maximum entropy modeling of species geographic distributions\"\n      <http://rob.schapire.net/papers/ecolmod.pdf>`_\n      S. J. Phillips, R. P. Anderson, R. E. Schapire - Ecological Modelling,\n      190:231-259, 2006.",
        "parameters": {
          "data_home": {
            "type": "str or path",
            "description": "like, default=None"
          },
          "Specify": {
            "type": "another download and cache folder for the datasets. By default",
            "description": ""
          },
          "all": {
            "type": "scikit-learn data is stored in '~/scikit_learn_data' subfolders.",
            "description": ""
          },
          "download_if_missing": {
            "type": "bool, default=True",
            "description": ""
          },
          "If": {
            "type": "False, raise an OSError if the data is not locally available",
            "description": ""
          },
          "instead": {
            "type": "of trying to download the data from the source site.",
            "description": ""
          },
          "n_retries": {
            "type": "int, default=3",
            "description": ""
          },
          "Number": {
            "type": "of seconds between retries.",
            "description": ".. versionadded:: 1.5\nReturns\n-------"
          },
          "delay": {
            "type": "float, default=1.0",
            "description": ""
          },
          "data": {
            "type": ":class:`~sklearn.utils.Bunch`",
            "description": "Dictionary-like object, with the following attributes."
          },
          "coverages": {
            "type": "array, shape = [14, 1592, 1212]",
            "description": ""
          },
          "These": {
            "type": "represent the 14 features measured",
            "description": ""
          },
          "at": {
            "type": "each point of the map grid.",
            "description": ""
          },
          "The": {
            "type": "two species are:",
            "description": "- `\"Bradypus variegatus\"\n<http://www.iucnredlist.org/details/3038/0>`_ ,"
          },
          "Missing": {
            "type": "data is represented by the value -9999.",
            "description": ""
          },
          "train": {
            "type": "record array, shape = (1624,)",
            "description": ""
          },
          "test": {
            "type": "record array, shape = (620,)",
            "description": ""
          },
          "grid_size": {
            "type": "float",
            "description": ""
          },
          "This": {
            "type": "dataset represents the geographic distribution of species.",
            "description": ""
          },
          "the": {
            "type": "Brown-throated Sloth.",
            "description": "- `\"Microryzomys minutus\"\n<http://www.iucnredlist.org/details/13408/0>`_ ,"
          },
          "also": {
            "type": "known as the Forest Small Rice Rat, a rodent that lives in Peru,",
            "description": "Colombia, Ecuador, Peru, and Venezuela.\nReferences\n----------\n* `\"Maximum entropy modeling of species geographic distributions\"\n<http://rob.schapire.net/papers/ecolmod.pdf>`_\nS. J. Phillips, R. P. Anderson, R. E. Schapire - Ecological Modelling,"
          },
          "190": {
            "type": "231",
            "description": "259, 2006.\nExamples\n--------\n>>> from sklearn.datasets import fetch_species_distributions\n>>> species = fetch_species_distributions()\n>>> species.train[:5]"
          },
          "array": {
            "type": "[(b'microryzomys_minutus', -64.7   , -17.85",
            "description": ",\n(b'microryzomys_minutus', -67.8333, -16.3333),\n(b'microryzomys_minutus', -67.8833, -16.3   ),\n(b'microryzomys_minutus', -67.8   , -16.2667),\n(b'microryzomys_minutus', -67.9833, -15.9   )],\ndtype=[('species', 'S22'), ('dd long', '<f4'), ('dd lat', '<f4')])"
          },
          "For": {
            "type": "a more extended example,",
            "description": ""
          },
          "see": {
            "type": "ref:`sphx_glr_auto_examples_applications_plot_species_distribution_modeling.py`",
            "description": ""
          }
        },
        "returns": "-------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        coverages : array, shape = [14, 1592, 1212]\n            These represent the 14 features measured\n            at each point of the map grid.\n            The latitude/longitude values for the grid are discussed below.\n            Missing data is represented by the value -9999.\n        train : record array, shape = (1624,)\n            The training points for the data.  Each point has three fields:\n\n            - train['species'] is the species name\n            - train['dd long'] is the longitude, in degrees\n            - train['dd lat'] is the latitude, in degrees\n        test : record array, shape = (620,)\n            The test points for the data.  Same format as the training data.\n        Nx, Ny : integers\n            The number of longitudes (x) and latitudes (y) in the grid\n        x_left_lower_corner, y_left_lower_corner : floats\n            The (x,y) position of the lower-left corner, in degrees\n        grid_size : float\n            The spacing between points of the grid, in degrees\n\n    Notes\n    -----\n\n    This dataset represents the geographic distribution of species.\n    The dataset is provided by Phillips et. al. (2006).\n\n    The two species are:\n\n    - `\"Bradypus variegatus\"\n      <http://www.iucnredlist.org/details/3038/0>`_ ,\n      the Brown-throated Sloth.\n\n    - `\"Microryzomys minutus\"\n      <http://www.iucnredlist.org/details/13408/0>`_ ,\n      also known as the Forest Small Rice Rat, a rodent that lives in Peru,\n      Colombia, Ecuador, Peru, and Venezuela.\n\n    References\n    ----------\n\n    * `\"Maximum entropy modeling of species geographic distributions\"\n      <http://rob.schapire.net/papers/ecolmod.pdf>`_\n      S. J. Phillips, R. P. Anderson, R. E. Schapire - Ecological Modelling,\n      190:231-259, 2006.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import fetch_species_distributions\n    >>> species = fetch_species_distributions()\n    >>> species.train[:5]\n    array([(b'microryzomys_minutus', -64.7   , -17.85  ),\n           (b'microryzomys_minutus', -67.8333, -16.3333),\n           (b'microryzomys_minutus', -67.8833, -16.3   ),\n           (b'microryzomys_minutus', -67.8   , -16.2667),\n           (b'microryzomys_minutus', -67.9833, -15.9   )],\n          dtype=[('species', 'S22'), ('dd long', '<f4'), ('dd lat', '<f4')])\n\n    For a more extended example,\n    see :ref:`sphx_glr_auto_examples_applications_plot_species_distribution_modeling.py`",
        "raises": "",
        "see_also": "",
        "notes": "-----\n\n    This dataset represents the geographic distribution of species.\n    The dataset is provided by Phillips et. al. (2006).\n\n    The two species are:\n\n    - `\"Bradypus variegatus\"\n      <http://www.iucnredlist.org/details/3038/0>`_ ,\n      the Brown-throated Sloth.\n\n    - `\"Microryzomys minutus\"\n      <http://www.iucnredlist.org/details/13408/0>`_ ,\n      also known as the Forest Small Rice Rat, a rodent that lives in Peru,\n      Colombia, Ecuador, Peru, and Venezuela.\n\n    References\n    ----------\n\n    * `\"Maximum entropy modeling of species geographic distributions\"\n      <http://rob.schapire.net/papers/ecolmod.pdf>`_\n      S. J. Phillips, R. P. Anderson, R. E. Schapire - Ecological Modelling,\n      190:231-259, 2006.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import fetch_species_distributions\n    >>> species = fetch_species_distributions()\n    >>> species.train[:5]\n    array([(b'microryzomys_minutus', -64.7   , -17.85  ),\n           (b'microryzomys_minutus', -67.8333, -16.3333),\n           (b'microryzomys_minutus', -67.8833, -16.3   ),\n           (b'microryzomys_minutus', -67.8   , -16.2667),\n           (b'microryzomys_minutus', -67.9833, -15.9   )],\n          dtype=[('species', 'S22'), ('dd long', '<f4'), ('dd lat', '<f4')])\n\n    For a more extended example,\n    see :ref:`sphx_glr_auto_examples_applications_plot_species_distribution_modeling.py`",
        "examples": "--------\n    >>> from sklearn.datasets import fetch_species_distributions\n    >>> species = fetch_species_distributions()\n    >>> species.train[:5]\n    array([(b'microryzomys_minutus', -64.7   , -17.85  ),\n           (b'microryzomys_minutus', -67.8333, -16.3333),\n           (b'microryzomys_minutus', -67.8833, -16.3   ),\n           (b'microryzomys_minutus', -67.8   , -16.2667),\n           (b'microryzomys_minutus', -67.9833, -15.9   )],\n          dtype=[('species', 'S22'), ('dd long', '<f4'), ('dd lat', '<f4')])\n\n    For a more extended example,\n    see :ref:`sphx_glr_auto_examples_applications_plot_species_distribution_modeling.py`"
      }
    },
    {
      "name": "get_data_home",
      "signature": "get_data_home(data_home=None) -> str",
      "documentation": {
        "description": "Return the path of the scikit-learn data directory.\n\n    This folder is used by some large dataset loaders to avoid downloading the\n    data several times.\n\n    By default the data directory is set to a folder named 'scikit_learn_data' in the\n    user home folder.\n\n    Alternatively, it can be set by the 'SCIKIT_LEARN_DATA' environment\n    variable or programmatically by giving an explicit folder path. The '~'\n    symbol is expanded to the user home folder.\n\n    If the folder does not already exist, it is automatically created.\n\n    Parameters\n    ----------\n    data_home : str or path-like, default=None\n        The path to scikit-learn data directory. If `None`, the default path\n        is `~/scikit_learn_data`.\n\n    Returns\n    -------\n    data_home: str\n        The path to scikit-learn data directory.",
        "parameters": {
          "data_home": {
            "type": "str",
            "description": ""
          },
          "The": {
            "type": "path to scikit-learn data directory.",
            "description": "Examples\n--------\n>>> import os\n>>> from sklearn.datasets import get_data_home\n>>> data_home_path = get_data_home()\n>>> os.path.exists(data_home_path)\nTrue"
          },
          "is": {
            "type": "`~/scikit_learn_data`.",
            "description": "Returns\n-------"
          }
        },
        "returns": "-------\n    data_home: str\n        The path to scikit-learn data directory.\n\n    Examples\n    --------\n    >>> import os\n    >>> from sklearn.datasets import get_data_home\n    >>> data_home_path = get_data_home()\n    >>> os.path.exists(data_home_path)\n    True",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> import os\n    >>> from sklearn.datasets import get_data_home\n    >>> data_home_path = get_data_home()\n    >>> os.path.exists(data_home_path)\n    True"
      }
    },
    {
      "name": "load_breast_cancer",
      "signature": "load_breast_cancer(*, return_X_y=False, as_frame=False)",
      "documentation": {
        "description": "Load and return the breast cancer wisconsin dataset (classification).\n\n    The breast cancer dataset is a classic and very easy binary classification\n    dataset.\n\n    =================   ==============\n    Classes                          2\n    Samples per class    212(M),357(B)\n    Samples total                  569\n    Dimensionality                  30\n    Features            real, positive\n    =================   ==============\n\n    The copy of UCI ML Breast Cancer Wisconsin (Diagnostic) dataset is\n    downloaded from:\n    https://archive.ics.uci.edu/dataset/17/breast+cancer+wisconsin+diagnostic\n\n    Read more in the :ref:`User Guide <breast_cancer_dataset>`.\n\n    Parameters\n    ----------\n    return_X_y : bool, default=False\n        If True, returns ``(data, target)`` instead of a Bunch object.\n        See below for more information about the `data` and `target` object.\n\n        .. versionadded:: 0.18\n\n    as_frame : bool, default=False\n        If True, the data is a pandas DataFrame including columns with\n        appropriate dtypes (numeric). The target is\n        a pandas DataFrame or Series depending on the number of target columns.\n        If `return_X_y` is True, then (`data`, `target`) will be pandas\n        DataFrames or Series as described below.\n\n        .. versionadded:: 0.23\n\n    Returns\n    -------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : {ndarray, dataframe} of shape (569, 30)\n            The data matrix. If `as_frame=True`, `data` will be a pandas\n            DataFrame.\n        target : {ndarray, Series} of shape (569,)\n            The classification target. If `as_frame=True`, `target` will be\n            a pandas Series.\n        feature_names : ndarray of shape (30,)\n            The names of the dataset columns.\n        target_names : ndarray of shape (2,)\n            The names of target classes.\n        frame : DataFrame of shape (569, 31)\n            Only present when `as_frame=True`. DataFrame with `data` and\n            `target`.\n\n            .. versionadded:: 0.23\n        DESCR : str\n            The full description of the dataset.\n        filename : str\n            The path to the location of the data.\n\n            .. versionadded:: 0.20\n\n    (data, target) : tuple if ``return_X_y`` is True\n        A tuple of two ndarrays by default. The first contains a 2D ndarray of\n        shape (569, 30) with each row representing one sample and each column\n        representing the features. The second ndarray of shape (569,) contains\n        the target samples.  If `as_frame=True`, both arrays are pandas objects,\n        i.e. `X` a dataframe and `y` a series.\n\n        .. versionadded:: 0.18",
        "parameters": {
          "return_X_y": {
            "type": "bool, default=False",
            "description": ""
          },
          "If": {
            "type": "`return_X_y` is True, then (`data`, `target`) will be pandas",
            "description": ""
          },
          "See": {
            "type": "below for more information about the `data` and `target` object.",
            "description": ".. versionadded:: 0.18"
          },
          "as_frame": {
            "type": "bool, default=False",
            "description": ""
          },
          "appropriate": {
            "type": "dtypes (numeric). The target is",
            "description": ""
          },
          "a": {
            "type": "pandas Series.",
            "description": ""
          },
          "DataFrames": {
            "type": "or Series as described below.",
            "description": ".. versionadded:: 0.23\nReturns\n-------"
          },
          "data": {
            "type": "{ndarray, dataframe} of shape (569, 30)",
            "description": ""
          },
          "The": {
            "type": "path to the location of the data.",
            "description": ".. versionadded:: 0.20\n(data, target) : tuple if ``return_X_y`` is True"
          },
          "target": {
            "type": "{ndarray, Series} of shape (569,)",
            "description": ""
          },
          "feature_names": {
            "type": "ndarray of shape (30,)",
            "description": ""
          },
          "target_names": {
            "type": "ndarray of shape (2,)",
            "description": ""
          },
          "frame": {
            "type": "DataFrame of shape (569, 31)",
            "description": ""
          },
          "Only": {
            "type": "present when `as_frame=True`. DataFrame with `data` and",
            "description": "`target`.\n.. versionadded:: 0.23"
          },
          "DESCR": {
            "type": "str",
            "description": ""
          },
          "filename": {
            "type": "str",
            "description": ""
          },
          "A": {
            "type": "tuple of two ndarrays by default. The first contains a 2D ndarray of",
            "description": ""
          },
          "shape": {
            "type": "569, 30",
            "description": "with each row representing one sample and each column"
          },
          "representing": {
            "type": "the features. The second ndarray of shape (569,) contains",
            "description": ""
          },
          "the": {
            "type": "target samples.  If `as_frame=True`, both arrays are pandas objects,",
            "description": "i.e. `X` a dataframe and `y` a series.\n.. versionadded:: 0.18\nExamples\n--------\nLet's say you are interested in the samples 10, 50, and 85, and want to"
          },
          "know": {
            "type": "their class name.",
            "description": ">>> from sklearn.datasets import load_breast_cancer\n>>> data = load_breast_cancer()\n>>> data.target[[10, 50, 85]]"
          },
          "array": {
            "type": "[0, 1, 0]",
            "description": ">>> list(data.target_names)\n[np.str_('malignant'), np.str_('benign')]"
          }
        },
        "returns": "-------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : {ndarray, dataframe} of shape (569, 30)\n            The data matrix. If `as_frame=True`, `data` will be a pandas\n            DataFrame.\n        target : {ndarray, Series} of shape (569,)\n            The classification target. If `as_frame=True`, `target` will be\n            a pandas Series.\n        feature_names : ndarray of shape (30,)\n            The names of the dataset columns.\n        target_names : ndarray of shape (2,)\n            The names of target classes.\n        frame : DataFrame of shape (569, 31)\n            Only present when `as_frame=True`. DataFrame with `data` and\n            `target`.\n\n            .. versionadded:: 0.23\n        DESCR : str\n            The full description of the dataset.\n        filename : str\n            The path to the location of the data.\n\n            .. versionadded:: 0.20\n\n    (data, target) : tuple if ``return_X_y`` is True\n        A tuple of two ndarrays by default. The first contains a 2D ndarray of\n        shape (569, 30) with each row representing one sample and each column\n        representing the features. The second ndarray of shape (569,) contains\n        the target samples.  If `as_frame=True`, both arrays are pandas objects,\n        i.e. `X` a dataframe and `y` a series.\n\n        .. versionadded:: 0.18\n\n    Examples\n    --------\n    Let's say you are interested in the samples 10, 50, and 85, and want to\n    know their class name.\n\n    >>> from sklearn.datasets import load_breast_cancer\n    >>> data = load_breast_cancer()\n    >>> data.target[[10, 50, 85]]\n    array([0, 1, 0])\n    >>> list(data.target_names)\n    [np.str_('malignant'), np.str_('benign')]",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    Let's say you are interested in the samples 10, 50, and 85, and want to\n    know their class name.\n\n    >>> from sklearn.datasets import load_breast_cancer\n    >>> data = load_breast_cancer()\n    >>> data.target[[10, 50, 85]]\n    array([0, 1, 0])\n    >>> list(data.target_names)\n    [np.str_('malignant'), np.str_('benign')]"
      }
    },
    {
      "name": "load_diabetes",
      "signature": "load_diabetes(*, return_X_y=False, as_frame=False, scaled=True)",
      "documentation": {
        "description": "Load and return the diabetes dataset (regression).\n\n    ==============   ==================\n    Samples total    442\n    Dimensionality   10\n    Features         real, -.2 < x < .2\n    Targets          integer 25 - 346\n    ==============   ==================\n\n    .. note::\n       The meaning of each feature (i.e. `feature_names`) might be unclear\n       (especially for `ltg`) as the documentation of the original dataset is\n       not explicit. We provide information that seems correct in regard with\n       the scientific literature in this field of research.\n\n    Read more in the :ref:`User Guide <diabetes_dataset>`.\n\n    Parameters\n    ----------\n    return_X_y : bool, default=False\n        If True, returns ``(data, target)`` instead of a Bunch object.\n        See below for more information about the `data` and `target` object.\n\n        .. versionadded:: 0.18\n\n    as_frame : bool, default=False\n        If True, the data is a pandas DataFrame including columns with\n        appropriate dtypes (numeric). The target is\n        a pandas DataFrame or Series depending on the number of target columns.\n        If `return_X_y` is True, then (`data`, `target`) will be pandas\n        DataFrames or Series as described below.\n\n        .. versionadded:: 0.23\n\n    scaled : bool, default=True\n        If True, the feature variables are mean centered and scaled by the\n        standard deviation times the square root of `n_samples`.\n        If False, raw data is returned for the feature variables.\n\n        .. versionadded:: 1.1\n\n    Returns\n    -------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : {ndarray, dataframe} of shape (442, 10)\n            The data matrix. If `as_frame=True`, `data` will be a pandas\n            DataFrame.\n        target: {ndarray, Series} of shape (442,)\n            The regression target. If `as_frame=True`, `target` will be\n            a pandas Series.\n        feature_names: list\n            The names of the dataset columns.\n        frame: DataFrame of shape (442, 11)\n            Only present when `as_frame=True`. DataFrame with `data` and\n            `target`.\n\n            .. versionadded:: 0.23\n        DESCR: str\n            The full description of the dataset.\n        data_filename: str\n            The path to the location of the data.\n        target_filename: str\n            The path to the location of the target.\n\n    (data, target) : tuple if ``return_X_y`` is True\n        Returns a tuple of two ndarray of shape (n_samples, n_features)\n        A 2D array with each row representing one sample and each column\n        representing the features and/or target of a given sample.\n\n        .. versionadded:: 0.18",
        "parameters": {
          "return_X_y": {
            "type": "bool, default=False",
            "description": ""
          },
          "If": {
            "type": "False, raw data is returned for the feature variables.",
            "description": ".. versionadded:: 1.1\nReturns\n-------"
          },
          "See": {
            "type": "below for more information about the `data` and `target` object.",
            "description": ".. versionadded:: 0.18"
          },
          "as_frame": {
            "type": "bool, default=False",
            "description": ""
          },
          "appropriate": {
            "type": "dtypes (numeric). The target is",
            "description": ""
          },
          "a": {
            "type": "pandas Series.",
            "description": ""
          },
          "DataFrames": {
            "type": "or Series as described below.",
            "description": ".. versionadded:: 0.23"
          },
          "scaled": {
            "type": "bool, default=True",
            "description": ""
          },
          "standard": {
            "type": "deviation times the square root of `n_samples`.",
            "description": ""
          },
          "data": {
            "type": "{ndarray, dataframe} of shape (442, 10)",
            "description": ""
          },
          "The": {
            "type": "path to the location of the target.",
            "description": "(data, target) : tuple if ``return_X_y`` is True"
          },
          "target": {
            "type": "{ndarray, Series} of shape (442,)",
            "description": ""
          },
          "feature_names": {
            "type": "list",
            "description": ""
          },
          "frame": {
            "type": "DataFrame of shape (442, 11)",
            "description": ""
          },
          "Only": {
            "type": "present when `as_frame=True`. DataFrame with `data` and",
            "description": "`target`.\n.. versionadded:: 0.23"
          },
          "DESCR": {
            "type": "str",
            "description": ""
          },
          "data_filename": {
            "type": "str",
            "description": ""
          },
          "target_filename": {
            "type": "str",
            "description": ""
          },
          "Returns": {
            "type": "a tuple of two ndarray of shape (n_samples, n_features)",
            "description": ""
          },
          "A": {
            "type": "2D array with each row representing one sample and each column",
            "description": ""
          },
          "representing": {
            "type": "the features and/or target of a given sample.",
            "description": ".. versionadded:: 0.18\nExamples\n--------\n>>> from sklearn.datasets import load_diabetes\n>>> diabetes = load_diabetes()\n>>> diabetes.target[:3]"
          },
          "array": {
            "type": "[151.,  75., 141.]",
            "description": ">>> diabetes.data.shape\n(442, 10)"
          }
        },
        "returns": "-------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : {ndarray, dataframe} of shape (442, 10)\n            The data matrix. If `as_frame=True`, `data` will be a pandas\n            DataFrame.\n        target: {ndarray, Series} of shape (442,)\n            The regression target. If `as_frame=True`, `target` will be\n            a pandas Series.\n        feature_names: list\n            The names of the dataset columns.\n        frame: DataFrame of shape (442, 11)\n            Only present when `as_frame=True`. DataFrame with `data` and\n            `target`.\n\n            .. versionadded:: 0.23\n        DESCR: str\n            The full description of the dataset.\n        data_filename: str\n            The path to the location of the data.\n        target_filename: str\n            The path to the location of the target.\n\n    (data, target) : tuple if ``return_X_y`` is True",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import load_diabetes\n    >>> diabetes = load_diabetes()\n    >>> diabetes.target[:3]\n    array([151.,  75., 141.])\n    >>> diabetes.data.shape\n    (442, 10)"
      }
    },
    {
      "name": "load_digits",
      "signature": "load_digits(*, n_class=10, return_X_y=False, as_frame=False)",
      "documentation": {
        "description": "Load and return the digits dataset (classification).\n\n    Each datapoint is a 8x8 image of a digit.\n\n    =================   ==============\n    Classes                         10\n    Samples per class             ~180\n    Samples total                 1797\n    Dimensionality                  64\n    Features             integers 0-16\n    =================   ==============\n\n    This is a copy of the test set of the UCI ML hand-written digits datasets\n    https://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits\n\n    Read more in the :ref:`User Guide <digits_dataset>`.\n\n    Parameters\n    ----------\n    n_class : int, default=10\n        The number of classes to return. Between 0 and 10.\n\n    return_X_y : bool, default=False\n        If True, returns ``(data, target)`` instead of a Bunch object.\n        See below for more information about the `data` and `target` object.\n\n        .. versionadded:: 0.18\n\n    as_frame : bool, default=False\n        If True, the data is a pandas DataFrame including columns with\n        appropriate dtypes (numeric). The target is\n        a pandas DataFrame or Series depending on the number of target columns.\n        If `return_X_y` is True, then (`data`, `target`) will be pandas\n        DataFrames or Series as described below.\n\n        .. versionadded:: 0.23\n\n    Returns\n    -------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : {ndarray, dataframe} of shape (1797, 64)\n            The flattened data matrix. If `as_frame=True`, `data` will be\n            a pandas DataFrame.\n        target: {ndarray, Series} of shape (1797,)\n            The classification target. If `as_frame=True`, `target` will be\n            a pandas Series.\n        feature_names: list\n            The names of the dataset columns.\n        target_names: list\n            The names of target classes.\n\n            .. versionadded:: 0.20\n\n        frame: DataFrame of shape (1797, 65)\n            Only present when `as_frame=True`. DataFrame with `data` and\n            `target`.\n\n            .. versionadded:: 0.23\n        images: {ndarray} of shape (1797, 8, 8)\n            The raw image data.\n        DESCR: str\n            The full description of the dataset.\n\n    (data, target) : tuple if ``return_X_y`` is True\n        A tuple of two ndarrays by default. The first contains a 2D ndarray of\n        shape (1797, 64) with each row representing one sample and each column\n        representing the features. The second ndarray of shape (1797) contains\n        the target samples.  If `as_frame=True`, both arrays are pandas objects,\n        i.e. `X` a dataframe and `y` a series.\n\n        .. versionadded:: 0.18",
        "parameters": {
          "n_class": {
            "type": "int, default=10",
            "description": ""
          },
          "The": {
            "type": "full description of the dataset.",
            "description": "(data, target) : tuple if ``return_X_y`` is True"
          },
          "return_X_y": {
            "type": "bool, default=False",
            "description": ""
          },
          "If": {
            "type": "`return_X_y` is True, then (`data`, `target`) will be pandas",
            "description": ""
          },
          "See": {
            "type": "below for more information about the `data` and `target` object.",
            "description": ".. versionadded:: 0.18"
          },
          "as_frame": {
            "type": "bool, default=False",
            "description": ""
          },
          "appropriate": {
            "type": "dtypes (numeric). The target is",
            "description": ""
          },
          "a": {
            "type": "pandas Series.",
            "description": ""
          },
          "DataFrames": {
            "type": "or Series as described below.",
            "description": ".. versionadded:: 0.23\nReturns\n-------"
          },
          "data": {
            "type": "{ndarray, dataframe} of shape (1797, 64)",
            "description": ""
          },
          "target": {
            "type": "{ndarray, Series} of shape (1797,)",
            "description": ""
          },
          "feature_names": {
            "type": "list",
            "description": ""
          },
          "target_names": {
            "type": "list",
            "description": ""
          },
          "frame": {
            "type": "DataFrame of shape (1797, 65)",
            "description": ""
          },
          "Only": {
            "type": "present when `as_frame=True`. DataFrame with `data` and",
            "description": "`target`.\n.. versionadded:: 0.23"
          },
          "images": {
            "type": "{ndarray} of shape (1797, 8, 8)",
            "description": ""
          },
          "DESCR": {
            "type": "str",
            "description": ""
          },
          "A": {
            "type": "tuple of two ndarrays by default. The first contains a 2D ndarray of",
            "description": ""
          },
          "shape": {
            "type": "1797, 64",
            "description": "with each row representing one sample and each column"
          },
          "representing": {
            "type": "the features. The second ndarray of shape (1797) contains",
            "description": ""
          },
          "the": {
            "type": "target samples.  If `as_frame=True`, both arrays are pandas objects,",
            "description": "i.e. `X` a dataframe and `y` a series.\n.. versionadded:: 0.18\nExamples\n--------"
          },
          "To": {
            "type": "load the data and visualize the images::",
            "description": ">>> from sklearn.datasets import load_digits\n>>> digits = load_digits()\n>>> print(digits.data.shape)\n(1797, 64)\n>>> import matplotlib.pyplot as plt\n>>> plt.gray()\n>>> plt.matshow(digits.images[0])\n<...>\n>>> plt.show()"
          }
        },
        "returns": "-------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : {ndarray, dataframe} of shape (1797, 64)\n            The flattened data matrix. If `as_frame=True`, `data` will be\n            a pandas DataFrame.\n        target: {ndarray, Series} of shape (1797,)\n            The classification target. If `as_frame=True`, `target` will be\n            a pandas Series.\n        feature_names: list\n            The names of the dataset columns.\n        target_names: list\n            The names of target classes.\n\n            .. versionadded:: 0.20\n\n        frame: DataFrame of shape (1797, 65)\n            Only present when `as_frame=True`. DataFrame with `data` and\n            `target`.\n\n            .. versionadded:: 0.23\n        images: {ndarray} of shape (1797, 8, 8)\n            The raw image data.\n        DESCR: str\n            The full description of the dataset.\n\n    (data, target) : tuple if ``return_X_y`` is True\n        A tuple of two ndarrays by default. The first contains a 2D ndarray of\n        shape (1797, 64) with each row representing one sample and each column\n        representing the features. The second ndarray of shape (1797) contains\n        the target samples.  If `as_frame=True`, both arrays are pandas objects,\n        i.e. `X` a dataframe and `y` a series.\n\n        .. versionadded:: 0.18\n\n    Examples\n    --------\n    To load the data and visualize the images::\n\n        >>> from sklearn.datasets import load_digits\n        >>> digits = load_digits()\n        >>> print(digits.data.shape)\n        (1797, 64)\n        >>> import matplotlib.pyplot as plt\n        >>> plt.gray()\n        >>> plt.matshow(digits.images[0])\n        <...>\n        >>> plt.show()",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    To load the data and visualize the images::\n\n        >>> from sklearn.datasets import load_digits\n        >>> digits = load_digits()\n        >>> print(digits.data.shape)\n        (1797, 64)\n        >>> import matplotlib.pyplot as plt\n        >>> plt.gray()\n        >>> plt.matshow(digits.images[0])\n        <...>\n        >>> plt.show()"
      }
    },
    {
      "name": "load_files",
      "signature": "load_files(container_path, *, description=None, categories=None, load_content=True, shuffle=True, encoding=None, decode_error='strict', random_state=0, allowed_extensions=None)",
      "documentation": {
        "description": "Load text files with categories as subfolder names.\n\n    Individual samples are assumed to be files stored a two levels folder\n    structure such as the following:\n\n    .. code-block:: text\n\n        container_folder/\n            category_1_folder/\n                file_1.txt\n                file_2.txt\n                ...\n                file_42.txt\n            category_2_folder/\n                file_43.txt\n                file_44.txt\n                ...\n\n    The folder names are used as supervised signal label names. The individual\n    file names are not important.\n\n    This function does not try to extract features into a numpy array or scipy\n    sparse matrix. In addition, if load_content is false it does not try to\n    load the files in memory.\n\n    To use text files in a scikit-learn classification or clustering algorithm,\n    you will need to use the :mod:`~sklearn.feature_extraction.text` module to\n    build a feature extraction transformer that suits your problem.\n\n    If you set load_content=True, you should also specify the encoding of the\n    text using the 'encoding' parameter. For many modern text files, 'utf-8'\n    will be the correct encoding. If you leave encoding equal to None, then the\n    content will be made of bytes instead of Unicode, and you will not be able\n    to use most functions in :mod:`~sklearn.feature_extraction.text`.\n\n    Similar feature extractors should be built for other kind of unstructured\n    data input such as images, audio, video, ...\n\n    If you want files with a specific file extension (e.g. `.txt`) then you\n    can pass a list of those file extensions to `allowed_extensions`.\n\n    Read more in the :ref:`User Guide <datasets>`.\n\n    Parameters\n    ----------\n    container_path : str\n        Path to the main folder holding one subfolder per category.\n\n    description : str, default=None\n        A paragraph describing the characteristic of the dataset: its source,\n        reference, etc.\n\n    categories : list of str, default=None\n        If None (default), load all the categories. If not None, list of\n        category names to load (other categories ignored).\n\n    load_content : bool, default=True\n        Whether to load or not the content of the different files. If true a\n        'data' attribute containing the text information is present in the data\n        structure returned. If not, a filenames attribute gives the path to the\n        files.\n\n    shuffle : bool, default=True\n        Whether or not to shuffle the data: might be important for models that\n        make the assumption that the samples are independent and identically\n        distributed (i.i.d.), such as stochastic gradient descent.\n\n    encoding : str, default=None\n        If None, do not try to decode the content of the files (e.g. for images\n        or other non-text content). If not None, encoding to use to decode text\n        files to Unicode if load_content is True.\n\n    decode_error : {'strict', 'ignore', 'replace'}, default='strict'\n        Instruction on what to do if a byte sequence is given to analyze that\n        contains characters not of the given `encoding`. Passed as keyword\n        argument 'errors' to bytes.decode.\n\n    random_state : int, RandomState instance or None, default=0\n        Determines random number generation for dataset shuffling. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    allowed_extensions : list of str, default=None\n        List of desired file extensions to filter the files to be loaded.\n\n    Returns\n    -------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : list of str\n            Only present when `load_content=True`.\n            The raw text data to learn.\n        target : ndarray\n            The target labels (integer index).\n        target_names : list\n            The names of target classes.\n        DESCR : str\n            The full description of the dataset.\n        filenames: ndarray\n            The filenames holding the dataset.",
        "parameters": {
          "container_path": {
            "type": "str",
            "description": ""
          },
          "Path": {
            "type": "to the main folder holding one subfolder per category.",
            "description": ""
          },
          "description": {
            "type": "str, default=None",
            "description": ""
          },
          "A": {
            "type": "paragraph describing the characteristic of the dataset: its source,",
            "description": "reference, etc."
          },
          "categories": {
            "type": "list of str, default=None",
            "description": ""
          },
          "If": {
            "type": "None, do not try to decode the content of the files (e.g. for images",
            "description": ""
          },
          "category": {
            "type": "names to load (other categories ignored).",
            "description": ""
          },
          "load_content": {
            "type": "bool, default=True",
            "description": ""
          },
          "Whether": {
            "type": "or not to shuffle the data: might be important for models that",
            "description": ""
          },
          "structure": {
            "type": "returned. If not, a filenames attribute gives the path to the",
            "description": "files."
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": ""
          },
          "make": {
            "type": "the assumption that the samples are independent and identically",
            "description": ""
          },
          "distributed": {
            "type": "i.i.d.",
            "description": ", such as stochastic gradient descent."
          },
          "encoding": {
            "type": "str, default=None",
            "description": ""
          },
          "or": {
            "type": "other non-text content). If not None, encoding to use to decode text",
            "description": ""
          },
          "files": {
            "type": "to Unicode if load_content is True.",
            "description": ""
          },
          "decode_error": {
            "type": "{'strict', 'ignore', 'replace'}, default='strict'",
            "description": ""
          },
          "Instruction": {
            "type": "on what to do if a byte sequence is given to analyze that",
            "description": ""
          },
          "contains": {
            "type": "characters not of the given `encoding`. Passed as keyword",
            "description": ""
          },
          "argument": {
            "type": "'errors' to bytes.decode.",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=0",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset shuffling. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "term:`Glossary <random_state>`.",
            "description": ""
          },
          "allowed_extensions": {
            "type": "list of str, default=None",
            "description": ""
          },
          "List": {
            "type": "of desired file extensions to filter the files to be loaded.",
            "description": "Returns\n-------"
          },
          "data": {
            "type": "list of str",
            "description": ""
          },
          "Only": {
            "type": "present when `load_content=True`.",
            "description": ""
          },
          "The": {
            "type": "filenames holding the dataset.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import load_files\n>>> container_path = \"./\"\n>>> load_files(container_path)  # doctest: +SKIP"
          },
          "target": {
            "type": "ndarray",
            "description": ""
          },
          "target_names": {
            "type": "list",
            "description": ""
          },
          "DESCR": {
            "type": "str",
            "description": ""
          },
          "filenames": {
            "type": "ndarray",
            "description": ""
          }
        },
        "returns": "-------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : list of str\n            Only present when `load_content=True`.\n            The raw text data to learn.\n        target : ndarray\n            The target labels (integer index).\n        target_names : list\n            The names of target classes.\n        DESCR : str\n            The full description of the dataset.\n        filenames: ndarray\n            The filenames holding the dataset.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import load_files\n    >>> container_path = \"./\"\n    >>> load_files(container_path)  # doctest: +SKIP",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import load_files\n    >>> container_path = \"./\"\n    >>> load_files(container_path)  # doctest: +SKIP"
      }
    },
    {
      "name": "load_iris",
      "signature": "load_iris(*, return_X_y=False, as_frame=False)",
      "documentation": {
        "description": "Load and return the iris dataset (classification).\n\n    The iris dataset is a classic and very easy multi-class classification\n    dataset.\n\n    =================   ==============\n    Classes                          3\n    Samples per class               50\n    Samples total                  150\n    Dimensionality                   4\n    Features            real, positive\n    =================   ==============\n\n    Read more in the :ref:`User Guide <iris_dataset>`.\n\n    .. versionchanged:: 0.20\n        Fixed two wrong data points according to Fisher's paper.\n        The new version is the same as in R, but not as in the UCI\n        Machine Learning Repository.\n\n    Parameters\n    ----------\n    return_X_y : bool, default=False\n        If True, returns ``(data, target)`` instead of a Bunch object. See\n        below for more information about the `data` and `target` object.\n\n        .. versionadded:: 0.18\n\n    as_frame : bool, default=False\n        If True, the data is a pandas DataFrame including columns with\n        appropriate dtypes (numeric). The target is\n        a pandas DataFrame or Series depending on the number of target columns.\n        If `return_X_y` is True, then (`data`, `target`) will be pandas\n        DataFrames or Series as described below.\n\n        .. versionadded:: 0.23\n\n    Returns\n    -------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : {ndarray, dataframe} of shape (150, 4)\n            The data matrix. If `as_frame=True`, `data` will be a pandas\n            DataFrame.\n        target: {ndarray, Series} of shape (150,)\n            The classification target. If `as_frame=True`, `target` will be\n            a pandas Series.\n        feature_names: list\n            The names of the dataset columns.\n        target_names: list\n            The names of target classes.\n        frame: DataFrame of shape (150, 5)\n            Only present when `as_frame=True`. DataFrame with `data` and\n            `target`.\n\n            .. versionadded:: 0.23\n        DESCR: str\n            The full description of the dataset.\n        filename: str\n            The path to the location of the data.\n\n            .. versionadded:: 0.20\n\n    (data, target) : tuple if ``return_X_y`` is True\n        A tuple of two ndarray. The first containing a 2D array of shape\n        (n_samples, n_features) with each row representing one sample and\n        each column representing the features. The second ndarray of shape\n        (n_samples,) containing the target samples.\n\n        .. versionadded:: 0.18",
        "parameters": {
          "return_X_y": {
            "type": "bool, default=False",
            "description": ""
          },
          "If": {
            "type": "`return_X_y` is True, then (`data`, `target`) will be pandas",
            "description": ""
          },
          "below": {
            "type": "for more information about the `data` and `target` object.",
            "description": ".. versionadded:: 0.18"
          },
          "as_frame": {
            "type": "bool, default=False",
            "description": ""
          },
          "appropriate": {
            "type": "dtypes (numeric). The target is",
            "description": ""
          },
          "a": {
            "type": "pandas Series.",
            "description": ""
          },
          "DataFrames": {
            "type": "or Series as described below.",
            "description": ".. versionadded:: 0.23\nReturns\n-------"
          },
          "data": {
            "type": "{ndarray, dataframe} of shape (150, 4)",
            "description": ""
          },
          "The": {
            "type": "path to the location of the data.",
            "description": ".. versionadded:: 0.20\n(data, target) : tuple if ``return_X_y`` is True"
          },
          "target": {
            "type": "{ndarray, Series} of shape (150,)",
            "description": ""
          },
          "feature_names": {
            "type": "list",
            "description": ""
          },
          "target_names": {
            "type": "list",
            "description": ""
          },
          "frame": {
            "type": "DataFrame of shape (150, 5)",
            "description": ""
          },
          "Only": {
            "type": "present when `as_frame=True`. DataFrame with `data` and",
            "description": "`target`.\n.. versionadded:: 0.23"
          },
          "DESCR": {
            "type": "str",
            "description": ""
          },
          "filename": {
            "type": "str",
            "description": ""
          },
          "A": {
            "type": "tuple of two ndarray. The first containing a 2D array of shape",
            "description": "(n_samples, n_features) with each row representing one sample and"
          },
          "each": {
            "type": "column representing the features. The second ndarray of shape",
            "description": "(n_samples,) containing the target samples.\n.. versionadded:: 0.18\nExamples\n--------\nLet's say you are interested in the samples 10, 25, and 50, and want to"
          },
          "know": {
            "type": "their class name.",
            "description": ">>> from sklearn.datasets import load_iris\n>>> data = load_iris()\n>>> data.target[[10, 25, 50]]"
          },
          "array": {
            "type": "[0, 0, 1]",
            "description": ">>> list(data.target_names)\n[np.str_('setosa'), np.str_('versicolor'), np.str_('virginica')]"
          },
          "See": {
            "type": "ref:`sphx_glr_auto_examples_decomposition_plot_pca_iris.py` for a more",
            "description": ""
          },
          "detailed": {
            "type": "example of how to work with the iris dataset.",
            "description": ""
          }
        },
        "returns": "-------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : {ndarray, dataframe} of shape (150, 4)\n            The data matrix. If `as_frame=True`, `data` will be a pandas\n            DataFrame.\n        target: {ndarray, Series} of shape (150,)\n            The classification target. If `as_frame=True`, `target` will be\n            a pandas Series.\n        feature_names: list\n            The names of the dataset columns.\n        target_names: list\n            The names of target classes.\n        frame: DataFrame of shape (150, 5)\n            Only present when `as_frame=True`. DataFrame with `data` and\n            `target`.\n\n            .. versionadded:: 0.23\n        DESCR: str\n            The full description of the dataset.\n        filename: str\n            The path to the location of the data.\n\n            .. versionadded:: 0.20\n\n    (data, target) : tuple if ``return_X_y`` is True\n        A tuple of two ndarray. The first containing a 2D array of shape\n        (n_samples, n_features) with each row representing one sample and\n        each column representing the features. The second ndarray of shape\n        (n_samples,) containing the target samples.\n\n        .. versionadded:: 0.18\n\n    Examples\n    --------\n    Let's say you are interested in the samples 10, 25, and 50, and want to\n    know their class name.\n\n    >>> from sklearn.datasets import load_iris\n    >>> data = load_iris()\n    >>> data.target[[10, 25, 50]]\n    array([0, 0, 1])\n    >>> list(data.target_names)\n    [np.str_('setosa'), np.str_('versicolor'), np.str_('virginica')]\n\n    See :ref:`sphx_glr_auto_examples_decomposition_plot_pca_iris.py` for a more\n    detailed example of how to work with the iris dataset.",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    Let's say you are interested in the samples 10, 25, and 50, and want to\n    know their class name.\n\n    >>> from sklearn.datasets import load_iris\n    >>> data = load_iris()\n    >>> data.target[[10, 25, 50]]\n    array([0, 0, 1])\n    >>> list(data.target_names)\n    [np.str_('setosa'), np.str_('versicolor'), np.str_('virginica')]\n\n    See :ref:`sphx_glr_auto_examples_decomposition_plot_pca_iris.py` for a more\n    detailed example of how to work with the iris dataset."
      }
    },
    {
      "name": "load_linnerud",
      "signature": "load_linnerud(*, return_X_y=False, as_frame=False)",
      "documentation": {
        "description": "Load and return the physical exercise Linnerud dataset.\n\n    This dataset is suitable for multi-output regression tasks.\n\n    ==============   ============================\n    Samples total    20\n    Dimensionality   3 (for both data and target)\n    Features         integer\n    Targets          integer\n    ==============   ============================\n\n    Read more in the :ref:`User Guide <linnerrud_dataset>`.\n\n    Parameters\n    ----------\n    return_X_y : bool, default=False\n        If True, returns ``(data, target)`` instead of a Bunch object.\n        See below for more information about the `data` and `target` object.\n\n        .. versionadded:: 0.18\n\n    as_frame : bool, default=False\n        If True, the data is a pandas DataFrame including columns with\n        appropriate dtypes (numeric, string or categorical). The target is\n        a pandas DataFrame or Series depending on the number of target columns.\n        If `return_X_y` is True, then (`data`, `target`) will be pandas\n        DataFrames or Series as described below.\n\n        .. versionadded:: 0.23\n\n    Returns\n    -------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : {ndarray, dataframe} of shape (20, 3)\n            The data matrix. If `as_frame=True`, `data` will be a pandas\n            DataFrame.\n        target: {ndarray, dataframe} of shape (20, 3)\n            The regression targets. If `as_frame=True`, `target` will be\n            a pandas DataFrame.\n        feature_names: list\n            The names of the dataset columns.\n        target_names: list\n            The names of the target columns.\n        frame: DataFrame of shape (20, 6)\n            Only present when `as_frame=True`. DataFrame with `data` and\n            `target`.\n\n            .. versionadded:: 0.23\n        DESCR: str\n            The full description of the dataset.\n        data_filename: str\n            The path to the location of the data.\n        target_filename: str\n            The path to the location of the target.\n\n            .. versionadded:: 0.20\n\n    (data, target) : tuple if ``return_X_y`` is True\n        Returns a tuple of two ndarrays or dataframe of shape\n        `(20, 3)`. Each row represents one sample and each column represents the\n        features in `X` and a target in `y` of a given sample.\n\n        .. versionadded:: 0.18",
        "parameters": {
          "return_X_y": {
            "type": "bool, default=False",
            "description": ""
          },
          "If": {
            "type": "`return_X_y` is True, then (`data`, `target`) will be pandas",
            "description": ""
          },
          "See": {
            "type": "below for more information about the `data` and `target` object.",
            "description": ".. versionadded:: 0.18"
          },
          "as_frame": {
            "type": "bool, default=False",
            "description": ""
          },
          "appropriate": {
            "type": "dtypes (numeric, string or categorical). The target is",
            "description": ""
          },
          "a": {
            "type": "pandas DataFrame.",
            "description": ""
          },
          "DataFrames": {
            "type": "or Series as described below.",
            "description": ".. versionadded:: 0.23\nReturns\n-------"
          },
          "data": {
            "type": "{ndarray, dataframe} of shape (20, 3)",
            "description": ""
          },
          "The": {
            "type": "path to the location of the target.",
            "description": ".. versionadded:: 0.20\n(data, target) : tuple if ``return_X_y`` is True"
          },
          "target": {
            "type": "{ndarray, dataframe} of shape (20, 3)",
            "description": ""
          },
          "feature_names": {
            "type": "list",
            "description": ""
          },
          "target_names": {
            "type": "list",
            "description": ""
          },
          "frame": {
            "type": "DataFrame of shape (20, 6)",
            "description": ""
          },
          "Only": {
            "type": "present when `as_frame=True`. DataFrame with `data` and",
            "description": "`target`.\n.. versionadded:: 0.23"
          },
          "DESCR": {
            "type": "str",
            "description": ""
          },
          "data_filename": {
            "type": "str",
            "description": ""
          },
          "target_filename": {
            "type": "str",
            "description": ""
          },
          "Returns": {
            "type": "a tuple of two ndarrays or dataframe of shape",
            "description": "`(20, 3)`. Each row represents one sample and each column represents the"
          },
          "features": {
            "type": "in `X` and a target in `y` of a given sample.",
            "description": ".. versionadded:: 0.18\nExamples\n--------\n>>> from sklearn.datasets import load_linnerud\n>>> linnerud = load_linnerud()\n>>> linnerud.data.shape\n(20, 3)\n>>> linnerud.target.shape\n(20, 3)"
          }
        },
        "returns": "-------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : {ndarray, dataframe} of shape (20, 3)\n            The data matrix. If `as_frame=True`, `data` will be a pandas\n            DataFrame.\n        target: {ndarray, dataframe} of shape (20, 3)\n            The regression targets. If `as_frame=True`, `target` will be\n            a pandas DataFrame.\n        feature_names: list\n            The names of the dataset columns.\n        target_names: list\n            The names of the target columns.\n        frame: DataFrame of shape (20, 6)\n            Only present when `as_frame=True`. DataFrame with `data` and\n            `target`.\n\n            .. versionadded:: 0.23\n        DESCR: str\n            The full description of the dataset.\n        data_filename: str\n            The path to the location of the data.\n        target_filename: str\n            The path to the location of the target.\n\n            .. versionadded:: 0.20\n\n    (data, target) : tuple if ``return_X_y`` is True",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import load_linnerud\n    >>> linnerud = load_linnerud()\n    >>> linnerud.data.shape\n    (20, 3)\n    >>> linnerud.target.shape\n    (20, 3)"
      }
    },
    {
      "name": "load_sample_image",
      "signature": "load_sample_image(image_name)",
      "documentation": {
        "description": "Load the numpy array of a single sample image.\n\n    Read more in the :ref:`User Guide <sample_images>`.\n\n    Parameters\n    ----------\n    image_name : {`china.jpg`, `flower.jpg`}\n        The name of the sample image loaded.\n\n    Returns\n    -------\n    img : 3D array\n        The image as a numpy array: height x width x color.",
        "parameters": {
          "image_name": {
            "type": "{`china.jpg`, `flower.jpg`}",
            "description": ""
          },
          "The": {
            "type": "image as a numpy array: height x width x color.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import load_sample_image\n>>> china = load_sample_image('china.jpg')   # doctest: +SKIP\n>>> china.dtype                              # doctest: +SKIP"
          },
          "img": {
            "type": "3D array",
            "description": ""
          },
          "dtype": {
            "type": "'uint8'",
            "description": ">>> flower.shape                             # doctest: +SKIP\n(427, 640, 3)"
          }
        },
        "returns": "-------\n    img : 3D array\n        The image as a numpy array: height x width x color.\n\n    Examples\n    --------\n\n    >>> from sklearn.datasets import load_sample_image\n    >>> china = load_sample_image('china.jpg')   # doctest: +SKIP\n    >>> china.dtype                              # doctest: +SKIP\n    dtype('uint8')\n    >>> china.shape                              # doctest: +SKIP\n    (427, 640, 3)\n    >>> flower = load_sample_image('flower.jpg') # doctest: +SKIP\n    >>> flower.dtype                             # doctest: +SKIP\n    dtype('uint8')\n    >>> flower.shape                             # doctest: +SKIP\n    (427, 640, 3)",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n\n    >>> from sklearn.datasets import load_sample_image\n    >>> china = load_sample_image('china.jpg')   # doctest: +SKIP\n    >>> china.dtype                              # doctest: +SKIP\n    dtype('uint8')\n    >>> china.shape                              # doctest: +SKIP\n    (427, 640, 3)\n    >>> flower = load_sample_image('flower.jpg') # doctest: +SKIP\n    >>> flower.dtype                             # doctest: +SKIP\n    dtype('uint8')\n    >>> flower.shape                             # doctest: +SKIP\n    (427, 640, 3)"
      }
    },
    {
      "name": "load_sample_images",
      "signature": "load_sample_images()",
      "documentation": {
        "description": "Load sample images for image manipulation.\n\n    Loads both, ``china`` and ``flower``.\n\n    Read more in the :ref:`User Guide <sample_images>`.\n\n    Returns\n    -------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        images : list of ndarray of shape (427, 640, 3)\n            The two sample image.\n        filenames : list\n            The filenames for the images.\n        DESCR : str\n            The full description of the dataset.",
        "parameters": {},
        "returns": "-------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        images : list of ndarray of shape (427, 640, 3)\n            The two sample image.\n        filenames : list\n            The filenames for the images.\n        DESCR : str\n            The full description of the dataset.\n\n    Examples\n    --------\n    To load the data and visualize the images:\n\n    >>> from sklearn.datasets import load_sample_images\n    >>> dataset = load_sample_images()     #doctest: +SKIP\n    >>> len(dataset.images)                #doctest: +SKIP\n    2\n    >>> first_img_data = dataset.images[0] #doctest: +SKIP\n    >>> first_img_data.shape               #doctest: +SKIP\n    (427, 640, 3)\n    >>> first_img_data.dtype               #doctest: +SKIP\n    dtype('uint8')",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    To load the data and visualize the images:\n\n    >>> from sklearn.datasets import load_sample_images\n    >>> dataset = load_sample_images()     #doctest: +SKIP\n    >>> len(dataset.images)                #doctest: +SKIP\n    2\n    >>> first_img_data = dataset.images[0] #doctest: +SKIP\n    >>> first_img_data.shape               #doctest: +SKIP\n    (427, 640, 3)\n    >>> first_img_data.dtype               #doctest: +SKIP\n    dtype('uint8')"
      }
    },
    {
      "name": "load_svmlight_file",
      "signature": "load_svmlight_file(f, *, n_features=None, dtype=<class 'numpy.float64'>, multilabel=False, zero_based='auto', query_id=False, offset=0, length=-1)",
      "documentation": {
        "description": "Load datasets in the svmlight / libsvm format into sparse CSR matrix.\n\n    This format is a text-based format, with one sample per line. It does\n    not store zero valued features hence is suitable for sparse dataset.\n\n    The first element of each line can be used to store a target variable\n    to predict.\n\n    This format is used as the default format for both svmlight and the\n    libsvm command line programs.\n\n    Parsing a text based source can be expensive. When repeatedly\n    working on the same dataset, it is recommended to wrap this\n    loader with joblib.Memory.cache to store a memmapped backup of the\n    CSR results of the first call and benefit from the near instantaneous\n    loading of memmapped structures for the subsequent calls.\n\n    In case the file contains a pairwise preference constraint (known\n    as \"qid\" in the svmlight format) these are ignored unless the\n    query_id parameter is set to True. These pairwise preference\n    constraints can be used to constraint the combination of samples\n    when using pairwise loss functions (as is the case in some\n    learning to rank problems) so that only pairs with the same\n    query_id value are considered.\n\n    This implementation is written in Cython and is reasonably fast.\n    However, a faster API-compatible loader is also available at:\n    https://github.com/mblondel/svmlight-loader\n\n    Parameters\n    ----------\n    f : str, path-like, file-like or int\n        (Path to) a file to load. If a path ends in \".gz\" or \".bz2\", it will\n        be uncompressed on the fly. If an integer is passed, it is assumed to\n        be a file descriptor. A file-like or file descriptor will not be closed\n        by this function. A file-like object must be opened in binary mode.\n\n        .. versionchanged:: 1.2\n           Path-like objects are now accepted.\n\n    n_features : int, default=None\n        The number of features to use. If None, it will be inferred. This\n        argument is useful to load several files that are subsets of a\n        bigger sliced dataset: each subset might not have examples of\n        every feature, hence the inferred shape might vary from one\n        slice to another.\n        n_features is only required if ``offset`` or ``length`` are passed a\n        non-default value.\n\n    dtype : numpy data type, default=np.float64\n        Data type of dataset to be loaded. This will be the data type of the\n        output numpy arrays ``X`` and ``y``.\n\n    multilabel : bool, default=False\n        Samples may have several labels each (see\n        https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multilabel.html).\n\n    zero_based : bool or \"auto\", default=\"auto\"\n        Whether column indices in f are zero-based (True) or one-based\n        (False). If column indices are one-based, they are transformed to\n        zero-based to match Python/NumPy conventions.\n        If set to \"auto\", a heuristic check is applied to determine this from\n        the file contents. Both kinds of files occur \"in the wild\", but they\n        are unfortunately not self-identifying. Using \"auto\" or True should\n        always be safe when no ``offset`` or ``length`` is passed.\n        If ``offset`` or ``length`` are passed, the \"auto\" mode falls back\n        to ``zero_based=True`` to avoid having the heuristic check yield\n        inconsistent results on different segments of the file.\n\n    query_id : bool, default=False\n        If True, will return the query_id array for each file.\n\n    offset : int, default=0\n        Ignore the offset first bytes by seeking forward, then\n        discarding the following bytes up until the next new line\n        character.\n\n    length : int, default=-1\n        If strictly positive, stop reading any new line of data once the\n        position in the file has reached the (offset + length) bytes threshold.\n\n    Returns\n    -------\n    X : scipy.sparse matrix of shape (n_samples, n_features)\n        The data matrix.\n\n    y : ndarray of shape (n_samples,), or a list of tuples of length n_samples\n        The target. It is a list of tuples when ``multilabel=True``, else a\n        ndarray.\n\n    query_id : array of shape (n_samples,)\n       The query_id for each sample. Only returned when query_id is set to\n       True.\n\n    See Also\n    --------\n    load_svmlight_files : Similar function for loading multiple files in this\n        format, enforcing the same number of features/columns on all of them.",
        "parameters": {
          "f": {
            "type": "str, path",
            "description": "like, file-like or int\n(Path to) a file to load. If a path ends in \".gz\" or \".bz2\", it will"
          },
          "be": {
            "type": "a file descriptor. A file-like or file descriptor will not be closed",
            "description": ""
          },
          "by": {
            "type": "this function. A file-like object must be opened in binary mode.",
            "description": ".. versionchanged:: 1.2\nPath-like objects are now accepted."
          },
          "n_features": {
            "type": "is only required if ``offset`` or ``length`` are passed a",
            "description": "non-default value."
          },
          "The": {
            "type": "query_id for each sample. Only returned when query_id is set to",
            "description": "True."
          },
          "argument": {
            "type": "is useful to load several files that are subsets of a",
            "description": ""
          },
          "bigger": {
            "type": "sliced dataset: each subset might not have examples of",
            "description": ""
          },
          "every": {
            "type": "feature, hence the inferred shape might vary from one",
            "description": ""
          },
          "slice": {
            "type": "to another.",
            "description": ""
          },
          "dtype": {
            "type": "numpy data type, default=np.float64",
            "description": ""
          },
          "Data": {
            "type": "type of dataset to be loaded. This will be the data type of the",
            "description": ""
          },
          "output": {
            "type": "numpy arrays ``X`` and ``y``.",
            "description": ""
          },
          "multilabel": {
            "type": "bool, default=False",
            "description": ""
          },
          "Samples": {
            "type": "may have several labels each (see",
            "description": ""
          },
          "https": {
            "type": "//www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multilabel.html).",
            "description": ""
          },
          "zero_based": {
            "type": "bool or \"auto\", default=\"auto\"",
            "description": ""
          },
          "Whether": {
            "type": "column indices in f are zero-based (True) or one-based",
            "description": "(False). If column indices are one-based, they are transformed to\nzero-based to match Python/NumPy conventions."
          },
          "If": {
            "type": "strictly positive, stop reading any new line of data once the",
            "description": ""
          },
          "the": {
            "type": "file contents. Both kinds of files occur \"in the wild\", but they",
            "description": ""
          },
          "are": {
            "type": "unfortunately not self-identifying. Using \"auto\" or True should",
            "description": ""
          },
          "always": {
            "type": "be safe when no ``offset`` or ``length`` is passed.",
            "description": ""
          },
          "to": {
            "type": "``zero_based=True`` to avoid having the heuristic check yield",
            "description": ""
          },
          "inconsistent": {
            "type": "results on different segments of the file.",
            "description": ""
          },
          "query_id": {
            "type": "array of shape (n_samples,)",
            "description": ""
          },
          "offset": {
            "type": "int, default=0",
            "description": ""
          },
          "Ignore": {
            "type": "the offset first bytes by seeking forward, then",
            "description": ""
          },
          "discarding": {
            "type": "the following bytes up until the next new line",
            "description": "character."
          },
          "length": {
            "type": "int, default=",
            "description": "1"
          },
          "position": {
            "type": "in the file has reached the (offset + length) bytes threshold.",
            "description": "Returns\n-------"
          },
          "X": {
            "type": "scipy.sparse matrix of shape (n_samples, n_features)",
            "description": ""
          },
          "y": {
            "type": "ndarray of shape (n_samples,), or a list of tuples of length n_samples",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "load_svmlight_files": {
            "type": "Similar function for loading multiple files in this",
            "description": "format, enforcing the same number of features/columns on all of them.\nExamples\n--------"
          },
          "To": {
            "type": "use joblib.Memory to cache the svmlight file::",
            "description": ""
          },
          "from": {
            "type": "sklearn.datasets import load_svmlight_file",
            "description": ""
          },
          "mem": {
            "type": "= Memory(\"./mycache\")",
            "description": "@mem.cache"
          },
          "def": {
            "type": "get_data():",
            "description": ""
          },
          "data": {
            "type": "= load_svmlight_file(\"mysvmlightfile\")",
            "description": ""
          },
          "return": {
            "type": "data[0], data[1]",
            "description": "X, y = get_data()"
          }
        },
        "returns": "data[0], data[1]\n\n        X, y = get_data()",
        "raises": "",
        "see_also": "--------\n    load_svmlight_files : Similar function for loading multiple files in this\n        format, enforcing the same number of features/columns on all of them.\n\n    Examples\n    --------\n    To use joblib.Memory to cache the svmlight file::\n\n        from joblib import Memory\n        from sklearn.datasets import load_svmlight_file\n        mem = Memory(\"./mycache\")\n\n        @mem.cache\n        def get_data():\n            data = load_svmlight_file(\"mysvmlightfile\")\n            return data[0], data[1]\n\n        X, y = get_data()",
        "notes": "",
        "examples": "--------\n    To use joblib.Memory to cache the svmlight file::\n\n        from joblib import Memory\n        from sklearn.datasets import load_svmlight_file\n        mem = Memory(\"./mycache\")\n\n        @mem.cache\n        def get_data():\n            data = load_svmlight_file(\"mysvmlightfile\")\n            return data[0], data[1]\n\n        X, y = get_data()"
      }
    },
    {
      "name": "load_svmlight_files",
      "signature": "load_svmlight_files(files, *, n_features=None, dtype=<class 'numpy.float64'>, multilabel=False, zero_based='auto', query_id=False, offset=0, length=-1)",
      "documentation": {
        "description": "Load dataset from multiple files in SVMlight format.\n\n    This function is equivalent to mapping load_svmlight_file over a list of\n    files, except that the results are concatenated into a single, flat list\n    and the samples vectors are constrained to all have the same number of\n    features.\n\n    In case the file contains a pairwise preference constraint (known\n    as \"qid\" in the svmlight format) these are ignored unless the\n    query_id parameter is set to True. These pairwise preference\n    constraints can be used to constraint the combination of samples\n    when using pairwise loss functions (as is the case in some\n    learning to rank problems) so that only pairs with the same\n    query_id value are considered.\n\n    Parameters\n    ----------\n    files : array-like, dtype=str, path-like, file-like or int\n        (Paths of) files to load. If a path ends in \".gz\" or \".bz2\", it will\n        be uncompressed on the fly. If an integer is passed, it is assumed to\n        be a file descriptor. File-likes and file descriptors will not be\n        closed by this function. File-like objects must be opened in binary\n        mode.\n\n        .. versionchanged:: 1.2\n           Path-like objects are now accepted.\n\n    n_features : int, default=None\n        The number of features to use. If None, it will be inferred from the\n        maximum column index occurring in any of the files.\n\n        This can be set to a higher value than the actual number of features\n        in any of the input files, but setting it to a lower value will cause\n        an exception to be raised.\n\n    dtype : numpy data type, default=np.float64\n        Data type of dataset to be loaded. This will be the data type of the\n        output numpy arrays ``X`` and ``y``.\n\n    multilabel : bool, default=False\n        Samples may have several labels each (see\n        https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multilabel.html).\n\n    zero_based : bool or \"auto\", default=\"auto\"\n        Whether column indices in f are zero-based (True) or one-based\n        (False). If column indices are one-based, they are transformed to\n        zero-based to match Python/NumPy conventions.\n        If set to \"auto\", a heuristic check is applied to determine this from\n        the file contents. Both kinds of files occur \"in the wild\", but they\n        are unfortunately not self-identifying. Using \"auto\" or True should\n        always be safe when no offset or length is passed.\n        If offset or length are passed, the \"auto\" mode falls back\n        to zero_based=True to avoid having the heuristic check yield\n        inconsistent results on different segments of the file.\n\n    query_id : bool, default=False\n        If True, will return the query_id array for each file.\n\n    offset : int, default=0\n        Ignore the offset first bytes by seeking forward, then\n        discarding the following bytes up until the next new line\n        character.\n\n    length : int, default=-1\n        If strictly positive, stop reading any new line of data once the\n        position in the file has reached the (offset + length) bytes threshold.\n\n    Returns\n    -------\n    [X1, y1, ..., Xn, yn] or [X1, y1, q1, ..., Xn, yn, qn]: list of arrays\n        Each (Xi, yi) pair is the result from load_svmlight_file(files[i]).\n        If query_id is set to True, this will return instead (Xi, yi, qi)\n        triplets.\n\n    See Also\n    --------\n    load_svmlight_file: Similar function for loading a single file in this\n        format.\n\n    Notes\n    -----\n    When fitting a model to a matrix X_train and evaluating it against a\n    matrix X_test, it is essential that X_train and X_test have the same\n    number of features (X_train.shape[1] == X_test.shape[1]). This may not\n    be the case if you load the files individually with load_svmlight_file.",
        "parameters": {
          "files": {
            "type": "array",
            "description": "like, dtype=str, path-like, file-like or int\n(Paths of) files to load. If a path ends in \".gz\" or \".bz2\", it will"
          },
          "be": {
            "type": "the case if you load the files individually with load_svmlight_file.",
            "description": "Examples\n--------"
          },
          "closed": {
            "type": "by this function. File-like objects must be opened in binary",
            "description": "mode.\n.. versionchanged:: 1.2\nPath-like objects are now accepted."
          },
          "n_features": {
            "type": "int, default=None",
            "description": ""
          },
          "The": {
            "type": "number of features to use. If None, it will be inferred from the",
            "description": ""
          },
          "maximum": {
            "type": "column index occurring in any of the files.",
            "description": ""
          },
          "This": {
            "type": "can be set to a higher value than the actual number of features",
            "description": ""
          },
          "in": {
            "type": "any of the input files, but setting it to a lower value will cause",
            "description": ""
          },
          "an": {
            "type": "exception to be raised.",
            "description": ""
          },
          "dtype": {
            "type": "numpy data type, default=np.float64",
            "description": ""
          },
          "Data": {
            "type": "type of dataset to be loaded. This will be the data type of the",
            "description": ""
          },
          "output": {
            "type": "numpy arrays ``X`` and ``y``.",
            "description": ""
          },
          "multilabel": {
            "type": "bool, default=False",
            "description": ""
          },
          "Samples": {
            "type": "may have several labels each (see",
            "description": ""
          },
          "https": {
            "type": "//www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multilabel.html).",
            "description": ""
          },
          "zero_based": {
            "type": "bool or \"auto\", default=\"auto\"",
            "description": ""
          },
          "Whether": {
            "type": "column indices in f are zero-based (True) or one-based",
            "description": "(False). If column indices are one-based, they are transformed to\nzero-based to match Python/NumPy conventions."
          },
          "If": {
            "type": "query_id is set to True, this will return instead (Xi, yi, qi)",
            "description": "triplets."
          },
          "the": {
            "type": "file contents. Both kinds of files occur \"in the wild\", but they",
            "description": ""
          },
          "are": {
            "type": "unfortunately not self-identifying. Using \"auto\" or True should",
            "description": ""
          },
          "always": {
            "type": "be safe when no offset or length is passed.",
            "description": ""
          },
          "to": {
            "type": "zero_based=True to avoid having the heuristic check yield",
            "description": ""
          },
          "inconsistent": {
            "type": "results on different segments of the file.",
            "description": ""
          },
          "query_id": {
            "type": "bool, default=False",
            "description": ""
          },
          "offset": {
            "type": "int, default=0",
            "description": ""
          },
          "Ignore": {
            "type": "the offset first bytes by seeking forward, then",
            "description": ""
          },
          "discarding": {
            "type": "the following bytes up until the next new line",
            "description": "character."
          },
          "length": {
            "type": "int, default=",
            "description": "1"
          },
          "position": {
            "type": "in the file has reached the (offset + length) bytes threshold.",
            "description": "Returns\n-------\n[X1, y1, ..., Xn, yn] or [X1, y1, q1, ..., Xn, yn, qn]: list of arrays"
          },
          "Each": {
            "type": "Xi, yi",
            "description": "pair is the result from load_svmlight_file(files[i])."
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "load_svmlight_file": {
            "type": "Similar function for loading a single file in this",
            "description": "format.\nNotes\n-----"
          },
          "When": {
            "type": "fitting a model to a matrix X_train and evaluating it against a",
            "description": ""
          },
          "matrix": {
            "type": "X_test, it is essential that X_train and X_test have the same",
            "description": ""
          },
          "number": {
            "type": "of features (X_train.shape[1] == X_test.shape[1]). This may not",
            "description": ""
          },
          "To": {
            "type": "use joblib.Memory to cache the svmlight file::",
            "description": ""
          },
          "from": {
            "type": "sklearn.datasets import load_svmlight_file",
            "description": ""
          },
          "mem": {
            "type": "= Memory(\"./mycache\")",
            "description": "@mem.cache"
          },
          "def": {
            "type": "get_data():",
            "description": "data_train, target_train, data_test, target_test = load_svmlight_files(\n[\"svmlight_file_train\", \"svmlight_file_test\"]\n)"
          },
          "return": {
            "type": "data_train, target_train, data_test, target_test",
            "description": "X_train, y_train, X_test, y_test = get_data()"
          }
        },
        "returns": "data_train, target_train, data_test, target_test\n\n        X_train, y_train, X_test, y_test = get_data()",
        "raises": "",
        "see_also": "--------\n    load_svmlight_file: Similar function for loading a single file in this\n        format.\n\n    Notes\n    -----\n    When fitting a model to a matrix X_train and evaluating it against a\n    matrix X_test, it is essential that X_train and X_test have the same\n    number of features (X_train.shape[1] == X_test.shape[1]). This may not\n    be the case if you load the files individually with load_svmlight_file.\n\n    Examples\n    --------\n    To use joblib.Memory to cache the svmlight file::\n\n        from joblib import Memory\n        from sklearn.datasets import load_svmlight_file\n        mem = Memory(\"./mycache\")\n\n        @mem.cache\n        def get_data():\n            data_train, target_train, data_test, target_test = load_svmlight_files(\n                [\"svmlight_file_train\", \"svmlight_file_test\"]\n            )\n            return data_train, target_train, data_test, target_test\n\n        X_train, y_train, X_test, y_test = get_data()",
        "notes": "-----\n    When fitting a model to a matrix X_train and evaluating it against a\n    matrix X_test, it is essential that X_train and X_test have the same\n    number of features (X_train.shape[1] == X_test.shape[1]). This may not\n    be the case if you load the files individually with load_svmlight_file.\n\n    Examples\n    --------\n    To use joblib.Memory to cache the svmlight file::\n\n        from joblib import Memory\n        from sklearn.datasets import load_svmlight_file\n        mem = Memory(\"./mycache\")\n\n        @mem.cache\n        def get_data():\n            data_train, target_train, data_test, target_test = load_svmlight_files(\n                [\"svmlight_file_train\", \"svmlight_file_test\"]\n            )\n            return data_train, target_train, data_test, target_test\n\n        X_train, y_train, X_test, y_test = get_data()",
        "examples": "--------\n    To use joblib.Memory to cache the svmlight file::\n\n        from joblib import Memory\n        from sklearn.datasets import load_svmlight_file\n        mem = Memory(\"./mycache\")\n\n        @mem.cache\n        def get_data():\n            data_train, target_train, data_test, target_test = load_svmlight_files(\n                [\"svmlight_file_train\", \"svmlight_file_test\"]\n            )\n            return data_train, target_train, data_test, target_test\n\n        X_train, y_train, X_test, y_test = get_data()"
      }
    },
    {
      "name": "load_wine",
      "signature": "load_wine(*, return_X_y=False, as_frame=False)",
      "documentation": {
        "description": "Load and return the wine dataset (classification).\n\n    .. versionadded:: 0.18\n\n    The wine dataset is a classic and very easy multi-class classification\n    dataset.\n\n    =================   ==============\n    Classes                          3\n    Samples per class        [59,71,48]\n    Samples total                  178\n    Dimensionality                  13\n    Features            real, positive\n    =================   ==============\n\n    The copy of UCI ML Wine Data Set dataset is downloaded and modified to fit\n    standard format from:\n    https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data\n\n    Read more in the :ref:`User Guide <wine_dataset>`.\n\n    Parameters\n    ----------\n    return_X_y : bool, default=False\n        If True, returns ``(data, target)`` instead of a Bunch object.\n        See below for more information about the `data` and `target` object.\n\n    as_frame : bool, default=False\n        If True, the data is a pandas DataFrame including columns with\n        appropriate dtypes (numeric). The target is\n        a pandas DataFrame or Series depending on the number of target columns.\n        If `return_X_y` is True, then (`data`, `target`) will be pandas\n        DataFrames or Series as described below.\n\n        .. versionadded:: 0.23\n\n    Returns\n    -------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : {ndarray, dataframe} of shape (178, 13)\n            The data matrix. If `as_frame=True`, `data` will be a pandas\n            DataFrame.\n        target: {ndarray, Series} of shape (178,)\n            The classification target. If `as_frame=True`, `target` will be\n            a pandas Series.\n        feature_names: list\n            The names of the dataset columns.\n        target_names: list\n            The names of target classes.\n        frame: DataFrame of shape (178, 14)\n            Only present when `as_frame=True`. DataFrame with `data` and\n            `target`.\n\n            .. versionadded:: 0.23\n        DESCR: str\n            The full description of the dataset.\n\n    (data, target) : tuple if ``return_X_y`` is True\n        A tuple of two ndarrays by default. The first contains a 2D array of shape\n        (178, 13) with each row representing one sample and each column representing\n        the features. The second array of shape (178,) contains the target samples.",
        "parameters": {
          "return_X_y": {
            "type": "bool, default=False",
            "description": ""
          },
          "If": {
            "type": "`return_X_y` is True, then (`data`, `target`) will be pandas",
            "description": ""
          },
          "See": {
            "type": "below for more information about the `data` and `target` object.",
            "description": ""
          },
          "as_frame": {
            "type": "bool, default=False",
            "description": ""
          },
          "appropriate": {
            "type": "dtypes (numeric). The target is",
            "description": ""
          },
          "a": {
            "type": "pandas Series.",
            "description": ""
          },
          "DataFrames": {
            "type": "or Series as described below.",
            "description": ".. versionadded:: 0.23\nReturns\n-------"
          },
          "data": {
            "type": "{ndarray, dataframe} of shape (178, 13)",
            "description": ""
          },
          "The": {
            "type": "full description of the dataset.",
            "description": "(data, target) : tuple if ``return_X_y`` is True"
          },
          "target": {
            "type": "{ndarray, Series} of shape (178,)",
            "description": ""
          },
          "feature_names": {
            "type": "list",
            "description": ""
          },
          "target_names": {
            "type": "list",
            "description": ""
          },
          "frame": {
            "type": "DataFrame of shape (178, 14)",
            "description": ""
          },
          "Only": {
            "type": "present when `as_frame=True`. DataFrame with `data` and",
            "description": "`target`.\n.. versionadded:: 0.23"
          },
          "DESCR": {
            "type": "str",
            "description": ""
          },
          "A": {
            "type": "tuple of two ndarrays by default. The first contains a 2D array of shape",
            "description": "(178, 13) with each row representing one sample and each column representing"
          },
          "the": {
            "type": "features. The second array of shape (178,) contains the target samples.",
            "description": "Examples\n--------\nLet's say you are interested in the samples 10, 80, and 140, and want to"
          },
          "know": {
            "type": "their class name.",
            "description": ">>> from sklearn.datasets import load_wine\n>>> data = load_wine()\n>>> data.target[[10, 80, 140]]"
          },
          "array": {
            "type": "[0, 1, 2]",
            "description": ">>> list(data.target_names)\n[np.str_('class_0'), np.str_('class_1'), np.str_('class_2')]"
          }
        },
        "returns": "-------\n    data : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : {ndarray, dataframe} of shape (178, 13)\n            The data matrix. If `as_frame=True`, `data` will be a pandas\n            DataFrame.\n        target: {ndarray, Series} of shape (178,)\n            The classification target. If `as_frame=True`, `target` will be\n            a pandas Series.\n        feature_names: list\n            The names of the dataset columns.\n        target_names: list\n            The names of target classes.\n        frame: DataFrame of shape (178, 14)\n            Only present when `as_frame=True`. DataFrame with `data` and\n            `target`.\n\n            .. versionadded:: 0.23\n        DESCR: str\n            The full description of the dataset.\n\n    (data, target) : tuple if ``return_X_y`` is True\n        A tuple of two ndarrays by default. The first contains a 2D array of shape\n        (178, 13) with each row representing one sample and each column representing\n        the features. The second array of shape (178,) contains the target samples.\n\n    Examples\n    --------\n    Let's say you are interested in the samples 10, 80, and 140, and want to\n    know their class name.\n\n    >>> from sklearn.datasets import load_wine\n    >>> data = load_wine()\n    >>> data.target[[10, 80, 140]]\n    array([0, 1, 2])\n    >>> list(data.target_names)\n    [np.str_('class_0'), np.str_('class_1'), np.str_('class_2')]",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    Let's say you are interested in the samples 10, 80, and 140, and want to\n    know their class name.\n\n    >>> from sklearn.datasets import load_wine\n    >>> data = load_wine()\n    >>> data.target[[10, 80, 140]]\n    array([0, 1, 2])\n    >>> list(data.target_names)\n    [np.str_('class_0'), np.str_('class_1'), np.str_('class_2')]"
      }
    },
    {
      "name": "make_biclusters",
      "signature": "make_biclusters(shape, n_clusters, *, noise=0.0, minval=10, maxval=100, shuffle=True, random_state=None)",
      "documentation": {
        "description": "Generate a constant block diagonal structure array for biclustering.\n\n    Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    shape : tuple of shape (n_rows, n_cols)\n        The shape of the result.\n\n    n_clusters : int\n        The number of biclusters.\n\n    noise : float, default=0.0\n        The standard deviation of the gaussian noise.\n\n    minval : float, default=10\n        Minimum value of a bicluster.\n\n    maxval : float, default=100\n        Maximum value of a bicluster.\n\n    shuffle : bool, default=True\n        Shuffle the samples.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset creation. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Returns\n    -------\n    X : ndarray of shape `shape`\n        The generated array.\n\n    rows : ndarray of shape (n_clusters, X.shape[0])\n        The indicators for cluster membership of each row.\n\n    cols : ndarray of shape (n_clusters, X.shape[1])\n        The indicators for cluster membership of each column.\n\n    See Also\n    --------\n    make_checkerboard: Generate an array with block checkerboard structure for\n        biclustering.\n\n    References\n    ----------\n\n    .. [1] Dhillon, I. S. (2001, August). Co-clustering documents and\n        words using bipartite spectral graph partitioning. In Proceedings\n        of the seventh ACM SIGKDD international conference on Knowledge\n        discovery and data mining (pp. 269-274). ACM.",
        "parameters": {
          "shape": {
            "type": "tuple of shape (n_rows, n_cols)",
            "description": ""
          },
          "The": {
            "type": "indicators for cluster membership of each column.",
            "description": ""
          },
          "n_clusters": {
            "type": "int",
            "description": ""
          },
          "noise": {
            "type": "float, default=0.0",
            "description": ""
          },
          "minval": {
            "type": "float, default=10",
            "description": ""
          },
          "Minimum": {
            "type": "value of a bicluster.",
            "description": ""
          },
          "maxval": {
            "type": "float, default=100",
            "description": ""
          },
          "Maximum": {
            "type": "value of a bicluster.",
            "description": ""
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": ""
          },
          "Shuffle": {
            "type": "the samples.",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset creation. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "X": {
            "type": "ndarray of shape `shape`",
            "description": ""
          },
          "rows": {
            "type": "ndarray of shape (n_clusters, X.shape[0])",
            "description": ""
          },
          "cols": {
            "type": "ndarray of shape (n_clusters, X.shape[1])",
            "description": ""
          },
          "make_checkerboard": {
            "type": "Generate an array with block checkerboard structure for",
            "description": "biclustering.\nReferences\n----------\n.. [1] Dhillon, I. S. (2001, August). Co-clustering documents and"
          },
          "words": {
            "type": "using bipartite spectral graph partitioning. In Proceedings",
            "description": ""
          },
          "of": {
            "type": "the seventh ACM SIGKDD international conference on Knowledge",
            "description": ""
          },
          "discovery": {
            "type": "and data mining (pp. 269-274). ACM.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import make_biclusters\n>>> data, rows, cols = make_biclusters(\n...     shape=(10, 20), n_clusters=2, random_state=42\n... )\n>>> data.shape\n(10, 20)\n>>> rows.shape\n(2, 10)\n>>> cols.shape\n(2, 20)"
          }
        },
        "returns": "-------\n    X : ndarray of shape `shape`\n        The generated array.\n\n    rows : ndarray of shape (n_clusters, X.shape[0])\n        The indicators for cluster membership of each row.\n\n    cols : ndarray of shape (n_clusters, X.shape[1])\n        The indicators for cluster membership of each column.\n\n    See Also\n    --------\n    make_checkerboard: Generate an array with block checkerboard structure for\n        biclustering.\n\n    References\n    ----------\n\n    .. [1] Dhillon, I. S. (2001, August). Co-clustering documents and\n        words using bipartite spectral graph partitioning. In Proceedings\n        of the seventh ACM SIGKDD international conference on Knowledge\n        discovery and data mining (pp. 269-274). ACM.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_biclusters\n    >>> data, rows, cols = make_biclusters(\n    ...     shape=(10, 20), n_clusters=2, random_state=42\n    ... )\n    >>> data.shape\n    (10, 20)\n    >>> rows.shape\n    (2, 10)\n    >>> cols.shape\n    (2, 20)",
        "raises": "",
        "see_also": "--------\n    make_checkerboard: Generate an array with block checkerboard structure for\n        biclustering.\n\n    References\n    ----------\n\n    .. [1] Dhillon, I. S. (2001, August). Co-clustering documents and\n        words using bipartite spectral graph partitioning. In Proceedings\n        of the seventh ACM SIGKDD international conference on Knowledge\n        discovery and data mining (pp. 269-274). ACM.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_biclusters\n    >>> data, rows, cols = make_biclusters(\n    ...     shape=(10, 20), n_clusters=2, random_state=42\n    ... )\n    >>> data.shape\n    (10, 20)\n    >>> rows.shape\n    (2, 10)\n    >>> cols.shape\n    (2, 20)",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import make_biclusters\n    >>> data, rows, cols = make_biclusters(\n    ...     shape=(10, 20), n_clusters=2, random_state=42\n    ... )\n    >>> data.shape\n    (10, 20)\n    >>> rows.shape\n    (2, 10)\n    >>> cols.shape\n    (2, 20)"
      }
    },
    {
      "name": "make_blobs",
      "signature": "make_blobs(n_samples=100, n_features=2, *, centers=None, cluster_std=1.0, center_box=(-10.0, 10.0), shuffle=True, random_state=None, return_centers=False)",
      "documentation": {
        "description": "Generate isotropic Gaussian blobs for clustering.\n\n    Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    n_samples : int or array-like, default=100\n        If int, it is the total number of points equally divided among\n        clusters.\n        If array-like, each element of the sequence indicates\n        the number of samples per cluster.\n\n        .. versionchanged:: v0.20\n            one can now pass an array-like to the ``n_samples`` parameter\n\n    n_features : int, default=2\n        The number of features for each sample.\n\n    centers : int or array-like of shape (n_centers, n_features), default=None\n        The number of centers to generate, or the fixed center locations.\n        If n_samples is an int and centers is None, 3 centers are generated.\n        If n_samples is array-like, centers must be\n        either None or an array of length equal to the length of n_samples.\n\n    cluster_std : float or array-like of float, default=1.0\n        The standard deviation of the clusters.\n\n    center_box : tuple of float (min, max), default=(-10.0, 10.0)\n        The bounding box for each cluster center when centers are\n        generated at random.\n\n    shuffle : bool, default=True\n        Shuffle the samples.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset creation. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    return_centers : bool, default=False\n        If True, then return the centers of each cluster.\n\n        .. versionadded:: 0.23\n\n    Returns\n    -------\n    X : ndarray of shape (n_samples, n_features)\n        The generated samples.\n\n    y : ndarray of shape (n_samples,)\n        The integer labels for cluster membership of each sample.\n\n    centers : ndarray of shape (n_centers, n_features)\n        The centers of each cluster. Only returned if\n        ``return_centers=True``.\n\n    See Also\n    --------\n    make_classification : A more intricate variant.",
        "parameters": {
          "n_samples": {
            "type": "int or array",
            "description": "like, default=100"
          },
          "If": {
            "type": "True, then return the centers of each cluster.",
            "description": ".. versionadded:: 0.23\nReturns\n-------"
          },
          "the": {
            "type": "number of samples per cluster.",
            "description": ".. versionchanged:: v0.20"
          },
          "one": {
            "type": "can now pass an array-like to the ``n_samples`` parameter",
            "description": ""
          },
          "n_features": {
            "type": "int, default=2",
            "description": ""
          },
          "The": {
            "type": "centers of each cluster. Only returned if",
            "description": "``return_centers=True``."
          },
          "centers": {
            "type": "ndarray of shape (n_centers, n_features)",
            "description": ""
          },
          "either": {
            "type": "None or an array of length equal to the length of n_samples.",
            "description": ""
          },
          "cluster_std": {
            "type": "float or array",
            "description": "like of float, default=1.0"
          },
          "center_box": {
            "type": "tuple of float (min, max), default=(",
            "description": "10.0, 10.0)"
          },
          "generated": {
            "type": "at random.",
            "description": ""
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": ""
          },
          "Shuffle": {
            "type": "the samples.",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset creation. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "return_centers": {
            "type": "bool, default=False",
            "description": ""
          },
          "X": {
            "type": "ndarray of shape (n_samples, n_features)",
            "description": ""
          },
          "y": {
            "type": "ndarray of shape (n_samples,)",
            "description": ""
          },
          "make_classification": {
            "type": "A more intricate variant.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import make_blobs\n>>> X, y = make_blobs(n_samples=10, centers=3, n_features=2,\n...                   random_state=0)\n>>> print(X.shape)\n(10, 2)\n>>> y"
          },
          "array": {
            "type": "[0, 1, 2, 0, 2, 2, 2, 1, 1, 0]",
            "description": ""
          }
        },
        "returns": "-------\n    X : ndarray of shape (n_samples, n_features)\n        The generated samples.\n\n    y : ndarray of shape (n_samples,)\n        The integer labels for cluster membership of each sample.\n\n    centers : ndarray of shape (n_centers, n_features)\n        The centers of each cluster. Only returned if\n        ``return_centers=True``.\n\n    See Also\n    --------\n    make_classification : A more intricate variant.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_blobs\n    >>> X, y = make_blobs(n_samples=10, centers=3, n_features=2,\n    ...                   random_state=0)\n    >>> print(X.shape)\n    (10, 2)\n    >>> y\n    array([0, 0, 1, 0, 2, 2, 2, 1, 1, 0])\n    >>> X, y = make_blobs(n_samples=[3, 3, 4], centers=None, n_features=2,\n    ...                   random_state=0)\n    >>> print(X.shape)\n    (10, 2)\n    >>> y\n    array([0, 1, 2, 0, 2, 2, 2, 1, 1, 0])",
        "raises": "",
        "see_also": "--------\n    make_classification : A more intricate variant.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_blobs\n    >>> X, y = make_blobs(n_samples=10, centers=3, n_features=2,\n    ...                   random_state=0)\n    >>> print(X.shape)\n    (10, 2)\n    >>> y\n    array([0, 0, 1, 0, 2, 2, 2, 1, 1, 0])\n    >>> X, y = make_blobs(n_samples=[3, 3, 4], centers=None, n_features=2,\n    ...                   random_state=0)\n    >>> print(X.shape)\n    (10, 2)\n    >>> y\n    array([0, 1, 2, 0, 2, 2, 2, 1, 1, 0])",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import make_blobs\n    >>> X, y = make_blobs(n_samples=10, centers=3, n_features=2,\n    ...                   random_state=0)\n    >>> print(X.shape)\n    (10, 2)\n    >>> y\n    array([0, 0, 1, 0, 2, 2, 2, 1, 1, 0])\n    >>> X, y = make_blobs(n_samples=[3, 3, 4], centers=None, n_features=2,\n    ...                   random_state=0)\n    >>> print(X.shape)\n    (10, 2)\n    >>> y\n    array([0, 1, 2, 0, 2, 2, 2, 1, 1, 0])"
      }
    },
    {
      "name": "make_checkerboard",
      "signature": "make_checkerboard(shape, n_clusters, *, noise=0.0, minval=10, maxval=100, shuffle=True, random_state=None)",
      "documentation": {
        "description": "Generate an array with block checkerboard structure for biclustering.\n\n    Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    shape : tuple of shape (n_rows, n_cols)\n        The shape of the result.\n\n    n_clusters : int or array-like or shape (n_row_clusters, n_column_clusters)\n        The number of row and column clusters.\n\n    noise : float, default=0.0\n        The standard deviation of the gaussian noise.\n\n    minval : float, default=10\n        Minimum value of a bicluster.\n\n    maxval : float, default=100\n        Maximum value of a bicluster.\n\n    shuffle : bool, default=True\n        Shuffle the samples.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset creation. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Returns\n    -------\n    X : ndarray of shape `shape`\n        The generated array.\n\n    rows : ndarray of shape (n_clusters, X.shape[0])\n        The indicators for cluster membership of each row.\n\n    cols : ndarray of shape (n_clusters, X.shape[1])\n        The indicators for cluster membership of each column.\n\n    See Also\n    --------\n    make_biclusters : Generate an array with constant block diagonal structure\n        for biclustering.\n\n    References\n    ----------\n    .. [1] Kluger, Y., Basri, R., Chang, J. T., & Gerstein, M. (2003).\n        Spectral biclustering of microarray data: coclustering genes\n        and conditions. Genome research, 13(4), 703-716.",
        "parameters": {
          "shape": {
            "type": "tuple of shape (n_rows, n_cols)",
            "description": ""
          },
          "The": {
            "type": "indicators for cluster membership of each column.",
            "description": ""
          },
          "n_clusters": {
            "type": "int or array",
            "description": "like or shape (n_row_clusters, n_column_clusters)"
          },
          "noise": {
            "type": "float, default=0.0",
            "description": ""
          },
          "minval": {
            "type": "float, default=10",
            "description": ""
          },
          "Minimum": {
            "type": "value of a bicluster.",
            "description": ""
          },
          "maxval": {
            "type": "float, default=100",
            "description": ""
          },
          "Maximum": {
            "type": "value of a bicluster.",
            "description": ""
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": ""
          },
          "Shuffle": {
            "type": "the samples.",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset creation. Pass an int",
            "description": ""
          },
          "for": {
            "type": "biclustering.",
            "description": "References\n----------\n.. [1] Kluger, Y., Basri, R., Chang, J. T., & Gerstein, M. (2003)."
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "X": {
            "type": "ndarray of shape `shape`",
            "description": ""
          },
          "rows": {
            "type": "ndarray of shape (n_clusters, X.shape[0])",
            "description": ""
          },
          "cols": {
            "type": "ndarray of shape (n_clusters, X.shape[1])",
            "description": ""
          },
          "make_biclusters": {
            "type": "Generate an array with constant block diagonal structure",
            "description": ""
          },
          "Spectral": {
            "type": "biclustering of microarray data: coclustering genes",
            "description": ""
          },
          "and": {
            "type": "conditions. Genome research, 13(4), 703-716.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import make_checkerboard\n>>> data, rows, columns = make_checkerboard(shape=(300, 300), n_clusters=10,\n...                                         random_state=42)\n>>> data.shape\n(300, 300)\n>>> rows.shape\n(100, 300)\n>>> columns.shape\n(100, 300)\n>>> print(rows[0][:5], columns[0][:5])\n[False False False  True False] [False False False False False]"
          }
        },
        "returns": "-------\n    X : ndarray of shape `shape`\n        The generated array.\n\n    rows : ndarray of shape (n_clusters, X.shape[0])\n        The indicators for cluster membership of each row.\n\n    cols : ndarray of shape (n_clusters, X.shape[1])\n        The indicators for cluster membership of each column.\n\n    See Also\n    --------\n    make_biclusters : Generate an array with constant block diagonal structure\n        for biclustering.\n\n    References\n    ----------\n    .. [1] Kluger, Y., Basri, R., Chang, J. T., & Gerstein, M. (2003).\n        Spectral biclustering of microarray data: coclustering genes\n        and conditions. Genome research, 13(4), 703-716.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_checkerboard\n    >>> data, rows, columns = make_checkerboard(shape=(300, 300), n_clusters=10,\n    ...                                         random_state=42)\n    >>> data.shape\n    (300, 300)\n    >>> rows.shape\n    (100, 300)\n    >>> columns.shape\n    (100, 300)\n    >>> print(rows[0][:5], columns[0][:5])\n    [False False False  True False] [False False False False False]",
        "raises": "",
        "see_also": "--------\n    make_biclusters : Generate an array with constant block diagonal structure\n        for biclustering.\n\n    References\n    ----------\n    .. [1] Kluger, Y., Basri, R., Chang, J. T., & Gerstein, M. (2003).\n        Spectral biclustering of microarray data: coclustering genes\n        and conditions. Genome research, 13(4), 703-716.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_checkerboard\n    >>> data, rows, columns = make_checkerboard(shape=(300, 300), n_clusters=10,\n    ...                                         random_state=42)\n    >>> data.shape\n    (300, 300)\n    >>> rows.shape\n    (100, 300)\n    >>> columns.shape\n    (100, 300)\n    >>> print(rows[0][:5], columns[0][:5])\n    [False False False  True False] [False False False False False]",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import make_checkerboard\n    >>> data, rows, columns = make_checkerboard(shape=(300, 300), n_clusters=10,\n    ...                                         random_state=42)\n    >>> data.shape\n    (300, 300)\n    >>> rows.shape\n    (100, 300)\n    >>> columns.shape\n    (100, 300)\n    >>> print(rows[0][:5], columns[0][:5])\n    [False False False  True False] [False False False False False]"
      }
    },
    {
      "name": "make_circles",
      "signature": "make_circles(n_samples=100, *, shuffle=True, noise=None, random_state=None, factor=0.8)",
      "documentation": {
        "description": "Make a large circle containing a smaller circle in 2d.\n\n    A simple toy dataset to visualize clustering and classification\n    algorithms.\n\n    Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    n_samples : int or tuple of shape (2,), dtype=int, default=100\n        If int, it is the total number of points generated.\n        For odd numbers, the inner circle will have one point more than the\n        outer circle.\n        If two-element tuple, number of points in outer circle and inner\n        circle.\n\n        .. versionchanged:: 0.23\n           Added two-element tuple.\n\n    shuffle : bool, default=True\n        Whether to shuffle the samples.\n\n    noise : float, default=None\n        Standard deviation of Gaussian noise added to the data.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset shuffling and noise.\n        Pass an int for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    factor : float, default=.8\n        Scale factor between inner and outer circle in the range `[0, 1)`.\n\n    Returns\n    -------\n    X : ndarray of shape (n_samples, 2)\n        The generated samples.\n\n    y : ndarray of shape (n_samples,)\n        The integer labels (0 or 1) for class membership of each sample.",
        "parameters": {
          "n_samples": {
            "type": "int or tuple of shape (2,), dtype=int, default=100",
            "description": ""
          },
          "If": {
            "type": "two-element tuple, number of points in outer circle and inner",
            "description": "circle.\n.. versionchanged:: 0.23"
          },
          "For": {
            "type": "odd numbers, the inner circle will have one point more than the",
            "description": ""
          },
          "outer": {
            "type": "circle.",
            "description": ""
          },
          "Added": {
            "type": "two-element tuple.",
            "description": ""
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": ""
          },
          "Whether": {
            "type": "to shuffle the samples.",
            "description": ""
          },
          "noise": {
            "type": "float, default=None",
            "description": ""
          },
          "Standard": {
            "type": "deviation of Gaussian noise added to the data.",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset shuffling and noise.",
            "description": ""
          },
          "Pass": {
            "type": "an int for reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "term:`Glossary <random_state>`.",
            "description": ""
          },
          "factor": {
            "type": "float, default=.8",
            "description": ""
          },
          "Scale": {
            "type": "factor between inner and outer circle in the range `[0, 1)`.",
            "description": "Returns\n-------"
          },
          "X": {
            "type": "ndarray of shape (n_samples, 2)",
            "description": ""
          },
          "The": {
            "type": "integer labels (0 or 1) for class membership of each sample.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import make_circles\n>>> X, y = make_circles(random_state=42)\n>>> X.shape\n(100, 2)\n>>> y.shape\n(100,)\n>>> list(y[:5])\n[np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]"
          },
          "y": {
            "type": "ndarray of shape (n_samples,)",
            "description": ""
          }
        },
        "returns": "-------\n    X : ndarray of shape (n_samples, 2)\n        The generated samples.\n\n    y : ndarray of shape (n_samples,)\n        The integer labels (0 or 1) for class membership of each sample.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_circles\n    >>> X, y = make_circles(random_state=42)\n    >>> X.shape\n    (100, 2)\n    >>> y.shape\n    (100,)\n    >>> list(y[:5])\n    [np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import make_circles\n    >>> X, y = make_circles(random_state=42)\n    >>> X.shape\n    (100, 2)\n    >>> y.shape\n    (100,)\n    >>> list(y[:5])\n    [np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]"
      }
    },
    {
      "name": "make_classification",
      "signature": "make_classification(n_samples=100, n_features=20, *, n_informative=2, n_redundant=2, n_repeated=0, n_classes=2, n_clusters_per_class=2, weights=None, flip_y=0.01, class_sep=1.0, hypercube=True, shift=0.0, scale=1.0, shuffle=True, random_state=None)",
      "documentation": {
        "description": "Generate a random n-class classification problem.\n\n    This initially creates clusters of points normally distributed (std=1)\n    about vertices of an ``n_informative``-dimensional hypercube with sides of\n    length ``2*class_sep`` and assigns an equal number of clusters to each\n    class. It introduces interdependence between these features and adds\n    various types of further noise to the data.\n\n    Without shuffling, ``X`` horizontally stacks features in the following\n    order: the primary ``n_informative`` features, followed by ``n_redundant``\n    linear combinations of the informative features, followed by ``n_repeated``\n    duplicates, drawn randomly with replacement from the informative and\n    redundant features. The remaining features are filled with random noise.\n    Thus, without shuffling, all useful features are contained in the columns\n    ``X[:, :n_informative + n_redundant + n_repeated]``.\n\n    Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    n_samples : int, default=100\n        The number of samples.\n\n    n_features : int, default=20\n        The total number of features. These comprise ``n_informative``\n        informative features, ``n_redundant`` redundant features,\n        ``n_repeated`` duplicated features and\n        ``n_features-n_informative-n_redundant-n_repeated`` useless features\n        drawn at random.\n\n    n_informative : int, default=2\n        The number of informative features. Each class is composed of a number\n        of gaussian clusters each located around the vertices of a hypercube\n        in a subspace of dimension ``n_informative``. For each cluster,\n        informative features are drawn independently from  N(0, 1) and then\n        randomly linearly combined within each cluster in order to add\n        covariance. The clusters are then placed on the vertices of the\n        hypercube.\n\n    n_redundant : int, default=2\n        The number of redundant features. These features are generated as\n        random linear combinations of the informative features.\n\n    n_repeated : int, default=0\n        The number of duplicated features, drawn randomly from the informative\n        and the redundant features.\n\n    n_classes : int, default=2\n        The number of classes (or labels) of the classification problem.\n\n    n_clusters_per_class : int, default=2\n        The number of clusters per class.\n\n    weights : array-like of shape (n_classes,) or (n_classes - 1,),              default=None\n        The proportions of samples assigned to each class. If None, then\n        classes are balanced. Note that if ``len(weights) == n_classes - 1``,\n        then the last class weight is automatically inferred.\n        More than ``n_samples`` samples may be returned if the sum of\n        ``weights`` exceeds 1. Note that the actual class proportions will\n        not exactly match ``weights`` when ``flip_y`` isn't 0.\n\n    flip_y : float, default=0.01\n        The fraction of samples whose class is assigned randomly. Larger\n        values introduce noise in the labels and make the classification\n        task harder. Note that the default setting flip_y > 0 might lead\n        to less than ``n_classes`` in y in some cases.\n\n    class_sep : float, default=1.0\n        The factor multiplying the hypercube size.  Larger values spread\n        out the clusters/classes and make the classification task easier.\n\n    hypercube : bool, default=True\n        If True, the clusters are put on the vertices of a hypercube. If\n        False, the clusters are put on the vertices of a random polytope.\n\n    shift : float, ndarray of shape (n_features,) or None, default=0.0\n        Shift features by the specified value. If None, then features\n        are shifted by a random value drawn in [-class_sep, class_sep].\n\n    scale : float, ndarray of shape (n_features,) or None, default=1.0\n        Multiply features by the specified value. If None, then features\n        are scaled by a random value drawn in [1, 100]. Note that scaling\n        happens after shifting.\n\n    shuffle : bool, default=True\n        Shuffle the samples and the features.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset creation. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Returns\n    -------\n    X : ndarray of shape (n_samples, n_features)\n        The generated samples.\n\n    y : ndarray of shape (n_samples,)\n        The integer labels for class membership of each sample.\n\n    See Also\n    --------\n    make_blobs : Simplified variant.\n    make_multilabel_classification : Unrelated generator for multilabel tasks.\n\n    Notes\n    -----\n    The algorithm is adapted from Guyon [1] and was designed to generate\n    the \"Madelon\" dataset.\n\n    References\n    ----------\n    .. [1] I. Guyon, \"Design of experiments for the NIPS 2003 variable\n           selection benchmark\", 2003.",
        "parameters": {
          "n_samples": {
            "type": "int, default=100",
            "description": ""
          },
          "The": {
            "type": "algorithm is adapted from Guyon [1] and was designed to generate",
            "description": ""
          },
          "n_features": {
            "type": "int, default=20",
            "description": ""
          },
          "informative": {
            "type": "features are drawn independently from  N(0, 1) and then",
            "description": ""
          },
          "drawn": {
            "type": "at random.",
            "description": ""
          },
          "n_informative": {
            "type": "int, default=2",
            "description": ""
          },
          "of": {
            "type": "gaussian clusters each located around the vertices of a hypercube",
            "description": ""
          },
          "in": {
            "type": "a subspace of dimension ``n_informative``. For each cluster,",
            "description": ""
          },
          "randomly": {
            "type": "linearly combined within each cluster in order to add",
            "description": "covariance. The clusters are then placed on the vertices of the\nhypercube."
          },
          "n_redundant": {
            "type": "int, default=2",
            "description": ""
          },
          "random": {
            "type": "linear combinations of the informative features.",
            "description": ""
          },
          "n_repeated": {
            "type": "int, default=0",
            "description": ""
          },
          "and": {
            "type": "the redundant features.",
            "description": ""
          },
          "n_classes": {
            "type": "int, default=2",
            "description": ""
          },
          "n_clusters_per_class": {
            "type": "int, default=2",
            "description": ""
          },
          "weights": {
            "type": "array",
            "description": "like of shape (n_classes,) or (n_classes - 1,),              default=None"
          },
          "classes": {
            "type": "are balanced. Note that if ``len(weights) == n_classes - 1``,",
            "description": ""
          },
          "then": {
            "type": "the last class weight is automatically inferred.",
            "description": ""
          },
          "More": {
            "type": "than ``n_samples`` samples may be returned if the sum of",
            "description": "``weights`` exceeds 1. Note that the actual class proportions will"
          },
          "not": {
            "type": "exactly match ``weights`` when ``flip_y`` isn't 0.",
            "description": ""
          },
          "flip_y": {
            "type": "float, default=0.01",
            "description": ""
          },
          "values": {
            "type": "introduce noise in the labels and make the classification",
            "description": ""
          },
          "task": {
            "type": "harder. Note that the default setting flip_y > 0 might lead",
            "description": ""
          },
          "to": {
            "type": "less than ``n_classes`` in y in some cases.",
            "description": ""
          },
          "class_sep": {
            "type": "float, default=1.0",
            "description": ""
          },
          "out": {
            "type": "the clusters/classes and make the classification task easier.",
            "description": ""
          },
          "hypercube": {
            "type": "bool, default=True",
            "description": ""
          },
          "If": {
            "type": "True, the clusters are put on the vertices of a hypercube. If",
            "description": "False, the clusters are put on the vertices of a random polytope."
          },
          "shift": {
            "type": "float, ndarray of shape (n_features,) or None, default=0.0",
            "description": ""
          },
          "Shift": {
            "type": "features by the specified value. If None, then features",
            "description": ""
          },
          "are": {
            "type": "scaled by a random value drawn in [1, 100]. Note that scaling",
            "description": ""
          },
          "scale": {
            "type": "float, ndarray of shape (n_features,) or None, default=1.0",
            "description": ""
          },
          "Multiply": {
            "type": "features by the specified value. If None, then features",
            "description": ""
          },
          "happens": {
            "type": "after shifting.",
            "description": ""
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": ""
          },
          "Shuffle": {
            "type": "the samples and the features.",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset creation. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "X": {
            "type": "ndarray of shape (n_samples, n_features)",
            "description": ""
          },
          "y": {
            "type": "ndarray of shape (n_samples,)",
            "description": ""
          },
          "make_blobs": {
            "type": "Simplified variant.",
            "description": ""
          },
          "make_multilabel_classification": {
            "type": "Unrelated generator for multilabel tasks.",
            "description": "Notes\n-----"
          },
          "the": {
            "type": "\"Madelon\" dataset.",
            "description": "References\n----------\n.. [1] I. Guyon, \"Design of experiments for the NIPS 2003 variable"
          },
          "selection": {
            "type": "benchmark\", 2003.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import make_classification\n>>> X, y = make_classification(random_state=42)\n>>> X.shape\n(100, 20)\n>>> y.shape\n(100,)\n>>> list(y[:5])\n[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(0)]"
          }
        },
        "returns": "-------\n    X : ndarray of shape (n_samples, n_features)\n        The generated samples.\n\n    y : ndarray of shape (n_samples,)\n        The integer labels for class membership of each sample.\n\n    See Also\n    --------\n    make_blobs : Simplified variant.\n    make_multilabel_classification : Unrelated generator for multilabel tasks.\n\n    Notes\n    -----\n    The algorithm is adapted from Guyon [1] and was designed to generate\n    the \"Madelon\" dataset.\n\n    References\n    ----------\n    .. [1] I. Guyon, \"Design of experiments for the NIPS 2003 variable\n           selection benchmark\", 2003.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_classification\n    >>> X, y = make_classification(random_state=42)\n    >>> X.shape\n    (100, 20)\n    >>> y.shape\n    (100,)\n    >>> list(y[:5])\n    [np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(0)]",
        "raises": "",
        "see_also": "--------\n    make_blobs : Simplified variant.\n    make_multilabel_classification : Unrelated generator for multilabel tasks.\n\n    Notes\n    -----\n    The algorithm is adapted from Guyon [1] and was designed to generate\n    the \"Madelon\" dataset.\n\n    References\n    ----------\n    .. [1] I. Guyon, \"Design of experiments for the NIPS 2003 variable\n           selection benchmark\", 2003.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_classification\n    >>> X, y = make_classification(random_state=42)\n    >>> X.shape\n    (100, 20)\n    >>> y.shape\n    (100,)\n    >>> list(y[:5])\n    [np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(0)]",
        "notes": "-----\n    The algorithm is adapted from Guyon [1] and was designed to generate\n    the \"Madelon\" dataset.\n\n    References\n    ----------\n    .. [1] I. Guyon, \"Design of experiments for the NIPS 2003 variable\n           selection benchmark\", 2003.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_classification\n    >>> X, y = make_classification(random_state=42)\n    >>> X.shape\n    (100, 20)\n    >>> y.shape\n    (100,)\n    >>> list(y[:5])\n    [np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(0)]",
        "examples": "--------\n    >>> from sklearn.datasets import make_classification\n    >>> X, y = make_classification(random_state=42)\n    >>> X.shape\n    (100, 20)\n    >>> y.shape\n    (100,)\n    >>> list(y[:5])\n    [np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(0)]"
      }
    },
    {
      "name": "make_friedman1",
      "signature": "make_friedman1(n_samples=100, n_features=10, *, noise=0.0, random_state=None)",
      "documentation": {
        "description": "Generate the \"Friedman #1\" regression problem.\n\n    This dataset is described in Friedman [1] and Breiman [2].\n\n    Inputs `X` are independent features uniformly distributed on the interval\n    [0, 1]. The output `y` is created according to the formula::\n\n        y(X) = 10 * sin(pi * X[:, 0] * X[:, 1]) + 20 * (X[:, 2] - 0.5) ** 2 + 10 * X[:, 3] + 5 * X[:, 4] + noise * N(0, 1).\n\n    Out of the `n_features` features, only 5 are actually used to compute\n    `y`. The remaining features are independent of `y`.\n\n    The number of features has to be >= 5.\n\n    Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    n_samples : int, default=100\n        The number of samples.\n\n    n_features : int, default=10\n        The number of features. Should be at least 5.\n\n    noise : float, default=0.0\n        The standard deviation of the gaussian noise applied to the output.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset noise. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Returns\n    -------\n    X : ndarray of shape (n_samples, n_features)\n        The input samples.\n\n    y : ndarray of shape (n_samples,)\n        The output values.\n\n    References\n    ----------\n    .. [1] J. Friedman, \"Multivariate adaptive regression splines\", The Annals\n           of Statistics 19 (1), pages 1-67, 1991.\n\n    .. [2] L. Breiman, \"Bagging predictors\", Machine Learning 24,\n           pages 123-140, 1996.",
        "parameters": {
          "n_samples": {
            "type": "int, default=100",
            "description": ""
          },
          "The": {
            "type": "output values.",
            "description": "References\n----------\n.. [1] J. Friedman, \"Multivariate adaptive regression splines\", The Annals"
          },
          "n_features": {
            "type": "int, default=10",
            "description": ""
          },
          "noise": {
            "type": "float, default=0.0",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset noise. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "term:`Glossary <random_state>`.",
            "description": "Returns\n-------"
          },
          "X": {
            "type": "ndarray of shape (n_samples, n_features)",
            "description": ""
          },
          "y": {
            "type": "ndarray of shape (n_samples,)",
            "description": ""
          },
          "of": {
            "type": "Statistics 19 (1), pages 1-67, 1991.",
            "description": ".. [2] L. Breiman, \"Bagging predictors\", Machine Learning 24,"
          },
          "pages": {
            "type": "123-140, 1996.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import make_friedman1\n>>> X, y = make_friedman1(random_state=42)\n>>> X.shape\n(100, 10)\n>>> y.shape\n(100,)\n>>> list(y[:3])\n[np.float64(16.8...), np.float64(5.8...), np.float64(9.4...)]"
          }
        },
        "returns": "-------\n    X : ndarray of shape (n_samples, n_features)\n        The input samples.\n\n    y : ndarray of shape (n_samples,)\n        The output values.\n\n    References\n    ----------\n    .. [1] J. Friedman, \"Multivariate adaptive regression splines\", The Annals\n           of Statistics 19 (1), pages 1-67, 1991.\n\n    .. [2] L. Breiman, \"Bagging predictors\", Machine Learning 24,\n           pages 123-140, 1996.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_friedman1\n    >>> X, y = make_friedman1(random_state=42)\n    >>> X.shape\n    (100, 10)\n    >>> y.shape\n    (100,)\n    >>> list(y[:3])\n    [np.float64(16.8...), np.float64(5.8...), np.float64(9.4...)]",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import make_friedman1\n    >>> X, y = make_friedman1(random_state=42)\n    >>> X.shape\n    (100, 10)\n    >>> y.shape\n    (100,)\n    >>> list(y[:3])\n    [np.float64(16.8...), np.float64(5.8...), np.float64(9.4...)]"
      }
    },
    {
      "name": "make_friedman2",
      "signature": "make_friedman2(n_samples=100, *, noise=0.0, random_state=None)",
      "documentation": {
        "description": "Generate the \"Friedman #2\" regression problem.\n\n    This dataset is described in Friedman [1] and Breiman [2].\n\n    Inputs `X` are 4 independent features uniformly distributed on the\n    intervals::\n\n        0 <= X[:, 0] <= 100,\n        40 * pi <= X[:, 1] <= 560 * pi,\n        0 <= X[:, 2] <= 1,\n        1 <= X[:, 3] <= 11.\n\n    The output `y` is created according to the formula::\n\n        y(X) = (X[:, 0] ** 2 + (X[:, 1] * X[:, 2]  - 1 / (X[:, 1] * X[:, 3])) ** 2) ** 0.5 + noise * N(0, 1).\n\n    Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    n_samples : int, default=100\n        The number of samples.\n\n    noise : float, default=0.0\n        The standard deviation of the gaussian noise applied to the output.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset noise. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Returns\n    -------\n    X : ndarray of shape (n_samples, 4)\n        The input samples.\n\n    y : ndarray of shape (n_samples,)\n        The output values.\n\n    References\n    ----------\n    .. [1] J. Friedman, \"Multivariate adaptive regression splines\", The Annals\n           of Statistics 19 (1), pages 1-67, 1991.\n\n    .. [2] L. Breiman, \"Bagging predictors\", Machine Learning 24,\n           pages 123-140, 1996.",
        "parameters": {
          "n_samples": {
            "type": "int, default=100",
            "description": ""
          },
          "The": {
            "type": "output values.",
            "description": "References\n----------\n.. [1] J. Friedman, \"Multivariate adaptive regression splines\", The Annals"
          },
          "noise": {
            "type": "float, default=0.0",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset noise. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "term:`Glossary <random_state>`.",
            "description": "Returns\n-------"
          },
          "X": {
            "type": "ndarray of shape (n_samples, 4)",
            "description": ""
          },
          "y": {
            "type": "ndarray of shape (n_samples,)",
            "description": ""
          },
          "of": {
            "type": "Statistics 19 (1), pages 1-67, 1991.",
            "description": ".. [2] L. Breiman, \"Bagging predictors\", Machine Learning 24,"
          },
          "pages": {
            "type": "123-140, 1996.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import make_friedman2\n>>> X, y = make_friedman2(random_state=42)\n>>> X.shape\n(100, 4)\n>>> y.shape\n(100,)\n>>> list(y[:3])\n[np.float64(1229.4...), np.float64(27.0...), np.float64(65.6...)]"
          }
        },
        "returns": "-------\n    X : ndarray of shape (n_samples, 4)\n        The input samples.\n\n    y : ndarray of shape (n_samples,)\n        The output values.\n\n    References\n    ----------\n    .. [1] J. Friedman, \"Multivariate adaptive regression splines\", The Annals\n           of Statistics 19 (1), pages 1-67, 1991.\n\n    .. [2] L. Breiman, \"Bagging predictors\", Machine Learning 24,\n           pages 123-140, 1996.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_friedman2\n    >>> X, y = make_friedman2(random_state=42)\n    >>> X.shape\n    (100, 4)\n    >>> y.shape\n    (100,)\n    >>> list(y[:3])\n    [np.float64(1229.4...), np.float64(27.0...), np.float64(65.6...)]",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import make_friedman2\n    >>> X, y = make_friedman2(random_state=42)\n    >>> X.shape\n    (100, 4)\n    >>> y.shape\n    (100,)\n    >>> list(y[:3])\n    [np.float64(1229.4...), np.float64(27.0...), np.float64(65.6...)]"
      }
    },
    {
      "name": "make_friedman3",
      "signature": "make_friedman3(n_samples=100, *, noise=0.0, random_state=None)",
      "documentation": {
        "description": "Generate the \"Friedman #3\" regression problem.\n\n    This dataset is described in Friedman [1] and Breiman [2].\n\n    Inputs `X` are 4 independent features uniformly distributed on the\n    intervals::\n\n        0 <= X[:, 0] <= 100,\n        40 * pi <= X[:, 1] <= 560 * pi,\n        0 <= X[:, 2] <= 1,\n        1 <= X[:, 3] <= 11.\n\n    The output `y` is created according to the formula::\n\n        y(X) = arctan((X[:, 1] * X[:, 2] - 1 / (X[:, 1] * X[:, 3])) / X[:, 0]) + noise * N(0, 1).\n\n    Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    n_samples : int, default=100\n        The number of samples.\n\n    noise : float, default=0.0\n        The standard deviation of the gaussian noise applied to the output.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset noise. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Returns\n    -------\n    X : ndarray of shape (n_samples, 4)\n        The input samples.\n\n    y : ndarray of shape (n_samples,)\n        The output values.\n\n    References\n    ----------\n    .. [1] J. Friedman, \"Multivariate adaptive regression splines\", The Annals\n           of Statistics 19 (1), pages 1-67, 1991.\n\n    .. [2] L. Breiman, \"Bagging predictors\", Machine Learning 24,\n           pages 123-140, 1996.",
        "parameters": {
          "n_samples": {
            "type": "int, default=100",
            "description": ""
          },
          "The": {
            "type": "output values.",
            "description": "References\n----------\n.. [1] J. Friedman, \"Multivariate adaptive regression splines\", The Annals"
          },
          "noise": {
            "type": "float, default=0.0",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset noise. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "term:`Glossary <random_state>`.",
            "description": "Returns\n-------"
          },
          "X": {
            "type": "ndarray of shape (n_samples, 4)",
            "description": ""
          },
          "y": {
            "type": "ndarray of shape (n_samples,)",
            "description": ""
          },
          "of": {
            "type": "Statistics 19 (1), pages 1-67, 1991.",
            "description": ".. [2] L. Breiman, \"Bagging predictors\", Machine Learning 24,"
          },
          "pages": {
            "type": "123-140, 1996.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import make_friedman3\n>>> X, y = make_friedman3(random_state=42)\n>>> X.shape\n(100, 4)\n>>> y.shape\n(100,)\n>>> list(y[:3])\n[np.float64(1.5...), np.float64(0.9...), np.float64(0.4...)]"
          }
        },
        "returns": "-------\n    X : ndarray of shape (n_samples, 4)\n        The input samples.\n\n    y : ndarray of shape (n_samples,)\n        The output values.\n\n    References\n    ----------\n    .. [1] J. Friedman, \"Multivariate adaptive regression splines\", The Annals\n           of Statistics 19 (1), pages 1-67, 1991.\n\n    .. [2] L. Breiman, \"Bagging predictors\", Machine Learning 24,\n           pages 123-140, 1996.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_friedman3\n    >>> X, y = make_friedman3(random_state=42)\n    >>> X.shape\n    (100, 4)\n    >>> y.shape\n    (100,)\n    >>> list(y[:3])\n    [np.float64(1.5...), np.float64(0.9...), np.float64(0.4...)]",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import make_friedman3\n    >>> X, y = make_friedman3(random_state=42)\n    >>> X.shape\n    (100, 4)\n    >>> y.shape\n    (100,)\n    >>> list(y[:3])\n    [np.float64(1.5...), np.float64(0.9...), np.float64(0.4...)]"
      }
    },
    {
      "name": "make_gaussian_quantiles",
      "signature": "make_gaussian_quantiles(*, mean=None, cov=1.0, n_samples=100, n_features=2, n_classes=3, shuffle=True, random_state=None)",
      "documentation": {
        "description": "Generate isotropic Gaussian and label samples by quantile.\n\n    This classification dataset is constructed by taking a multi-dimensional\n    standard normal distribution and defining classes separated by nested\n    concentric multi-dimensional spheres such that roughly equal numbers of\n    samples are in each class (quantiles of the :math:`\\chi^2` distribution).\n\n    Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    mean : array-like of shape (n_features,), default=None\n        The mean of the multi-dimensional normal distribution.\n        If None then use the origin (0, 0, ...).\n\n    cov : float, default=1.0\n        The covariance matrix will be this value times the unit matrix. This\n        dataset only produces symmetric normal distributions.\n\n    n_samples : int, default=100\n        The total number of points equally divided among classes.\n\n    n_features : int, default=2\n        The number of features for each sample.\n\n    n_classes : int, default=3\n        The number of classes.\n\n    shuffle : bool, default=True\n        Shuffle the samples.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset creation. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Returns\n    -------\n    X : ndarray of shape (n_samples, n_features)\n        The generated samples.\n\n    y : ndarray of shape (n_samples,)\n        The integer labels for quantile membership of each sample.\n\n    Notes\n    -----\n    The dataset is from Zhu et al [1].\n\n    References\n    ----------\n    .. [1] J. Zhu, H. Zou, S. Rosset, T. Hastie, \"Multi-class AdaBoost\", 2009.",
        "parameters": {
          "mean": {
            "type": "array",
            "description": "like of shape (n_features,), default=None"
          },
          "The": {
            "type": "dataset is from Zhu et al [1].",
            "description": "References\n----------\n.. [1] J. Zhu, H. Zou, S. Rosset, T. Hastie, \"Multi-class AdaBoost\", 2009.\nExamples\n--------\n>>> from sklearn.datasets import make_gaussian_quantiles\n>>> X, y = make_gaussian_quantiles(random_state=42)\n>>> X.shape\n(100, 2)\n>>> y.shape\n(100,)\n>>> list(y[:5])\n[np.int64(2), np.int64(0), np.int64(1), np.int64(0), np.int64(2)]"
          },
          "If": {
            "type": "None then use the origin (0, 0, ...).",
            "description": ""
          },
          "cov": {
            "type": "float, default=1.0",
            "description": ""
          },
          "dataset": {
            "type": "only produces symmetric normal distributions.",
            "description": ""
          },
          "n_samples": {
            "type": "int, default=100",
            "description": ""
          },
          "n_features": {
            "type": "int, default=2",
            "description": ""
          },
          "n_classes": {
            "type": "int, default=3",
            "description": ""
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": ""
          },
          "Shuffle": {
            "type": "the samples.",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset creation. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "term:`Glossary <random_state>`.",
            "description": "Returns\n-------"
          },
          "X": {
            "type": "ndarray of shape (n_samples, n_features)",
            "description": ""
          },
          "y": {
            "type": "ndarray of shape (n_samples,)",
            "description": ""
          }
        },
        "returns": "-------\n    X : ndarray of shape (n_samples, n_features)\n        The generated samples.\n\n    y : ndarray of shape (n_samples,)\n        The integer labels for quantile membership of each sample.\n\n    Notes\n    -----\n    The dataset is from Zhu et al [1].\n\n    References\n    ----------\n    .. [1] J. Zhu, H. Zou, S. Rosset, T. Hastie, \"Multi-class AdaBoost\", 2009.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_gaussian_quantiles\n    >>> X, y = make_gaussian_quantiles(random_state=42)\n    >>> X.shape\n    (100, 2)\n    >>> y.shape\n    (100,)\n    >>> list(y[:5])\n    [np.int64(2), np.int64(0), np.int64(1), np.int64(0), np.int64(2)]",
        "raises": "",
        "see_also": "",
        "notes": "-----\n    The dataset is from Zhu et al [1].\n\n    References\n    ----------\n    .. [1] J. Zhu, H. Zou, S. Rosset, T. Hastie, \"Multi-class AdaBoost\", 2009.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_gaussian_quantiles\n    >>> X, y = make_gaussian_quantiles(random_state=42)\n    >>> X.shape\n    (100, 2)\n    >>> y.shape\n    (100,)\n    >>> list(y[:5])\n    [np.int64(2), np.int64(0), np.int64(1), np.int64(0), np.int64(2)]",
        "examples": "--------\n    >>> from sklearn.datasets import make_gaussian_quantiles\n    >>> X, y = make_gaussian_quantiles(random_state=42)\n    >>> X.shape\n    (100, 2)\n    >>> y.shape\n    (100,)\n    >>> list(y[:5])\n    [np.int64(2), np.int64(0), np.int64(1), np.int64(0), np.int64(2)]"
      }
    },
    {
      "name": "make_hastie_10_2",
      "signature": "make_hastie_10_2(n_samples=12000, *, random_state=None)",
      "documentation": {
        "description": "Generate data for binary classification used in Hastie et al. 2009, Example 10.2.\n\n    The ten features are standard independent Gaussian and\n    the target ``y`` is defined by::\n\n      y[i] = 1 if np.sum(X[i] ** 2) > 9.34 else -1\n\n    Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    n_samples : int, default=12000\n        The number of samples.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset creation. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Returns\n    -------\n    X : ndarray of shape (n_samples, 10)\n        The input samples.\n\n    y : ndarray of shape (n_samples,)\n        The output values.\n\n    See Also\n    --------\n    make_gaussian_quantiles : A generalization of this dataset approach.\n\n    References\n    ----------\n    .. [1] T. Hastie, R. Tibshirani and J. Friedman, \"Elements of Statistical\n           Learning Ed. 2\", Springer, 2009.",
        "parameters": {
          "n_samples": {
            "type": "int, default=12000",
            "description": ""
          },
          "The": {
            "type": "output values.",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset creation. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "X": {
            "type": "ndarray of shape (n_samples, 10)",
            "description": ""
          },
          "y": {
            "type": "ndarray of shape (n_samples,)",
            "description": ""
          },
          "make_gaussian_quantiles": {
            "type": "A generalization of this dataset approach.",
            "description": "References\n----------\n.. [1] T. Hastie, R. Tibshirani and J. Friedman, \"Elements of Statistical"
          },
          "Learning": {
            "type": "Ed. 2\", Springer, 2009.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import make_hastie_10_2\n>>> X, y = make_hastie_10_2(n_samples=24000, random_state=42)\n>>> X.shape\n(24000, 10)\n>>> y.shape\n(24000,)\n>>> list(y[:5])\n[np.float64(-1.0), np.float64(1.0), np.float64(-1.0), np.float64(1.0),\nnp.float64(-1.0)]"
          }
        },
        "returns": "-------\n    X : ndarray of shape (n_samples, 10)\n        The input samples.\n\n    y : ndarray of shape (n_samples,)\n        The output values.\n\n    See Also\n    --------\n    make_gaussian_quantiles : A generalization of this dataset approach.\n\n    References\n    ----------\n    .. [1] T. Hastie, R. Tibshirani and J. Friedman, \"Elements of Statistical\n           Learning Ed. 2\", Springer, 2009.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_hastie_10_2\n    >>> X, y = make_hastie_10_2(n_samples=24000, random_state=42)\n    >>> X.shape\n    (24000, 10)\n    >>> y.shape\n    (24000,)\n    >>> list(y[:5])\n    [np.float64(-1.0), np.float64(1.0), np.float64(-1.0), np.float64(1.0),\n    np.float64(-1.0)]",
        "raises": "",
        "see_also": "--------\n    make_gaussian_quantiles : A generalization of this dataset approach.\n\n    References\n    ----------\n    .. [1] T. Hastie, R. Tibshirani and J. Friedman, \"Elements of Statistical\n           Learning Ed. 2\", Springer, 2009.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_hastie_10_2\n    >>> X, y = make_hastie_10_2(n_samples=24000, random_state=42)\n    >>> X.shape\n    (24000, 10)\n    >>> y.shape\n    (24000,)\n    >>> list(y[:5])\n    [np.float64(-1.0), np.float64(1.0), np.float64(-1.0), np.float64(1.0),\n    np.float64(-1.0)]",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import make_hastie_10_2\n    >>> X, y = make_hastie_10_2(n_samples=24000, random_state=42)\n    >>> X.shape\n    (24000, 10)\n    >>> y.shape\n    (24000,)\n    >>> list(y[:5])\n    [np.float64(-1.0), np.float64(1.0), np.float64(-1.0), np.float64(1.0),\n    np.float64(-1.0)]"
      }
    },
    {
      "name": "make_low_rank_matrix",
      "signature": "make_low_rank_matrix(n_samples=100, n_features=100, *, effective_rank=10, tail_strength=0.5, random_state=None)",
      "documentation": {
        "description": "Generate a mostly low rank matrix with bell-shaped singular values.\n\n    Most of the variance can be explained by a bell-shaped curve of width\n    effective_rank: the low rank part of the singular values profile is::\n\n        (1 - tail_strength) * exp(-1.0 * (i / effective_rank) ** 2)\n\n    The remaining singular values' tail is fat, decreasing as::\n\n        tail_strength * exp(-0.1 * i / effective_rank).\n\n    The low rank part of the profile can be considered the structured\n    signal part of the data while the tail can be considered the noisy\n    part of the data that cannot be summarized by a low number of linear\n    components (singular vectors).\n\n    This kind of singular profiles is often seen in practice, for instance:\n     - gray level pictures of faces\n     - TF-IDF vectors of text documents crawled from the web\n\n    Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    n_samples : int, default=100\n        The number of samples.\n\n    n_features : int, default=100\n        The number of features.\n\n    effective_rank : int, default=10\n        The approximate number of singular vectors required to explain most of\n        the data by linear combinations.\n\n    tail_strength : float, default=0.5\n        The relative importance of the fat noisy tail of the singular values\n        profile. The value should be between 0 and 1.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset creation. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Returns\n    -------\n    X : ndarray of shape (n_samples, n_features)\n        The matrix.",
        "parameters": {
          "n_samples": {
            "type": "int, default=100",
            "description": ""
          },
          "The": {
            "type": "matrix.",
            "description": "Examples\n--------\n>>> from numpy.linalg import svd\n>>> from sklearn.datasets import make_low_rank_matrix\n>>> X = make_low_rank_matrix(\n...     n_samples=50,\n...     n_features=25,\n...     effective_rank=5,\n...     tail_strength=0.01,\n...     random_state=0,\n... )\n>>> X.shape\n(50, 25)"
          },
          "n_features": {
            "type": "int, default=100",
            "description": ""
          },
          "effective_rank": {
            "type": "int, default=10",
            "description": ""
          },
          "the": {
            "type": "data by linear combinations.",
            "description": ""
          },
          "tail_strength": {
            "type": "float, default=0.5",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset creation. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "term:`Glossary <random_state>`.",
            "description": "Returns\n-------"
          },
          "X": {
            "type": "ndarray of shape (n_samples, n_features)",
            "description": ""
          }
        },
        "returns": "-------\n    X : ndarray of shape (n_samples, n_features)\n        The matrix.\n\n    Examples\n    --------\n    >>> from numpy.linalg import svd\n    >>> from sklearn.datasets import make_low_rank_matrix\n    >>> X = make_low_rank_matrix(\n    ...     n_samples=50,\n    ...     n_features=25,\n    ...     effective_rank=5,\n    ...     tail_strength=0.01,\n    ...     random_state=0,\n    ... )\n    >>> X.shape\n    (50, 25)",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from numpy.linalg import svd\n    >>> from sklearn.datasets import make_low_rank_matrix\n    >>> X = make_low_rank_matrix(\n    ...     n_samples=50,\n    ...     n_features=25,\n    ...     effective_rank=5,\n    ...     tail_strength=0.01,\n    ...     random_state=0,\n    ... )\n    >>> X.shape\n    (50, 25)"
      }
    },
    {
      "name": "make_moons",
      "signature": "make_moons(n_samples=100, *, shuffle=True, noise=None, random_state=None)",
      "documentation": {
        "description": "Make two interleaving half circles.\n\n    A simple toy dataset to visualize clustering and classification\n    algorithms. Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    n_samples : int or tuple of shape (2,), dtype=int, default=100\n        If int, the total number of points generated.\n        If two-element tuple, number of points in each of two moons.\n\n        .. versionchanged:: 0.23\n           Added two-element tuple.\n\n    shuffle : bool, default=True\n        Whether to shuffle the samples.\n\n    noise : float, default=None\n        Standard deviation of Gaussian noise added to the data.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset shuffling and noise.\n        Pass an int for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Returns\n    -------\n    X : ndarray of shape (n_samples, 2)\n        The generated samples.\n\n    y : ndarray of shape (n_samples,)\n        The integer labels (0 or 1) for class membership of each sample.",
        "parameters": {
          "n_samples": {
            "type": "int or tuple of shape (2,), dtype=int, default=100",
            "description": ""
          },
          "If": {
            "type": "two-element tuple, number of points in each of two moons.",
            "description": ".. versionchanged:: 0.23"
          },
          "Added": {
            "type": "two-element tuple.",
            "description": ""
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": ""
          },
          "Whether": {
            "type": "to shuffle the samples.",
            "description": ""
          },
          "noise": {
            "type": "float, default=None",
            "description": ""
          },
          "Standard": {
            "type": "deviation of Gaussian noise added to the data.",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset shuffling and noise.",
            "description": ""
          },
          "Pass": {
            "type": "an int for reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "term:`Glossary <random_state>`.",
            "description": "Returns\n-------"
          },
          "X": {
            "type": "ndarray of shape (n_samples, 2)",
            "description": ""
          },
          "The": {
            "type": "integer labels (0 or 1) for class membership of each sample.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import make_moons\n>>> X, y = make_moons(n_samples=200, noise=0.2, random_state=42)\n>>> X.shape\n(200, 2)\n>>> y.shape\n(200,)"
          },
          "y": {
            "type": "ndarray of shape (n_samples,)",
            "description": ""
          }
        },
        "returns": "-------\n    X : ndarray of shape (n_samples, 2)\n        The generated samples.\n\n    y : ndarray of shape (n_samples,)\n        The integer labels (0 or 1) for class membership of each sample.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_moons\n    >>> X, y = make_moons(n_samples=200, noise=0.2, random_state=42)\n    >>> X.shape\n    (200, 2)\n    >>> y.shape\n    (200,)",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import make_moons\n    >>> X, y = make_moons(n_samples=200, noise=0.2, random_state=42)\n    >>> X.shape\n    (200, 2)\n    >>> y.shape\n    (200,)"
      }
    },
    {
      "name": "make_multilabel_classification",
      "signature": "make_multilabel_classification(n_samples=100, n_features=20, *, n_classes=5, n_labels=2, length=50, allow_unlabeled=True, sparse=False, return_indicator='dense', return_distributions=False, random_state=None)",
      "documentation": {
        "description": "Generate a random multilabel classification problem.\n\n    For each sample, the generative process is:\n        - pick the number of labels: n ~ Poisson(n_labels)\n        - n times, choose a class c: c ~ Multinomial(theta)\n        - pick the document length: k ~ Poisson(length)\n        - k times, choose a word: w ~ Multinomial(theta_c)\n\n    In the above process, rejection sampling is used to make sure that\n    n is never zero or more than `n_classes`, and that the document length\n    is never zero. Likewise, we reject classes which have already been chosen.\n\n    For an example of usage, see\n    :ref:`sphx_glr_auto_examples_datasets_plot_random_multilabel_dataset.py`.\n\n    Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    n_samples : int, default=100\n        The number of samples.\n\n    n_features : int, default=20\n        The total number of features.\n\n    n_classes : int, default=5\n        The number of classes of the classification problem.\n\n    n_labels : int, default=2\n        The average number of labels per instance. More precisely, the number\n        of labels per sample is drawn from a Poisson distribution with\n        ``n_labels`` as its expected value, but samples are bounded (using\n        rejection sampling) by ``n_classes``, and must be nonzero if\n        ``allow_unlabeled`` is False.\n\n    length : int, default=50\n        The sum of the features (number of words if documents) is drawn from\n        a Poisson distribution with this expected value.\n\n    allow_unlabeled : bool, default=True\n        If ``True``, some instances might not belong to any class.\n\n    sparse : bool, default=False\n        If ``True``, return a sparse feature matrix.\n\n        .. versionadded:: 0.17\n           parameter to allow *sparse* output.\n\n    return_indicator : {'dense', 'sparse'} or False, default='dense'\n        If ``'dense'`` return ``Y`` in the dense binary indicator format. If\n        ``'sparse'`` return ``Y`` in the sparse binary indicator format.\n        ``False`` returns a list of lists of labels.\n\n    return_distributions : bool, default=False\n        If ``True``, return the prior class probability and conditional\n        probabilities of features given classes, from which the data was\n        drawn.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset creation. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Returns\n    -------\n    X : ndarray of shape (n_samples, n_features)\n        The generated samples.\n\n    Y : {ndarray, sparse matrix} of shape (n_samples, n_classes)\n        The label sets. Sparse matrix should be of CSR format.\n\n    p_c : ndarray of shape (n_classes,)\n        The probability of each class being drawn. Only returned if\n        ``return_distributions=True``.\n\n    p_w_c : ndarray of shape (n_features, n_classes)\n        The probability of each feature being drawn given each class.\n        Only returned if ``return_distributions=True``.",
        "parameters": {
          "n_samples": {
            "type": "int, default=100",
            "description": ""
          },
          "The": {
            "type": "probability of each feature being drawn given each class.",
            "description": ""
          },
          "n_features": {
            "type": "int, default=20",
            "description": ""
          },
          "n_classes": {
            "type": "int, default=5",
            "description": ""
          },
          "n_labels": {
            "type": "int, default=2",
            "description": ""
          },
          "of": {
            "type": "labels per sample is drawn from a Poisson distribution with",
            "description": "``n_labels`` as its expected value, but samples are bounded (using"
          },
          "rejection": {
            "type": "sampling) by ``n_classes``, and must be nonzero if",
            "description": "``allow_unlabeled`` is False."
          },
          "length": {
            "type": "int, default=50",
            "description": ""
          },
          "a": {
            "type": "Poisson distribution with this expected value.",
            "description": ""
          },
          "allow_unlabeled": {
            "type": "bool, default=True",
            "description": ""
          },
          "If": {
            "type": "``True``, return the prior class probability and conditional",
            "description": ""
          },
          "sparse": {
            "type": "bool, default=False",
            "description": ""
          },
          "parameter": {
            "type": "to allow *sparse* output.",
            "description": ""
          },
          "return_indicator": {
            "type": "{'dense', 'sparse'} or False, default='dense'",
            "description": ""
          },
          "return_distributions": {
            "type": "bool, default=False",
            "description": ""
          },
          "probabilities": {
            "type": "of features given classes, from which the data was",
            "description": "drawn."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset creation. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "term:`Glossary <random_state>`.",
            "description": "Returns\n-------"
          },
          "X": {
            "type": "ndarray of shape (n_samples, n_features)",
            "description": ""
          },
          "Y": {
            "type": "{ndarray, sparse matrix} of shape (n_samples, n_classes)",
            "description": ""
          },
          "p_c": {
            "type": "ndarray of shape (n_classes,)",
            "description": ""
          },
          "p_w_c": {
            "type": "ndarray of shape (n_features, n_classes)",
            "description": ""
          },
          "Only": {
            "type": "returned if ``return_distributions=True``.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import make_multilabel_classification\n>>> X, y = make_multilabel_classification(n_labels=3, random_state=42)\n>>> X.shape\n(100, 20)\n>>> y.shape\n(100, 5)\n>>> list(y[:3])\n[array([1, 1, 0, 1, 0]), array([0, 1, 1, 1, 0]), array([0, 1, 0, 0, 0])]"
          }
        },
        "returns": "-------\n    X : ndarray of shape (n_samples, n_features)\n        The generated samples.\n\n    Y : {ndarray, sparse matrix} of shape (n_samples, n_classes)\n        The label sets. Sparse matrix should be of CSR format.\n\n    p_c : ndarray of shape (n_classes,)\n        The probability of each class being drawn. Only returned if\n        ``return_distributions=True``.\n\n    p_w_c : ndarray of shape (n_features, n_classes)\n        The probability of each feature being drawn given each class.\n        Only returned if ``return_distributions=True``.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_multilabel_classification\n    >>> X, y = make_multilabel_classification(n_labels=3, random_state=42)\n    >>> X.shape\n    (100, 20)\n    >>> y.shape\n    (100, 5)\n    >>> list(y[:3])\n    [array([1, 1, 0, 1, 0]), array([0, 1, 1, 1, 0]), array([0, 1, 0, 0, 0])]",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import make_multilabel_classification\n    >>> X, y = make_multilabel_classification(n_labels=3, random_state=42)\n    >>> X.shape\n    (100, 20)\n    >>> y.shape\n    (100, 5)\n    >>> list(y[:3])\n    [array([1, 1, 0, 1, 0]), array([0, 1, 1, 1, 0]), array([0, 1, 0, 0, 0])]"
      }
    },
    {
      "name": "make_regression",
      "signature": "make_regression(n_samples=100, n_features=100, *, n_informative=10, n_targets=1, bias=0.0, effective_rank=None, tail_strength=0.5, noise=0.0, shuffle=True, coef=False, random_state=None)",
      "documentation": {
        "description": "Generate a random regression problem.\n\n    The input set can either be well conditioned (by default) or have a low\n    rank-fat tail singular profile. See :func:`make_low_rank_matrix` for\n    more details.\n\n    The output is generated by applying a (potentially biased) random linear\n    regression model with `n_informative` nonzero regressors to the previously\n    generated input and some gaussian centered noise with some adjustable\n    scale.\n\n    Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    n_samples : int, default=100\n        The number of samples.\n\n    n_features : int, default=100\n        The number of features.\n\n    n_informative : int, default=10\n        The number of informative features, i.e., the number of features used\n        to build the linear model used to generate the output.\n\n    n_targets : int, default=1\n        The number of regression targets, i.e., the dimension of the y output\n        vector associated with a sample. By default, the output is a scalar.\n\n    bias : float, default=0.0\n        The bias term in the underlying linear model.\n\n    effective_rank : int, default=None\n        If not None:\n            The approximate number of singular vectors required to explain most\n            of the input data by linear combinations. Using this kind of\n            singular spectrum in the input allows the generator to reproduce\n            the correlations often observed in practice.\n        If None:\n            The input set is well conditioned, centered and gaussian with\n            unit variance.\n\n    tail_strength : float, default=0.5\n        The relative importance of the fat noisy tail of the singular values\n        profile if `effective_rank` is not None. When a float, it should be\n        between 0 and 1.\n\n    noise : float, default=0.0\n        The standard deviation of the gaussian noise applied to the output.\n\n    shuffle : bool, default=True\n        Shuffle the samples and the features.\n\n    coef : bool, default=False\n        If True, the coefficients of the underlying linear model are returned.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset creation. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Returns\n    -------\n    X : ndarray of shape (n_samples, n_features)\n        The input samples.\n\n    y : ndarray of shape (n_samples,) or (n_samples, n_targets)\n        The output values.\n\n    coef : ndarray of shape (n_features,) or (n_features, n_targets)\n        The coefficient of the underlying linear model. It is returned only if\n        coef is True.",
        "parameters": {
          "n_samples": {
            "type": "int, default=100",
            "description": ""
          },
          "The": {
            "type": "coefficient of the underlying linear model. It is returned only if",
            "description": ""
          },
          "n_features": {
            "type": "int, default=100",
            "description": ""
          },
          "n_informative": {
            "type": "int, default=10",
            "description": ""
          },
          "to": {
            "type": "build the linear model used to generate the output.",
            "description": ""
          },
          "n_targets": {
            "type": "int, default=1",
            "description": ""
          },
          "vector": {
            "type": "associated with a sample. By default, the output is a scalar.",
            "description": ""
          },
          "bias": {
            "type": "float, default=0.0",
            "description": ""
          },
          "effective_rank": {
            "type": "int, default=None",
            "description": ""
          },
          "If": {
            "type": "True, the coefficients of the underlying linear model are returned.",
            "description": ""
          },
          "of": {
            "type": "the input data by linear combinations. Using this kind of",
            "description": ""
          },
          "singular": {
            "type": "spectrum in the input allows the generator to reproduce",
            "description": ""
          },
          "the": {
            "type": "correlations often observed in practice.",
            "description": ""
          },
          "unit": {
            "type": "variance.",
            "description": ""
          },
          "tail_strength": {
            "type": "float, default=0.5",
            "description": ""
          },
          "profile": {
            "type": "if `effective_rank` is not None. When a float, it should be",
            "description": ""
          },
          "between": {
            "type": "0 and 1.",
            "description": ""
          },
          "noise": {
            "type": "float, default=0.0",
            "description": ""
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": ""
          },
          "Shuffle": {
            "type": "the samples and the features.",
            "description": ""
          },
          "coef": {
            "type": "is True.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import make_regression\n>>> X, y = make_regression(n_samples=5, n_features=2, noise=1, random_state=42)\n>>> X\narray([[ 0.4967..., -0.1382... ],\n[ 0.6476...,  1.523...],\n[-0.2341..., -0.2341...],\n[-0.4694...,  0.5425...],\n[ 1.579...,  0.7674...]])\n>>> y"
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset creation. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "term:`Glossary <random_state>`.",
            "description": "Returns\n-------"
          },
          "X": {
            "type": "ndarray of shape (n_samples, n_features)",
            "description": ""
          },
          "y": {
            "type": "ndarray of shape (n_samples,) or (n_samples, n_targets)",
            "description": ""
          },
          "array": {
            "type": "[  6.737...,  37.79..., -10.27...,   0.4017...,   42.22...]",
            "description": ""
          }
        },
        "returns": "-------\n    X : ndarray of shape (n_samples, n_features)\n        The input samples.\n\n    y : ndarray of shape (n_samples,) or (n_samples, n_targets)\n        The output values.\n\n    coef : ndarray of shape (n_features,) or (n_features, n_targets)\n        The coefficient of the underlying linear model. It is returned only if\n        coef is True.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_regression\n    >>> X, y = make_regression(n_samples=5, n_features=2, noise=1, random_state=42)\n    >>> X\n    array([[ 0.4967..., -0.1382... ],\n        [ 0.6476...,  1.523...],\n        [-0.2341..., -0.2341...],\n        [-0.4694...,  0.5425...],\n        [ 1.579...,  0.7674...]])\n    >>> y\n    array([  6.737...,  37.79..., -10.27...,   0.4017...,   42.22...])",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import make_regression\n    >>> X, y = make_regression(n_samples=5, n_features=2, noise=1, random_state=42)\n    >>> X\n    array([[ 0.4967..., -0.1382... ],\n        [ 0.6476...,  1.523...],\n        [-0.2341..., -0.2341...],\n        [-0.4694...,  0.5425...],\n        [ 1.579...,  0.7674...]])\n    >>> y\n    array([  6.737...,  37.79..., -10.27...,   0.4017...,   42.22...])"
      }
    },
    {
      "name": "make_s_curve",
      "signature": "make_s_curve(n_samples=100, *, noise=0.0, random_state=None)",
      "documentation": {
        "description": "Generate an S curve dataset.\n\n    Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    n_samples : int, default=100\n        The number of sample points on the S curve.\n\n    noise : float, default=0.0\n        The standard deviation of the gaussian noise.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset creation. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Returns\n    -------\n    X : ndarray of shape (n_samples, 3)\n        The points.\n\n    t : ndarray of shape (n_samples,)\n        The univariate position of the sample according\n        to the main dimension of the points in the manifold.",
        "parameters": {
          "n_samples": {
            "type": "int, default=100",
            "description": ""
          },
          "The": {
            "type": "univariate position of the sample according",
            "description": ""
          },
          "noise": {
            "type": "float, default=0.0",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset creation. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "term:`Glossary <random_state>`.",
            "description": "Returns\n-------"
          },
          "X": {
            "type": "ndarray of shape (n_samples, 3)",
            "description": ""
          },
          "t": {
            "type": "ndarray of shape (n_samples,)",
            "description": ""
          },
          "to": {
            "type": "the main dimension of the points in the manifold.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import make_s_curve\n>>> X, t = make_s_curve(noise=0.05, random_state=0)\n>>> X.shape\n(100, 3)\n>>> t.shape\n(100,)"
          }
        },
        "returns": "-------\n    X : ndarray of shape (n_samples, 3)\n        The points.\n\n    t : ndarray of shape (n_samples,)\n        The univariate position of the sample according\n        to the main dimension of the points in the manifold.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_s_curve\n    >>> X, t = make_s_curve(noise=0.05, random_state=0)\n    >>> X.shape\n    (100, 3)\n    >>> t.shape\n    (100,)",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import make_s_curve\n    >>> X, t = make_s_curve(noise=0.05, random_state=0)\n    >>> X.shape\n    (100, 3)\n    >>> t.shape\n    (100,)"
      }
    },
    {
      "name": "make_sparse_coded_signal",
      "signature": "make_sparse_coded_signal(n_samples, *, n_components, n_features, n_nonzero_coefs, random_state=None)",
      "documentation": {
        "description": "Generate a signal as a sparse combination of dictionary elements.\n\n    Returns matrices `Y`, `D` and `X` such that `Y = XD` where `X` is of shape\n    `(n_samples, n_components)`, `D` is of shape `(n_components, n_features)`, and\n    each row of `X` has exactly `n_nonzero_coefs` non-zero elements.\n\n    Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    n_samples : int\n        Number of samples to generate.\n\n    n_components : int\n        Number of components in the dictionary.\n\n    n_features : int\n        Number of features of the dataset to generate.\n\n    n_nonzero_coefs : int\n        Number of active (non-zero) coefficients in each sample.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset creation. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Returns\n    -------\n    data : ndarray of shape (n_samples, n_features)\n        The encoded signal (Y).\n\n    dictionary : ndarray of shape (n_components, n_features)\n        The dictionary with normalized components (D).\n\n    code : ndarray of shape (n_samples, n_components)\n        The sparse code such that each column of this matrix has exactly\n        n_nonzero_coefs non-zero items (X).",
        "parameters": {
          "n_samples": {
            "type": "int",
            "description": ""
          },
          "Number": {
            "type": "of active (non-zero) coefficients in each sample.",
            "description": ""
          },
          "n_components": {
            "type": "int",
            "description": ""
          },
          "n_features": {
            "type": "int",
            "description": ""
          },
          "n_nonzero_coefs": {
            "type": "non-zero items (X).",
            "description": "Examples\n--------\n>>> from sklearn.datasets import make_sparse_coded_signal\n>>> data, dictionary, code = make_sparse_coded_signal(\n...     n_samples=50,\n...     n_components=100,\n...     n_features=10,\n...     n_nonzero_coefs=4,\n...     random_state=0\n... )\n>>> data.shape\n(50, 10)\n>>> dictionary.shape\n(100, 10)\n>>> code.shape\n(50, 100)"
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset creation. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "term:`Glossary <random_state>`.",
            "description": "Returns\n-------"
          },
          "data": {
            "type": "ndarray of shape (n_samples, n_features)",
            "description": ""
          },
          "The": {
            "type": "sparse code such that each column of this matrix has exactly",
            "description": ""
          },
          "dictionary": {
            "type": "ndarray of shape (n_components, n_features)",
            "description": ""
          },
          "code": {
            "type": "ndarray of shape (n_samples, n_components)",
            "description": ""
          }
        },
        "returns": "matrices `Y`, `D` and `X` such that `Y = XD` where `X` is of shape\n    `(n_samples, n_components)`, `D` is of shape `(n_components, n_features)`, and\n    each row of `X` has exactly `n_nonzero_coefs` non-zero elements.\n\n    Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    n_samples : int\n        Number of samples to generate.\n\n    n_components : int\n        Number of components in the dictionary.\n\n    n_features : int\n        Number of features of the dataset to generate.\n\n    n_nonzero_coefs : int\n        Number of active (non-zero) coefficients in each sample.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset creation. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import make_sparse_coded_signal\n    >>> data, dictionary, code = make_sparse_coded_signal(\n    ...     n_samples=50,\n    ...     n_components=100,\n    ...     n_features=10,\n    ...     n_nonzero_coefs=4,\n    ...     random_state=0\n    ... )\n    >>> data.shape\n    (50, 10)\n    >>> dictionary.shape\n    (100, 10)\n    >>> code.shape\n    (50, 100)"
      }
    },
    {
      "name": "make_sparse_spd_matrix",
      "signature": "make_sparse_spd_matrix(n_dim=1, *, alpha=0.95, norm_diag=False, smallest_coef=0.1, largest_coef=0.9, sparse_format=None, random_state=None)",
      "documentation": {
        "description": "Generate a sparse symmetric definite positive matrix.\n\n    Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    n_dim : int, default=1\n        The size of the random matrix to generate.\n\n        .. versionchanged:: 1.4\n            Renamed from ``dim`` to ``n_dim``.\n\n    alpha : float, default=0.95\n        The probability that a coefficient is zero (see notes). Larger values\n        enforce more sparsity. The value should be in the range 0 and 1.\n\n    norm_diag : bool, default=False\n        Whether to normalize the output matrix to make the leading diagonal\n        elements all 1.\n\n    smallest_coef : float, default=0.1\n        The value of the smallest coefficient between 0 and 1.\n\n    largest_coef : float, default=0.9\n        The value of the largest coefficient between 0 and 1.\n\n    sparse_format : str, default=None\n        String representing the output sparse format, such as 'csc', 'csr', etc.\n        If ``None``, return a dense numpy ndarray.\n\n        .. versionadded:: 1.4\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset creation. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Returns\n    -------\n    prec : ndarray or sparse matrix of shape (dim, dim)\n        The generated matrix. If ``sparse_format=None``, this would be an ndarray.\n        Otherwise, this will be a sparse matrix of the specified format.\n\n    See Also\n    --------\n    make_spd_matrix : Generate a random symmetric, positive-definite matrix.\n\n    Notes\n    -----\n    The sparsity is actually imposed on the cholesky factor of the matrix.\n    Thus alpha does not translate directly into the filling fraction of\n    the matrix itself.",
        "parameters": {
          "n_dim": {
            "type": "int, default=1",
            "description": ""
          },
          "The": {
            "type": "sparsity is actually imposed on the cholesky factor of the matrix.",
            "description": ""
          },
          "Renamed": {
            "type": "from ``dim`` to ``n_dim``.",
            "description": ""
          },
          "alpha": {
            "type": "float, default=0.95",
            "description": ""
          },
          "enforce": {
            "type": "more sparsity. The value should be in the range 0 and 1.",
            "description": ""
          },
          "norm_diag": {
            "type": "bool, default=False",
            "description": ""
          },
          "Whether": {
            "type": "to normalize the output matrix to make the leading diagonal",
            "description": ""
          },
          "elements": {
            "type": "all 1.",
            "description": ""
          },
          "smallest_coef": {
            "type": "float, default=0.1",
            "description": ""
          },
          "largest_coef": {
            "type": "float, default=0.9",
            "description": ""
          },
          "sparse_format": {
            "type": "str, default=None",
            "description": ""
          },
          "String": {
            "type": "representing the output sparse format, such as 'csc', 'csr', etc.",
            "description": ""
          },
          "If": {
            "type": "``None``, return a dense numpy ndarray.",
            "description": ".. versionadded:: 1.4"
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset creation. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "prec": {
            "type": "ndarray or sparse matrix of shape (dim, dim)",
            "description": ""
          },
          "make_spd_matrix": {
            "type": "Generate a random symmetric, positive",
            "description": "definite matrix.\nNotes\n-----"
          },
          "Thus": {
            "type": "alpha does not translate directly into the filling fraction of",
            "description": ""
          },
          "the": {
            "type": "matrix itself.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import make_sparse_spd_matrix\n>>> make_sparse_spd_matrix(n_dim=4, norm_diag=False, random_state=42)\narray([[1., 0., 0., 0.],\n[0., 1., 0., 0.],\n[0., 0., 1., 0.],\n[0., 0., 0., 1.]])"
          }
        },
        "returns": "-------\n    prec : ndarray or sparse matrix of shape (dim, dim)\n        The generated matrix. If ``sparse_format=None``, this would be an ndarray.\n        Otherwise, this will be a sparse matrix of the specified format.\n\n    See Also\n    --------\n    make_spd_matrix : Generate a random symmetric, positive-definite matrix.\n\n    Notes\n    -----\n    The sparsity is actually imposed on the cholesky factor of the matrix.\n    Thus alpha does not translate directly into the filling fraction of\n    the matrix itself.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_sparse_spd_matrix\n    >>> make_sparse_spd_matrix(n_dim=4, norm_diag=False, random_state=42)\n    array([[1., 0., 0., 0.],\n           [0., 1., 0., 0.],\n           [0., 0., 1., 0.],\n           [0., 0., 0., 1.]])",
        "raises": "",
        "see_also": "--------\n    make_spd_matrix : Generate a random symmetric, positive-definite matrix.\n\n    Notes\n    -----\n    The sparsity is actually imposed on the cholesky factor of the matrix.\n    Thus alpha does not translate directly into the filling fraction of\n    the matrix itself.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_sparse_spd_matrix\n    >>> make_sparse_spd_matrix(n_dim=4, norm_diag=False, random_state=42)\n    array([[1., 0., 0., 0.],\n           [0., 1., 0., 0.],\n           [0., 0., 1., 0.],\n           [0., 0., 0., 1.]])",
        "notes": "-----\n    The sparsity is actually imposed on the cholesky factor of the matrix.\n    Thus alpha does not translate directly into the filling fraction of\n    the matrix itself.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_sparse_spd_matrix\n    >>> make_sparse_spd_matrix(n_dim=4, norm_diag=False, random_state=42)\n    array([[1., 0., 0., 0.],\n           [0., 1., 0., 0.],\n           [0., 0., 1., 0.],\n           [0., 0., 0., 1.]])",
        "examples": "--------\n    >>> from sklearn.datasets import make_sparse_spd_matrix\n    >>> make_sparse_spd_matrix(n_dim=4, norm_diag=False, random_state=42)\n    array([[1., 0., 0., 0.],\n           [0., 1., 0., 0.],\n           [0., 0., 1., 0.],\n           [0., 0., 0., 1.]])"
      }
    },
    {
      "name": "make_sparse_uncorrelated",
      "signature": "make_sparse_uncorrelated(n_samples=100, n_features=10, *, random_state=None)",
      "documentation": {
        "description": "Generate a random regression problem with sparse uncorrelated design.\n\n    This dataset is described in Celeux et al [1]. as::\n\n        X ~ N(0, 1)\n        y(X) = X[:, 0] + 2 * X[:, 1] - 2 * X[:, 2] - 1.5 * X[:, 3]\n\n    Only the first 4 features are informative. The remaining features are\n    useless.\n\n    Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    n_samples : int, default=100\n        The number of samples.\n\n    n_features : int, default=10\n        The number of features.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset creation. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Returns\n    -------\n    X : ndarray of shape (n_samples, n_features)\n        The input samples.\n\n    y : ndarray of shape (n_samples,)\n        The output values.\n\n    References\n    ----------\n    .. [1] G. Celeux, M. El Anbari, J.-M. Marin, C. P. Robert,\n           \"Regularization in regression: comparing Bayesian and frequentist\n           methods in a poorly informative situation\", 2009.",
        "parameters": {
          "n_samples": {
            "type": "int, default=100",
            "description": ""
          },
          "The": {
            "type": "output values.",
            "description": "References\n----------\n.. [1] G. Celeux, M. El Anbari, J.-M. Marin, C. P. Robert,\n\"Regularization in regression: comparing Bayesian and frequentist"
          },
          "n_features": {
            "type": "int, default=10",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset creation. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "term:`Glossary <random_state>`.",
            "description": "Returns\n-------"
          },
          "X": {
            "type": "ndarray of shape (n_samples, n_features)",
            "description": ""
          },
          "y": {
            "type": "ndarray of shape (n_samples,)",
            "description": ""
          },
          "methods": {
            "type": "in a poorly informative situation\", 2009.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import make_sparse_uncorrelated\n>>> X, y = make_sparse_uncorrelated(random_state=0)\n>>> X.shape\n(100, 10)\n>>> y.shape\n(100,)"
          }
        },
        "returns": "-------\n    X : ndarray of shape (n_samples, n_features)\n        The input samples.\n\n    y : ndarray of shape (n_samples,)\n        The output values.\n\n    References\n    ----------\n    .. [1] G. Celeux, M. El Anbari, J.-M. Marin, C. P. Robert,\n           \"Regularization in regression: comparing Bayesian and frequentist\n           methods in a poorly informative situation\", 2009.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_sparse_uncorrelated\n    >>> X, y = make_sparse_uncorrelated(random_state=0)\n    >>> X.shape\n    (100, 10)\n    >>> y.shape\n    (100,)",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import make_sparse_uncorrelated\n    >>> X, y = make_sparse_uncorrelated(random_state=0)\n    >>> X.shape\n    (100, 10)\n    >>> y.shape\n    (100,)"
      }
    },
    {
      "name": "make_spd_matrix",
      "signature": "make_spd_matrix(n_dim, *, random_state=None)",
      "documentation": {
        "description": "Generate a random symmetric, positive-definite matrix.\n\n    Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    n_dim : int\n        The matrix dimension.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset creation. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    Returns\n    -------\n    X : ndarray of shape (n_dim, n_dim)\n        The random symmetric, positive-definite matrix.\n\n    See Also\n    --------\n    make_sparse_spd_matrix: Generate a sparse symmetric definite positive matrix.",
        "parameters": {
          "n_dim": {
            "type": "int",
            "description": ""
          },
          "The": {
            "type": "random symmetric, positive-definite matrix.",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset creation. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "Also",
            "description": "--------"
          },
          "X": {
            "type": "ndarray of shape (n_dim, n_dim)",
            "description": ""
          },
          "make_sparse_spd_matrix": {
            "type": "Generate a sparse symmetric definite positive matrix.",
            "description": "Examples\n--------\n>>> from sklearn.datasets import make_spd_matrix\n>>> make_spd_matrix(n_dim=2, random_state=42)\narray([[2.09..., 0.34...],\n[0.34..., 0.21...]])"
          }
        },
        "returns": "-------\n    X : ndarray of shape (n_dim, n_dim)\n        The random symmetric, positive-definite matrix.\n\n    See Also\n    --------\n    make_sparse_spd_matrix: Generate a sparse symmetric definite positive matrix.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_spd_matrix\n    >>> make_spd_matrix(n_dim=2, random_state=42)\n    array([[2.09..., 0.34...],\n           [0.34..., 0.21...]])",
        "raises": "",
        "see_also": "--------\n    make_sparse_spd_matrix: Generate a sparse symmetric definite positive matrix.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_spd_matrix\n    >>> make_spd_matrix(n_dim=2, random_state=42)\n    array([[2.09..., 0.34...],\n           [0.34..., 0.21...]])",
        "notes": "",
        "examples": "--------\n    >>> from sklearn.datasets import make_spd_matrix\n    >>> make_spd_matrix(n_dim=2, random_state=42)\n    array([[2.09..., 0.34...],\n           [0.34..., 0.21...]])"
      }
    },
    {
      "name": "make_swiss_roll",
      "signature": "make_swiss_roll(n_samples=100, *, noise=0.0, random_state=None, hole=False)",
      "documentation": {
        "description": "Generate a swiss roll dataset.\n\n    Read more in the :ref:`User Guide <sample_generators>`.\n\n    Parameters\n    ----------\n    n_samples : int, default=100\n        The number of sample points on the Swiss Roll.\n\n    noise : float, default=0.0\n        The standard deviation of the gaussian noise.\n\n    random_state : int, RandomState instance or None, default=None\n        Determines random number generation for dataset creation. Pass an int\n        for reproducible output across multiple function calls.\n        See :term:`Glossary <random_state>`.\n\n    hole : bool, default=False\n        If True generates the swiss roll with hole dataset.\n\n    Returns\n    -------\n    X : ndarray of shape (n_samples, 3)\n        The points.\n\n    t : ndarray of shape (n_samples,)\n        The univariate position of the sample according to the main dimension\n        of the points in the manifold.\n\n    Notes\n    -----\n    The algorithm is from Marsland [1].\n\n    References\n    ----------\n    .. [1] S. Marsland, \"Machine Learning: An Algorithmic Perspective\", 2nd edition,\n           Chapter 6, 2014.\n           https://homepages.ecs.vuw.ac.nz/~marslast/Code/Ch6/lle.py",
        "parameters": {
          "n_samples": {
            "type": "int, default=100",
            "description": ""
          },
          "The": {
            "type": "algorithm is from Marsland [1].",
            "description": "References\n----------\n.. [1] S. Marsland, \"Machine Learning: An Algorithmic Perspective\", 2nd edition,"
          },
          "noise": {
            "type": "float, default=0.0",
            "description": ""
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": ""
          },
          "Determines": {
            "type": "random number generation for dataset creation. Pass an int",
            "description": ""
          },
          "for": {
            "type": "reproducible output across multiple function calls.",
            "description": ""
          },
          "See": {
            "type": "term:`Glossary <random_state>`.",
            "description": ""
          },
          "hole": {
            "type": "bool, default=False",
            "description": ""
          },
          "If": {
            "type": "True generates the swiss roll with hole dataset.",
            "description": "Returns\n-------"
          },
          "X": {
            "type": "ndarray of shape (n_samples, 3)",
            "description": ""
          },
          "t": {
            "type": "ndarray of shape (n_samples,)",
            "description": ""
          },
          "of": {
            "type": "the points in the manifold.",
            "description": "Notes\n-----"
          },
          "Chapter": {
            "type": "6, 2014.",
            "description": ""
          },
          "https": {
            "type": "//homepages.ecs.vuw.ac.nz/~marslast/Code/Ch6/lle.py",
            "description": "Examples\n--------\n>>> from sklearn.datasets import make_swiss_roll\n>>> X, t = make_swiss_roll(noise=0.05, random_state=0)\n>>> X.shape\n(100, 3)\n>>> t.shape\n(100,)"
          }
        },
        "returns": "-------\n    X : ndarray of shape (n_samples, 3)\n        The points.\n\n    t : ndarray of shape (n_samples,)\n        The univariate position of the sample according to the main dimension\n        of the points in the manifold.\n\n    Notes\n    -----\n    The algorithm is from Marsland [1].\n\n    References\n    ----------\n    .. [1] S. Marsland, \"Machine Learning: An Algorithmic Perspective\", 2nd edition,\n           Chapter 6, 2014.\n           https://homepages.ecs.vuw.ac.nz/~marslast/Code/Ch6/lle.py\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_swiss_roll\n    >>> X, t = make_swiss_roll(noise=0.05, random_state=0)\n    >>> X.shape\n    (100, 3)\n    >>> t.shape\n    (100,)",
        "raises": "",
        "see_also": "",
        "notes": "-----\n    The algorithm is from Marsland [1].\n\n    References\n    ----------\n    .. [1] S. Marsland, \"Machine Learning: An Algorithmic Perspective\", 2nd edition,\n           Chapter 6, 2014.\n           https://homepages.ecs.vuw.ac.nz/~marslast/Code/Ch6/lle.py\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_swiss_roll\n    >>> X, t = make_swiss_roll(noise=0.05, random_state=0)\n    >>> X.shape\n    (100, 3)\n    >>> t.shape\n    (100,)",
        "examples": "--------\n    >>> from sklearn.datasets import make_swiss_roll\n    >>> X, t = make_swiss_roll(noise=0.05, random_state=0)\n    >>> X.shape\n    (100, 3)\n    >>> t.shape\n    (100,)"
      }
    }
  ],
  "classes": []
}