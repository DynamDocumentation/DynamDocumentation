{
  "description": "No description available",
  "functions": [
    {
      "name": "breakpoint",
      "signature": "breakpoint(*, backend: 'str | None' = None, filter_frames: 'bool' = True, num_frames: 'int | None' = None, ordered: 'bool' = False, token=None, **kwargs)",
      "documentation": {
        "description": "Enters a breakpoint at a point in a program.\nArgs:\nbackend: The debugger backend to use. By default, picks the highest priority\ndebugger and in the absence of other registered debuggers, falls back to\nthe CLI debugger.\nfilter_frames: Whether or not to filter out JAX-internal stack frames from\nthe traceback. Since some libraries, like Flax, also make use of JAX's\nstack frame filtering system, this option can also affect whether stack\nframes from libraries are filtered.\nnum_frames: The number of frames above the current stack frame to make\navailable for inspection in the interactive debugger.\nordered: A keyword only argument used to indicate whether or not the\nstaged out computation will enforce ordering of this ``jax.debug.breakpoint``\nwith respect to other ordered ``jax.debug.breakpoint`` and ``jax.debug.print``\ncalls.\ntoken: A keyword only argument; an alternative to ``ordered``. If used then a JAX\narray (or pytree of JAX arrays) should be passed, and the breakpoint will be run\nonce its value is computed.\nThis is returned unchanged, and should be passed back to the computation.\nIf the return value is unused in the later computation, then the whole computation\nwill be pruned and this breakpoint will not be run.",
        "parameters": {},
        "returns": "If `token` is passed, then its value is returned unchanged. Otherwise, returns\n`None`.",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "callback",
      "signature": "debug_callback(callback: 'Callable[..., None]', *args: 'Any', ordered: 'bool' = False, **kwargs: 'Any') -> 'None'",
      "documentation": {
        "description": "Calls a stageable Python callback.\nFor more explanation, see `External Callbacks`_.\n``jax.debug.callback`` enables you to pass in a Python function that can be called\ninside of a staged JAX program. A ``jax.debug.callback`` follows existing JAX\ntransformation *pure* operational semantics, which are therefore unaware of\nside-effects. This means the effect could be dropped, duplicated, or\npotentially reordered in the presence of higher-order primitives and\ntransformations.\nWe want this behavior because we'd like ``jax.debug.callback`` to be \"innocuous\",\ni.e. we want these primitives to change the JAX computation as little as\npossible while revealing as much about them as possible, such as which parts\nof the computation are duplicated or dropped.\nArgs:\ncallback: A Python callable returning None.\n*args: The positional arguments to the callback.\nordered: A keyword only argument used to indicate whether or not the\nstaged out computation will enforce ordering of this callback w.r.t.\nother ordered callbacks.\n**kwargs: The keyword arguments to the callback.",
        "parameters": {},
        "returns": "None",
        "raises": "",
        "see_also": "- :func:`jax.experimental.io_callback`: callback designed for impure functions.\n- :func:`jax.pure_callback`: callback designed for pure functions.\n- :func:`jax.debug.print`: callback designed for printing.\n.. _External Callbacks: https://jax.readthedocs.io/en/latest/notebooks/external_callbacks.html",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "inspect_array_sharding",
      "signature": "inspect_array_sharding(value, *, callback: 'Callable[[Sharding], None]')",
      "documentation": {
        "description": "Enables inspecting array sharding inside JIT-ted functions.\nThis function, when provided with a Pytree of arrays, calls back with each of\ntheir shardings and works in ``pjit``-ted computations, enabling inspecting\nthe chosen intermediate shardings.\nThe policy for when ``callback`` is called is *as early as possible* when the\nsharding information is available. This means if ``inspect_array_callback`` is\ncalled without any transformations, the callback will happen immediately\nsince we have the array and its sharding readily available. Inside of a\n``jax.jit``, the callback will happen at lowering time, meaning you can\ntrigger the callback using the AOT API (``jit(f).lower(...)``). When inside of\na ``pjit``, the callback happens *at compile time* since the sharding is\ndetermined by XLA. You can trigger the callback by using JAX's AOT API\n(``pjit(f).lower(...).compile()``). In all cases, the callback will be\ntriggered by running the function, since running a function entails lowering\nand compiling it first. However, once the function is compiled and cached,\nthe callback will no longer occur.\nThis function is experimental and its behavior may change in the future.\nArgs:\nvalue: A Pytree of JAX arrays.\ncallback: A callable that takes in a ``Sharding`` and doesn't return a value.\nIn the following example, we print out the sharding of an intermediate value\nin a ``pjit``-ted computation:\n>>> import jax\n>>> import jax.numpy as jnp\n>>> from jax.experimental.pjit import pjit\n>>> from jax.sharding import Mesh, PartitionSpec\n>>>\n>>> x = jnp.arange(8, dtype=jnp.float32)\n>>> def f_(x):\n...   x = jnp.sin(x)\n...   jax.debug.inspect_array_sharding(x, callback=print)\n...   return jnp.square(x)\n>>> f = pjit(f_, in_shardings=PartitionSpec('dev'),\n...          out_shardings=PartitionSpec('dev'))\n>>> with Mesh(jax.devices(), ('dev',)):\n...   f.lower(x).compile()  # doctest: +SKIP\n...\nNamedSharding(mesh={'dev': 8}, partition_spec=PartitionSpec(('dev',),))",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "print",
      "signature": "debug_print(fmt: 'str', *args, ordered: 'bool' = False, **kwargs) -> 'None'",
      "documentation": {
        "description": "Prints values and works in staged out JAX functions.\nThis function does *not* work with f-strings because formatting is delayed.\nSo instead of ``jax.debug.print(f\"hello {bar}\")``, write\n``jax.debug.print(\"hello {bar}\", bar=bar)``.\nThis function is a thin convenience wrapper around :func:`jax.debug.callback`.\nThe implementation is essentially::\ndef debug_print(fmt: str, *args, **kwargs):\njax.debug.callback(\nlambda *args, **kwargs: print(fmt.format(*args, **kwargs)),\n*args, **kwargs)\nIt may be useful to call :func:`jax.debug.callback` directly instead of this\nconvenience wrapper. For example, to get debug printing in logs, you might\nuse :func:`jax.debug.callback` together with ``logging.log``.\nArgs:\nfmt: A format string, e.g. ``\"hello {x}\"``, that will be used to format\ninput arguments, like ``str.format``. See the Python docs on\n`string formatting <https://docs.python.org/3/library/stdtypes.html#str.format>`_\nand `format string syntax <https://docs.python.org/3/library/string.html#formatstrings>`_.\n*args: A list of positional arguments to be formatted, as if passed to\n``fmt.format``.\nordered: A keyword only argument used to indicate whether or not the\nstaged out computation will enforce ordering of this ``jax.debug.print``\nw.r.t. other ordered ``jax.debug.print`` calls.\n**kwargs: Additional keyword arguments to be formatted, as if passed to\n``fmt.format``.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "visualize_array_sharding",
      "signature": "visualize_array_sharding(arr, **kwargs)",
      "documentation": {
        "description": "Visualizes an array's sharding.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "visualize_sharding",
      "signature": "visualize_sharding(shape: 'Sequence[int]', sharding: 'Sharding', *, use_color: 'bool' = True, scale: 'float' = 1.0, min_width: 'int' = 9, max_width: 'int' = 80, color_map: 'ColorMap | None' = None)",
      "documentation": {
        "description": "Visualizes a ``Sharding`` using ``rich``.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    }
  ],
  "classes": [
    {
      "name": "DebugEffect",
      "documentation": {
        "description": "A generic side-effect.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": []
    }
  ]
}