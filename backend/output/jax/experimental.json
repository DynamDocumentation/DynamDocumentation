{
  "description": "No description available",
  "functions": [
    {
      "name": "disable_x64",
      "signature": "disable_x64()",
      "documentation": {
        "description": "Experimental context manager to temporarily disable X64 mode.\nUsage::\n>>> x = np.arange(5, dtype='float64')\n>>> with disable_x64():\n...   print(jnp.asarray(x).dtype)\n...\nfloat32",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "--------\njax.experimental.enable_x64 : temporarily enable X64 mode.",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "enable_x64",
      "signature": "enable_x64(new_val: bool = True)",
      "documentation": {
        "description": "Experimental context manager to temporarily enable X64 mode.\nUsage::\n>>> x = np.arange(5, dtype='float64')\n>>> with enable_x64():\n...   print(jnp.asarray(x).dtype)\n...\nfloat64",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "--------\njax.experimental.enable_x64 : temporarily enable X64 mode.",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "io_callback",
      "signature": "io_callback(callback: 'Callable[..., Any]', result_shape_dtypes: 'Any', *args: 'Any', sharding: 'SingleDeviceSharding | None' = None, ordered: 'bool' = False, **kwargs: 'Any')",
      "documentation": {
        "description": "Calls an impure Python callback.\nFor more explanation, see `External Callbacks`_.\nArgs:\ncallback: function to execute on the host. It is assumed to be an impure function.\nIf ``callback`` is pure, using :func:`jax.pure_callback` instead may lead to\nmore efficient execution.\nresult_shape_dtypes: pytree whose leaves have ``shape`` and ``dtype`` attributes,\nwhose structure matches the expected output of the callback function at runtime.\n:class:`jax.ShapeDtypeStruct` is often used to define leaf values.\n*args: arguments to be passed to the callback function\nsharding: optional sharding that specifies the device from which the callback should\nbe invoked.\nordered: boolean specifying whether sequential calls to callback must be ordered.\n**kwargs: keyword arguments to be passed to the callback function",
        "parameters": {},
        "returns": "result: a pytree of :class:`jax.Array` objects whose structure matches that of\n``result_shape_dtypes``.",
        "raises": "",
        "see_also": "- :func:`jax.pure_callback`: callback designed for pure functions.\n- :func:`jax.debug.callback`: callback designed for general-purpose debugging.\n- :func:`jax.debug.print`: callback designed for printing.\n.. _External Callbacks: https://jax.readthedocs.io/en/latest/notebooks/external_callbacks.html",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "primal_tangent_dtype",
      "signature": "primal_tangent_dtype(primal_dtype, tangent_dtype, name: 'str | None' = None) -> 'ExtendedDType'",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    }
  ],
  "classes": [
    {
      "name": "EArray",
      "documentation": {
        "description": "Array base class for JAX\n``jax.Array`` is the public interface for instance checks and type annotation\nof JAX arrays and tracers. Its main applications are in instance checks and\ntype annotations; for example::\nx = jnp.arange(5)\nisinstance(x, jax.Array)  # returns True both inside and outside traced functions.\ndef f(x: Array) -> Array:  # type annotations are valid for traced and non-traced types.\nreturn x\n``jax.Array`` should not be used directly for creation of arrays; instead you\nshould use array creation routines offered in :mod:`jax.numpy`, such as\n:func:`jax.numpy.array`, :func:`jax.numpy.zeros`, :func:`jax.numpy.ones`,\n:func:`jax.numpy.full`, :func:`jax.numpy.arange`, etc.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "addressable_data",
          "signature": "addressable_data(self, index: 'int') -> 'EArray'",
          "documentation": {
            "description": "Return an array of the addressable data at a particular index.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "all",
          "signature": "_all(self: 'Array', axis: 'reductions.Axis' = None, out: 'None' = None, keepdims: 'bool' = False, *, where: 'ArrayLike | None' = None) -> 'Array'",
          "documentation": {
            "description": "Test whether all array elements along a given axis evaluate to True.\nRefer to :func:`jax.numpy.all` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "any",
          "signature": "_any(self: 'Array', axis: 'reductions.Axis' = None, out: 'None' = None, keepdims: 'bool' = False, *, where: 'ArrayLike | None' = None) -> 'Array'",
          "documentation": {
            "description": "Test whether any array elements along a given axis evaluate to True.\nRefer to :func:`jax.numpy.any` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "argmax",
          "signature": "_argmax(self: 'Array', axis: 'int | None' = None, out: 'None' = None, keepdims: 'bool | None' = None) -> 'Array'",
          "documentation": {
            "description": "Return the index of the maximum value.\nRefer to :func:`jax.numpy.argmax` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "argmin",
          "signature": "_argmin(self: 'Array', axis: 'int | None' = None, out: 'None' = None, keepdims: 'bool | None' = None) -> 'Array'",
          "documentation": {
            "description": "Return the index of the minimum value.\nRefer to :func:`jax.numpy.argmin` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "argpartition",
          "signature": "_argpartition(self: 'Array', kth: 'int', axis: 'int' = -1) -> 'Array'",
          "documentation": {
            "description": "Return the indices that partially sort the array.\nRefer to :func:`jax.numpy.argpartition` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "argsort",
          "signature": "_argsort(self: 'Array', axis: 'int | None' = -1, *, kind: 'None' = None, order: 'None' = None, stable: 'bool' = True, descending: 'bool' = False) -> 'Array'",
          "documentation": {
            "description": "Return the indices that sort the array.\nRefer to :func:`jax.numpy.argsort` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "astype",
          "signature": "_astype(self: 'Array', dtype: 'DTypeLike | None', copy: 'bool' = False, device: 'xc.Device | Sharding | None' = None) -> 'Array'",
          "documentation": {
            "description": "Copy the array and cast to a specified dtype.\nThis is implemented via :func:`jax.lax.convert_element_type`, which may\nhave slightly different behavior than :meth:`numpy.ndarray.astype` in\nsome cases. In particular, the details of float-to-int and int-to-float\ncasts are implementation dependent.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "block_until_ready",
          "signature": "block_until_ready(self)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "choose",
          "signature": "_choose(self: 'Array', choices: 'Sequence[ArrayLike]', out: 'None' = None, mode: 'str' = 'raise') -> 'Array'",
          "documentation": {
            "description": "Construct an array choosing from elements of multiple arrays.\nRefer to :func:`jax.numpy.choose` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "clip",
          "signature": "_clip(self: 'Array', min: 'ArrayLike | None' = None, max: 'ArrayLike | None' = None) -> 'Array'",
          "documentation": {
            "description": "Return an array whose values are limited to a specified range.\nRefer to :func:`jax.numpy.clip` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "compress",
          "signature": "_compress(self: 'Array', condition: 'ArrayLike', axis: 'int | None' = None, *, out: 'None' = None, size: 'int | None' = None, fill_value: 'ArrayLike' = 0) -> 'Array'",
          "documentation": {
            "description": "Return selected slices of this array along given axis.\nRefer to :func:`jax.numpy.compress` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "conj",
          "signature": "_conj(self: 'Array') -> 'Array'",
          "documentation": {
            "description": "Return the complex conjugate of the array.\nRefer to :func:`jax.numpy.conj` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "conjugate",
          "signature": "_conjugate(self: 'Array') -> 'Array'",
          "documentation": {
            "description": "Return the complex conjugate of the array.\nRefer to :func:`jax.numpy.conjugate` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "copy",
          "signature": "copy(self)",
          "documentation": {
            "description": "Return a copy of the array.\nRefer to :func:`jax.numpy.copy` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "copy_to_host_async",
          "signature": "copy_to_host_async(self)",
          "documentation": {
            "description": "Copies an ``Array`` to the host asynchronously.\nFor arrays that live an an accelerator, such as a GPU or a TPU, JAX may\ncache the value of the array on the host. Normally this happens\nbehind the scenes when the value of an on-device array is requested by the\nuser, but waiting to initiate a device-to-host copy until the value is\nrequested requires that JAX block the caller while waiting for the copy to\ncomplete.\n``copy_to_host_async`` requests that JAX populate its on-host cache of an\narray, but does not wait for the copy to complete. This may speed up a\nfuture on-host access to the array's contents.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cumprod",
          "signature": "_cumprod(self: 'Array', axis: 'reductions.Axis' = None, dtype: 'DTypeLike | None' = None, out: 'None' = None) -> 'Array'",
          "documentation": {
            "description": "Return the cumulative product of the array.\nRefer to :func:`jax.numpy.cumprod` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cumsum",
          "signature": "_cumsum(self: 'Array', axis: 'reductions.Axis' = None, dtype: 'DTypeLike | None' = None, out: 'None' = None) -> 'Array'",
          "documentation": {
            "description": "Return the cumulative sum of the array.\nRefer to :func:`jax.numpy.cumsum` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "diagonal",
          "signature": "_diagonal(self: 'Array', offset: 'int' = 0, axis1: 'int' = 0, axis2: 'int' = 1) -> 'Array'",
          "documentation": {
            "description": "Return the specified diagonal from the array.\nRefer to :func:`jax.numpy.diagonal` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "dot",
          "signature": "_dot(self: 'Array', b: 'ArrayLike', *, precision: 'lax_internal.PrecisionLike' = None, preferred_element_type: 'DTypeLike | None' = None) -> 'Array'",
          "documentation": {
            "description": "Compute the dot product of two arrays.\nRefer to :func:`jax.numpy.dot` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "flatten",
          "signature": "_flatten(self: 'Array', order: 'str' = 'C') -> 'Array'",
          "documentation": {
            "description": "Flatten array into a 1-dimensional shape.\nRefer to :func:`jax.numpy.ravel` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "item",
          "signature": "_item(self: 'Array', *args: 'int') -> 'bool | int | float | complex'",
          "documentation": {
            "description": "Copy an element of an array to a standard Python scalar and return it.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "max",
          "signature": "_max(self: 'Array', axis: 'reductions.Axis' = None, out: 'None' = None, keepdims: 'bool' = False, initial: 'ArrayLike | None' = None, where: 'ArrayLike | None' = None) -> 'Array'",
          "documentation": {
            "description": "Return the maximum of array elements along a given axis.\nRefer to :func:`jax.numpy.max` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "mean",
          "signature": "_mean(self: 'Array', axis: 'reductions.Axis' = None, dtype: 'DTypeLike | None' = None, out: 'None' = None, keepdims: 'bool' = False, *, where: 'ArrayLike | None' = None) -> 'Array'",
          "documentation": {
            "description": "Return the mean of array elements along a given axis.\nRefer to :func:`jax.numpy.mean` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "min",
          "signature": "_min(self: 'Array', axis: 'reductions.Axis' = None, out: 'None' = None, keepdims: 'bool' = False, initial: 'ArrayLike | None' = None, where: 'ArrayLike | None' = None) -> 'Array'",
          "documentation": {
            "description": "Return the minimum of array elements along a given axis.\nRefer to :func:`jax.numpy.min` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "nonzero",
          "signature": "_nonzero(self: 'Array', *, fill_value: 'None | ArrayLike | tuple[ArrayLike, ...]' = None, size: 'int | None' = None) -> 'tuple[Array, ...]'",
          "documentation": {
            "description": "Return indices of nonzero elements of an array.\nRefer to :func:`jax.numpy.nonzero` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "prod",
          "signature": "_prod(self: 'Array', axis: 'reductions.Axis' = None, dtype: 'DTypeLike | None' = None, out: 'None' = None, keepdims: 'bool' = False, initial: 'ArrayLike | None' = None, where: 'ArrayLike | None' = None, promote_integers: 'bool' = True) -> 'Array'",
          "documentation": {
            "description": "Return product of the array elements over a given axis.\nRefer to :func:`jax.numpy.prod` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "ptp",
          "signature": "_ptp(self: 'Array', axis: 'reductions.Axis' = None, out: 'None' = None, keepdims: 'bool' = False) -> 'Array'",
          "documentation": {
            "description": "Return the peak-to-peak range along a given axis.\nRefer to :func:`jax.numpy.ptp` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "ravel",
          "signature": "_flatten(self: 'Array', order: 'str' = 'C') -> 'Array'",
          "documentation": {
            "description": "Flatten array into a 1-dimensional shape.\nRefer to :func:`jax.numpy.ravel` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "repeat",
          "signature": "_repeat(self: 'Array', repeats: 'ArrayLike', axis: 'int | None' = None, *, total_repeat_length: 'int | None' = None) -> 'Array'",
          "documentation": {
            "description": "Construct an array from repeated elements.\nRefer to :func:`jax.numpy.repeat` for the full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "reshape",
          "signature": "_reshape(self: 'Array', *args: 'Any', order: 'str' = 'C') -> 'Array'",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "Refer to :func:`jax.numpy.reshape` for full documentation.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "round",
          "signature": "_round(self: 'Array', decimals: 'int' = 0, out: 'None' = None) -> 'Array'",
          "documentation": {
            "description": "Round array elements to a given decimal.\nRefer to :func:`jax.numpy.round` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "searchsorted",
          "signature": "_searchsorted(self: 'Array', v: 'ArrayLike', side: 'str' = 'left', sorter: 'ArrayLike | None' = None, *, method: 'str' = 'scan') -> 'Array'",
          "documentation": {
            "description": "Perform a binary search within a sorted array.\nRefer to :func:`jax.numpy.searchsorted` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sort",
          "signature": "_sort(self: 'Array', axis: 'int | None' = -1, *, kind: 'None' = None, order: 'None' = None, stable: 'bool' = True, descending: 'bool' = False) -> 'Array'",
          "documentation": {
            "description": "Return a sorted copy of an array.\nRefer to :func:`jax.numpy.sort` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "squeeze",
          "signature": "_squeeze(self: 'Array', axis: 'reductions.Axis' = None) -> 'Array'",
          "documentation": {
            "description": "Remove one or more length-1 axes from array.\nRefer to :func:`jax.numpy.squeeze` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "std",
          "signature": "_std(self: 'Array', axis: 'reductions.Axis' = None, dtype: 'DTypeLike | None' = None, out: 'None' = None, ddof: 'int' = 0, keepdims: 'bool' = False, *, where: 'ArrayLike | None' = None, correction: 'int | float | None' = None) -> 'Array'",
          "documentation": {
            "description": "Compute the standard deviation along a given axis.\nRefer to :func:`jax.numpy.std` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sum",
          "signature": "_sum(self: 'Array', axis: 'reductions.Axis' = None, dtype: 'DTypeLike | None' = None, out: 'None' = None, keepdims: 'bool' = False, initial: 'ArrayLike | None' = None, where: 'ArrayLike | None' = None, promote_integers: 'bool' = True) -> 'Array'",
          "documentation": {
            "description": "Sum of the elements of the array over a given axis.\nRefer to :func:`jax.numpy.sum` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "swapaxes",
          "signature": "_swapaxes(self: 'Array', axis1: 'int', axis2: 'int') -> 'Array'",
          "documentation": {
            "description": "Swap two axes of an array.\nRefer to :func:`jax.numpy.swapaxes` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "take",
          "signature": "_take(self: 'Array', indices: 'ArrayLike', axis: 'int | None' = None, out: 'None' = None, mode: 'str | None' = None, unique_indices: 'bool' = False, indices_are_sorted: 'bool' = False, fill_value: 'StaticScalar | None' = None) -> 'Array'",
          "documentation": {
            "description": "Take elements from an array.\nRefer to :func:`jax.numpy.take` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "to_device",
          "signature": "_to_device(self: 'Array', device: 'xc.Device | Sharding', *, stream: 'int | Any | None' = None)",
          "documentation": {
            "description": "Return a copy of the array on the specified device\nArgs:\ndevice: :class:`~jax.Device` or :class:`~jax.sharding.Sharding`\nto which the created array will be committed.\nstream: not implemented, passing a non-None value will lead to an error.",
            "parameters": {},
            "returns": "copy of array placed on the specified device or devices.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "trace",
          "signature": "_trace(self: 'Array', offset: 'int | ArrayLike' = 0, axis1: 'int' = 0, axis2: 'int' = 1, dtype: 'DTypeLike | None' = None, out: 'None' = None) -> 'Array'",
          "documentation": {
            "description": "Return the sum along the diagonal.\nRefer to :func:`jax.numpy.trace` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "transpose",
          "signature": "_transpose(self: 'Array', *args: 'Any') -> 'Array'",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "Refer to :func:`jax.numpy.transpose` for full documentation.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "var",
          "signature": "_var(self: 'Array', axis: 'reductions.Axis' = None, dtype: 'DTypeLike | None' = None, out: 'None' = None, ddof: 'int' = 0, keepdims: 'bool' = False, *, where: 'ArrayLike | None' = None, correction: 'int | float | None' = None) -> 'Array'",
          "documentation": {
            "description": "Compute the variance along a given axis.\nRefer to :func:`jax.numpy.var` for full documentation.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "view",
          "signature": "_view(self: 'Array', dtype: 'DTypeLike | None' = None, type: 'None' = None) -> 'Array'",
          "documentation": {
            "description": "Return a bitwise copy of the array, viewed as a new dtype.\nThis is fuller-featured wrapper around :func:`jax.lax.bitcast_convert_type`.\nIf the source and target dtype have the same bitwidth, the result has the same\nshape as the input array. If the bitwidth of the target dtype is different\nfrom the source, the size of the last axis of the result is adjusted\naccordingly.\n>>> jnp.zeros([1,2,3], dtype=jnp.int16).view(jnp.int8).shape\n(1, 2, 6)\n>>> jnp.zeros([1,2,4], dtype=jnp.int8).view(jnp.int16).shape\n(1, 2, 2)\nConversions involving booleans are not well-defined in all situations. With\nregards to the shape of result as explained above, booleans are treated as\nhaving a bitwidth of 8. However, when converting to a boolean array, the input\nshould only contain 0 or 1 bytes. Otherwise, results may be unpredictable or\nmay change depending on how the result is used.\nThis conversion is guaranteed and safe::\n>>> jnp.array([1, 0, 1], dtype=jnp.int8).view(jnp.bool_)\nArray([ True, False,  True], dtype=bool)\nHowever, there are no guarantees about the results of any expression involving\na view such as this: `jnp.array([1, 2, 3], dtype=jnp.int8).view(jnp.bool_)`.\nIn particular, the results may change between JAX releases and depending on\nthe platform. To safely convert such an array to a boolean array, compare it\nwith `0`::\n>>> jnp.array([1, 2, 0], dtype=jnp.int8) != 0\nArray([ True,  True, False], dtype=bool)",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    }
  ]
}