{
  "description": "No description available",
  "functions": [
    {
      "name": "sequential_vmap",
      "signature": "sequential_vmap(f)",
      "documentation": {
        "description": "A special case of ``custom_vmap`` that uses a loop.\nA function decorated with ``sequential_vmap`` will be called sequentially\nwithin a loop when batched. This is useful for functions that don't natively\nsupport batch dimensions.\nFor example:\n>>> @jax.custom_batching.sequential_vmap\n... def f(x):\n...   jax.debug.print(\"{}\", x)\n...   return x + 1\n...\n>>> jax.vmap(f)(jnp.arange(3))\n0\n1\n2\nArray([1, 2, 3], dtype=int32)\nWhere the print statements demonstrate that this :py:func:`~jax.vmap` is being\ngenerated using a loop.\nSee the documentation for :py:class:`~jax.custom_batching.custom_vmap` for\nmore details.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    }
  ],
  "classes": [
    {
      "name": "custom_vmap",
      "documentation": {
        "description": "Customize the vmap behavior of a JAX-transformable function.\nThis decorator is used to customize the behavior of a JAX function under the\n:func:`jax.vmap` transformation. A ``custom_vmap``-decorated function will\nmostly (see below for caveats) have the same behavior as the underlying\nfunction, except when batched using :py:func:`jax.vmap`. When batched, the\nrule defined using :py:func:`~jax.custom_batching.custom_vmap.def_vmap` will\nbe used.\nFor example:\n>>> @jax.custom_batching.custom_vmap\n... def f(x, y):\n...   return x + y\n...\n>>> @f.def_vmap\n... def f_vmap_rule(axis_size, in_batched, xs, ys):\n...   assert all(in_batched)\n...   assert xs.shape[0] == axis_size\n...   assert ys.shape[0] == axis_size\n...   out_batched = True\n...   return xs * ys, out_batched\n...\n>>> xs = jnp.arange(3)\n>>> ys = jnp.arange(1, 4)\n>>> jax.vmap(f)(xs, ys)  # prints xs * ys instead of xs + ys\nArray([0, 2, 6], dtype=int32)\nOf note, ``custom_vmap`` functions do not support reverse-mode autodiff. To\ncustomize both vmap and reverse-mode autodiff, combine ``custom_vmap`` with\n:py:class:`jax.custom_vjp`. For example:\n>>> @jax.custom_vjp\n... @jax.custom_batching.custom_vmap\n... def f(x, y):\n...   return jnp.sin(x) * y\n...\n>>> @f.def_vmap\n... def f_vmap_rule(axis_size, in_batched, xs, ys):\n...   return jnp.cos(xs) * ys, True\n...\n>>> def f_fwd(x, y):\n...   return f(x, y), (jnp.cos(x), jnp.sin(x), y)\n...\n>>> def f_bwd(res, g):\n...   cos_x, sin_x, y = res\n...   return (cos_x * g * y, sin_x * g)\n...\n>>> f.defvjp(f_fwd, f_bwd)\n>>> jax.vmap(f)(jnp.zeros(3), jnp.ones(3))\nArray([1., 1., 1.], dtype=float32)\n>>> jax.grad(f)(jnp.zeros(()), jnp.ones(()))\nArray(1., dtype=float32)\nNote that the :py:class:`jax.custom_vjp` must be on the ouside, wrapping the\n``custom_vmap``-decorated function.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "def_vmap",
          "signature": "def_vmap(self, vmap_rule: 'Callable[..., tuple[Any, Any]]') -> 'Callable[..., tuple[Any, Any]]'",
          "documentation": {
            "description": "Define the vmap rule for this custom_vmap function.\nArgs:\nvmap_rule: A function that implements the vmap rule. This function should\naccept the following arguments: (1) an integer ``axis_size`` as its\nfirst argument, (2) a pytree of booleans with the same structure as the\ninputs to the function, specifying whether each argument is batched,\nand (3) the batched arguments. It should return a tuple of the batched\noutput and a pytree of booleans with the same structure as the output,\nspecifying whether each output element is batched. See the documentation\nfor :py:func:`jax.custom_batching.custom_vmap` for some examples.",
            "parameters": {},
            "returns": "This method passes the rule through, returning ``vmap_rule`` unchanged.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    }
  ]
}