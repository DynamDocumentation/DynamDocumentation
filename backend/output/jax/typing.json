{
  "description": "The JAX typing module is where JAX-specific static type annotations live.\nThis submodule is a work in progress; to see the proposal behind the types exported\nhere, see https://jax.readthedocs.io/en/latest/jep/12049-type-annotations.html.\n\nThe currently-available types are:\n\n- :class:`jax.Array`: annotation for any JAX array or tracer (i.e. representations of arrays\n  within JAX transforms).\n- :obj:`jax.typing.ArrayLike`: annotation for any value that is safe to implicitly cast to\n  a JAX array; this includes :class:`jax.Array`, :class:`numpy.ndarray`, as well as Python\n  builtin numeric values (e.g. :class:`int`, :class:`float`, etc.) and numpy scalar values\n  (e.g. :class:`numpy.int32`, :class:`numpy.float64`, etc.)\n- :obj:`jax.typing.DTypeLike`: annotation for any value that can be cast to a JAX-compatible\n  dtype; this includes strings (e.g. `'float32'`, `'int32'`), scalar types (e.g. `float`,\n  `np.float32`), dtypes (e.g. `np.dtype('float32')`), or objects with a dtype attribute\n  (e.g. `jnp.float32`, `jnp.int32`).\n\nWe may add additional types here in future releases.\n\nJAX Typing Best Practices\n-------------------------\nWhen annotating JAX arrays in public API functions, we recommend using :class:`~jax.typing.ArrayLike`\nfor array inputs, and :class:`~jax.Array` for array outputs.\n\nFor example, your function might look like this::\n\n    import numpy as np\n    import jax.numpy as jnp\n    from jax import Array\n    from jax.typing import ArrayLike\n\n    def my_function(x: ArrayLike) -> Array:\n      # Runtime type validation, Python 3.10 or newer:\n      if not isinstance(x, ArrayLike):\n        raise TypeError(f\"Expected arraylike input; got {x}\")\n      # Runtime type validation, any Python version:\n      if not (isinstance(x, (np.ndarray, Array)) or np.isscalar(x)):\n        raise TypeError(f\"Expected arraylike input; got {x}\")\n\n      # Convert input to jax.Array:\n      x_arr = jnp.asarray(x)\n\n      # ... do some computation; JAX functions will return Array types:\n      result = x_arr.sum(0) / x_arr.shape[0]\n\n      # return an Array\n      return result\n\nMost of JAX's public APIs follow this pattern. Note in particular that we recommend JAX functions\nto not accept sequences such as :class:`list` or :class:`tuple` in place of arrays, as this can\ncause extra overhead in JAX transforms like :func:`~jax.jit` and can behave in unexpected ways with\nbatch-wise transforms like :func:`~jax.vmap` or :func:`jax.pmap`. For more information on this,\nsee `Non-array inputs NumPy vs JAX`_\n\n.. _Non-array inputs NumPy vs JAX: https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#non-array-inputs-numpy-vs-jax",
  "functions": [
    {
      "name": "ArrayLike",
      "signature": "Union(*args, **kwargs)",
      "documentation": {
        "description": "Type annotation for JAX array-like objects.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "DTypeLike",
      "signature": "Union(*args, **kwargs)",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    }
  ],
  "classes": []
}