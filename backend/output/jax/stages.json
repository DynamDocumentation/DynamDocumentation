{
  "description": "Interfaces to stages of the compiled execution process.\n\nJAX transformations that compile just in time for execution, such as\n``jax.jit`` and ``jax.pmap``, also support a common means of explicit\nlowering and compilation *ahead of time*. This module defines types\nthat represent the stages of this process.\n\nFor more, see the `AOT walkthrough <https://jax.readthedocs.io/en/latest/aot.html>`_.",
  "functions": [
    {
      "name": "CompilerOptions",
      "signature": "dict(*args, **kwargs)",
      "documentation": {
        "description": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    }
  ],
  "classes": [
    {
      "name": "ArgInfo",
      "documentation": {
        "description": "ArgInfo(_aval: 'core.AbstractValue', donated: 'bool')",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": []
    },
    {
      "name": "Compiled",
      "documentation": {
        "description": "Compiled representation of a function specialized to types/values.\nA compiled computation is associated with an executable and the\nremaining information needed to execute it. It also provides a\ncommon API for querying properties of compiled computations across\nJAX's various compilation paths and backends.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "as_text",
          "signature": "as_text(self) -> 'str | None'",
          "documentation": {
            "description": "A human-readable text representation of this executable.\nIntended for visualization and debugging purposes. This is not a valid nor\nreliable serialization.",
            "parameters": {},
            "returns": "runtime.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "call",
          "signature": "call(*args, **kwargs)",
          "documentation": {
            "description": "",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cost_analysis",
          "signature": "cost_analysis(self) -> 'Any | None'",
          "documentation": {
            "description": "A summary of execution cost estimates.\nIntended for visualization and debugging purposes. The object output by\nthis is some simple data structure that can easily be printed or serialized\n(e.g. nested dicts, lists, and tuples with numeric leaves). However, its\nstructure can be arbitrary: it may be inconsistent across versions of JAX\nand jaxlib, or even across invocations.",
            "parameters": {},
            "returns": "runtime.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "memory_analysis",
          "signature": "memory_analysis(self) -> 'Any | None'",
          "documentation": {
            "description": "A summary of estimated memory requirements.\nIntended for visualization and debugging purposes. The object output by\nthis is some simple data structure that can easily be printed or serialized\n(e.g. nested dicts, lists, and tuples with numeric leaves). However, its\nstructure can be arbitrary: it may be inconsistent across versions of JAX\nand jaxlib, or even across invocations.",
            "parameters": {},
            "returns": "runtime.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "runtime_executable",
          "signature": "runtime_executable(self) -> 'Any | None'",
          "documentation": {
            "description": "An arbitrary object representation of this executable.\nIntended for debugging purposes. This is not valid nor reliable\nserialization. The output has no guarantee of consistency across\ninvocations.",
            "parameters": {},
            "returns": "runtime.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "Lowered",
      "documentation": {
        "description": "Lowering of a function specialized to argument types and values.\nA lowering is a computation ready for compilation. This class\ncarries a lowering together with the remaining information needed to\nlater compile and execute it. It also provides a common API for\nquerying properties of lowered computations across JAX's various\nlowering paths (:func:`~jax.jit`, :func:`~jax.pmap`, etc.).",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "as_text",
          "signature": "as_text(self, dialect: 'str | None' = None, *, debug_info: 'bool' = False) -> 'str'",
          "documentation": {
            "description": "A human-readable text representation of this lowering.\nIntended for visualization and debugging purposes. This need not be a valid\nnor reliable serialization.\nUse `jax.export` if you want reliable and portable serialization.\nArgs:\ndialect: Optional string specifying a lowering dialect (e.g. \"stablehlo\",\nor \"hlo\").\ndebug_info: Whether to include debugging information,\ne.g., source location.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "compile",
          "signature": "compile(self, compiler_options: 'CompilerOptions | None' = None) -> 'Compiled'",
          "documentation": {
            "description": "Compile, returning a corresponding ``Compiled`` instance.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "compiler_ir",
          "signature": "compiler_ir(self, dialect: 'str | None' = None) -> 'Any | None'",
          "documentation": {
            "description": "An arbitrary object representation of this lowering.\nIntended for debugging purposes. This is not a valid nor reliable\nserialization. The output has no guarantee of consistency across\ninvocations.\nUse `jax.export` if you want reliable and portable serialization.",
            "parameters": {},
            "returns": "runtime.\nArgs:\ndialect: Optional string specifying a lowering dialect (e.g. \"stablehlo\",\nor \"hlo\").",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cost_analysis",
          "signature": "cost_analysis(self) -> 'Any | None'",
          "documentation": {
            "description": "A summary of execution cost estimates.\nIntended for visualization and debugging purposes. The object output by\nthis is some simple data structure that can easily be printed or serialized\n(e.g. nested dicts, lists, and tuples with numeric leaves). However, its\nstructure can be arbitrary: it may be inconsistent across versions of JAX\nand jaxlib, or even across invocations.",
            "parameters": {},
            "returns": "runtime.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "from_flat_info",
          "signature": "from_flat_info(lowering: 'XlaLowering', in_tree: 'tree_util.PyTreeDef', in_avals, donate_argnums: 'tuple[int, ...]', out_tree: 'tree_util.PyTreeDef', no_kwargs: 'bool' = False)",
          "documentation": {
            "description": "Initialize from flat info (``in_avals`` etc.) and an input PyTreeDef.\nArgs:\nin_tree: The ``PyTreeDef`` of (args, kwargs).\nout_tree: The ``PyTreeDef`` of the outputs.\nno_kwargs: If ``True`` the transformation, and the\n``Compiled`` returned from this object will not support keyword\narguments (an error will be raised if some are provided).",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "OutInfo",
      "documentation": {
        "description": "OutInfo(shape: 'tuple[int, ...]', dtype: 'jax.typing.DTypeLike', sharding: 'jax.sharding.Sharding | None' = None)",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": []
    },
    {
      "name": "Traced",
      "documentation": {
        "description": "Traced form of a function specialized to argument types and values.\nA traced computation is ready for lowering. This class carries the\ntraced representation with the remaining information needed to later\nlower, compile, and execute it.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "lower",
          "signature": "lower(self, *, lowering_platforms: 'tuple[str, ...] | None' = None, _private_parameters: 'mlir.LoweringParameters | None' = None)",
          "documentation": {
            "description": "Lower to compiler input, returning a ``Lowered`` instance.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "Wrapped",
      "documentation": {
        "description": "A function ready to be traced, lowered, and compiled.\nThis protocol reflects the output of functions such as\n``jax.jit``. Calling it results in JIT (just-in-time) lowering,\ncompilation, and execution. It can also be explicitly lowered prior\nto compilation, and the result compiled prior to execution.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "lower",
          "signature": "lower(self, *args, **kwargs) -> 'Lowered'",
          "documentation": {
            "description": "Lower this function explicitly for the given arguments.\nThis is a shortcut for ``self.trace(*args, **kwargs).lower()``.\nA lowered function is staged out of Python and translated to a\ncompiler's input language, possibly in a backend-dependent\nmanner. It is ready for compilation but not yet compiled.",
            "parameters": {},
            "returns": "A ``Lowered`` instance representing the lowering.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "trace",
          "signature": "trace(self, *args, **kwargs) -> 'Traced'",
          "documentation": {
            "description": "Trace this function explicitly for the given arguments.\nA traced function is staged out of Python and translated to a jaxpr. It is\nready for lowering but not yet lowered.",
            "parameters": {},
            "returns": "A ``Traced`` instance representing the tracing.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    }
  ]
}