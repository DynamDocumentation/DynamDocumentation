{
  "description": "Fortran to Python Interface Generator.\n\nCopyright 1999 -- 2011 Pearu Peterson all rights reserved.\nCopyright 2011 -- present NumPy Developers.\nPermission to use, modify, and distribute this software is given under the terms\nof the NumPy License.\n\nNO WARRANTY IS EXPRESSED OR IMPLIED.  USE AT YOUR OWN RISK.",
  "functions": [
    {
      "name": "compile",
      "signature": "compile(source, modulename='untitled', extra_args='', verbose=True, source_fn=None, extension='.f', full_output=False)",
      "documentation": {
        "description": "Build extension module from a Fortran 77 source string with f2py.",
        "parameters": {
          "modulename": {
            "type": "str",
            "description": "The name of the compiled python module"
          },
          "extra_args": {
            "type": "str or list",
            "description": "Additional parameters passed to f2py\n\n        .. versionchanged:: 1.16.0\n            A list of args may also be provided."
          },
          "verbose": {
            "type": "bool",
            "description": "Print f2py output to screen"
          },
          "source_fn": {
            "type": "str",
            "description": "Name of the file where the fortran source is written.\n        The default is to use a temporary file with the extension\n        provided by the ``extension`` parameter"
          },
          "extension": {
            "type": "``{'.f'",
            "description": ", '.f90'}``, optional\n        Filename extension if `source_fn` is not provided.\n        The extension tells which fortran standard is used.\n        The default is ``.f``, which implies F77 standard.\n\n        .. versionadded:: 1.11.0"
          },
          "full_output": {
            "type": "bool",
            "description": "If True, return a `subprocess.CompletedProcess` containing\n        the stdout and stderr of the compile process, instead of just\n        the status code.\n\n        .. versionadded:: 1.20.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "get_include",
      "signature": "get_include()",
      "documentation": {
        "description": "Return the directory that contains the ``fortranobject.c`` and ``.h`` files.\n\n    .. note::\n\n        This function is not needed when building an extension with\n        `numpy.distutils` directly from ``.f`` and/or ``.pyf`` files\n        in one go.\n\n    Python extension modules built with f2py-generated code need to use\n    ``fortranobject.c`` as a source file, and include the ``fortranobject.h``\n    header. This function can be used to obtain the directory containing\n    both of these files.",
        "parameters": {},
        "returns": "numpy.get_include : function that returns the numpy include directory",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "main",
      "signature": "main()",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "run_main",
      "signature": "run_main(comline_list)",
      "documentation": {
        "description": "Equivalent to running::\n\n        f2py <args>\n\n    where ``<args>=string.join(<list>,' ')``, but in Python.  Unless\n    ``-h`` is used, this function returns a dictionary containing\n    information on generated modules and their dependencies on source\n    files.\n\n    You cannot build extension modules with this function, that is,\n    using ``-c`` is not allowed. Use the ``compile`` command instead.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": "The command ``f2py -m scalar scalar.f`` can be executed from Python as\n    follows.\n\n    .. literalinclude:: ../../source/f2py/code/results/run_main_session.dat\n        :language: python"
      }
    }
  ],
  "classes": [
    {
      "name": "VisibleDeprecationWarning",
      "documentation": {
        "description": "Visible deprecation warning.\n\n    By default, python will not show deprecation warnings, so this class\n    can be used when a very visible warning is helpful, for example because\n    the usage is most likely a user bug.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "add_note",
          "signature": "add_note(note)",
          "documentation": {
            "description": "Exception.add_note(note) --\n    add a note to the exception",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "with_traceback",
          "signature": "with_traceback(tb)",
          "documentation": {
            "description": "Exception.with_traceback(tb) --\n    set self.__traceback__ to tb and return self.",
            "parameters": {},
            "returns": "",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    }
  ]
}