{
  "description": "A NumPy sub-namespace that conforms to the Python array API standard.\n\nThis submodule accompanies NEP 47, which proposes its inclusion in NumPy. It\nis still considered experimental, and will issue a warning when imported.\n\nThis is a proof-of-concept namespace that wraps the corresponding NumPy\nfunctions to give a conforming implementation of the Python array API standard\n(https://data-apis.github.io/array-api/latest/). The standard is currently in\nan RFC phase and comments on it are both welcome and encouraged. Comments\nshould be made either at https://github.com/data-apis/array-api or at\nhttps://github.com/data-apis/consortium-feedback/discussions.\n\nNumPy already follows the proposed spec for the most part, so this module\nserves mostly as a thin wrapper around it. However, NumPy also implements a\nlot of behavior that is not included in the spec, so this serves as a\nrestricted subset of the API. Only those functions that are part of the spec\nare included in this namespace, and all functions are given with the exact\nsignature given in the spec, including the use of position-only arguments, and\nomitting any extra keyword arguments implemented by NumPy but not part of the\nspec. The behavior of some functions is also modified from the NumPy behavior\nto conform to the standard. Note that the underlying array object itself is\nwrapped in a wrapper Array() class, but is otherwise unchanged. This submodule\nis implemented in pure Python with no C extensions.\n\nThe array API spec is designed as a \"minimal API subset\" and explicitly allows\nlibraries to include behaviors not specified by it. But users of this module\nthat intend to write portable code should be aware that only those behaviors\nthat are listed in the spec are guaranteed to be implemented across libraries.\nConsequently, the NumPy implementation was chosen to be both conforming and\nminimal, so that users can use this implementation of the array API namespace\nand be sure that behaviors that it defines will be available in conforming\nnamespaces from other libraries.\n\nA few notes about the current state of this submodule:\n\n- There is a test suite that tests modules against the array API standard at\n  https://github.com/data-apis/array-api-tests. The test suite is still a work\n  in progress, but the existing tests pass on this module, with a few\n  exceptions:\n\n  - DLPack support (see https://github.com/data-apis/array-api/pull/106) is\n    not included here, as it requires a full implementation in NumPy proper\n    first.\n\n  The test suite is not yet complete, and even the tests that exist are not\n  guaranteed to give a comprehensive coverage of the spec. Therefore, when\n  reviewing and using this submodule, you should refer to the standard\n  documents themselves. There are some tests in numpy.array_api.tests, but\n  they primarily focus on things that are not tested by the official array API\n  test suite.\n\n- There is a custom array object, numpy.array_api.Array, which is returned by\n  all functions in this module. All functions in the array API namespace\n  implicitly assume that they will only receive this object as input. The only\n  way to create instances of this object is to use one of the array creation\n  functions. It does not have a public constructor on the object itself. The\n  object is a small wrapper class around numpy.ndarray. The main purpose of it\n  is to restrict the namespace of the array object to only those dtypes and\n  only those methods that are required by the spec, as well as to limit/change\n  certain behavior that differs in the spec. In particular:\n\n  - The array API namespace does not have scalar objects, only 0-D arrays.\n    Operations on Array that would create a scalar in NumPy create a 0-D\n    array.\n\n  - Indexing: Only a subset of indices supported by NumPy are required by the\n    spec. The Array object restricts indexing to only allow those types of\n    indices that are required by the spec. See the docstring of the\n    numpy.array_api.Array._validate_indices helper function for more\n    information.\n\n  - Type promotion: Some type promotion rules are different in the spec. In\n    particular, the spec does not have any value-based casting. The spec also\n    does not require cross-kind casting, like integer -> floating-point. Only\n    those promotions that are explicitly required by the array API\n    specification are allowed in this module. See NEP 47 for more info.\n\n  - Functions do not automatically call asarray() on their input, and will not\n    work if the input type is not Array. The exception is array creation\n    functions, and Python operators on the Array object, which accept Python\n    scalars of the same type as the array dtype.\n\n- All functions include type annotations, corresponding to those given in the\n  spec (see _typing.py for definitions of some custom types). These do not\n  currently fully pass mypy due to some limitations in mypy.\n\n- Dtype objects are just the NumPy dtype objects, e.g., float64 =\n  np.dtype('float64'). The spec does not require any behavior on these dtype\n  objects other than that they be accessible by name and be comparable by\n  equality, but it was considered too much extra complexity to create custom\n  objects to represent dtypes.\n\n- All places where the implementations in this submodule are known to deviate\n  from their corresponding functions in NumPy are marked with \"# Note:\"\n  comments.\n\nStill TODO in this module are:\n\n- DLPack support for numpy.ndarray is still in progress. See\n  https://github.com/numpy/numpy/pull/19083.\n\n- The copy=False keyword argument to asarray() is not yet implemented. This\n  requires support in numpy.asarray() first.\n\n- Some functions are not yet fully tested in the array API test suite, and may\n  require updates that are not yet known until the tests are written.\n\n- The spec is still in an RFC phase and may still have minor updates, which\n  will need to be reflected here.\n\n- Complex number support in array API spec is planned but not yet finalized,\n  as are the fft extension and certain linear algebra functions such as eig\n  that require complex dtypes.",
  "functions": [
    {
      "name": "abs",
      "signature": "abs(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.abs <numpy.abs>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "acos",
      "signature": "acos(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.arccos <numpy.arccos>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "acosh",
      "signature": "acosh(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.arccosh <numpy.arccosh>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "add",
      "signature": "add(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.add <numpy.add>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "all",
      "signature": "all(x: 'Array', /, *, axis: 'Optional[Union[int, Tuple[int, ...]]]' = None, keepdims: 'bool' = False) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.all <numpy.all>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "any",
      "signature": "any(x: 'Array', /, *, axis: 'Optional[Union[int, Tuple[int, ...]]]' = None, keepdims: 'bool' = False) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.any <numpy.any>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "arange",
      "signature": "arange(start: 'Union[int, float]', /, stop: 'Optional[Union[int, float]]' = None, step: 'Union[int, float]' = 1, *, dtype: 'Optional[Dtype]' = None, device: 'Optional[Device]' = None) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.arange <numpy.arange>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "argmax",
      "signature": "argmax(x: 'Array', /, *, axis: 'Optional[int]' = None, keepdims: 'bool' = False) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.argmax <numpy.argmax>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "argmin",
      "signature": "argmin(x: 'Array', /, *, axis: 'Optional[int]' = None, keepdims: 'bool' = False) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.argmin <numpy.argmin>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "argsort",
      "signature": "argsort(x: 'Array', /, *, axis: 'int' = -1, descending: 'bool' = False, stable: 'bool' = True) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.argsort <numpy.argsort>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "asarray",
      "signature": "asarray(obj: 'Union[Array, bool, int, float, NestedSequence[bool | int | float], SupportsBufferProtocol]', /, *, dtype: 'Optional[Dtype]' = None, device: 'Optional[Device]' = None, copy: 'Optional[Union[bool, np._CopyMode]]' = None) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.asarray <numpy.asarray>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "asin",
      "signature": "asin(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.arcsin <numpy.arcsin>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "asinh",
      "signature": "asinh(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.arcsinh <numpy.arcsinh>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "astype",
      "signature": "astype(x: 'Array', dtype: 'Dtype', /, *, copy: 'bool' = True) -> 'Array'",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "atan",
      "signature": "atan(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.arctan <numpy.arctan>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "atan2",
      "signature": "atan2(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.arctan2 <numpy.arctan2>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "atanh",
      "signature": "atanh(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.arctanh <numpy.arctanh>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "bitwise_and",
      "signature": "bitwise_and(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.bitwise_and <numpy.bitwise_and>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "bitwise_invert",
      "signature": "bitwise_invert(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.invert <numpy.invert>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "bitwise_left_shift",
      "signature": "bitwise_left_shift(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.left_shift <numpy.left_shift>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "bitwise_or",
      "signature": "bitwise_or(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.bitwise_or <numpy.bitwise_or>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "bitwise_right_shift",
      "signature": "bitwise_right_shift(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.right_shift <numpy.right_shift>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "bitwise_xor",
      "signature": "bitwise_xor(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.bitwise_xor <numpy.bitwise_xor>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "broadcast_arrays",
      "signature": "broadcast_arrays(*arrays: 'Array') -> 'List[Array]'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.broadcast_arrays <numpy.broadcast_arrays>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "broadcast_to",
      "signature": "broadcast_to(x: 'Array', /, shape: 'Tuple[int, ...]') -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.broadcast_to <numpy.broadcast_to>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "can_cast",
      "signature": "can_cast(from_: 'Union[Dtype, Array]', to: 'Dtype', /) -> 'bool'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.can_cast <numpy.can_cast>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "ceil",
      "signature": "ceil(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.ceil <numpy.ceil>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "concat",
      "signature": "concat(arrays: 'Union[Tuple[Array, ...], List[Array]]', /, *, axis: 'Optional[int]' = 0) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.concatenate <numpy.concatenate>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "conj",
      "signature": "conj(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.conj <numpy.conj>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "cos",
      "signature": "cos(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.cos <numpy.cos>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "cosh",
      "signature": "cosh(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.cosh <numpy.cosh>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "divide",
      "signature": "divide(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.divide <numpy.divide>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "empty",
      "signature": "empty(shape: 'Union[int, Tuple[int, ...]]', *, dtype: 'Optional[Dtype]' = None, device: 'Optional[Device]' = None) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.empty <numpy.empty>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "empty_like",
      "signature": "empty_like(x: 'Array', /, *, dtype: 'Optional[Dtype]' = None, device: 'Optional[Device]' = None) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.empty_like <numpy.empty_like>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "equal",
      "signature": "equal(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.equal <numpy.equal>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "exp",
      "signature": "exp(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.exp <numpy.exp>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "expand_dims",
      "signature": "expand_dims(x: 'Array', /, *, axis: 'int') -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.expand_dims <numpy.expand_dims>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "expm1",
      "signature": "expm1(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.expm1 <numpy.expm1>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "eye",
      "signature": "eye(n_rows: 'int', n_cols: 'Optional[int]' = None, /, *, k: 'int' = 0, dtype: 'Optional[Dtype]' = None, device: 'Optional[Device]' = None) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.eye <numpy.eye>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "finfo",
      "signature": "finfo(type: 'Union[Dtype, Array]', /) -> 'finfo_object'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.finfo <numpy.finfo>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "flip",
      "signature": "flip(x: 'Array', /, *, axis: 'Optional[Union[int, Tuple[int, ...]]]' = None) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.flip <numpy.flip>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "floor",
      "signature": "floor(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.floor <numpy.floor>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "floor_divide",
      "signature": "floor_divide(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.floor_divide <numpy.floor_divide>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "from_dlpack",
      "signature": "from_dlpack(x: 'object', /) -> 'Array'",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "full",
      "signature": "full(shape: 'Union[int, Tuple[int, ...]]', fill_value: 'Union[int, float]', *, dtype: 'Optional[Dtype]' = None, device: 'Optional[Device]' = None) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.full <numpy.full>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "full_like",
      "signature": "full_like(x: 'Array', /, fill_value: 'Union[int, float]', *, dtype: 'Optional[Dtype]' = None, device: 'Optional[Device]' = None) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.full_like <numpy.full_like>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "greater",
      "signature": "greater(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.greater <numpy.greater>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "greater_equal",
      "signature": "greater_equal(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.greater_equal <numpy.greater_equal>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "iinfo",
      "signature": "iinfo(type: 'Union[Dtype, Array]', /) -> 'iinfo_object'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.iinfo <numpy.iinfo>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "imag",
      "signature": "imag(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.imag <numpy.imag>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "isdtype",
      "signature": "isdtype(dtype: 'Dtype', kind: 'Union[Dtype, str, Tuple[Union[Dtype, str], ...]]') -> 'bool'",
      "documentation": {
        "description": "Returns a boolean indicating whether a provided dtype is of a specified data type ``kind``.\n\n    See\n    https://data-apis.org/array-api/latest/API_specification/generated/array_api.isdtype.html\n    for more details",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "isfinite",
      "signature": "isfinite(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.isfinite <numpy.isfinite>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "isinf",
      "signature": "isinf(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.isinf <numpy.isinf>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "isnan",
      "signature": "isnan(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.isnan <numpy.isnan>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "less",
      "signature": "less(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.less <numpy.less>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "less_equal",
      "signature": "less_equal(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.less_equal <numpy.less_equal>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "linspace",
      "signature": "linspace(start: 'Union[int, float]', stop: 'Union[int, float]', /, num: 'int', *, dtype: 'Optional[Dtype]' = None, device: 'Optional[Device]' = None, endpoint: 'bool' = True) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.linspace <numpy.linspace>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "log",
      "signature": "log(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.log <numpy.log>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "log10",
      "signature": "log10(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.log10 <numpy.log10>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "log1p",
      "signature": "log1p(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.log1p <numpy.log1p>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "log2",
      "signature": "log2(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.log2 <numpy.log2>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "logaddexp",
      "signature": "logaddexp(x1: 'Array', x2: 'Array') -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.logaddexp <numpy.logaddexp>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "logical_and",
      "signature": "logical_and(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.logical_and <numpy.logical_and>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "logical_not",
      "signature": "logical_not(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.logical_not <numpy.logical_not>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "logical_or",
      "signature": "logical_or(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.logical_or <numpy.logical_or>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "logical_xor",
      "signature": "logical_xor(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.logical_xor <numpy.logical_xor>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "matmul",
      "signature": "matmul(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.matmul <numpy.matmul>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "matrix_transpose",
      "signature": "matrix_transpose(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "max",
      "signature": "max(x: 'Array', /, *, axis: 'Optional[Union[int, Tuple[int, ...]]]' = None, keepdims: 'bool' = False) -> 'Array'",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "mean",
      "signature": "mean(x: 'Array', /, *, axis: 'Optional[Union[int, Tuple[int, ...]]]' = None, keepdims: 'bool' = False) -> 'Array'",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "meshgrid",
      "signature": "meshgrid(*arrays: 'Array', indexing: 'str' = 'xy') -> 'List[Array]'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.meshgrid <numpy.meshgrid>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "min",
      "signature": "min(x: 'Array', /, *, axis: 'Optional[Union[int, Tuple[int, ...]]]' = None, keepdims: 'bool' = False) -> 'Array'",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "multiply",
      "signature": "multiply(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.multiply <numpy.multiply>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "negative",
      "signature": "negative(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.negative <numpy.negative>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "nonzero",
      "signature": "nonzero(x: 'Array', /) -> 'Tuple[Array, ...]'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.nonzero <numpy.nonzero>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "not_equal",
      "signature": "not_equal(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.not_equal <numpy.not_equal>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "ones",
      "signature": "ones(shape: 'Union[int, Tuple[int, ...]]', *, dtype: 'Optional[Dtype]' = None, device: 'Optional[Device]' = None) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.ones <numpy.ones>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "ones_like",
      "signature": "ones_like(x: 'Array', /, *, dtype: 'Optional[Dtype]' = None, device: 'Optional[Device]' = None) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.ones_like <numpy.ones_like>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "permute_dims",
      "signature": "permute_dims(x: 'Array', /, axes: 'Tuple[int, ...]') -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.transpose <numpy.transpose>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "positive",
      "signature": "positive(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.positive <numpy.positive>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "pow",
      "signature": "pow(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.power <numpy.power>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "prod",
      "signature": "prod(x: 'Array', /, *, axis: 'Optional[Union[int, Tuple[int, ...]]]' = None, dtype: 'Optional[Dtype]' = None, keepdims: 'bool' = False) -> 'Array'",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "real",
      "signature": "real(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.real <numpy.real>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "remainder",
      "signature": "remainder(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.remainder <numpy.remainder>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "reshape",
      "signature": "reshape(x: 'Array', /, shape: 'Tuple[int, ...]', *, copy: 'Optional[Bool]' = None) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.reshape <numpy.reshape>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "result_type",
      "signature": "result_type(*arrays_and_dtypes: 'Union[Array, Dtype]') -> 'Dtype'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.result_type <numpy.result_type>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "roll",
      "signature": "roll(x: 'Array', /, shift: 'Union[int, Tuple[int, ...]]', *, axis: 'Optional[Union[int, Tuple[int, ...]]]' = None) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.roll <numpy.roll>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "round",
      "signature": "round(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.round <numpy.round>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "sign",
      "signature": "sign(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.sign <numpy.sign>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "sin",
      "signature": "sin(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.sin <numpy.sin>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "sinh",
      "signature": "sinh(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.sinh <numpy.sinh>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "sort",
      "signature": "sort(x: 'Array', /, *, axis: 'int' = -1, descending: 'bool' = False, stable: 'bool' = True) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.sort <numpy.sort>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "sqrt",
      "signature": "sqrt(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.sqrt <numpy.sqrt>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "square",
      "signature": "square(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.square <numpy.square>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "squeeze",
      "signature": "squeeze(x: 'Array', /, axis: 'Union[int, Tuple[int, ...]]') -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.squeeze <numpy.squeeze>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "stack",
      "signature": "stack(arrays: 'Union[Tuple[Array, ...], List[Array]]', /, *, axis: 'int' = 0) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.stack <numpy.stack>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "std",
      "signature": "std(x: 'Array', /, *, axis: 'Optional[Union[int, Tuple[int, ...]]]' = None, correction: 'Union[int, float]' = 0.0, keepdims: 'bool' = False) -> 'Array'",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "subtract",
      "signature": "subtract(x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.subtract <numpy.subtract>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "sum",
      "signature": "sum(x: 'Array', /, *, axis: 'Optional[Union[int, Tuple[int, ...]]]' = None, dtype: 'Optional[Dtype]' = None, keepdims: 'bool' = False) -> 'Array'",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "take",
      "signature": "take(x: 'Array', indices: 'Array', /, *, axis: 'Optional[int]' = None) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.take <numpy.take>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "tan",
      "signature": "tan(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.tan <numpy.tan>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "tanh",
      "signature": "tanh(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.tanh <numpy.tanh>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "tensordot",
      "signature": "tensordot(x1: 'Array', x2: 'Array', /, *, axes: 'Union[int, Tuple[Sequence[int], Sequence[int]]]' = 2) -> 'Array'",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "tril",
      "signature": "tril(x: 'Array', /, *, k: 'int' = 0) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.tril <numpy.tril>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "triu",
      "signature": "triu(x: 'Array', /, *, k: 'int' = 0) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.triu <numpy.triu>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "trunc",
      "signature": "trunc(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.trunc <numpy.trunc>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "unique_all",
      "signature": "unique_all(x: 'Array', /) -> 'UniqueAllResult'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.unique <numpy.unique>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "unique_counts",
      "signature": "unique_counts(x: 'Array', /) -> 'UniqueCountsResult'",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "unique_inverse",
      "signature": "unique_inverse(x: 'Array', /) -> 'UniqueInverseResult'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.unique <numpy.unique>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "unique_values",
      "signature": "unique_values(x: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.unique <numpy.unique>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "var",
      "signature": "var(x: 'Array', /, *, axis: 'Optional[Union[int, Tuple[int, ...]]]' = None, correction: 'Union[int, float]' = 0.0, keepdims: 'bool' = False) -> 'Array'",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "vecdot",
      "signature": "vecdot(x1: 'Array', x2: 'Array', /, *, axis: 'int' = -1) -> 'Array'",
      "documentation": {
        "description": "",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "where",
      "signature": "where(condition: 'Array', x1: 'Array', x2: 'Array', /) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.where <numpy.where>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "zeros",
      "signature": "zeros(shape: 'Union[int, Tuple[int, ...]]', *, dtype: 'Optional[Dtype]' = None, device: 'Optional[Device]' = None) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.zeros <numpy.zeros>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "zeros_like",
      "signature": "zeros_like(x: 'Array', /, *, dtype: 'Optional[Dtype]' = None, device: 'Optional[Device]' = None) -> 'Array'",
      "documentation": {
        "description": "Array API compatible wrapper for :py:func:`np.zeros_like <numpy.zeros_like>`.\n\n    See its docstring for more information.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    }
  ],
  "classes": []
}