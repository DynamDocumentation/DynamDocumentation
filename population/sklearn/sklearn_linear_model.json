{
  "description": "A variety of linear models.",
  "functions": [
    {
      "name": "ARDRegression",
      "signature": "ARDRegression(*, max_iter=300, tol=0.001, alpha_1=1e-06, alpha_2=1e-06, lambda_1=1e-06, lambda_2=1e-06, compute_score=False, threshold_lambda=10000.0, fit_intercept=True, copy_X=True, verbose=False)",
      "docstring": {
        "description": "Bayesian ARD regression.\n\nFit the weights of a regression model, using an ARD prior. The weights of\nthe regression model are assumed to be in Gaussian distributions.\nAlso estimate the parameters lambda (precisions of the distributions of the\nweights) and alpha (precision of the distribution of the noise).\nThe estimation is done by an iterative procedures (Evidence Maximization)\n\nRead more in the :ref:`User Guide <bayesian_regression>`.",
        "parameters": {
          "max_iter": {
            "type": "int, default=300",
            "description": "Maximum number of iterations.\n\n    .. versionchanged:: 1.3"
          },
          "tol": {
            "type": "float, default=1e-3",
            "description": "Stop the algorithm if w has converged."
          },
          "alpha_1": {
            "type": "float, default=1e-6",
            "description": "Hyper-parameter : shape parameter for the Gamma distribution prior\n    over the alpha parameter."
          },
          "alpha_2": {
            "type": "float, default=1e-6",
            "description": "Hyper-parameter : inverse scale parameter (rate parameter) for the\n    Gamma distribution prior over the alpha parameter."
          },
          "lambda_1": {
            "type": "float, default=1e-6",
            "description": "Hyper-parameter : shape parameter for the Gamma distribution prior\n    over the lambda parameter."
          },
          "lambda_2": {
            "type": "float, default=1e-6",
            "description": "Hyper-parameter : inverse scale parameter (rate parameter) for the\n    Gamma distribution prior over the lambda parameter."
          },
          "compute_score": {
            "type": "bool, default=False",
            "description": "If True, compute the objective function at each step of the model."
          },
          "threshold_lambda": {
            "type": "float, default=10 000",
            "description": "Threshold for removing (pruning) weights with high precision from\n    the computation."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If True, X will be copied; else, it may be overwritten."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Verbose mode when fitting the model.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array-like of shape (n_features,)",
            "description": "Coefficients of the regression model (mean of distribution)"
          },
          "alpha_": {
            "type": "float",
            "description": "estimated precision of the noise."
          },
          "lambda_": {
            "type": "array-like of shape (n_features,)",
            "description": "estimated precisions of the weights."
          },
          "sigma_": {
            "type": "array-like of shape (n_features, n_features)",
            "description": "estimated variance-covariance matrix of the weights"
          },
          "scores_": {
            "type": "float",
            "description": "if computed, value of the objective function (to be maximized)"
          },
          "n_iter_": {
            "type": "int",
            "description": "The actual number of iterations to reach the stopping criterion.\n\n    .. versionadded:: 1.3"
          },
          "intercept_": {
            "type": "float",
            "description": "Independent term in decision function. Set to 0.0 if\n    ``fit_intercept = False``."
          },
          "X_offset_": {
            "type": "float",
            "description": "If `fit_intercept=True`, offset subtracted for centering data to a\n    zero mean. Set to np.zeros(n_features) otherwise."
          },
          "X_scale_": {
            "type": "float",
            "description": "Set to np.ones(n_features)."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "BayesianRidge : Bayesian ridge regression.",
        "notes": "For an example, see :ref:`examples/linear_model/plot_ard.py\n<sphx_glr_auto_examples_linear_model_plot_ard.py>`.\n\nReferences\n----------\nD. J. C. MacKay, Bayesian nonlinear modeling for the prediction\ncompetition, ASHRAE Transactions, 1994.\n\nR. Salakhutdinov, Lecture notes on Statistical Machine Learning,\nhttp://www.utstat.toronto.edu/~rsalakhu/sta4273/notes/Lecture2.pdf#page=15\nTheir beta is our ``self.alpha_``\nTheir alpha is our ``self.lambda_``\nARD is a little different than the slide: only dimensions/features for\nwhich ``self.lambda_ < self.threshold_lambda`` are kept and the rest are\ndiscarded.",
        "examples": ">>> from sklearn import linear_model\n>>> clf = linear_model.ARDRegression()\n>>> clf.fit([[0,0], [1, 1], [2, 2]], [0, 1, 2])\nARDRegression()\n>>> clf.predict([[1, 1]])\narray([1.])"
      }
    },
    {
      "name": "BayesianRidge",
      "signature": "BayesianRidge(*, max_iter=300, tol=0.001, alpha_1=1e-06, alpha_2=1e-06, lambda_1=1e-06, lambda_2=1e-06, alpha_init=None, lambda_init=None, compute_score=False, fit_intercept=True, copy_X=True, verbose=False)",
      "docstring": {
        "description": "Bayesian ridge regression.\n\nFit a Bayesian ridge model. See the Notes section for details on this\nimplementation and the optimization of the regularization parameters\nlambda (precision of the weights) and alpha (precision of the noise).\n\nRead more in the :ref:`User Guide <bayesian_regression>`.\nFor an intuitive visualization of how the sinusoid is approximated by\na polynomial using different pairs of initial values, see\n:ref:`sphx_glr_auto_examples_linear_model_plot_bayesian_ridge_curvefit.py`.",
        "parameters": {
          "max_iter": {
            "type": "int, default=300",
            "description": "Maximum number of iterations over the complete dataset before\n    stopping independently of any early stopping criterion.\n\n    .. versionchanged:: 1.3"
          },
          "tol": {
            "type": "float, default=1e-3",
            "description": "Stop the algorithm if w has converged."
          },
          "alpha_1": {
            "type": "float, default=1e-6",
            "description": "Hyper-parameter : shape parameter for the Gamma distribution prior\n    over the alpha parameter."
          },
          "alpha_2": {
            "type": "float, default=1e-6",
            "description": "Hyper-parameter : inverse scale parameter (rate parameter) for the\n    Gamma distribution prior over the alpha parameter."
          },
          "lambda_1": {
            "type": "float, default=1e-6",
            "description": "Hyper-parameter : shape parameter for the Gamma distribution prior\n    over the lambda parameter."
          },
          "lambda_2": {
            "type": "float, default=1e-6",
            "description": "Hyper-parameter : inverse scale parameter (rate parameter) for the\n    Gamma distribution prior over the lambda parameter."
          },
          "alpha_init": {
            "type": "float, default=None",
            "description": "Initial value for alpha (precision of the noise).\n    If not set, alpha_init is 1/Var(y).\n\n    .. versionadded:: 0.22"
          },
          "lambda_init": {
            "type": "float, default=None",
            "description": "Initial value for lambda (precision of the weights).\n    If not set, lambda_init is 1.\n\n    .. versionadded:: 0.22"
          },
          "compute_score": {
            "type": "bool, default=False",
            "description": "If True, compute the log marginal likelihood at each iteration of the\n    optimization."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model.\n    The intercept is not treated as a probabilistic parameter\n    and thus has no associated variance. If set\n    to False, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If True, X will be copied; else, it may be overwritten."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Verbose mode when fitting the model.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array-like of shape (n_features,)",
            "description": "Coefficients of the regression model (mean of distribution)"
          },
          "intercept_": {
            "type": "float",
            "description": "Independent term in decision function. Set to 0.0 if\n    `fit_intercept = False`."
          },
          "alpha_": {
            "type": "float",
            "description": "Estimated precision of the noise."
          },
          "lambda_": {
            "type": "float",
            "description": "Estimated precision of the weights."
          },
          "sigma_": {
            "type": "array-like of shape (n_features, n_features)",
            "description": "Estimated variance-covariance matrix of the weights"
          },
          "scores_": {
            "type": "array-like of shape (n_iter_+1,)",
            "description": "If computed_score is True, value of the log marginal likelihood (to be\n    maximized) at each iteration of the optimization. The array starts\n    with the value of the log marginal likelihood obtained for the initial\n    values of alpha and lambda and ends with the value obtained for the\n    estimated alpha and lambda."
          },
          "n_iter_": {
            "type": "int",
            "description": "The actual number of iterations to reach the stopping criterion."
          },
          "X_offset_": {
            "type": "ndarray of shape (n_features,)",
            "description": "If `fit_intercept=True`, offset subtracted for centering data to a\n    zero mean. Set to np.zeros(n_features) otherwise."
          },
          "X_scale_": {
            "type": "ndarray of shape (n_features,)",
            "description": "Set to np.ones(n_features)."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "ARDRegression : Bayesian ARD regression.",
        "notes": "There exist several strategies to perform Bayesian ridge regression. This\nimplementation is based on the algorithm described in Appendix A of\n(Tipping, 2001) where updates of the regularization parameters are done as\nsuggested in (MacKay, 1992). Note that according to A New\nView of Automatic Relevance Determination (Wipf and Nagarajan, 2008) these\nupdate rules do not guarantee that the marginal likelihood is increasing\nbetween two consecutive iterations of the optimization.\n\nReferences\n----------\nD. J. C. MacKay, Bayesian Interpolation, Computation and Neural Systems,\nVol. 4, No. 3, 1992.\n\nM. E. Tipping, Sparse Bayesian Learning and the Relevance Vector Machine,\nJournal of Machine Learning Research, Vol. 1, 2001.",
        "examples": ">>> from sklearn import linear_model\n>>> clf = linear_model.BayesianRidge()\n>>> clf.fit([[0,0], [1, 1], [2, 2]], [0, 1, 2])\nBayesianRidge()\n>>> clf.predict([[1, 1]])\narray([1.])"
      }
    },
    {
      "name": "ElasticNet",
      "signature": "ElasticNet(alpha=1.0, *, l1_ratio=0.5, fit_intercept=True, precompute=False, max_iter=1000, copy_X=True, tol=0.0001, warm_start=False, positive=False, random_state=None, selection='cyclic')",
      "docstring": {
        "description": "Linear regression with combined L1 and L2 priors as regularizer.\n\nMinimizes the objective function::\n\n        1 / (2 * n_samples) * ||y - Xw||^2_2\n        + alpha * l1_ratio * ||w||_1\n        + 0.5 * alpha * (1 - l1_ratio) * ||w||^2_2\n\nIf you are interested in controlling the L1 and L2 penalty\nseparately, keep in mind that this is equivalent to::\n\n        a * ||w||_1 + 0.5 * b * ||w||_2^2\n\nwhere::\n\n        alpha = a + b and l1_ratio = a / (a + b)\n\nThe parameter l1_ratio corresponds to alpha in the glmnet R package while\nalpha corresponds to the lambda parameter in glmnet. Specifically, l1_ratio\n= 1 is the lasso penalty. Currently, l1_ratio <= 0.01 is not reliable,\nunless you supply your own sequence of alpha.\n\nRead more in the :ref:`User Guide <elastic_net>`.",
        "parameters": {
          "alpha": {
            "type": "float, default=1.0",
            "description": "Constant that multiplies the penalty terms. Defaults to 1.0.\n    See the notes for the exact mathematical meaning of this\n    parameter. ``alpha = 0`` is equivalent to an ordinary least square,\n    solved by the :class:`LinearRegression` object. For numerical\n    reasons, using ``alpha = 0`` with the ``Lasso`` object is not advised.\n    Given this, you should use the :class:`LinearRegression` object."
          },
          "l1_ratio": {
            "type": "float, default=0.5",
            "description": "The ElasticNet mixing parameter, with ``0 <= l1_ratio <= 1``. For\n    ``l1_ratio = 0`` the penalty is an L2 penalty. ``For l1_ratio = 1`` it\n    is an L1 penalty.  For ``0 < l1_ratio < 1``, the penalty is a\n    combination of L1 and L2."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether the intercept should be estimated or not. If ``False``, the\n    data is assumed to be already centered."
          },
          "precompute": {
            "type": "bool or array-like of shape (n_features, n_features),                 default=False",
            "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. The Gram matrix can also be passed as argument.\n    For sparse input this option is always ``False`` to preserve sparsity.\n    Check :ref:`an example on how to use a precomputed Gram Matrix in ElasticNet\n    <sphx_glr_auto_examples_linear_model_plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.py>`\n    for details."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of iterations."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "The tolerance for the optimization: if the updates are\n    smaller than ``tol``, the optimization code checks the\n    dual gap for optimality and continues until it is smaller\n    than ``tol``, see Notes below."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to ``True``, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution.\n    See :term:`the Glossary <warm_start>`."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "When set to ``True``, forces the coefficients to be positive."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "The seed of the pseudo random number generator that selects a random\n    feature to update. Used when ``selection`` == 'random'.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "selection": {
            "type": "{'cyclic', 'random'}, default='cyclic'",
            "description": "If set to 'random', a random coefficient is updated every iteration\n    rather than looping over features sequentially by default. This\n    (setting to 'random') often leads to significantly faster convergence\n    especially when tol is higher than 1e-4.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (n_features,) or (n_targets, n_features)",
            "description": "Parameter vector (w in the cost function formula)."
          },
          "sparse_coef_": {
            "type": "sparse matrix of shape (n_features,) or             (n_targets, n_features)",
            "description": "Sparse representation of the `coef_`."
          },
          "intercept_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "n_iter_": {
            "type": "list of int",
            "description": "Number of iterations run by the coordinate descent solver to reach\n    the specified tolerance."
          },
          "dual_gap_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Given param alpha, the dual gaps at the end of the optimization,\n    same shape as each observation of y."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "ElasticNetCV : Elastic net model with best model selection by\n    cross-validation.\nSGDRegressor : Implements elastic net regression with incremental training.\nSGDClassifier : Implements logistic regression with elastic net penalty\n    (``SGDClassifier(loss=\"log_loss\", penalty=\"elasticnet\")``).",
        "notes": "To avoid unnecessary memory duplication the X argument of the fit method\nshould be directly passed as a Fortran-contiguous numpy array.\n\nThe precise stopping criteria based on `tol` are the following: First, check that\nthat maximum coordinate update, i.e. :math:`\\max_j |w_j^{new} - w_j^{old}|`\nis smaller than `tol` times the maximum absolute coefficient, :math:`\\max_j |w_j|`.\nIf so, then additionally check whether the dual gap is smaller than `tol` times\n:math:`||y||_2^2 / n_{      ext{samples}}`.",
        "examples": ">>> from sklearn.linear_model import ElasticNet\n>>> from sklearn.datasets import make_regression\n\n>>> X, y = make_regression(n_features=2, random_state=0)\n>>> regr = ElasticNet(random_state=0)\n>>> regr.fit(X, y)\nElasticNet(random_state=0)\n>>> print(regr.coef_)\n[18.83816048 64.55968825]\n>>> print(regr.intercept_)\n1.451...\n>>> print(regr.predict([[0, 0]]))\n[1.451...]"
      }
    },
    {
      "name": "ElasticNetCV",
      "signature": "ElasticNetCV(*, l1_ratio=0.5, eps=0.001, n_alphas=100, alphas=None, fit_intercept=True, precompute='auto', max_iter=1000, tol=0.0001, cv=None, copy_X=True, verbose=0, n_jobs=None, positive=False, random_state=None, selection='cyclic')",
      "docstring": {
        "description": "Elastic Net model with iterative fitting along a regularization path.\n\nSee glossary entry for :term:`cross-validation estimator`.\n\nRead more in the :ref:`User Guide <elastic_net>`.",
        "parameters": {
          "l1_ratio": {
            "type": "float or list of float, default=0.5",
            "description": "Float between 0 and 1 passed to ElasticNet (scaling between\n    l1 and l2 penalties). For ``l1_ratio = 0``\n    the penalty is an L2 penalty. For ``l1_ratio = 1`` it is an L1 penalty.\n    For ``0 < l1_ratio < 1``, the penalty is a combination of L1 and L2\n    This parameter can be a list, in which case the different\n    values are tested by cross-validation and the one giving the best\n    prediction score is used. Note that a good choice of list of\n    values for l1_ratio is often to put more values close to 1\n    (i.e. Lasso) and less close to 0 (i.e. Ridge), as in ``[.1, .5, .7,\n    .9, .95, .99, 1]``."
          },
          "eps": {
            "type": "float, default=1e-3",
            "description": "Length of the path. ``eps=1e-3`` means that\n    ``alpha_min / alpha_max = 1e-3``."
          },
          "n_alphas": {
            "type": "int, default=100",
            "description": "Number of alphas along the regularization path, used for each l1_ratio."
          },
          "alphas": {
            "type": "array-like, default=None",
            "description": "List of alphas where to compute the models.\n    If None alphas are set automatically."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "precompute": {
            "type": "'auto', bool or array-like of shape             (n_features, n_features), default='auto'",
            "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram\n    matrix can also be passed as argument."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of iterations."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "The tolerance for the optimization: if the updates are\n    smaller than ``tol``, the optimization code checks the\n    dual gap for optimality and continues until it is smaller\n    than ``tol``."
          },
          "cv": {
            "type": "int, cross-validation generator or iterable, default=None",
            "description": "Determines the cross-validation splitting strategy.\n    Possible inputs for cv are:\n\n    - None, to use the default 5-fold cross-validation,\n    - int, to specify the number of folds.\n    - :term:`CV splitter`,\n    - An iterable yielding (train, test) splits as arrays of indices.\n\n    For int/None inputs, :class:`~sklearn.model_selection.KFold` is used.\n\n    Refer :ref:`User Guide <cross_validation>` for the various\n    cross-validation strategies that can be used here.\n\n    .. versionchanged:: 0.22\n        ``cv`` default value if None changed from 3-fold to 5-fold."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten."
          },
          "verbose": {
            "type": "bool or int, default=0",
            "description": "Amount of verbosity."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "Number of CPUs to use during the cross validation.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "When set to ``True``, forces the coefficients to be positive."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "The seed of the pseudo random number generator that selects a random\n    feature to update. Used when ``selection`` == 'random'.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "selection": {
            "type": "{'cyclic', 'random'}, default='cyclic'",
            "description": "If set to 'random', a random coefficient is updated every iteration\n    rather than looping over features sequentially by default. This\n    (setting to 'random') often leads to significantly faster convergence\n    especially when tol is higher than 1e-4.\n\nAttributes\n----------"
          },
          "alpha_": {
            "type": "float",
            "description": "The amount of penalization chosen by cross validation."
          },
          "l1_ratio_": {
            "type": "float",
            "description": "The compromise between l1 and l2 penalization chosen by\n    cross validation."
          },
          "coef_": {
            "type": "ndarray of shape (n_features,) or (n_targets, n_features)",
            "description": "Parameter vector (w in the cost function formula)."
          },
          "intercept_": {
            "type": "float or ndarray of shape (n_targets, n_features)",
            "description": "Independent term in the decision function."
          },
          "mse_path_": {
            "type": "ndarray of shape (n_l1_ratio, n_alpha, n_folds)",
            "description": "Mean square error for the test set on each fold, varying l1_ratio and\n    alpha."
          },
          "alphas_": {
            "type": "ndarray of shape (n_alphas,) or (n_l1_ratio, n_alphas)",
            "description": "The grid of alphas used for fitting, for each l1_ratio."
          },
          "dual_gap_": {
            "type": "float",
            "description": "The dual gaps at the end of the optimization for the optimal alpha."
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations run by the coordinate descent solver to reach\n    the specified tolerance for the optimal alpha."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "enet_path : Compute elastic net path with coordinate descent.\nElasticNet : Linear regression with combined L1 and L2 priors as regularizer.",
        "notes": "In `fit`, once the best parameters `l1_ratio` and `alpha` are found through\ncross-validation, the model is fit again using the entire training set.\n\nTo avoid unnecessary memory duplication the `X` argument of the `fit`\nmethod should be directly passed as a Fortran-contiguous numpy array.\n\nThe parameter `l1_ratio` corresponds to alpha in the glmnet R package\nwhile alpha corresponds to the lambda parameter in glmnet.\nMore specifically, the optimization objective is::\n\n    1 / (2 * n_samples) * ||y - Xw||^2_2\n    + alpha * l1_ratio * ||w||_1\n    + 0.5 * alpha * (1 - l1_ratio) * ||w||^2_2\n\nIf you are interested in controlling the L1 and L2 penalty\nseparately, keep in mind that this is equivalent to::\n\n    a * L1 + b * L2\n\nfor::\n\n    alpha = a + b and l1_ratio = a / (a + b).\n\nFor an example, see\n:ref:`examples/linear_model/plot_lasso_model_selection.py\n<sphx_glr_auto_examples_linear_model_plot_lasso_model_selection.py>`.",
        "examples": ">>> from sklearn.linear_model import ElasticNetCV\n>>> from sklearn.datasets import make_regression\n\n>>> X, y = make_regression(n_features=2, random_state=0)\n>>> regr = ElasticNetCV(cv=5, random_state=0)\n>>> regr.fit(X, y)\nElasticNetCV(cv=5, random_state=0)\n>>> print(regr.alpha_)\n0.199...\n>>> print(regr.intercept_)\n0.398...\n>>> print(regr.predict([[0, 0]]))\n[0.398...]"
      }
    },
    {
      "name": "GammaRegressor",
      "signature": "GammaRegressor(*, alpha=1.0, fit_intercept=True, solver='lbfgs', max_iter=100, tol=0.0001, warm_start=False, verbose=0)",
      "docstring": {
        "description": "Generalized Linear Model with a Gamma distribution.\n\nThis regressor uses the 'log' link function.\n\nRead more in the :ref:`User Guide <Generalized_linear_models>`.\n\n.. versionadded:: 0.23",
        "parameters": {
          "alpha": {
            "type": "float, default=1",
            "description": "Constant that multiplies the L2 penalty term and determines the\n    regularization strength. ``alpha = 0`` is equivalent to unpenalized\n    GLMs. In this case, the design matrix `X` must have full column rank\n    (no collinearities).\n    Values of `alpha` must be in the range `[0.0, inf)`."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Specifies if a constant (a.k.a. bias or intercept) should be\n    added to the linear predictor `X @ coef_ + intercept_`."
          },
          "solver": {
            "type": "{'lbfgs', 'newton-cholesky'}, default='lbfgs'",
            "description": "Algorithm to use in the optimization problem:\n\n    'lbfgs'\n        Calls scipy's L-BFGS-B optimizer.\n\n    'newton-cholesky'\n        Uses Newton-Raphson steps (in arbitrary precision arithmetic equivalent to\n        iterated reweighted least squares) with an inner Cholesky based solver.\n        This solver is a good choice for `n_samples` >> `n_features`, especially\n        with one-hot encoded categorical features with rare categories. Be aware\n        that the memory usage of this solver has a quadratic dependency on\n        `n_features` because it explicitly computes the Hessian matrix.\n\n        .. versionadded:: 1.2"
          },
          "max_iter": {
            "type": "int, default=100",
            "description": "The maximal number of iterations for the solver.\n    Values must be in the range `[1, inf)`."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "Stopping criterion. For the lbfgs solver,\n    the iteration will stop when ``max{|g_j|, j = 1, ..., d} <= tol``\n    where ``g_j`` is the j-th component of the gradient (derivative) of\n    the objective function.\n    Values must be in the range `(0.0, inf)`."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "If set to ``True``, reuse the solution of the previous call to ``fit``\n    as initialization for `coef_` and `intercept_`."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "For the lbfgs solver set verbose to any positive number for verbosity.\n    Values must be in the range `[0, inf)`.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array of shape (n_features,)",
            "description": "Estimated coefficients for the linear predictor (`X @ coef_ +\n    intercept_`) in the GLM."
          },
          "intercept_": {
            "type": "float",
            "description": "Intercept (a.k.a. bias) added to linear predictor."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "n_iter_": {
            "type": "int",
            "description": "Actual number of iterations used in the solver."
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "PoissonRegressor : Generalized Linear Model with a Poisson distribution.\nTweedieRegressor : Generalized Linear Model with a Tweedie distribution.",
        "notes": "",
        "examples": ">>> from sklearn import linear_model\n>>> clf = linear_model.GammaRegressor()\n>>> X = [[1, 2], [2, 3], [3, 4], [4, 3]]\n>>> y = [19, 26, 33, 30]\n>>> clf.fit(X, y)\nGammaRegressor()\n>>> clf.score(X, y)\nnp.float64(0.773...)\n>>> clf.coef_\narray([0.072..., 0.066...])\n>>> clf.intercept_\nnp.float64(2.896...)\n>>> clf.predict([[1, 0], [2, 8]])\narray([19.483..., 35.795...])"
      }
    },
    {
      "name": "HuberRegressor",
      "signature": "HuberRegressor(*, epsilon=1.35, max_iter=100, alpha=0.0001, warm_start=False, fit_intercept=True, tol=1e-05)",
      "docstring": {
        "description": "L2-regularized linear regression model that is robust to outliers.\n\nThe Huber Regressor optimizes the squared loss for the samples where\n``|(y - Xw - c) / sigma| < epsilon`` and the absolute loss for the samples\nwhere ``|(y - Xw - c) / sigma| > epsilon``, where the model coefficients\n``w``, the intercept ``c`` and the scale ``sigma`` are parameters\nto be optimized. The parameter `sigma` makes sure that if `y` is scaled up\nor down by a certain factor, one does not need to rescale `epsilon` to\nachieve the same robustness. Note that this does not take into account\nthe fact that the different features of `X` may be of different scales.\n\nThe Huber loss function has the advantage of not being heavily influenced\nby the outliers while not completely ignoring their effect.\n\nRead more in the :ref:`User Guide <huber_regression>`\n\n.. versionadded:: 0.18",
        "parameters": {
          "epsilon": {
            "type": "float, default=1.35",
            "description": "The parameter epsilon controls the number of samples that should be\n    classified as outliers. The smaller the epsilon, the more robust it is\n    to outliers. Epsilon must be in the range `[1, inf)`."
          },
          "max_iter": {
            "type": "int, default=100",
            "description": "Maximum number of iterations that\n    ``scipy.optimize.minimize(method=\"L-BFGS-B\")`` should run for."
          },
          "alpha": {
            "type": "float, default=0.0001",
            "description": "Strength of the squared L2 regularization. Note that the penalty is\n    equal to ``alpha * ||w||^2``.\n    Must be in the range `[0, inf)`."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "This is useful if the stored attributes of a previously used model\n    has to be reused. If set to False, then the coefficients will\n    be rewritten for every call to fit.\n    See :term:`the Glossary <warm_start>`."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether or not to fit the intercept. This can be set to False\n    if the data is already centered around the origin."
          },
          "tol": {
            "type": "float, default=1e-05",
            "description": "The iteration will stop when\n    ``max{|proj g_i | i = 1, ..., n}`` <= ``tol``\n    where pg_i is the i-th component of the projected gradient.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array, shape (n_features,)",
            "description": "Features got by optimizing the L2-regularized Huber loss."
          },
          "intercept_": {
            "type": "float",
            "description": "Bias."
          },
          "scale_": {
            "type": "float",
            "description": "The value by which ``|y - Xw - c|`` is scaled down."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations that\n    ``scipy.optimize.minimize(method=\"L-BFGS-B\")`` has run for.\n\n    .. versionchanged:: 0.20\n\n        In SciPy <= 1.0.0 the number of lbfgs iterations may exceed\n        ``max_iter``. ``n_iter_`` will now report at most ``max_iter``."
          },
          "outliers_": {
            "type": "array, shape (n_samples,)",
            "description": "A boolean mask which is set to True where the samples are identified\n    as outliers."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "RANSACRegressor : RANSAC (RANdom SAmple Consensus) algorithm.\nTheilSenRegressor : Theil-Sen Estimator robust multivariate regression model.\nSGDRegressor : Fitted by minimizing a regularized empirical loss with SGD.\n\nReferences\n----------\n.. [1] Peter J. Huber, Elvezio M. Ronchetti, Robust Statistics\n       Concomitant scale estimates, p. 172\n.. [2] Art B. Owen (2006), `A robust hybrid of lasso and ridge regression.\n       <https://artowen.su.domains/reports/hhu.pdf>`_",
        "notes": "",
        "examples": ">>> import numpy as np\n>>> from sklearn.linear_model import HuberRegressor, LinearRegression\n>>> from sklearn.datasets import make_regression\n>>> rng = np.random.RandomState(0)\n>>> X, y, coef = make_regression(\n...     n_samples=200, n_features=2, noise=4.0, coef=True, random_state=0)\n>>> X[:4] = rng.uniform(10, 20, (4, 2))\n>>> y[:4] = rng.uniform(10, 20, 4)\n>>> huber = HuberRegressor().fit(X, y)\n>>> huber.score(X, y)\n-7.284...\n>>> huber.predict(X[:1,])\narray([806.7200...])\n>>> linear = LinearRegression().fit(X, y)\n>>> print(\"True coefficients:\", coef)\nTrue coefficients: [20.4923...  34.1698...]\n>>> print(\"Huber coefficients:\", huber.coef_)\nHuber coefficients: [17.7906... 31.0106...]\n>>> print(\"Linear Regression coefficients:\", linear.coef_)\nLinear Regression coefficients: [-1.9221...  7.0226...]"
      }
    },
    {
      "name": "Lars",
      "signature": "Lars(*, fit_intercept=True, verbose=False, precompute='auto', n_nonzero_coefs=500, eps=2.220446049250313e-16, copy_X=True, fit_path=True, jitter=None, random_state=None)",
      "docstring": {
        "description": "Least Angle Regression model a.k.a. LAR.\n\nRead more in the :ref:`User Guide <least_angle_regression>`.",
        "parameters": {
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "verbose": {
            "type": "bool or int, default=False",
            "description": "Sets the verbosity amount."
          },
          "precompute": {
            "type": "bool, 'auto' or array-like , default='auto'",
            "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram\n    matrix can also be passed as argument."
          },
          "n_nonzero_coefs": {
            "type": "int, default=500",
            "description": "Target number of non-zero coefficients. Use ``np.inf`` for no limit."
          },
          "eps": {
            "type": "float, default=np.finfo(float).eps",
            "description": "The machine-precision regularization in the computation of the\n    Cholesky diagonal factors. Increase this for very ill-conditioned\n    systems. Unlike the ``tol`` parameter in some iterative\n    optimization-based algorithms, this parameter does not control\n    the tolerance of the optimization."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten."
          },
          "fit_path": {
            "type": "bool, default=True",
            "description": "If True the full path is stored in the ``coef_path_`` attribute.\n    If you compute the solution for a large problem or many targets,\n    setting ``fit_path`` to ``False`` will lead to a speedup, especially\n    with a small alpha."
          },
          "jitter": {
            "type": "float, default=None",
            "description": "Upper bound on a uniform noise parameter to be added to the\n    `y` values, to satisfy the model's assumption of\n    one-at-a-time computations. Might help with stability.\n\n    .. versionadded:: 0.23"
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Determines random number generation for jittering. Pass an int\n    for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`. Ignored if `jitter` is None.\n\n    .. versionadded:: 0.23\n\nAttributes\n----------"
          },
          "alphas_": {
            "type": "array-like of shape (n_alphas + 1,) or list of such arrays",
            "description": "Maximum of covariances (in absolute value) at each iteration.\n    ``n_alphas`` is either ``max_iter``, ``n_features`` or the\n    number of nodes in the path with ``alpha >= alpha_min``, whichever\n    is smaller. If this is a list of array-like, the length of the outer\n    list is `n_targets`."
          },
          "active_": {
            "type": "list of shape (n_alphas,) or list of such lists",
            "description": "Indices of active variables at the end of the path.\n    If this is a list of list, the length of the outer list is `n_targets`."
          },
          "coef_path_": {
            "type": "array-like of shape (n_features, n_alphas + 1) or list             of such arrays",
            "description": "The varying values of the coefficients along the path. It is not\n    present if the ``fit_path`` parameter is ``False``. If this is a list\n    of array-like, the length of the outer list is `n_targets`."
          },
          "coef_": {
            "type": "array-like of shape (n_features,) or (n_targets, n_features)",
            "description": "Parameter vector (w in the formulation formula)."
          },
          "intercept_": {
            "type": "float or array-like of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "n_iter_": {
            "type": "array-like or int",
            "description": "The number of iterations taken by lars_path to find the\n    grid of alphas for each target."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "lars_path: Compute Least Angle Regression or Lasso\n    path using LARS algorithm.\nLarsCV : Cross-validated Least Angle Regression model.\nsklearn.decomposition.sparse_encode : Sparse coding.",
        "notes": "",
        "examples": ">>> from sklearn import linear_model\n>>> reg = linear_model.Lars(n_nonzero_coefs=1)\n>>> reg.fit([[-1, 1], [0, 0], [1, 1]], [-1.1111, 0, -1.1111])\nLars(n_nonzero_coefs=1)\n>>> print(reg.coef_)\n[ 0. -1.11...]"
      }
    },
    {
      "name": "LarsCV",
      "signature": "LarsCV(*, fit_intercept=True, verbose=False, max_iter=500, precompute='auto', cv=None, max_n_alphas=1000, n_jobs=None, eps=2.220446049250313e-16, copy_X=True)",
      "docstring": {
        "description": "Cross-validated Least Angle Regression model.\n\nSee glossary entry for :term:`cross-validation estimator`.\n\nRead more in the :ref:`User Guide <least_angle_regression>`.",
        "parameters": {
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "verbose": {
            "type": "bool or int, default=False",
            "description": "Sets the verbosity amount."
          },
          "max_iter": {
            "type": "int, default=500",
            "description": "Maximum number of iterations to perform."
          },
          "precompute": {
            "type": "bool, 'auto' or array-like , default='auto'",
            "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram matrix\n    cannot be passed as argument since we will use only subsets of X."
          },
          "cv": {
            "type": "int, cross-validation generator or an iterable, default=None",
            "description": "Determines the cross-validation splitting strategy.\n    Possible inputs for cv are:\n\n    - None, to use the default 5-fold cross-validation,\n    - integer, to specify the number of folds.\n    - :term:`CV splitter`,\n    - An iterable yielding (train, test) splits as arrays of indices.\n\n    For integer/None inputs, :class:`~sklearn.model_selection.KFold` is used.\n\n    Refer :ref:`User Guide <cross_validation>` for the various\n    cross-validation strategies that can be used here.\n\n    .. versionchanged:: 0.22\n        ``cv`` default value if None changed from 3-fold to 5-fold."
          },
          "max_n_alphas": {
            "type": "int, default=1000",
            "description": "The maximum number of points on the path used to compute the\n    residuals in the cross-validation."
          },
          "n_jobs": {
            "type": "int or None, default=None",
            "description": "Number of CPUs to use during the cross validation.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "eps": {
            "type": "float, default=np.finfo(float).eps",
            "description": "The machine-precision regularization in the computation of the\n    Cholesky diagonal factors. Increase this for very ill-conditioned\n    systems. Unlike the ``tol`` parameter in some iterative\n    optimization-based algorithms, this parameter does not control\n    the tolerance of the optimization."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten.\n\nAttributes\n----------"
          },
          "active_": {
            "type": "list of length n_alphas or list of such lists",
            "description": "Indices of active variables at the end of the path.\n    If this is a list of lists, the outer list length is `n_targets`."
          },
          "coef_": {
            "type": "array-like of shape (n_features,)",
            "description": "parameter vector (w in the formulation formula)"
          },
          "intercept_": {
            "type": "float",
            "description": "independent term in decision function"
          },
          "coef_path_": {
            "type": "array-like of shape (n_features, n_alphas)",
            "description": "the varying values of the coefficients along the path"
          },
          "alpha_": {
            "type": "float",
            "description": "the estimated regularization parameter alpha"
          },
          "alphas_": {
            "type": "array-like of shape (n_alphas,)",
            "description": "the different values of alpha along the path"
          },
          "cv_alphas_": {
            "type": "array-like of shape (n_cv_alphas,)",
            "description": "all the values of alpha along the path for the different folds"
          },
          "mse_path_": {
            "type": "array-like of shape (n_folds, n_cv_alphas)",
            "description": "the mean square error on left-out for each fold along the path\n    (alpha values given by ``cv_alphas``)"
          },
          "n_iter_": {
            "type": "array-like or int",
            "description": "the number of iterations run by Lars with the optimal alpha."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "lars_path : Compute Least Angle Regression or Lasso\n    path using LARS algorithm.\nlasso_path : Compute Lasso path with coordinate descent.\nLasso : Linear Model trained with L1 prior as\n    regularizer (aka the Lasso).\nLassoCV : Lasso linear model with iterative fitting\n    along a regularization path.\nLassoLars : Lasso model fit with Least Angle Regression a.k.a. Lars.\nLassoLarsIC : Lasso model fit with Lars using BIC\n    or AIC for model selection.\nsklearn.decomposition.sparse_encode : Sparse coding.",
        "notes": "In `fit`, once the best parameter `alpha` is found through\ncross-validation, the model is fit again using the entire training set.",
        "examples": ">>> from sklearn.linear_model import LarsCV\n>>> from sklearn.datasets import make_regression\n>>> X, y = make_regression(n_samples=200, noise=4.0, random_state=0)\n>>> reg = LarsCV(cv=5).fit(X, y)\n>>> reg.score(X, y)\n0.9996...\n>>> reg.alpha_\nnp.float64(0.2961...)\n>>> reg.predict(X[:1,])\narray([154.3996...])"
      }
    },
    {
      "name": "Lasso",
      "signature": "Lasso(alpha=1.0, *, fit_intercept=True, precompute=False, copy_X=True, max_iter=1000, tol=0.0001, warm_start=False, positive=False, random_state=None, selection='cyclic')",
      "docstring": {
        "description": "Linear Model trained with L1 prior as regularizer (aka the Lasso).\n\nThe optimization objective for Lasso is::\n\n    (1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\n\nTechnically the Lasso model is optimizing the same objective function as\nthe Elastic Net with ``l1_ratio=1.0`` (no L2 penalty).\n\nRead more in the :ref:`User Guide <lasso>`.",
        "parameters": {
          "alpha": {
            "type": "float, default=1.0",
            "description": "Constant that multiplies the L1 term, controlling regularization\n    strength. `alpha` must be a non-negative float i.e. in `[0, inf)`.\n\n    When `alpha = 0`, the objective is equivalent to ordinary least\n    squares, solved by the :class:`LinearRegression` object. For numerical\n    reasons, using `alpha = 0` with the `Lasso` object is not advised.\n    Instead, you should use the :class:`LinearRegression` object."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to False, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "precompute": {
            "type": "bool or array-like of shape (n_features, n_features),                 default=False",
            "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. The Gram matrix can also be passed as argument.\n    For sparse input this option is always ``False`` to preserve sparsity."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of iterations."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "The tolerance for the optimization: if the updates are\n    smaller than ``tol``, the optimization code checks the\n    dual gap for optimality and continues until it is smaller\n    than ``tol``, see Notes below."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to True, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution.\n    See :term:`the Glossary <warm_start>`."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "When set to ``True``, forces the coefficients to be positive."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "The seed of the pseudo random number generator that selects a random\n    feature to update. Used when ``selection`` == 'random'.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "selection": {
            "type": "{'cyclic', 'random'}, default='cyclic'",
            "description": "If set to 'random', a random coefficient is updated every iteration\n    rather than looping over features sequentially by default. This\n    (setting to 'random') often leads to significantly faster convergence\n    especially when tol is higher than 1e-4.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (n_features,) or (n_targets, n_features)",
            "description": "Parameter vector (w in the cost function formula)."
          },
          "dual_gap_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Given param alpha, the dual gaps at the end of the optimization,\n    same shape as each observation of y."
          },
          "sparse_coef_": {
            "type": "sparse matrix of shape (n_features, 1) or             (n_targets, n_features)",
            "description": "Readonly property derived from ``coef_``."
          },
          "intercept_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "n_iter_": {
            "type": "int or list of int",
            "description": "Number of iterations run by the coordinate descent solver to reach\n    the specified tolerance."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "lars_path : Regularization path using LARS.\nlasso_path : Regularization path using Lasso.\nLassoLars : Lasso Path along the regularization parameter using LARS algorithm.\nLassoCV : Lasso alpha parameter by cross-validation.\nLassoLarsCV : Lasso least angle parameter algorithm by cross-validation.\nsklearn.decomposition.sparse_encode : Sparse coding array estimator.",
        "notes": "The algorithm used to fit the model is coordinate descent.\n\nTo avoid unnecessary memory duplication the X argument of the fit method\nshould be directly passed as a Fortran-contiguous numpy array.\n\nRegularization improves the conditioning of the problem and\nreduces the variance of the estimates. Larger values specify stronger\nregularization. Alpha corresponds to `1 / (2C)` in other linear\nmodels such as :class:`~sklearn.linear_model.LogisticRegression` or\n:class:`~sklearn.svm.LinearSVC`. If an array is passed, penalties are\nassumed to be specific to the targets. Hence they must correspond in\nnumber.\n\nThe precise stopping criteria based on `tol` are the following: First, check that\nthat maximum coordinate update, i.e. :math:`\\max_j |w_j^{new} - w_j^{old}|`\nis smaller than `tol` times the maximum absolute coefficient, :math:`\\max_j |w_j|`.\nIf so, then additionally check whether the dual gap is smaller than `tol` times\n:math:`||y||_2^2 / n_{\\text{samples}}`.\n\nThe target can be a 2-dimensional array, resulting in the optimization of the\nfollowing objective::\n\n    (1 / (2 * n_samples)) * ||Y - XW||^2_F + alpha * ||W||_11\n\nwhere :math:`||W||_{1,1}` is the sum of the magnitude of the matrix coefficients.\nIt should not be confused with :class:`~sklearn.linear_model.MultiTaskLasso` which\ninstead penalizes the :math:`L_{2,1}` norm of the coefficients, yielding row-wise\nsparsity in the coefficients.",
        "examples": ">>> from sklearn import linear_model\n>>> clf = linear_model.Lasso(alpha=0.1)\n>>> clf.fit([[0,0], [1, 1], [2, 2]], [0, 1, 2])\nLasso(alpha=0.1)\n>>> print(clf.coef_)\n[0.85 0.  ]\n>>> print(clf.intercept_)\n0.15..."
      }
    },
    {
      "name": "LassoCV",
      "signature": "LassoCV(*, eps=0.001, n_alphas=100, alphas=None, fit_intercept=True, precompute='auto', max_iter=1000, tol=0.0001, copy_X=True, cv=None, verbose=False, n_jobs=None, positive=False, random_state=None, selection='cyclic')",
      "docstring": {
        "description": "Lasso linear model with iterative fitting along a regularization path.\n\nSee glossary entry for :term:`cross-validation estimator`.\n\nThe best model is selected by cross-validation.\n\nThe optimization objective for Lasso is::\n\n    (1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\n\nRead more in the :ref:`User Guide <lasso>`.",
        "parameters": {
          "eps": {
            "type": "float, default=1e-3",
            "description": "Length of the path. ``eps=1e-3`` means that\n    ``alpha_min / alpha_max = 1e-3``."
          },
          "n_alphas": {
            "type": "int, default=100",
            "description": "Number of alphas along the regularization path."
          },
          "alphas": {
            "type": "array-like, default=None",
            "description": "List of alphas where to compute the models.\n    If ``None`` alphas are set automatically."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "precompute": {
            "type": "'auto', bool or array-like of shape             (n_features, n_features), default='auto'",
            "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram\n    matrix can also be passed as argument."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of iterations."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "The tolerance for the optimization: if the updates are\n    smaller than ``tol``, the optimization code checks the\n    dual gap for optimality and continues until it is smaller\n    than ``tol``."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten."
          },
          "cv": {
            "type": "int, cross-validation generator or iterable, default=None",
            "description": "Determines the cross-validation splitting strategy.\n    Possible inputs for cv are:\n\n    - None, to use the default 5-fold cross-validation,\n    - int, to specify the number of folds.\n    - :term:`CV splitter`,\n    - An iterable yielding (train, test) splits as arrays of indices.\n\n    For int/None inputs, :class:`~sklearn.model_selection.KFold` is used.\n\n    Refer :ref:`User Guide <cross_validation>` for the various\n    cross-validation strategies that can be used here.\n\n    .. versionchanged:: 0.22\n        ``cv`` default value if None changed from 3-fold to 5-fold."
          },
          "verbose": {
            "type": "bool or int, default=False",
            "description": "Amount of verbosity."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "Number of CPUs to use during the cross validation.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "If positive, restrict regression coefficients to be positive."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "The seed of the pseudo random number generator that selects a random\n    feature to update. Used when ``selection`` == 'random'.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "selection": {
            "type": "{'cyclic', 'random'}, default='cyclic'",
            "description": "If set to 'random', a random coefficient is updated every iteration\n    rather than looping over features sequentially by default. This\n    (setting to 'random') often leads to significantly faster convergence\n    especially when tol is higher than 1e-4.\n\nAttributes\n----------"
          },
          "alpha_": {
            "type": "float",
            "description": "The amount of penalization chosen by cross validation."
          },
          "coef_": {
            "type": "ndarray of shape (n_features,) or (n_targets, n_features)",
            "description": "Parameter vector (w in the cost function formula)."
          },
          "intercept_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "mse_path_": {
            "type": "ndarray of shape (n_alphas, n_folds)",
            "description": "Mean square error for the test set on each fold, varying alpha."
          },
          "alphas_": {
            "type": "ndarray of shape (n_alphas,)",
            "description": "The grid of alphas used for fitting."
          },
          "dual_gap_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "The dual gap at the end of the optimization for the optimal alpha\n    (``alpha_``)."
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations run by the coordinate descent solver to reach\n    the specified tolerance for the optimal alpha."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "lars_path : Compute Least Angle Regression or Lasso path using LARS\n    algorithm.\nlasso_path : Compute Lasso path with coordinate descent.\nLasso : The Lasso is a linear model that estimates sparse coefficients.\nLassoLars : Lasso model fit with Least Angle Regression a.k.a. Lars.\nLassoCV : Lasso linear model with iterative fitting along a regularization\n    path.\nLassoLarsCV : Cross-validated Lasso using the LARS algorithm.",
        "notes": "In `fit`, once the best parameter `alpha` is found through\ncross-validation, the model is fit again using the entire training set.\n\nTo avoid unnecessary memory duplication the `X` argument of the `fit`\nmethod should be directly passed as a Fortran-contiguous numpy array.\n\nFor an example, see :ref:`examples/linear_model/plot_lasso_model_selection.py\n<sphx_glr_auto_examples_linear_model_plot_lasso_model_selection.py>`.\n\n:class:`LassoCV` leads to different results than a hyperparameter\nsearch using :class:`~sklearn.model_selection.GridSearchCV` with a\n:class:`Lasso` model. In :class:`LassoCV`, a model for a given\npenalty `alpha` is warm started using the coefficients of the\nclosest model (trained at the previous iteration) on the\nregularization path. It tends to speed up the hyperparameter\nsearch.",
        "examples": ">>> from sklearn.linear_model import LassoCV\n>>> from sklearn.datasets import make_regression\n>>> X, y = make_regression(noise=4, random_state=0)\n>>> reg = LassoCV(cv=5, random_state=0).fit(X, y)\n>>> reg.score(X, y)\n0.9993...\n>>> reg.predict(X[:1,])\narray([-78.4951...])"
      }
    },
    {
      "name": "LassoLars",
      "signature": "LassoLars(alpha=1.0, *, fit_intercept=True, verbose=False, precompute='auto', max_iter=500, eps=2.220446049250313e-16, copy_X=True, fit_path=True, positive=False, jitter=None, random_state=None)",
      "docstring": {
        "description": "Lasso model fit with Least Angle Regression a.k.a. Lars.\n\nIt is a Linear Model trained with an L1 prior as regularizer.\n\nThe optimization objective for Lasso is::\n\n(1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\n\nRead more in the :ref:`User Guide <least_angle_regression>`.",
        "parameters": {
          "alpha": {
            "type": "float, default=1.0",
            "description": "Constant that multiplies the penalty term. Defaults to 1.0.\n    ``alpha = 0`` is equivalent to an ordinary least square, solved\n    by :class:`LinearRegression`. For numerical reasons, using\n    ``alpha = 0`` with the LassoLars object is not advised and you\n    should prefer the LinearRegression object."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "verbose": {
            "type": "bool or int, default=False",
            "description": "Sets the verbosity amount."
          },
          "precompute": {
            "type": "bool, 'auto' or array-like, default='auto'",
            "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram\n    matrix can also be passed as argument."
          },
          "max_iter": {
            "type": "int, default=500",
            "description": "Maximum number of iterations to perform."
          },
          "eps": {
            "type": "float, default=np.finfo(float).eps",
            "description": "The machine-precision regularization in the computation of the\n    Cholesky diagonal factors. Increase this for very ill-conditioned\n    systems. Unlike the ``tol`` parameter in some iterative\n    optimization-based algorithms, this parameter does not control\n    the tolerance of the optimization."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If True, X will be copied; else, it may be overwritten."
          },
          "fit_path": {
            "type": "bool, default=True",
            "description": "If ``True`` the full path is stored in the ``coef_path_`` attribute.\n    If you compute the solution for a large problem or many targets,\n    setting ``fit_path`` to ``False`` will lead to a speedup, especially\n    with a small alpha."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "Restrict coefficients to be >= 0. Be aware that you might want to\n    remove fit_intercept which is set True by default.\n    Under the positive restriction the model coefficients will not converge\n    to the ordinary-least-squares solution for small values of alpha.\n    Only coefficients up to the smallest alpha value (``alphas_[alphas_ >\n    0.].min()`` when fit_path=True) reached by the stepwise Lars-Lasso\n    algorithm are typically in congruence with the solution of the\n    coordinate descent Lasso estimator."
          },
          "jitter": {
            "type": "float, default=None",
            "description": "Upper bound on a uniform noise parameter to be added to the\n    `y` values, to satisfy the model's assumption of\n    one-at-a-time computations. Might help with stability.\n\n    .. versionadded:: 0.23"
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Determines random number generation for jittering. Pass an int\n    for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`. Ignored if `jitter` is None.\n\n    .. versionadded:: 0.23\n\nAttributes\n----------"
          },
          "alphas_": {
            "type": "array-like of shape (n_alphas + 1,) or list of such arrays",
            "description": "Maximum of covariances (in absolute value) at each iteration.\n    ``n_alphas`` is either ``max_iter``, ``n_features`` or the\n    number of nodes in the path with ``alpha >= alpha_min``, whichever\n    is smaller. If this is a list of array-like, the length of the outer\n    list is `n_targets`."
          },
          "active_": {
            "type": "list of length n_alphas or list of such lists",
            "description": "Indices of active variables at the end of the path.\n    If this is a list of list, the length of the outer list is `n_targets`."
          },
          "coef_path_": {
            "type": "array-like of shape (n_features, n_alphas + 1) or list             of such arrays",
            "description": "If a list is passed it's expected to be one of n_targets such arrays.\n    The varying values of the coefficients along the path. It is not\n    present if the ``fit_path`` parameter is ``False``. If this is a list\n    of array-like, the length of the outer list is `n_targets`."
          },
          "coef_": {
            "type": "array-like of shape (n_features,) or (n_targets, n_features)",
            "description": "Parameter vector (w in the formulation formula)."
          },
          "intercept_": {
            "type": "float or array-like of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "n_iter_": {
            "type": "array-like or int",
            "description": "The number of iterations taken by lars_path to find the\n    grid of alphas for each target."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "lars_path : Compute Least Angle Regression or Lasso\n    path using LARS algorithm.\nlasso_path : Compute Lasso path with coordinate descent.\nLasso : Linear Model trained with L1 prior as\n    regularizer (aka the Lasso).\nLassoCV : Lasso linear model with iterative fitting\n    along a regularization path.\nLassoLarsCV: Cross-validated Lasso, using the LARS algorithm.\nLassoLarsIC : Lasso model fit with Lars using BIC\n    or AIC for model selection.\nsklearn.decomposition.sparse_encode : Sparse coding.",
        "notes": "",
        "examples": ">>> from sklearn import linear_model\n>>> reg = linear_model.LassoLars(alpha=0.01)\n>>> reg.fit([[-1, 1], [0, 0], [1, 1]], [-1, 0, -1])\nLassoLars(alpha=0.01)\n>>> print(reg.coef_)\n[ 0.         -0.955...]"
      }
    },
    {
      "name": "LassoLarsCV",
      "signature": "LassoLarsCV(*, fit_intercept=True, verbose=False, max_iter=500, precompute='auto', cv=None, max_n_alphas=1000, n_jobs=None, eps=2.220446049250313e-16, copy_X=True, positive=False)",
      "docstring": {
        "description": "Cross-validated Lasso, using the LARS algorithm.\n\nSee glossary entry for :term:`cross-validation estimator`.\n\nThe optimization objective for Lasso is::\n\n(1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\n\nRead more in the :ref:`User Guide <least_angle_regression>`.",
        "parameters": {
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "verbose": {
            "type": "bool or int, default=False",
            "description": "Sets the verbosity amount."
          },
          "max_iter": {
            "type": "int, default=500",
            "description": "Maximum number of iterations to perform."
          },
          "precompute": {
            "type": "bool or 'auto' , default='auto'",
            "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram matrix\n    cannot be passed as argument since we will use only subsets of X."
          },
          "cv": {
            "type": "int, cross-validation generator or an iterable, default=None",
            "description": "Determines the cross-validation splitting strategy.\n    Possible inputs for cv are:\n\n    - None, to use the default 5-fold cross-validation,\n    - integer, to specify the number of folds.\n    - :term:`CV splitter`,\n    - An iterable yielding (train, test) splits as arrays of indices.\n\n    For integer/None inputs, :class:`~sklearn.model_selection.KFold` is used.\n\n    Refer :ref:`User Guide <cross_validation>` for the various\n    cross-validation strategies that can be used here.\n\n    .. versionchanged:: 0.22\n        ``cv`` default value if None changed from 3-fold to 5-fold."
          },
          "max_n_alphas": {
            "type": "int, default=1000",
            "description": "The maximum number of points on the path used to compute the\n    residuals in the cross-validation."
          },
          "n_jobs": {
            "type": "int or None, default=None",
            "description": "Number of CPUs to use during the cross validation.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "eps": {
            "type": "float, default=np.finfo(float).eps",
            "description": "The machine-precision regularization in the computation of the\n    Cholesky diagonal factors. Increase this for very ill-conditioned\n    systems. Unlike the ``tol`` parameter in some iterative\n    optimization-based algorithms, this parameter does not control\n    the tolerance of the optimization."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If True, X will be copied; else, it may be overwritten."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "Restrict coefficients to be >= 0. Be aware that you might want to\n    remove fit_intercept which is set True by default.\n    Under the positive restriction the model coefficients do not converge\n    to the ordinary-least-squares solution for small values of alpha.\n    Only coefficients up to the smallest alpha value (``alphas_[alphas_ >\n    0.].min()`` when fit_path=True) reached by the stepwise Lars-Lasso\n    algorithm are typically in congruence with the solution of the\n    coordinate descent Lasso estimator.\n    As a consequence using LassoLarsCV only makes sense for problems where\n    a sparse solution is expected and/or reached.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array-like of shape (n_features,)",
            "description": "parameter vector (w in the formulation formula)"
          },
          "intercept_": {
            "type": "float",
            "description": "independent term in decision function."
          },
          "coef_path_": {
            "type": "array-like of shape (n_features, n_alphas)",
            "description": "the varying values of the coefficients along the path"
          },
          "alpha_": {
            "type": "float",
            "description": "the estimated regularization parameter alpha"
          },
          "alphas_": {
            "type": "array-like of shape (n_alphas,)",
            "description": "the different values of alpha along the path"
          },
          "cv_alphas_": {
            "type": "array-like of shape (n_cv_alphas,)",
            "description": "all the values of alpha along the path for the different folds"
          },
          "mse_path_": {
            "type": "array-like of shape (n_folds, n_cv_alphas)",
            "description": "the mean square error on left-out for each fold along the path\n    (alpha values given by ``cv_alphas``)"
          },
          "n_iter_": {
            "type": "array-like or int",
            "description": "the number of iterations run by Lars with the optimal alpha."
          },
          "active_": {
            "type": "list of int",
            "description": "Indices of active variables at the end of the path."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "lars_path : Compute Least Angle Regression or Lasso\n    path using LARS algorithm.\nlasso_path : Compute Lasso path with coordinate descent.\nLasso : Linear Model trained with L1 prior as\n    regularizer (aka the Lasso).\nLassoCV : Lasso linear model with iterative fitting\n    along a regularization path.\nLassoLars : Lasso model fit with Least Angle Regression a.k.a. Lars.\nLassoLarsIC : Lasso model fit with Lars using BIC\n    or AIC for model selection.\nsklearn.decomposition.sparse_encode : Sparse coding.",
        "notes": "The object solves the same problem as the\n:class:`~sklearn.linear_model.LassoCV` object. However, unlike the\n:class:`~sklearn.linear_model.LassoCV`, it find the relevant alphas values\nby itself. In general, because of this property, it will be more stable.\nHowever, it is more fragile to heavily multicollinear datasets.\n\nIt is more efficient than the :class:`~sklearn.linear_model.LassoCV` if\nonly a small number of features are selected compared to the total number,\nfor instance if there are very few samples compared to the number of\nfeatures.\n\nIn `fit`, once the best parameter `alpha` is found through\ncross-validation, the model is fit again using the entire training set.",
        "examples": ">>> from sklearn.linear_model import LassoLarsCV\n>>> from sklearn.datasets import make_regression\n>>> X, y = make_regression(noise=4.0, random_state=0)\n>>> reg = LassoLarsCV(cv=5).fit(X, y)\n>>> reg.score(X, y)\n0.9993...\n>>> reg.alpha_\nnp.float64(0.3972...)\n>>> reg.predict(X[:1,])\narray([-78.4831...])"
      }
    },
    {
      "name": "LassoLarsIC",
      "signature": "LassoLarsIC(criterion='aic', *, fit_intercept=True, verbose=False, precompute='auto', max_iter=500, eps=2.220446049250313e-16, copy_X=True, positive=False, noise_variance=None)",
      "docstring": {
        "description": "Lasso model fit with Lars using BIC or AIC for model selection.\n\nThe optimization objective for Lasso is::\n\n(1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\n\nAIC is the Akaike information criterion [2]_ and BIC is the Bayes\nInformation criterion [3]_. Such criteria are useful to select the value\nof the regularization parameter by making a trade-off between the\ngoodness of fit and the complexity of the model. A good model should\nexplain well the data while being simple.\n\nRead more in the :ref:`User Guide <lasso_lars_ic>`.",
        "parameters": {
          "criterion": {
            "type": "{'aic', 'bic'}, default='aic'",
            "description": "The type of criterion to use."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "verbose": {
            "type": "bool or int, default=False",
            "description": "Sets the verbosity amount."
          },
          "precompute": {
            "type": "bool, 'auto' or array-like, default='auto'",
            "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram\n    matrix can also be passed as argument."
          },
          "max_iter": {
            "type": "int, default=500",
            "description": "Maximum number of iterations to perform. Can be used for\n    early stopping."
          },
          "eps": {
            "type": "float, default=np.finfo(float).eps",
            "description": "The machine-precision regularization in the computation of the\n    Cholesky diagonal factors. Increase this for very ill-conditioned\n    systems. Unlike the ``tol`` parameter in some iterative\n    optimization-based algorithms, this parameter does not control\n    the tolerance of the optimization."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If True, X will be copied; else, it may be overwritten."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "Restrict coefficients to be >= 0. Be aware that you might want to\n    remove fit_intercept which is set True by default.\n    Under the positive restriction the model coefficients do not converge\n    to the ordinary-least-squares solution for small values of alpha.\n    Only coefficients up to the smallest alpha value (``alphas_[alphas_ >\n    0.].min()`` when fit_path=True) reached by the stepwise Lars-Lasso\n    algorithm are typically in congruence with the solution of the\n    coordinate descent Lasso estimator.\n    As a consequence using LassoLarsIC only makes sense for problems where\n    a sparse solution is expected and/or reached."
          },
          "noise_variance": {
            "type": "float, default=None",
            "description": "The estimated noise variance of the data. If `None`, an unbiased\n    estimate is computed by an OLS model. However, it is only possible\n    in the case where `n_samples > n_features + fit_intercept`.\n\n    .. versionadded:: 1.1\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array-like of shape (n_features,)",
            "description": "parameter vector (w in the formulation formula)"
          },
          "intercept_": {
            "type": "float",
            "description": "independent term in decision function."
          },
          "alpha_": {
            "type": "float",
            "description": "the alpha parameter chosen by the information criterion"
          },
          "alphas_": {
            "type": "array-like of shape (n_alphas + 1,) or list of such arrays",
            "description": "Maximum of covariances (in absolute value) at each iteration.\n    ``n_alphas`` is either ``max_iter``, ``n_features`` or the\n    number of nodes in the path with ``alpha >= alpha_min``, whichever\n    is smaller. If a list, it will be of length `n_targets`."
          },
          "n_iter_": {
            "type": "int",
            "description": "number of iterations run by lars_path to find the grid of\n    alphas."
          },
          "criterion_": {
            "type": "array-like of shape (n_alphas,)",
            "description": "The value of the information criteria ('aic', 'bic') across all\n    alphas. The alpha which has the smallest information criterion is\n    chosen, as specified in [1]_."
          },
          "noise_variance_": {
            "type": "float",
            "description": "The estimated noise variance from the data used to compute the\n    criterion.\n\n    .. versionadded:: 1.1"
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "lars_path : Compute Least Angle Regression or Lasso\n    path using LARS algorithm.\nlasso_path : Compute Lasso path with coordinate descent.\nLasso : Linear Model trained with L1 prior as\n    regularizer (aka the Lasso).\nLassoCV : Lasso linear model with iterative fitting\n    along a regularization path.\nLassoLars : Lasso model fit with Least Angle Regression a.k.a. Lars.\nLassoLarsCV: Cross-validated Lasso, using the LARS algorithm.\nsklearn.decomposition.sparse_encode : Sparse coding.",
        "notes": "The number of degrees of freedom is computed as in [1]_.\n\nTo have more details regarding the mathematical formulation of the\nAIC and BIC criteria, please refer to :ref:`User Guide <lasso_lars_ic>`.\n\nReferences\n----------\n.. [1] :arxiv:`Zou, Hui, Trevor Hastie, and Robert Tibshirani.\n        \"On the degrees of freedom of the lasso.\"\n        The Annals of Statistics 35.5 (2007): 2173-2192.\n        <0712.0881>`\n\n.. [2] `Wikipedia entry on the Akaike information criterion\n        <https://en.wikipedia.org/wiki/Akaike_information_criterion>`_\n\n.. [3] `Wikipedia entry on the Bayesian information criterion\n        <https://en.wikipedia.org/wiki/Bayesian_information_criterion>`_",
        "examples": ">>> from sklearn import linear_model\n>>> reg = linear_model.LassoLarsIC(criterion='bic')\n>>> X = [[-2, 2], [-1, 1], [0, 0], [1, 1], [2, 2]]\n>>> y = [-2.2222, -1.1111, 0, -1.1111, -2.2222]\n>>> reg.fit(X, y)\nLassoLarsIC(criterion='bic')\n>>> print(reg.coef_)\n[ 0.  -1.11...]"
      }
    },
    {
      "name": "LinearRegression",
      "signature": "LinearRegression(*, fit_intercept=True, copy_X=True, n_jobs=None, positive=False)",
      "docstring": {
        "description": "Ordinary least squares Linear Regression.\n\nLinearRegression fits a linear model with coefficients w = (w1, ..., wp)\nto minimize the residual sum of squares between the observed targets in\nthe dataset, and the targets predicted by the linear approximation.",
        "parameters": {
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to False, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If True, X will be copied; else, it may be overwritten."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "The number of jobs to use for the computation. This will only provide\n    speedup in case of sufficiently large problems, that is if firstly\n    `n_targets > 1` and secondly `X` is sparse or if `positive` is set\n    to `True`. ``None`` means 1 unless in a\n    :obj:`joblib.parallel_backend` context. ``-1`` means using all\n    processors. See :term:`Glossary <n_jobs>` for more details."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "When set to ``True``, forces the coefficients to be positive. This\n    option is only supported for dense arrays.\n\n    .. versionadded:: 0.24\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array of shape (n_features, ) or (n_targets, n_features)",
            "description": "Estimated coefficients for the linear regression problem.\n    If multiple targets are passed during the fit (y 2D), this\n    is a 2D array of shape (n_targets, n_features), while if only\n    one target is passed, this is a 1D array of length n_features."
          },
          "rank_": {
            "type": "int",
            "description": "Rank of matrix `X`. Only available when `X` is dense."
          },
          "singular_": {
            "type": "array of shape (min(X, y),)",
            "description": "Singular values of `X`. Only available when `X` is dense."
          },
          "intercept_": {
            "type": "float or array of shape (n_targets,)",
            "description": "Independent term in the linear model. Set to 0.0 if\n    `fit_intercept = False`."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "Ridge : Ridge regression addresses some of the\n    problems of Ordinary Least Squares by imposing a penalty on the\n    size of the coefficients with l2 regularization.\nLasso : The Lasso is a linear model that estimates\n    sparse coefficients with l1 regularization.\nElasticNet : Elastic-Net is a linear regression\n    model trained with both l1 and l2 -norm regularization of the\n    coefficients.",
        "notes": "From the implementation point of view, this is just plain Ordinary\nLeast Squares (scipy.linalg.lstsq) or Non Negative Least Squares\n(scipy.optimize.nnls) wrapped as a predictor object.",
        "examples": ">>> import numpy as np\n>>> from sklearn.linear_model import LinearRegression\n>>> X = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\n>>> # y = 1 * x_0 + 2 * x_1 + 3\n>>> y = np.dot(X, np.array([1, 2])) + 3\n>>> reg = LinearRegression().fit(X, y)\n>>> reg.score(X, y)\n1.0\n>>> reg.coef_\narray([1., 2.])\n>>> reg.intercept_\nnp.float64(3.0...)\n>>> reg.predict(np.array([[3, 5]]))\narray([16.])"
      }
    },
    {
      "name": "LogisticRegression",
      "signature": "LogisticRegression(penalty='l2', *, dual=False, tol=0.0001, C=1.0, fit_intercept=True, intercept_scaling=1, class_weight=None, random_state=None, solver='lbfgs', max_iter=100, multi_class='deprecated', verbose=0, warm_start=False, n_jobs=None, l1_ratio=None)",
      "docstring": {
        "description": "Logistic Regression (aka logit, MaxEnt) classifier.\n\nThis class implements regularized logistic regression using the\n'liblinear' library, 'newton-cg', 'sag', 'saga' and 'lbfgs' solvers. **Note\nthat regularization is applied by default**. It can handle both dense\nand sparse input. Use C-ordered arrays or CSR matrices containing 64-bit\nfloats for optimal performance; any other input format will be converted\n(and copied).\n\nThe 'newton-cg', 'sag', and 'lbfgs' solvers support only L2 regularization\nwith primal formulation, or no regularization. The 'liblinear' solver\nsupports both L1 and L2 regularization, with a dual formulation only for\nthe L2 penalty. The Elastic-Net regularization is only supported by the\n'saga' solver.\n\nFor :term:`multiclass` problems, only 'newton-cg', 'sag', 'saga' and 'lbfgs'\nhandle multinomial loss. 'liblinear' and 'newton-cholesky' only handle binary\nclassification but can be extended to handle multiclass by using\n:class:`~sklearn.multiclass.OneVsRestClassifier`.\n\nRead more in the :ref:`User Guide <logistic_regression>`.",
        "parameters": {
          "penalty": {
            "type": "{'l1', 'l2', 'elasticnet', None}, default='l2'",
            "description": "Specify the norm of the penalty:\n\n    - `None`: no penalty is added;\n    - `'l2'`: add a L2 penalty term and it is the default choice;\n    - `'l1'`: add a L1 penalty term;\n    - `'elasticnet'`: both L1 and L2 penalty terms are added.\n\n    .. warning::\n       Some penalties may not work with some solvers. See the parameter\n       `solver` below, to know the compatibility between the penalty and\n       solver.\n\n    .. versionadded:: 0.19\n       l1 penalty with SAGA solver (allowing 'multinomial' + L1)"
          },
          "dual": {
            "type": "bool, default=False",
            "description": "Dual (constrained) or primal (regularized, see also\n    :ref:`this equation <regularized-logistic-loss>`) formulation. Dual formulation\n    is only implemented for l2 penalty with liblinear solver. Prefer dual=False when\n    n_samples > n_features."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "Tolerance for stopping criteria."
          },
          "C": {
            "type": "float, default=1.0",
            "description": "Inverse of regularization strength; must be a positive float.\n    Like in support vector machines, smaller values specify stronger\n    regularization."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Specifies if a constant (a.k.a. bias or intercept) should be\n    added to the decision function."
          },
          "intercept_scaling": {
            "type": "float, default=1",
            "description": "Useful only when the solver 'liblinear' is used\n    and self.fit_intercept is set to True. In this case, x becomes\n    [x, self.intercept_scaling],\n    i.e. a \"synthetic\" feature with constant value equal to\n    intercept_scaling is appended to the instance vector.\n    The intercept becomes ``intercept_scaling * synthetic_feature_weight``.\n\n    Note! the synthetic feature weight is subject to l1/l2 regularization\n    as all other features.\n    To lessen the effect of regularization on synthetic feature weight\n    (and therefore on the intercept) intercept_scaling has to be increased."
          },
          "class_weight": {
            "type": "dict or 'balanced', default=None",
            "description": "Weights associated with classes in the form ``{class_label: weight}``.\n    If not given, all classes are supposed to have weight one.\n\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``.\n\n    Note that these weights will be multiplied with sample_weight (passed\n    through the fit method) if sample_weight is specified.\n\n    .. versionadded:: 0.17\n       *class_weight='balanced'*"
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used when ``solver`` == 'sag', 'saga' or 'liblinear' to shuffle the\n    data. See :term:`Glossary <random_state>` for details."
          },
          "solver": {
            "type": "{'lbfgs', 'liblinear', 'newton-cg', 'newton-cholesky', 'sag', 'saga'},             default='lbfgs'",
            "description": "Algorithm to use in the optimization problem. Default is 'lbfgs'.\n    To choose a solver, you might want to consider the following aspects:\n\n    - For small datasets, 'liblinear' is a good choice, whereas 'sag'\n      and 'saga' are faster for large ones;\n    - For :term:`multiclass` problems, all solvers except 'liblinear' minimize the\n      full multinomial loss;\n    - 'liblinear' can only handle binary classification by default. To apply a\n      one-versus-rest scheme for the multiclass setting one can wrap it with the\n      :class:`~sklearn.multiclass.OneVsRestClassifier`.\n    - 'newton-cholesky' is a good choice for\n      `n_samples` >> `n_features * n_classes`, especially with one-hot encoded\n      categorical features with rare categories. Be aware that the memory usage\n      of this solver has a quadratic dependency on `n_features * n_classes`\n      because it explicitly computes the full Hessian matrix.\n\n    .. warning::\n       The choice of the algorithm depends on the penalty chosen and on\n       (multinomial) multiclass support:\n\n       ================= ============================== ======================\n       solver            penalty                        multinomial multiclass\n       ================= ============================== ======================\n       'lbfgs'           'l2', None                     yes\n       'liblinear'       'l1', 'l2'                     no\n       'newton-cg'       'l2', None                     yes\n       'newton-cholesky' 'l2', None                     no\n       'sag'             'l2', None                     yes\n       'saga'            'elasticnet', 'l1', 'l2', None yes\n       ================= ============================== ======================\n\n    .. note::\n       'sag' and 'saga' fast convergence is only guaranteed on features\n       with approximately the same scale. You can preprocess the data with\n       a scaler from :mod:`sklearn.preprocessing`.\n\n    .. seealso::\n       Refer to the :ref:`User Guide <Logistic_regression>` for more\n       information regarding :class:`LogisticRegression` and more specifically the\n       :ref:`Table <logistic_regression_solvers>`\n       summarizing solver/penalty supports.\n\n    .. versionadded:: 0.17\n       Stochastic Average Gradient descent solver.\n    .. versionadded:: 0.19\n       SAGA solver.\n    .. versionchanged:: 0.22\n        The default solver changed from 'liblinear' to 'lbfgs' in 0.22.\n    .. versionadded:: 1.2\n       newton-cholesky solver."
          },
          "max_iter": {
            "type": "int, default=100",
            "description": "Maximum number of iterations taken for the solvers to converge."
          },
          "multi_class": {
            "type": "{'auto', 'ovr', 'multinomial'}, default='auto'",
            "description": "If the option chosen is 'ovr', then a binary problem is fit for each\n    label. For 'multinomial' the loss minimised is the multinomial loss fit\n    across the entire probability distribution, *even when the data is\n    binary*. 'multinomial' is unavailable when solver='liblinear'.\n    'auto' selects 'ovr' if the data is binary, or if solver='liblinear',\n    and otherwise selects 'multinomial'.\n\n    .. versionadded:: 0.18\n       Stochastic Average Gradient descent solver for 'multinomial' case.\n    .. versionchanged:: 0.22\n        Default changed from 'ovr' to 'auto' in 0.22.\n    .. deprecated:: 1.5\n       ``multi_class`` was deprecated in version 1.5 and will be removed in 1.7.\n       From then on, the recommended 'multinomial' will always be used for\n       `n_classes >= 3`.\n       Solvers that do not support 'multinomial' will raise an error.\n       Use `sklearn.multiclass.OneVsRestClassifier(LogisticRegression())` if you\n       still want to use OvR."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "For the liblinear and lbfgs solvers set verbose to any positive\n    number for verbosity."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to True, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution.\n    Useless for liblinear solver. See :term:`the Glossary <warm_start>`.\n\n    .. versionadded:: 0.17\n       *warm_start* to support *lbfgs*, *newton-cg*, *sag*, *saga* solvers."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "Number of CPU cores used when parallelizing over classes if\n    multi_class='ovr'\". This parameter is ignored when the ``solver`` is\n    set to 'liblinear' regardless of whether 'multi_class' is specified or\n    not. ``None`` means 1 unless in a :obj:`joblib.parallel_backend`\n    context. ``-1`` means using all processors.\n    See :term:`Glossary <n_jobs>` for more details."
          },
          "l1_ratio": {
            "type": "float, default=None",
            "description": "The Elastic-Net mixing parameter, with ``0 <= l1_ratio <= 1``. Only\n    used if ``penalty='elasticnet'``. Setting ``l1_ratio=0`` is equivalent\n    to using ``penalty='l2'``, while setting ``l1_ratio=1`` is equivalent\n    to using ``penalty='l1'``. For ``0 < l1_ratio <1``, the penalty is a\n    combination of L1 and L2.\n\nAttributes\n----------"
          },
          "classes_": {
            "type": "ndarray of shape (n_classes, )",
            "description": "A list of class labels known to the classifier."
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features) or (n_classes, n_features)",
            "description": "Coefficient of the features in the decision function.\n\n    `coef_` is of shape (1, n_features) when the given problem is binary.\n    In particular, when `multi_class='multinomial'`, `coef_` corresponds\n    to outcome 1 (True) and `-coef_` corresponds to outcome 0 (False)."
          },
          "intercept_": {
            "type": "ndarray of shape (1,) or (n_classes,)",
            "description": "Intercept (a.k.a. bias) added to the decision function.\n\n    If `fit_intercept` is set to False, the intercept is set to zero.\n    `intercept_` is of shape (1,) when the given problem is binary.\n    In particular, when `multi_class='multinomial'`, `intercept_`\n    corresponds to outcome 1 (True) and `-intercept_` corresponds to\n    outcome 0 (False)."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "ndarray of shape (n_classes,) or (1, )",
            "description": "Actual number of iterations for all classes. If binary or multinomial,\n    it returns only 1 element. For liblinear solver, only the maximum\n    number of iteration across all classes is given.\n\n    .. versionchanged:: 0.20\n\n        In SciPy <= 1.0.0 the number of lbfgs iterations may exceed\n        ``max_iter``. ``n_iter_`` will now report at most ``max_iter``."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "SGDClassifier : Incrementally trained logistic regression (when given\n    the parameter ``loss=\"log_loss\"``).\nLogisticRegressionCV : Logistic regression with built-in cross validation.",
        "notes": "The underlying C implementation uses a random number generator to\nselect features when fitting the model. It is thus not uncommon,\nto have slightly different results for the same input data. If\nthat happens, try with a smaller tol parameter.\n\nPredict output may not match that of standalone liblinear in certain\ncases. See :ref:`differences from liblinear <liblinear_differences>`\nin the narrative documentation.\n\nReferences\n----------\n\nL-BFGS-B -- Software for Large-scale Bound-constrained Optimization\n    Ciyou Zhu, Richard Byrd, Jorge Nocedal and Jose Luis Morales.\n    http://users.iems.northwestern.edu/~nocedal/lbfgsb.html\n\nLIBLINEAR -- A Library for Large Linear Classification\n    https://www.csie.ntu.edu.tw/~cjlin/liblinear/\n\nSAG -- Mark Schmidt, Nicolas Le Roux, and Francis Bach\n    Minimizing Finite Sums with the Stochastic Average Gradient\n    https://hal.inria.fr/hal-00860051/document\n\nSAGA -- Defazio, A., Bach F. & Lacoste-Julien S. (2014).\n        :arxiv:`\"SAGA: A Fast Incremental Gradient Method With Support\n        for Non-Strongly Convex Composite Objectives\" <1407.0202>`\n\nHsiang-Fu Yu, Fang-Lan Huang, Chih-Jen Lin (2011). Dual coordinate descent\n    methods for logistic regression and maximum entropy models.\n    Machine Learning 85(1-2):41-75.\n    https://www.csie.ntu.edu.tw/~cjlin/papers/maxent_dual.pdf",
        "examples": ">>> from sklearn.datasets import load_iris\n>>> from sklearn.linear_model import LogisticRegression\n>>> X, y = load_iris(return_X_y=True)\n>>> clf = LogisticRegression(random_state=0).fit(X, y)\n>>> clf.predict(X[:2, :])\narray([0, 0])\n>>> clf.predict_proba(X[:2, :])\narray([[9.8...e-01, 1.8...e-02, 1.4...e-08],\n       [9.7...e-01, 2.8...e-02, ...e-08]])\n>>> clf.score(X, y)\n0.97...\n\nFor a comaprison of the LogisticRegression with other classifiers see:\n:ref:`sphx_glr_auto_examples_classification_plot_classification_probability.py`."
      }
    },
    {
      "name": "LogisticRegressionCV",
      "signature": "LogisticRegressionCV(*, Cs=10, fit_intercept=True, cv=None, dual=False, penalty='l2', scoring=None, solver='lbfgs', tol=0.0001, max_iter=100, class_weight=None, n_jobs=None, verbose=0, refit=True, intercept_scaling=1.0, multi_class='deprecated', random_state=None, l1_ratios=None)",
      "docstring": {
        "description": "Logistic Regression CV (aka logit, MaxEnt) classifier.\n\nSee glossary entry for :term:`cross-validation estimator`.\n\nThis class implements logistic regression using liblinear, newton-cg, sag\nor lbfgs optimizer. The newton-cg, sag and lbfgs solvers support only L2\nregularization with primal formulation. The liblinear solver supports both\nL1 and L2 regularization, with a dual formulation only for the L2 penalty.\nElastic-Net penalty is only supported by the saga solver.\n\nFor the grid of `Cs` values and `l1_ratios` values, the best hyperparameter\nis selected by the cross-validator\n:class:`~sklearn.model_selection.StratifiedKFold`, but it can be changed\nusing the :term:`cv` parameter. The 'newton-cg', 'sag', 'saga' and 'lbfgs'\nsolvers can warm-start the coefficients (see :term:`Glossary<warm_start>`).\n\nRead more in the :ref:`User Guide <logistic_regression>`.",
        "parameters": {
          "Cs": {
            "type": "int or list of floats, default=10",
            "description": "Each of the values in Cs describes the inverse of regularization\n    strength. If Cs is as an int, then a grid of Cs values are chosen\n    in a logarithmic scale between 1e-4 and 1e4.\n    Like in support vector machines, smaller values specify stronger\n    regularization."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Specifies if a constant (a.k.a. bias or intercept) should be\n    added to the decision function."
          },
          "cv": {
            "type": "int or cross-validation generator, default=None",
            "description": "The default cross-validation generator used is Stratified K-Folds.\n    If an integer is provided, then it is the number of folds used.\n    See the module :mod:`sklearn.model_selection` module for the\n    list of possible cross-validation objects.\n\n    .. versionchanged:: 0.22\n        ``cv`` default value if None changed from 3-fold to 5-fold."
          },
          "dual": {
            "type": "bool, default=False",
            "description": "Dual (constrained) or primal (regularized, see also\n    :ref:`this equation <regularized-logistic-loss>`) formulation. Dual formulation\n    is only implemented for l2 penalty with liblinear solver. Prefer dual=False when\n    n_samples > n_features."
          },
          "penalty": {
            "type": "{'l1', 'l2', 'elasticnet'}, default='l2'",
            "description": "Specify the norm of the penalty:\n\n    - `'l2'`: add a L2 penalty term (used by default);\n    - `'l1'`: add a L1 penalty term;\n    - `'elasticnet'`: both L1 and L2 penalty terms are added.\n\n    .. warning::\n       Some penalties may not work with some solvers. See the parameter\n       `solver` below, to know the compatibility between the penalty and\n       solver."
          },
          "scoring": {
            "type": "str or callable, default=None",
            "description": "A string (see :ref:`scoring_parameter`) or\n    a scorer callable object / function with signature\n    ``scorer(estimator, X, y)``. For a list of scoring functions\n    that can be used, look at :mod:`sklearn.metrics`. The\n    default scoring option used is 'accuracy'."
          },
          "solver": {
            "type": "{'lbfgs', 'liblinear', 'newton-cg', 'newton-cholesky', 'sag', 'saga'},             default='lbfgs'",
            "description": "Algorithm to use in the optimization problem. Default is 'lbfgs'.\n    To choose a solver, you might want to consider the following aspects:\n\n    - For small datasets, 'liblinear' is a good choice, whereas 'sag'\n      and 'saga' are faster for large ones;\n    - For multiclass problems, all solvers except 'liblinear' minimize the full\n      multinomial loss;\n    - 'liblinear' might be slower in :class:`LogisticRegressionCV`\n      because it does not handle warm-starting.\n    - 'liblinear' can only handle binary classification by default. To apply a\n      one-versus-rest scheme for the multiclass setting one can wrap it with the\n      :class:`~sklearn.multiclass.OneVsRestClassifier`.\n    - 'newton-cholesky' is a good choice for\n      `n_samples` >> `n_features * n_classes`, especially with one-hot encoded\n      categorical features with rare categories. Be aware that the memory usage\n      of this solver has a quadratic dependency on `n_features * n_classes`\n      because it explicitly computes the full Hessian matrix.\n\n    .. warning::\n       The choice of the algorithm depends on the penalty chosen and on\n       (multinomial) multiclass support:\n\n       ================= ============================== ======================\n       solver            penalty                        multinomial multiclass\n       ================= ============================== ======================\n       'lbfgs'           'l2'                           yes\n       'liblinear'       'l1', 'l2'                     no\n       'newton-cg'       'l2'                           yes\n       'newton-cholesky' 'l2',                          no\n       'sag'             'l2',                          yes\n       'saga'            'elasticnet', 'l1', 'l2'       yes\n       ================= ============================== ======================\n\n    .. note::\n       'sag' and 'saga' fast convergence is only guaranteed on features\n       with approximately the same scale. You can preprocess the data with\n       a scaler from :mod:`sklearn.preprocessing`.\n\n    .. versionadded:: 0.17\n       Stochastic Average Gradient descent solver.\n    .. versionadded:: 0.19\n       SAGA solver.\n    .. versionadded:: 1.2\n       newton-cholesky solver."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "Tolerance for stopping criteria."
          },
          "max_iter": {
            "type": "int, default=100",
            "description": "Maximum number of iterations of the optimization algorithm."
          },
          "class_weight": {
            "type": "dict or 'balanced', default=None",
            "description": "Weights associated with classes in the form ``{class_label: weight}``.\n    If not given, all classes are supposed to have weight one.\n\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``.\n\n    Note that these weights will be multiplied with sample_weight (passed\n    through the fit method) if sample_weight is specified.\n\n    .. versionadded:: 0.17\n       class_weight == 'balanced'"
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "Number of CPU cores used during the cross-validation loop.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "For the 'liblinear', 'sag' and 'lbfgs' solvers set verbose to any\n    positive number for verbosity."
          },
          "refit": {
            "type": "bool, default=True",
            "description": "If set to True, the scores are averaged across all folds, and the\n    coefs and the C that corresponds to the best score is taken, and a\n    final refit is done using these parameters.\n    Otherwise the coefs, intercepts and C that correspond to the\n    best scores across folds are averaged."
          },
          "intercept_scaling": {
            "type": "float, default=1",
            "description": "Useful only when the solver 'liblinear' is used\n    and self.fit_intercept is set to True. In this case, x becomes\n    [x, self.intercept_scaling],\n    i.e. a \"synthetic\" feature with constant value equal to\n    intercept_scaling is appended to the instance vector.\n    The intercept becomes ``intercept_scaling * synthetic_feature_weight``.\n\n    Note! the synthetic feature weight is subject to l1/l2 regularization\n    as all other features.\n    To lessen the effect of regularization on synthetic feature weight\n    (and therefore on the intercept) intercept_scaling has to be increased."
          },
          "multi_class": {
            "type": "{'auto, 'ovr', 'multinomial'}, default='auto'",
            "description": "If the option chosen is 'ovr', then a binary problem is fit for each\n    label. For 'multinomial' the loss minimised is the multinomial loss fit\n    across the entire probability distribution, *even when the data is\n    binary*. 'multinomial' is unavailable when solver='liblinear'.\n    'auto' selects 'ovr' if the data is binary, or if solver='liblinear',\n    and otherwise selects 'multinomial'.\n\n    .. versionadded:: 0.18\n       Stochastic Average Gradient descent solver for 'multinomial' case.\n    .. versionchanged:: 0.22\n        Default changed from 'ovr' to 'auto' in 0.22.\n    .. deprecated:: 1.5\n       ``multi_class`` was deprecated in version 1.5 and will be removed in 1.7.\n       From then on, the recommended 'multinomial' will always be used for\n       `n_classes >= 3`.\n       Solvers that do not support 'multinomial' will raise an error.\n       Use `sklearn.multiclass.OneVsRestClassifier(LogisticRegressionCV())` if you\n       still want to use OvR."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used when `solver='sag'`, 'saga' or 'liblinear' to shuffle the data.\n    Note that this only applies to the solver and not the cross-validation\n    generator. See :term:`Glossary <random_state>` for details."
          },
          "l1_ratios": {
            "type": "list of float, default=None",
            "description": "The list of Elastic-Net mixing parameter, with ``0 <= l1_ratio <= 1``.\n    Only used if ``penalty='elasticnet'``. A value of 0 is equivalent to\n    using ``penalty='l2'``, while 1 is equivalent to using\n    ``penalty='l1'``. For ``0 < l1_ratio <1``, the penalty is a combination\n    of L1 and L2.\n\nAttributes\n----------"
          },
          "classes_": {
            "type": "ndarray of shape (n_classes, )",
            "description": "A list of class labels known to the classifier."
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features) or (n_classes, n_features)",
            "description": "Coefficient of the features in the decision function.\n\n    `coef_` is of shape (1, n_features) when the given problem\n    is binary."
          },
          "intercept_": {
            "type": "ndarray of shape (1,) or (n_classes,)",
            "description": "Intercept (a.k.a. bias) added to the decision function.\n\n    If `fit_intercept` is set to False, the intercept is set to zero.\n    `intercept_` is of shape(1,) when the problem is binary."
          },
          "Cs_": {
            "type": "ndarray of shape (n_cs)",
            "description": "Array of C i.e. inverse of regularization parameter values used\n    for cross-validation."
          },
          "l1_ratios_": {
            "type": "ndarray of shape (n_l1_ratios)",
            "description": "Array of l1_ratios used for cross-validation. If no l1_ratio is used\n    (i.e. penalty is not 'elasticnet'), this is set to ``[None]``"
          },
          "coefs_paths_": {
            "type": "ndarray of shape (n_folds, n_cs, n_features) or                    (n_folds, n_cs, n_features + 1)",
            "description": "dict with classes as the keys, and the path of coefficients obtained\n    during cross-validating across each fold and then across each Cs\n    after doing an OvR for the corresponding class as values.\n    If the 'multi_class' option is set to 'multinomial', then\n    the coefs_paths are the coefficients corresponding to each class.\n    Each dict value has shape ``(n_folds, n_cs, n_features)`` or\n    ``(n_folds, n_cs, n_features + 1)`` depending on whether the\n    intercept is fit or not. If ``penalty='elasticnet'``, the shape is\n    ``(n_folds, n_cs, n_l1_ratios_, n_features)`` or\n    ``(n_folds, n_cs, n_l1_ratios_, n_features + 1)``."
          },
          "scores_": {
            "type": "dict",
            "description": "dict with classes as the keys, and the values as the\n    grid of scores obtained during cross-validating each fold, after doing\n    an OvR for the corresponding class. If the 'multi_class' option\n    given is 'multinomial' then the same scores are repeated across\n    all classes, since this is the multinomial class. Each dict value\n    has shape ``(n_folds, n_cs)`` or ``(n_folds, n_cs, n_l1_ratios)`` if\n    ``penalty='elasticnet'``."
          },
          "C_": {
            "type": "ndarray of shape (n_classes,) or (n_classes - 1,)",
            "description": "Array of C that maps to the best scores across every class. If refit is\n    set to False, then for each class, the best C is the average of the\n    C's that correspond to the best scores for each fold.\n    `C_` is of shape(n_classes,) when the problem is binary."
          },
          "l1_ratio_": {
            "type": "ndarray of shape (n_classes,) or (n_classes - 1,)",
            "description": "Array of l1_ratio that maps to the best scores across every class. If\n    refit is set to False, then for each class, the best l1_ratio is the\n    average of the l1_ratio's that correspond to the best scores for each\n    fold.  `l1_ratio_` is of shape(n_classes,) when the problem is binary."
          },
          "n_iter_": {
            "type": "ndarray of shape (n_classes, n_folds, n_cs) or (1, n_folds, n_cs)",
            "description": "Actual number of iterations for all classes, folds and Cs.\n    In the binary or multinomial cases, the first dimension is equal to 1.\n    If ``penalty='elasticnet'``, the shape is ``(n_classes, n_folds,\n    n_cs, n_l1_ratios)`` or ``(1, n_folds, n_cs, n_l1_ratios)``."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "LogisticRegression : Logistic regression without tuning the\n    hyperparameter `C`.",
        "notes": "",
        "examples": ">>> from sklearn.datasets import load_iris\n>>> from sklearn.linear_model import LogisticRegressionCV\n>>> X, y = load_iris(return_X_y=True)\n>>> clf = LogisticRegressionCV(cv=5, random_state=0).fit(X, y)\n>>> clf.predict(X[:2, :])\narray([0, 0])\n>>> clf.predict_proba(X[:2, :]).shape\n(2, 3)\n>>> clf.score(X, y)\n0.98..."
      }
    },
    {
      "name": "MultiTaskElasticNet",
      "signature": "MultiTaskElasticNet(alpha=1.0, *, l1_ratio=0.5, fit_intercept=True, copy_X=True, max_iter=1000, tol=0.0001, warm_start=False, random_state=None, selection='cyclic')",
      "docstring": {
        "description": "Multi-task ElasticNet model trained with L1/L2 mixed-norm as regularizer.\n\nThe optimization objective for MultiTaskElasticNet is::\n\n    (1 / (2 * n_samples)) * ||Y - XW||_Fro^2\n    + alpha * l1_ratio * ||W||_21\n    + 0.5 * alpha * (1 - l1_ratio) * ||W||_Fro^2\n\nWhere::\n\n    ||W||_21 = sum_i sqrt(sum_j W_ij ^ 2)\n\ni.e. the sum of norms of each row.\n\nRead more in the :ref:`User Guide <multi_task_elastic_net>`.",
        "parameters": {
          "alpha": {
            "type": "float, default=1.0",
            "description": "Constant that multiplies the L1/L2 term. Defaults to 1.0."
          },
          "l1_ratio": {
            "type": "float, default=0.5",
            "description": "The ElasticNet mixing parameter, with 0 < l1_ratio <= 1.\n    For l1_ratio = 1 the penalty is an L1/L2 penalty. For l1_ratio = 0 it\n    is an L2 penalty.\n    For ``0 < l1_ratio < 1``, the penalty is a combination of L1/L2 and L2."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of iterations."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "The tolerance for the optimization: if the updates are\n    smaller than ``tol``, the optimization code checks the\n    dual gap for optimality and continues until it is smaller\n    than ``tol``."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to ``True``, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution.\n    See :term:`the Glossary <warm_start>`."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "The seed of the pseudo random number generator that selects a random\n    feature to update. Used when ``selection`` == 'random'.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "selection": {
            "type": "{'cyclic', 'random'}, default='cyclic'",
            "description": "If set to 'random', a random coefficient is updated every iteration\n    rather than looping over features sequentially by default. This\n    (setting to 'random') often leads to significantly faster convergence\n    especially when tol is higher than 1e-4.\n\nAttributes\n----------"
          },
          "intercept_": {
            "type": "ndarray of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "coef_": {
            "type": "ndarray of shape (n_targets, n_features)",
            "description": "Parameter vector (W in the cost function formula). If a 1D y is\n    passed in at fit (non multi-task usage), ``coef_`` is then a 1D array.\n    Note that ``coef_`` stores the transpose of ``W``, ``W.T``."
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations run by the coordinate descent solver to reach\n    the specified tolerance."
          },
          "dual_gap_": {
            "type": "float",
            "description": "The dual gaps at the end of the optimization."
          },
          "eps_": {
            "type": "float",
            "description": "The tolerance scaled scaled by the variance of the target `y`."
          },
          "sparse_coef_": {
            "type": "sparse matrix of shape (n_features,) or             (n_targets, n_features)",
            "description": "Sparse representation of the `coef_`."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "MultiTaskElasticNetCV : Multi-task L1/L2 ElasticNet with built-in\n    cross-validation.\nElasticNet : Linear regression with combined L1 and L2 priors as regularizer.\nMultiTaskLasso : Multi-task Lasso model trained with L1/L2\n    mixed-norm as regularizer.",
        "notes": "The algorithm used to fit the model is coordinate descent.\n\nTo avoid unnecessary memory duplication the X and y arguments of the fit\nmethod should be directly passed as Fortran-contiguous numpy arrays.",
        "examples": ">>> from sklearn import linear_model\n>>> clf = linear_model.MultiTaskElasticNet(alpha=0.1)\n>>> clf.fit([[0,0], [1, 1], [2, 2]], [[0, 0], [1, 1], [2, 2]])\nMultiTaskElasticNet(alpha=0.1)\n>>> print(clf.coef_)\n[[0.45663524 0.45612256]\n [0.45663524 0.45612256]]\n>>> print(clf.intercept_)\n[0.0872422 0.0872422]"
      }
    },
    {
      "name": "MultiTaskElasticNetCV",
      "signature": "MultiTaskElasticNetCV(*, l1_ratio=0.5, eps=0.001, n_alphas=100, alphas=None, fit_intercept=True, max_iter=1000, tol=0.0001, cv=None, copy_X=True, verbose=0, n_jobs=None, random_state=None, selection='cyclic')",
      "docstring": {
        "description": "Multi-task L1/L2 ElasticNet with built-in cross-validation.\n\nSee glossary entry for :term:`cross-validation estimator`.\n\nThe optimization objective for MultiTaskElasticNet is::\n\n    (1 / (2 * n_samples)) * ||Y - XW||^Fro_2\n    + alpha * l1_ratio * ||W||_21\n    + 0.5 * alpha * (1 - l1_ratio) * ||W||_Fro^2\n\nWhere::\n\n    ||W||_21 = \\sum_i \\sqrt{\\sum_j w_{ij}^2}\n\ni.e. the sum of norm of each row.\n\nRead more in the :ref:`User Guide <multi_task_elastic_net>`.\n\n.. versionadded:: 0.15",
        "parameters": {
          "l1_ratio": {
            "type": "float or list of float, default=0.5",
            "description": "The ElasticNet mixing parameter, with 0 < l1_ratio <= 1.\n    For l1_ratio = 1 the penalty is an L1/L2 penalty. For l1_ratio = 0 it\n    is an L2 penalty.\n    For ``0 < l1_ratio < 1``, the penalty is a combination of L1/L2 and L2.\n    This parameter can be a list, in which case the different\n    values are tested by cross-validation and the one giving the best\n    prediction score is used. Note that a good choice of list of\n    values for l1_ratio is often to put more values close to 1\n    (i.e. Lasso) and less close to 0 (i.e. Ridge), as in ``[.1, .5, .7,\n    .9, .95, .99, 1]``."
          },
          "eps": {
            "type": "float, default=1e-3",
            "description": "Length of the path. ``eps=1e-3`` means that\n    ``alpha_min / alpha_max = 1e-3``."
          },
          "n_alphas": {
            "type": "int, default=100",
            "description": "Number of alphas along the regularization path."
          },
          "alphas": {
            "type": "array-like, default=None",
            "description": "List of alphas where to compute the models.\n    If not provided, set automatically."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of iterations."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "The tolerance for the optimization: if the updates are\n    smaller than ``tol``, the optimization code checks the\n    dual gap for optimality and continues until it is smaller\n    than ``tol``."
          },
          "cv": {
            "type": "int, cross-validation generator or iterable, default=None",
            "description": "Determines the cross-validation splitting strategy.\n    Possible inputs for cv are:\n\n    - None, to use the default 5-fold cross-validation,\n    - int, to specify the number of folds.\n    - :term:`CV splitter`,\n    - An iterable yielding (train, test) splits as arrays of indices.\n\n    For int/None inputs, :class:`~sklearn.model_selection.KFold` is used.\n\n    Refer :ref:`User Guide <cross_validation>` for the various\n    cross-validation strategies that can be used here.\n\n    .. versionchanged:: 0.22\n        ``cv`` default value if None changed from 3-fold to 5-fold."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten."
          },
          "verbose": {
            "type": "bool or int, default=0",
            "description": "Amount of verbosity."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "Number of CPUs to use during the cross validation. Note that this is\n    used only if multiple values for l1_ratio are given.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "The seed of the pseudo random number generator that selects a random\n    feature to update. Used when ``selection`` == 'random'.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "selection": {
            "type": "{'cyclic', 'random'}, default='cyclic'",
            "description": "If set to 'random', a random coefficient is updated every iteration\n    rather than looping over features sequentially by default. This\n    (setting to 'random') often leads to significantly faster convergence\n    especially when tol is higher than 1e-4.\n\nAttributes\n----------"
          },
          "intercept_": {
            "type": "ndarray of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "coef_": {
            "type": "ndarray of shape (n_targets, n_features)",
            "description": "Parameter vector (W in the cost function formula).\n    Note that ``coef_`` stores the transpose of ``W``, ``W.T``."
          },
          "alpha_": {
            "type": "float",
            "description": "The amount of penalization chosen by cross validation."
          },
          "mse_path_": {
            "type": "ndarray of shape (n_alphas, n_folds) or                 (n_l1_ratio, n_alphas, n_folds)",
            "description": "Mean square error for the test set on each fold, varying alpha."
          },
          "alphas_": {
            "type": "ndarray of shape (n_alphas,) or (n_l1_ratio, n_alphas)",
            "description": "The grid of alphas used for fitting, for each l1_ratio."
          },
          "l1_ratio_": {
            "type": "float",
            "description": "Best l1_ratio obtained by cross-validation."
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations run by the coordinate descent solver to reach\n    the specified tolerance for the optimal alpha."
          },
          "dual_gap_": {
            "type": "float",
            "description": "The dual gap at the end of the optimization for the optimal alpha."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "MultiTaskElasticNet : Multi-task L1/L2 ElasticNet with built-in cross-validation.\nElasticNetCV : Elastic net model with best model selection by\n    cross-validation.\nMultiTaskLassoCV : Multi-task Lasso model trained with L1 norm\n    as regularizer and built-in cross-validation.",
        "notes": "The algorithm used to fit the model is coordinate descent.\n\nIn `fit`, once the best parameters `l1_ratio` and `alpha` are found through\ncross-validation, the model is fit again using the entire training set.\n\nTo avoid unnecessary memory duplication the `X` and `y` arguments of the\n`fit` method should be directly passed as Fortran-contiguous numpy arrays.",
        "examples": ">>> from sklearn import linear_model\n>>> clf = linear_model.MultiTaskElasticNetCV(cv=3)\n>>> clf.fit([[0,0], [1, 1], [2, 2]],\n...         [[0, 0], [1, 1], [2, 2]])\nMultiTaskElasticNetCV(cv=3)\n>>> print(clf.coef_)\n[[0.52875032 0.46958558]\n [0.52875032 0.46958558]]\n>>> print(clf.intercept_)\n[0.00166409 0.00166409]"
      }
    },
    {
      "name": "MultiTaskLasso",
      "signature": "MultiTaskLasso(alpha=1.0, *, fit_intercept=True, copy_X=True, max_iter=1000, tol=0.0001, warm_start=False, random_state=None, selection='cyclic')",
      "docstring": {
        "description": "Multi-task Lasso model trained with L1/L2 mixed-norm as regularizer.\n\nThe optimization objective for Lasso is::\n\n    (1 / (2 * n_samples)) * ||Y - XW||^2_Fro + alpha * ||W||_21\n\nWhere::\n\n    ||W||_21 = \\sum_i \\sqrt{\\sum_j w_{ij}^2}\n\ni.e. the sum of norm of each row.\n\nRead more in the :ref:`User Guide <multi_task_lasso>`.",
        "parameters": {
          "alpha": {
            "type": "float, default=1.0",
            "description": "Constant that multiplies the L1/L2 term. Defaults to 1.0."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of iterations."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "The tolerance for the optimization: if the updates are\n    smaller than ``tol``, the optimization code checks the\n    dual gap for optimality and continues until it is smaller\n    than ``tol``."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to ``True``, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution.\n    See :term:`the Glossary <warm_start>`."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "The seed of the pseudo random number generator that selects a random\n    feature to update. Used when ``selection`` == 'random'.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "selection": {
            "type": "{'cyclic', 'random'}, default='cyclic'",
            "description": "If set to 'random', a random coefficient is updated every iteration\n    rather than looping over features sequentially by default. This\n    (setting to 'random') often leads to significantly faster convergence\n    especially when tol is higher than 1e-4.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (n_targets, n_features)",
            "description": "Parameter vector (W in the cost function formula).\n    Note that ``coef_`` stores the transpose of ``W``, ``W.T``."
          },
          "intercept_": {
            "type": "ndarray of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations run by the coordinate descent solver to reach\n    the specified tolerance."
          },
          "dual_gap_": {
            "type": "ndarray of shape (n_alphas,)",
            "description": "The dual gaps at the end of the optimization for each alpha."
          },
          "eps_": {
            "type": "float",
            "description": "The tolerance scaled scaled by the variance of the target `y`."
          },
          "sparse_coef_": {
            "type": "sparse matrix of shape (n_features,) or             (n_targets, n_features)",
            "description": "Sparse representation of the `coef_`."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "Lasso: Linear Model trained with L1 prior as regularizer (aka the Lasso).\nMultiTaskLassoCV: Multi-task L1 regularized linear model with built-in\n    cross-validation.\nMultiTaskElasticNetCV: Multi-task L1/L2 ElasticNet with built-in cross-validation.",
        "notes": "The algorithm used to fit the model is coordinate descent.\n\nTo avoid unnecessary memory duplication the X and y arguments of the fit\nmethod should be directly passed as Fortran-contiguous numpy arrays.",
        "examples": ">>> from sklearn import linear_model\n>>> clf = linear_model.MultiTaskLasso(alpha=0.1)\n>>> clf.fit([[0, 1], [1, 2], [2, 4]], [[0, 0], [1, 1], [2, 3]])\nMultiTaskLasso(alpha=0.1)\n>>> print(clf.coef_)\n[[0.         0.60809415]\n[0.         0.94592424]]\n>>> print(clf.intercept_)\n[-0.41888636 -0.87382323]"
      }
    },
    {
      "name": "MultiTaskLassoCV",
      "signature": "MultiTaskLassoCV(*, eps=0.001, n_alphas=100, alphas=None, fit_intercept=True, max_iter=1000, tol=0.0001, copy_X=True, cv=None, verbose=False, n_jobs=None, random_state=None, selection='cyclic')",
      "docstring": {
        "description": "Multi-task Lasso model trained with L1/L2 mixed-norm as regularizer.\n\nSee glossary entry for :term:`cross-validation estimator`.\n\nThe optimization objective for MultiTaskLasso is::\n\n    (1 / (2 * n_samples)) * ||Y - XW||^Fro_2 + alpha * ||W||_21\n\nWhere::\n\n    ||W||_21 = \\sum_i \\sqrt{\\sum_j w_{ij}^2}\n\ni.e. the sum of norm of each row.\n\nRead more in the :ref:`User Guide <multi_task_lasso>`.\n\n.. versionadded:: 0.15",
        "parameters": {
          "eps": {
            "type": "float, default=1e-3",
            "description": "Length of the path. ``eps=1e-3`` means that\n    ``alpha_min / alpha_max = 1e-3``."
          },
          "n_alphas": {
            "type": "int, default=100",
            "description": "Number of alphas along the regularization path."
          },
          "alphas": {
            "type": "array-like, default=None",
            "description": "List of alphas where to compute the models.\n    If not provided, set automatically."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of iterations."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "The tolerance for the optimization: if the updates are\n    smaller than ``tol``, the optimization code checks the\n    dual gap for optimality and continues until it is smaller\n    than ``tol``."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten."
          },
          "cv": {
            "type": "int, cross-validation generator or iterable, default=None",
            "description": "Determines the cross-validation splitting strategy.\n    Possible inputs for cv are:\n\n    - None, to use the default 5-fold cross-validation,\n    - int, to specify the number of folds.\n    - :term:`CV splitter`,\n    - An iterable yielding (train, test) splits as arrays of indices.\n\n    For int/None inputs, :class:`~sklearn.model_selection.KFold` is used.\n\n    Refer :ref:`User Guide <cross_validation>` for the various\n    cross-validation strategies that can be used here.\n\n    .. versionchanged:: 0.22\n        ``cv`` default value if None changed from 3-fold to 5-fold."
          },
          "verbose": {
            "type": "bool or int, default=False",
            "description": "Amount of verbosity."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "Number of CPUs to use during the cross validation. Note that this is\n    used only if multiple values for l1_ratio are given.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "The seed of the pseudo random number generator that selects a random\n    feature to update. Used when ``selection`` == 'random'.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "selection": {
            "type": "{'cyclic', 'random'}, default='cyclic'",
            "description": "If set to 'random', a random coefficient is updated every iteration\n    rather than looping over features sequentially by default. This\n    (setting to 'random') often leads to significantly faster convergence\n    especially when tol is higher than 1e-4.\n\nAttributes\n----------"
          },
          "intercept_": {
            "type": "ndarray of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "coef_": {
            "type": "ndarray of shape (n_targets, n_features)",
            "description": "Parameter vector (W in the cost function formula).\n    Note that ``coef_`` stores the transpose of ``W``, ``W.T``."
          },
          "alpha_": {
            "type": "float",
            "description": "The amount of penalization chosen by cross validation."
          },
          "mse_path_": {
            "type": "ndarray of shape (n_alphas, n_folds)",
            "description": "Mean square error for the test set on each fold, varying alpha."
          },
          "alphas_": {
            "type": "ndarray of shape (n_alphas,)",
            "description": "The grid of alphas used for fitting."
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations run by the coordinate descent solver to reach\n    the specified tolerance for the optimal alpha."
          },
          "dual_gap_": {
            "type": "float",
            "description": "The dual gap at the end of the optimization for the optimal alpha."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "MultiTaskElasticNet : Multi-task ElasticNet model trained with L1/L2\n    mixed-norm as regularizer.\nElasticNetCV : Elastic net model with best model selection by\n    cross-validation.\nMultiTaskElasticNetCV : Multi-task L1/L2 ElasticNet with built-in\n    cross-validation.",
        "notes": "The algorithm used to fit the model is coordinate descent.\n\nIn `fit`, once the best parameter `alpha` is found through\ncross-validation, the model is fit again using the entire training set.\n\nTo avoid unnecessary memory duplication the `X` and `y` arguments of the\n`fit` method should be directly passed as Fortran-contiguous numpy arrays.",
        "examples": ">>> from sklearn.linear_model import MultiTaskLassoCV\n>>> from sklearn.datasets import make_regression\n>>> from sklearn.metrics import r2_score\n>>> X, y = make_regression(n_targets=2, noise=4, random_state=0)\n>>> reg = MultiTaskLassoCV(cv=5, random_state=0).fit(X, y)\n>>> r2_score(y, reg.predict(X))\n0.9994...\n>>> reg.alpha_\nnp.float64(0.5713...)\n>>> reg.predict(X[:1,])\narray([[153.7971...,  94.9015...]])"
      }
    },
    {
      "name": "OrthogonalMatchingPursuit",
      "signature": "OrthogonalMatchingPursuit(*, n_nonzero_coefs=None, tol=None, fit_intercept=True, precompute='auto')",
      "docstring": {
        "description": "Orthogonal Matching Pursuit model (OMP).\n\nRead more in the :ref:`User Guide <omp>`.",
        "parameters": {
          "n_nonzero_coefs": {
            "type": "int, default=None",
            "description": "Desired number of non-zero entries in the solution. Ignored if `tol` is set.\n    When `None` and `tol` is also `None`, this value is either set to 10% of\n    `n_features` or 1, whichever is greater."
          },
          "tol": {
            "type": "float, default=None",
            "description": "Maximum squared norm of the residual. If not None, overrides n_nonzero_coefs."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "precompute": {
            "type": "'auto' or bool, default='auto'",
            "description": "Whether to use a precomputed Gram and Xy matrix to speed up\n    calculations. Improves performance when :term:`n_targets` or\n    :term:`n_samples` is very large. Note that if you already have such\n    matrices, you can pass them directly to the fit method.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (n_features,) or (n_targets, n_features)",
            "description": "Parameter vector (w in the formula)."
          },
          "intercept_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "n_iter_": {
            "type": "int or array-like",
            "description": "Number of active features across every target."
          },
          "n_nonzero_coefs_": {
            "type": "int or None",
            "description": "The number of non-zero coefficients in the solution or `None` when `tol` is\n    set. If `n_nonzero_coefs` is None and `tol` is None this value is either set\n    to 10% of `n_features` or 1, whichever is greater."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "orthogonal_mp : Solves n_targets Orthogonal Matching Pursuit problems.\northogonal_mp_gram :  Solves n_targets Orthogonal Matching Pursuit\n    problems using only the Gram matrix X.T * X and the product X.T * y.\nlars_path : Compute Least Angle Regression or Lasso path using LARS algorithm.\nLars : Least Angle Regression model a.k.a. LAR.\nLassoLars : Lasso model fit with Least Angle Regression a.k.a. Lars.\nsklearn.decomposition.sparse_encode : Generic sparse coding.\n    Each column of the result is the solution to a Lasso problem.\nOrthogonalMatchingPursuitCV : Cross-validated\n    Orthogonal Matching Pursuit model (OMP).",
        "notes": "Orthogonal matching pursuit was introduced in G. Mallat, Z. Zhang,\nMatching pursuits with time-frequency dictionaries, IEEE Transactions on\nSignal Processing, Vol. 41, No. 12. (December 1993), pp. 3397-3415.\n(https://www.di.ens.fr/~mallat/papiers/MallatPursuit93.pdf)\n\nThis implementation is based on Rubinstein, R., Zibulevsky, M. and Elad,\nM., Efficient Implementation of the K-SVD Algorithm using Batch Orthogonal\nMatching Pursuit Technical Report - CS Technion, April 2008.\nhttps://www.cs.technion.ac.il/~ronrubin/Publications/KSVD-OMP-v2.pdf",
        "examples": ">>> from sklearn.linear_model import OrthogonalMatchingPursuit\n>>> from sklearn.datasets import make_regression\n>>> X, y = make_regression(noise=4, random_state=0)\n>>> reg = OrthogonalMatchingPursuit().fit(X, y)\n>>> reg.score(X, y)\n0.9991...\n>>> reg.predict(X[:1,])\narray([-78.3854...])"
      }
    },
    {
      "name": "OrthogonalMatchingPursuitCV",
      "signature": "OrthogonalMatchingPursuitCV(*, copy=True, fit_intercept=True, max_iter=None, cv=None, n_jobs=None, verbose=False)",
      "docstring": {
        "description": "Cross-validated Orthogonal Matching Pursuit model (OMP).\n\nSee glossary entry for :term:`cross-validation estimator`.\n\nRead more in the :ref:`User Guide <omp>`.",
        "parameters": {
          "copy": {
            "type": "bool, default=True",
            "description": "Whether the design matrix X must be copied by the algorithm. A false\n    value is only helpful if X is already Fortran-ordered, otherwise a\n    copy is made anyway."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "max_iter": {
            "type": "int, default=None",
            "description": "Maximum numbers of iterations to perform, therefore maximum features\n    to include. 10% of ``n_features`` but at least 5 if available."
          },
          "cv": {
            "type": "int, cross-validation generator or iterable, default=None",
            "description": "Determines the cross-validation splitting strategy.\n    Possible inputs for cv are:\n\n    - None, to use the default 5-fold cross-validation,\n    - integer, to specify the number of folds.\n    - :term:`CV splitter`,\n    - An iterable yielding (train, test) splits as arrays of indices.\n\n    For integer/None inputs, :class:`~sklearn.model_selection.KFold` is used.\n\n    Refer :ref:`User Guide <cross_validation>` for the various\n    cross-validation strategies that can be used here.\n\n    .. versionchanged:: 0.22\n        ``cv`` default value if None changed from 3-fold to 5-fold."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "Number of CPUs to use during the cross validation.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "verbose": {
            "type": "bool or int, default=False",
            "description": "Sets the verbosity amount.\n\nAttributes\n----------"
          },
          "intercept_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "coef_": {
            "type": "ndarray of shape (n_features,) or (n_targets, n_features)",
            "description": "Parameter vector (w in the problem formulation)."
          },
          "n_nonzero_coefs_": {
            "type": "int",
            "description": "Estimated number of non-zero coefficients giving the best mean squared\n    error over the cross-validation folds."
          },
          "n_iter_": {
            "type": "int or array-like",
            "description": "Number of active features across every target for the model refit with\n    the best hyperparameters got by cross-validating across all folds."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "orthogonal_mp : Solves n_targets Orthogonal Matching Pursuit problems.\northogonal_mp_gram : Solves n_targets Orthogonal Matching Pursuit\n    problems using only the Gram matrix X.T * X and the product X.T * y.\nlars_path : Compute Least Angle Regression or Lasso path using LARS algorithm.\nLars : Least Angle Regression model a.k.a. LAR.\nLassoLars : Lasso model fit with Least Angle Regression a.k.a. Lars.\nOrthogonalMatchingPursuit : Orthogonal Matching Pursuit model (OMP).\nLarsCV : Cross-validated Least Angle Regression model.\nLassoLarsCV : Cross-validated Lasso model fit with Least Angle Regression.\nsklearn.decomposition.sparse_encode : Generic sparse coding.\n    Each column of the result is the solution to a Lasso problem.",
        "notes": "In `fit`, once the optimal number of non-zero coefficients is found through\ncross-validation, the model is fit again using the entire training set.",
        "examples": ">>> from sklearn.linear_model import OrthogonalMatchingPursuitCV\n>>> from sklearn.datasets import make_regression\n>>> X, y = make_regression(n_features=100, n_informative=10,\n...                        noise=4, random_state=0)\n>>> reg = OrthogonalMatchingPursuitCV(cv=5).fit(X, y)\n>>> reg.score(X, y)\n0.9991...\n>>> reg.n_nonzero_coefs_\nnp.int64(10)\n>>> reg.predict(X[:1,])\narray([-78.3854...])"
      }
    },
    {
      "name": "PassiveAggressiveClassifier",
      "signature": "PassiveAggressiveClassifier(*, C=1.0, fit_intercept=True, max_iter=1000, tol=0.001, early_stopping=False, validation_fraction=0.1, n_iter_no_change=5, shuffle=True, verbose=0, loss='hinge', n_jobs=None, random_state=None, warm_start=False, class_weight=None, average=False)",
      "docstring": {
        "description": "Passive Aggressive Classifier.\n\nRead more in the :ref:`User Guide <passive_aggressive>`.",
        "parameters": {
          "C": {
            "type": "float, default=1.0",
            "description": "Maximum step size (regularization). Defaults to 1.0."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether the intercept should be estimated or not. If False, the\n    data is assumed to be already centered."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of passes over the training data (aka epochs).\n    It only impacts the behavior in the ``fit`` method, and not the\n    :meth:`~sklearn.linear_model.PassiveAggressiveClassifier.partial_fit` method.\n\n    .. versionadded:: 0.19"
          },
          "tol": {
            "type": "float or None, default=1e-3",
            "description": "The stopping criterion. If it is not None, the iterations will stop\n    when (loss > previous_loss - tol).\n\n    .. versionadded:: 0.19"
          },
          "early_stopping": {
            "type": "bool, default=False",
            "description": "Whether to use early stopping to terminate training when validation\n    score is not improving. If set to True, it will automatically set aside\n    a stratified fraction of training data as validation and terminate\n    training when validation score is not improving by at least `tol` for\n    `n_iter_no_change` consecutive epochs.\n\n    .. versionadded:: 0.20"
          },
          "validation_fraction": {
            "type": "float, default=0.1",
            "description": "The proportion of training data to set aside as validation set for\n    early stopping. Must be between 0 and 1.\n    Only used if early_stopping is True.\n\n    .. versionadded:: 0.20"
          },
          "n_iter_no_change": {
            "type": "int, default=5",
            "description": "Number of iterations with no improvement to wait before early stopping.\n\n    .. versionadded:: 0.20"
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": "Whether or not the training data should be shuffled after each epoch."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "The verbosity level."
          },
          "loss": {
            "type": "str, default=\"hinge\"",
            "description": "The loss function to be used:\n    hinge: equivalent to PA-I in the reference paper.\n    squared_hinge: equivalent to PA-II in the reference paper."
          },
          "n_jobs": {
            "type": "int or None, default=None",
            "description": "The number of CPUs to use to do the OVA (One Versus All, for\n    multi-class problems) computation.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used to shuffle the training data, when ``shuffle`` is set to\n    ``True``. Pass an int for reproducible output across multiple\n    function calls.\n    See :term:`Glossary <random_state>`."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to True, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution.\n    See :term:`the Glossary <warm_start>`.\n\n    Repeatedly calling fit or partial_fit when warm_start is True can\n    result in a different solution than when calling fit a single time\n    because of the way the data is shuffled."
          },
          "class_weight": {
            "type": "dict, {class_label: weight} or \"balanced\" or None,             default=None",
            "description": "Preset for the class_weight fit parameter.\n\n    Weights associated with classes. If not given, all classes\n    are supposed to have weight one.\n\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``.\n\n    .. versionadded:: 0.17\n       parameter *class_weight* to automatically weight samples."
          },
          "average": {
            "type": "bool or int, default=False",
            "description": "When set to True, computes the averaged SGD weights and stores the\n    result in the ``coef_`` attribute. If set to an int greater than 1,\n    averaging will begin once the total number of samples seen reaches\n    average. So average=10 will begin averaging after seeing 10 samples.\n\n    .. versionadded:: 0.19\n       parameter *average* to use weights averaging in SGD.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features) if n_classes == 2 else             (n_classes, n_features)",
            "description": "Weights assigned to the features."
          },
          "intercept_": {
            "type": "ndarray of shape (1,) if n_classes == 2 else (n_classes,)",
            "description": "Constants in decision function."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "The actual number of iterations to reach the stopping criterion.\n    For multiclass fits, it is the maximum over every binary fit."
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,)",
            "description": "The unique classes labels."
          },
          "t_": {
            "type": "int",
            "description": "Number of weight updates performed during training.\n    Same as ``(n_iter_ * n_samples + 1)``."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "SGDClassifier : Incrementally trained logistic regression.\nPerceptron : Linear perceptron classifier.\n\nReferences\n----------\nOnline Passive-Aggressive Algorithms\n<http://jmlr.csail.mit.edu/papers/volume7/crammer06a/crammer06a.pdf>\nK. Crammer, O. Dekel, J. Keshat, S. Shalev-Shwartz, Y. Singer - JMLR (2006)",
        "notes": "",
        "examples": ">>> from sklearn.linear_model import PassiveAggressiveClassifier\n>>> from sklearn.datasets import make_classification\n>>> X, y = make_classification(n_features=4, random_state=0)\n>>> clf = PassiveAggressiveClassifier(max_iter=1000, random_state=0,\n... tol=1e-3)\n>>> clf.fit(X, y)\nPassiveAggressiveClassifier(random_state=0)\n>>> print(clf.coef_)\n[[0.26642044 0.45070924 0.67251877 0.64185414]]\n>>> print(clf.intercept_)\n[1.84127814]\n>>> print(clf.predict([[0, 0, 0, 0]]))\n[1]"
      }
    },
    {
      "name": "PassiveAggressiveRegressor",
      "signature": "PassiveAggressiveRegressor(*, C=1.0, fit_intercept=True, max_iter=1000, tol=0.001, early_stopping=False, validation_fraction=0.1, n_iter_no_change=5, shuffle=True, verbose=0, loss='epsilon_insensitive', epsilon=0.1, random_state=None, warm_start=False, average=False)",
      "docstring": {
        "description": "Passive Aggressive Regressor.\n\nRead more in the :ref:`User Guide <passive_aggressive>`.",
        "parameters": {
          "C": {
            "type": "float, default=1.0",
            "description": "Maximum step size (regularization). Defaults to 1.0."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether the intercept should be estimated or not. If False, the\n    data is assumed to be already centered. Defaults to True."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of passes over the training data (aka epochs).\n    It only impacts the behavior in the ``fit`` method, and not the\n    :meth:`~sklearn.linear_model.PassiveAggressiveRegressor.partial_fit` method.\n\n    .. versionadded:: 0.19"
          },
          "tol": {
            "type": "float or None, default=1e-3",
            "description": "The stopping criterion. If it is not None, the iterations will stop\n    when (loss > previous_loss - tol).\n\n    .. versionadded:: 0.19"
          },
          "early_stopping": {
            "type": "bool, default=False",
            "description": "Whether to use early stopping to terminate training when validation.\n    score is not improving. If set to True, it will automatically set aside\n    a fraction of training data as validation and terminate\n    training when validation score is not improving by at least tol for\n    n_iter_no_change consecutive epochs.\n\n    .. versionadded:: 0.20"
          },
          "validation_fraction": {
            "type": "float, default=0.1",
            "description": "The proportion of training data to set aside as validation set for\n    early stopping. Must be between 0 and 1.\n    Only used if early_stopping is True.\n\n    .. versionadded:: 0.20"
          },
          "n_iter_no_change": {
            "type": "int, default=5",
            "description": "Number of iterations with no improvement to wait before early stopping.\n\n    .. versionadded:: 0.20"
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": "Whether or not the training data should be shuffled after each epoch."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "The verbosity level."
          },
          "loss": {
            "type": "str, default=\"epsilon_insensitive\"",
            "description": "The loss function to be used:\n    epsilon_insensitive: equivalent to PA-I in the reference paper.\n    squared_epsilon_insensitive: equivalent to PA-II in the reference\n    paper."
          },
          "epsilon": {
            "type": "float, default=0.1",
            "description": "If the difference between the current prediction and the correct label\n    is below this threshold, the model is not updated."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used to shuffle the training data, when ``shuffle`` is set to\n    ``True``. Pass an int for reproducible output across multiple\n    function calls.\n    See :term:`Glossary <random_state>`."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to True, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution.\n    See :term:`the Glossary <warm_start>`.\n\n    Repeatedly calling fit or partial_fit when warm_start is True can\n    result in a different solution than when calling fit a single time\n    because of the way the data is shuffled."
          },
          "average": {
            "type": "bool or int, default=False",
            "description": "When set to True, computes the averaged SGD weights and stores the\n    result in the ``coef_`` attribute. If set to an int greater than 1,\n    averaging will begin once the total number of samples seen reaches\n    average. So average=10 will begin averaging after seeing 10 samples.\n\n    .. versionadded:: 0.19\n       parameter *average* to use weights averaging in SGD.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array, shape = [1, n_features] if n_classes == 2 else [n_classes,            n_features]",
            "description": "Weights assigned to the features."
          },
          "intercept_": {
            "type": "array, shape = [1] if n_classes == 2 else [n_classes]",
            "description": "Constants in decision function."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "The actual number of iterations to reach the stopping criterion."
          },
          "t_": {
            "type": "int",
            "description": "Number of weight updates performed during training.\n    Same as ``(n_iter_ * n_samples + 1)``."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "SGDRegressor : Linear model fitted by minimizing a regularized\n    empirical loss with SGD.\n\nReferences\n----------\nOnline Passive-Aggressive Algorithms\n<http://jmlr.csail.mit.edu/papers/volume7/crammer06a/crammer06a.pdf>\nK. Crammer, O. Dekel, J. Keshat, S. Shalev-Shwartz, Y. Singer - JMLR (2006).",
        "notes": "",
        "examples": ">>> from sklearn.linear_model import PassiveAggressiveRegressor\n>>> from sklearn.datasets import make_regression\n\n>>> X, y = make_regression(n_features=4, random_state=0)\n>>> regr = PassiveAggressiveRegressor(max_iter=100, random_state=0,\n... tol=1e-3)\n>>> regr.fit(X, y)\nPassiveAggressiveRegressor(max_iter=100, random_state=0)\n>>> print(regr.coef_)\n[20.48736655 34.18818427 67.59122734 87.94731329]\n>>> print(regr.intercept_)\n[-0.02306214]\n>>> print(regr.predict([[0, 0, 0, 0]]))\n[-0.02306214]"
      }
    },
    {
      "name": "Perceptron",
      "signature": "Perceptron(*, penalty=None, alpha=0.0001, l1_ratio=0.15, fit_intercept=True, max_iter=1000, tol=0.001, shuffle=True, verbose=0, eta0=1.0, n_jobs=None, random_state=0, early_stopping=False, validation_fraction=0.1, n_iter_no_change=5, class_weight=None, warm_start=False)",
      "docstring": {
        "description": "Linear perceptron classifier.\n\nThe implementation is a wrapper around :class:`~sklearn.linear_model.SGDClassifier`\nby fixing the `loss` and `learning_rate` parameters as::\n\n    SGDClassifier(loss=\"perceptron\", learning_rate=\"constant\")\n\nOther available parameters are described below and are forwarded to\n:class:`~sklearn.linear_model.SGDClassifier`.\n\nRead more in the :ref:`User Guide <perceptron>`.",
        "parameters": {
          "penalty": {
            "type": "{'l2','l1','elasticnet'}, default=None",
            "description": "The penalty (aka regularization term) to be used."
          },
          "alpha": {
            "type": "float, default=0.0001",
            "description": "Constant that multiplies the regularization term if regularization is\n    used."
          },
          "l1_ratio": {
            "type": "float, default=0.15",
            "description": "The Elastic Net mixing parameter, with `0 <= l1_ratio <= 1`.\n    `l1_ratio=0` corresponds to L2 penalty, `l1_ratio=1` to L1.\n    Only used if `penalty='elasticnet'`.\n\n    .. versionadded:: 0.24"
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether the intercept should be estimated or not. If False, the\n    data is assumed to be already centered."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of passes over the training data (aka epochs).\n    It only impacts the behavior in the ``fit`` method, and not the\n    :meth:`partial_fit` method.\n\n    .. versionadded:: 0.19"
          },
          "tol": {
            "type": "float or None, default=1e-3",
            "description": "The stopping criterion. If it is not None, the iterations will stop\n    when (loss > previous_loss - tol).\n\n    .. versionadded:: 0.19"
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": "Whether or not the training data should be shuffled after each epoch."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "The verbosity level."
          },
          "eta0": {
            "type": "float, default=1",
            "description": "Constant by which the updates are multiplied."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "The number of CPUs to use to do the OVA (One Versus All, for\n    multi-class problems) computation.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=0",
            "description": "Used to shuffle the training data, when ``shuffle`` is set to\n    ``True``. Pass an int for reproducible output across multiple\n    function calls.\n    See :term:`Glossary <random_state>`."
          },
          "early_stopping": {
            "type": "bool, default=False",
            "description": "Whether to use early stopping to terminate training when validation\n    score is not improving. If set to True, it will automatically set aside\n    a stratified fraction of training data as validation and terminate\n    training when validation score is not improving by at least `tol` for\n    `n_iter_no_change` consecutive epochs.\n\n    .. versionadded:: 0.20"
          },
          "validation_fraction": {
            "type": "float, default=0.1",
            "description": "The proportion of training data to set aside as validation set for\n    early stopping. Must be between 0 and 1.\n    Only used if early_stopping is True.\n\n    .. versionadded:: 0.20"
          },
          "n_iter_no_change": {
            "type": "int, default=5",
            "description": "Number of iterations with no improvement to wait before early stopping.\n\n    .. versionadded:: 0.20"
          },
          "class_weight": {
            "type": "dict, {class_label: weight} or \"balanced\", default=None",
            "description": "Preset for the class_weight fit parameter.\n\n    Weights associated with classes. If not given, all classes\n    are supposed to have weight one.\n\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to True, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution. See\n    :term:`the Glossary <warm_start>`.\n\nAttributes\n----------"
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,)",
            "description": "The unique classes labels."
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features) if n_classes == 2 else             (n_classes, n_features)",
            "description": "Weights assigned to the features."
          },
          "intercept_": {
            "type": "ndarray of shape (1,) if n_classes == 2 else (n_classes,)",
            "description": "Constants in decision function."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "The actual number of iterations to reach the stopping criterion.\n    For multiclass fits, it is the maximum over every binary fit."
          },
          "t_": {
            "type": "int",
            "description": "Number of weight updates performed during training.\n    Same as ``(n_iter_ * n_samples + 1)``."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "sklearn.linear_model.SGDClassifier : Linear classifiers\n    (SVM, logistic regression, etc.) with SGD training.",
        "notes": "``Perceptron`` is a classification algorithm which shares the same\nunderlying implementation with ``SGDClassifier``. In fact,\n``Perceptron()`` is equivalent to `SGDClassifier(loss=\"perceptron\",\neta0=1, learning_rate=\"constant\", penalty=None)`.\n\nReferences\n----------\nhttps://en.wikipedia.org/wiki/Perceptron and references therein.",
        "examples": ">>> from sklearn.datasets import load_digits\n>>> from sklearn.linear_model import Perceptron\n>>> X, y = load_digits(return_X_y=True)\n>>> clf = Perceptron(tol=1e-3, random_state=0)\n>>> clf.fit(X, y)\nPerceptron()\n>>> clf.score(X, y)\n0.939..."
      }
    },
    {
      "name": "PoissonRegressor",
      "signature": "PoissonRegressor(*, alpha=1.0, fit_intercept=True, solver='lbfgs', max_iter=100, tol=0.0001, warm_start=False, verbose=0)",
      "docstring": {
        "description": "Generalized Linear Model with a Poisson distribution.\n\nThis regressor uses the 'log' link function.\n\nRead more in the :ref:`User Guide <Generalized_linear_models>`.\n\n.. versionadded:: 0.23",
        "parameters": {
          "alpha": {
            "type": "float, default=1",
            "description": "Constant that multiplies the L2 penalty term and determines the\n    regularization strength. ``alpha = 0`` is equivalent to unpenalized\n    GLMs. In this case, the design matrix `X` must have full column rank\n    (no collinearities).\n    Values of `alpha` must be in the range `[0.0, inf)`."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Specifies if a constant (a.k.a. bias or intercept) should be\n    added to the linear predictor (`X @ coef + intercept`)."
          },
          "solver": {
            "type": "{'lbfgs', 'newton-cholesky'}, default='lbfgs'",
            "description": "Algorithm to use in the optimization problem:\n\n    'lbfgs'\n        Calls scipy's L-BFGS-B optimizer.\n\n    'newton-cholesky'\n        Uses Newton-Raphson steps (in arbitrary precision arithmetic equivalent to\n        iterated reweighted least squares) with an inner Cholesky based solver.\n        This solver is a good choice for `n_samples` >> `n_features`, especially\n        with one-hot encoded categorical features with rare categories. Be aware\n        that the memory usage of this solver has a quadratic dependency on\n        `n_features` because it explicitly computes the Hessian matrix.\n\n        .. versionadded:: 1.2"
          },
          "max_iter": {
            "type": "int, default=100",
            "description": "The maximal number of iterations for the solver.\n    Values must be in the range `[1, inf)`."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "Stopping criterion. For the lbfgs solver,\n    the iteration will stop when ``max{|g_j|, j = 1, ..., d} <= tol``\n    where ``g_j`` is the j-th component of the gradient (derivative) of\n    the objective function.\n    Values must be in the range `(0.0, inf)`."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "If set to ``True``, reuse the solution of the previous call to ``fit``\n    as initialization for ``coef_`` and ``intercept_`` ."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "For the lbfgs solver set verbose to any positive number for verbosity.\n    Values must be in the range `[0, inf)`.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array of shape (n_features,)",
            "description": "Estimated coefficients for the linear predictor (`X @ coef_ +\n    intercept_`) in the GLM."
          },
          "intercept_": {
            "type": "float",
            "description": "Intercept (a.k.a. bias) added to linear predictor."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "Actual number of iterations used in the solver."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "TweedieRegressor : Generalized Linear Model with a Tweedie distribution.",
        "notes": "",
        "examples": ">>> from sklearn import linear_model\n>>> clf = linear_model.PoissonRegressor()\n>>> X = [[1, 2], [2, 3], [3, 4], [4, 3]]\n>>> y = [12, 17, 22, 21]\n>>> clf.fit(X, y)\nPoissonRegressor()\n>>> clf.score(X, y)\nnp.float64(0.990...)\n>>> clf.coef_\narray([0.121..., 0.158...])\n>>> clf.intercept_\nnp.float64(2.088...)\n>>> clf.predict([[1, 1], [3, 4]])\narray([10.676..., 21.875...])"
      }
    },
    {
      "name": "QuantileRegressor",
      "signature": "QuantileRegressor(*, quantile=0.5, alpha=1.0, fit_intercept=True, solver='highs', solver_options=None)",
      "docstring": {
        "description": "Linear regression model that predicts conditional quantiles.\n\nThe linear :class:`QuantileRegressor` optimizes the pinball loss for a\ndesired `quantile` and is robust to outliers.\n\nThis model uses an L1 regularization like\n:class:`~sklearn.linear_model.Lasso`.\n\nRead more in the :ref:`User Guide <quantile_regression>`.\n\n.. versionadded:: 1.0",
        "parameters": {
          "quantile": {
            "type": "float, default=0.5",
            "description": "The quantile that the model tries to predict. It must be strictly\n    between 0 and 1. If 0.5 (default), the model predicts the 50%\n    quantile, i.e. the median."
          },
          "alpha": {
            "type": "float, default=1.0",
            "description": "Regularization constant that multiplies the L1 penalty term."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether or not to fit the intercept."
          },
          "solver": {
            "type": "{'highs-ds', 'highs-ipm', 'highs', 'interior-point',             'revised simplex'}, default='highs'",
            "description": "Method used by :func:`scipy.optimize.linprog` to solve the linear\n    programming formulation.\n\n    It is recommended to use the highs methods because\n    they are the fastest ones. Solvers \"highs-ds\", \"highs-ipm\" and \"highs\"\n    support sparse input data and, in fact, always convert to sparse csc.\n\n    From `scipy>=1.11.0`, \"interior-point\" is not available anymore.\n\n    .. versionchanged:: 1.4\n       The default of `solver` changed to `\"highs\"` in version 1.4."
          },
          "solver_options": {
            "type": "dict, default=None",
            "description": "Additional parameters passed to :func:`scipy.optimize.linprog` as\n    options. If `None` and if `solver='interior-point'`, then\n    `{\"lstsq\": True}` is passed to :func:`scipy.optimize.linprog` for the\n    sake of stability.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array of shape (n_features,)",
            "description": "Estimated coefficients for the features."
          },
          "intercept_": {
            "type": "float",
            "description": "The intercept of the model, aka bias term."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "The actual number of iterations performed by the solver."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "Lasso : The Lasso is a linear model that estimates sparse coefficients\n    with l1 regularization.\nHuberRegressor : Linear regression model that is robust to outliers.",
        "notes": "",
        "examples": ">>> from sklearn.linear_model import QuantileRegressor\n>>> import numpy as np\n>>> n_samples, n_features = 10, 2\n>>> rng = np.random.RandomState(0)\n>>> y = rng.randn(n_samples)\n>>> X = rng.randn(n_samples, n_features)\n>>> # the two following lines are optional in practice\n>>> from sklearn.utils.fixes import sp_version, parse_version\n>>> reg = QuantileRegressor(quantile=0.8).fit(X, y)\n>>> np.mean(y <= reg.predict(X))\nnp.float64(0.8)"
      }
    },
    {
      "name": "RANSACRegressor",
      "signature": "RANSACRegressor(estimator=None, *, min_samples=None, residual_threshold=None, is_data_valid=None, is_model_valid=None, max_trials=100, max_skips=inf, stop_n_inliers=inf, stop_score=inf, stop_probability=0.99, loss='absolute_error', random_state=None)",
      "docstring": {
        "description": "RANSAC (RANdom SAmple Consensus) algorithm.\n\nRANSAC is an iterative algorithm for the robust estimation of parameters\nfrom a subset of inliers from the complete data set.\n\nRead more in the :ref:`User Guide <ransac_regression>`.",
        "parameters": {
          "estimator": {
            "type": "object, default=None",
            "description": "Base estimator object which implements the following methods:\n\n    * `fit(X, y)`: Fit model to given training data and target values.\n    * `score(X, y)`: Returns the mean accuracy on the given test data,\n      which is used for the stop criterion defined by `stop_score`.\n      Additionally, the score is used to decide which of two equally\n      large consensus sets is chosen as the better one.\n    * `predict(X)`: Returns predicted values using the linear model,\n      which is used to compute residual error using loss function.\n\n    If `estimator` is None, then\n    :class:`~sklearn.linear_model.LinearRegression` is used for\n    target values of dtype float.\n\n    Note that the current implementation only supports regression\n    estimators."
          },
          "min_samples": {
            "type": "int (>= 1) or float ([0, 1]), default=None",
            "description": "Minimum number of samples chosen randomly from original data. Treated\n    as an absolute number of samples for `min_samples >= 1`, treated as a\n    relative number `ceil(min_samples * X.shape[0])` for\n    `min_samples < 1`. This is typically chosen as the minimal number of\n    samples necessary to estimate the given `estimator`. By default a\n    :class:`~sklearn.linear_model.LinearRegression` estimator is assumed and\n    `min_samples` is chosen as ``X.shape[1] + 1``. This parameter is highly\n    dependent upon the model, so if a `estimator` other than\n    :class:`~sklearn.linear_model.LinearRegression` is used, the user must\n    provide a value."
          },
          "residual_threshold": {
            "type": "float, default=None",
            "description": "Maximum residual for a data sample to be classified as an inlier.\n    By default the threshold is chosen as the MAD (median absolute\n    deviation) of the target values `y`. Points whose residuals are\n    strictly equal to the threshold are considered as inliers."
          },
          "is_data_valid": {
            "type": "callable, default=None",
            "description": "This function is called with the randomly selected data before the\n    model is fitted to it: `is_data_valid(X, y)`. If its return value is\n    False the current randomly chosen sub-sample is skipped."
          },
          "is_model_valid": {
            "type": "callable, default=None",
            "description": "This function is called with the estimated model and the randomly\n    selected data: `is_model_valid(model, X, y)`. If its return value is\n    False the current randomly chosen sub-sample is skipped.\n    Rejecting samples with this function is computationally costlier than\n    with `is_data_valid`. `is_model_valid` should therefore only be used if\n    the estimated model is needed for making the rejection decision."
          },
          "max_trials": {
            "type": "int, default=100",
            "description": "Maximum number of iterations for random sample selection."
          },
          "max_skips": {
            "type": "int, default=np.inf",
            "description": "Maximum number of iterations that can be skipped due to finding zero\n    inliers or invalid data defined by ``is_data_valid`` or invalid models\n    defined by ``is_model_valid``.\n\n    .. versionadded:: 0.19"
          },
          "stop_n_inliers": {
            "type": "int, default=np.inf",
            "description": "Stop iteration if at least this number of inliers are found."
          },
          "stop_score": {
            "type": "float, default=np.inf",
            "description": "Stop iteration if score is greater equal than this threshold."
          },
          "stop_probability": {
            "type": "float in range [0, 1], default=0.99",
            "description": "RANSAC iteration stops if at least one outlier-free set of the training\n    data is sampled in RANSAC. This requires to generate at least N\n    samples (iterations)::\n\n        N >= log(1 - probability) / log(1 - e**m)\n\n    where the probability (confidence) is typically set to high value such\n    as 0.99 (the default) and e is the current fraction of inliers w.r.t.\n    the total number of samples."
          },
          "loss": {
            "type": "str, callable, default='absolute_error'",
            "description": "String inputs, 'absolute_error' and 'squared_error' are supported which\n    find the absolute error and squared error per sample respectively.\n\n    If ``loss`` is a callable, then it should be a function that takes\n    two arrays as inputs, the true and predicted value and returns a 1-D\n    array with the i-th value of the array corresponding to the loss\n    on ``X[i]``.\n\n    If the loss on a sample is greater than the ``residual_threshold``,\n    then this sample is classified as an outlier.\n\n    .. versionadded:: 0.18"
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "The generator used to initialize the centers.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`.\n\nAttributes\n----------"
          },
          "estimator_": {
            "type": "object",
            "description": "Final model fitted on the inliers predicted by the \"best\" model found\n    during RANSAC sampling (copy of the `estimator` object)."
          },
          "n_trials_": {
            "type": "int",
            "description": "Number of random selection trials until one of the stop criteria is\n    met. It is always ``<= max_trials``."
          },
          "inlier_mask_": {
            "type": "bool array of shape [n_samples]",
            "description": "Boolean mask of inliers classified as ``True``."
          },
          "n_skips_no_inliers_": {
            "type": "int",
            "description": "Number of iterations skipped due to finding zero inliers.\n\n    .. versionadded:: 0.19"
          },
          "n_skips_invalid_data_": {
            "type": "int",
            "description": "Number of iterations skipped due to invalid data defined by\n    ``is_data_valid``.\n\n    .. versionadded:: 0.19"
          },
          "n_skips_invalid_model_": {
            "type": "int",
            "description": "Number of iterations skipped due to an invalid model defined by\n    ``is_model_valid``.\n\n    .. versionadded:: 0.19"
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "HuberRegressor : Linear regression model that is robust to outliers.\nTheilSenRegressor : Theil-Sen Estimator robust multivariate regression model.\nSGDRegressor : Fitted by minimizing a regularized empirical loss with SGD.\n\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/RANSAC\n.. [2] https://www.sri.com/wp-content/uploads/2021/12/ransac-publication.pdf\n.. [3] https://bmva-archive.org.uk/bmvc/2009/Papers/Paper355/Paper355.pdf",
        "notes": "",
        "examples": ">>> from sklearn.linear_model import RANSACRegressor\n>>> from sklearn.datasets import make_regression\n>>> X, y = make_regression(\n...     n_samples=200, n_features=2, noise=4.0, random_state=0)\n>>> reg = RANSACRegressor(random_state=0).fit(X, y)\n>>> reg.score(X, y)\n0.9885...\n>>> reg.predict(X[:1,])\narray([-31.9417...])\n\nFor a more detailed example, see\n:ref:`sphx_glr_auto_examples_linear_model_plot_ransac.py`"
      }
    },
    {
      "name": "Ridge",
      "signature": "Ridge(alpha=1.0, *, fit_intercept=True, copy_X=True, max_iter=None, tol=0.0001, solver='auto', positive=False, random_state=None)",
      "docstring": {
        "description": "Linear least squares with l2 regularization.\n\nMinimizes the objective function::\n\n||y - Xw||^2_2 + alpha * ||w||^2_2\n\nThis model solves a regression model where the loss function is\nthe linear least squares function and regularization is given by\nthe l2-norm. Also known as Ridge Regression or Tikhonov regularization.\nThis estimator has built-in support for multi-variate regression\n(i.e., when y is a 2d-array of shape (n_samples, n_targets)).\n\nRead more in the :ref:`User Guide <ridge_regression>`.",
        "parameters": {
          "alpha": {
            "type": "{float, ndarray of shape (n_targets,)}, default=1.0",
            "description": "Constant that multiplies the L2 term, controlling regularization\n    strength. `alpha` must be a non-negative float i.e. in `[0, inf)`.\n\n    When `alpha = 0`, the objective is equivalent to ordinary least\n    squares, solved by the :class:`LinearRegression` object. For numerical\n    reasons, using `alpha = 0` with the `Ridge` object is not advised.\n    Instead, you should use the :class:`LinearRegression` object.\n\n    If an array is passed, penalties are assumed to be specific to the\n    targets. Hence they must correspond in number."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to fit the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. ``X`` and ``y`` are expected to be centered)."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If True, X will be copied; else, it may be overwritten."
          },
          "max_iter": {
            "type": "int, default=None",
            "description": "Maximum number of iterations for conjugate gradient solver.\n    For 'sparse_cg' and 'lsqr' solvers, the default value is determined\n    by scipy.sparse.linalg. For 'sag' solver, the default value is 1000.\n    For 'lbfgs' solver, the default value is 15000."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "The precision of the solution (`coef_`) is determined by `tol` which\n    specifies a different convergence criterion for each solver:\n\n    - 'svd': `tol` has no impact.\n\n    - 'cholesky': `tol` has no impact.\n\n    - 'sparse_cg': norm of residuals smaller than `tol`.\n\n    - 'lsqr': `tol` is set as atol and btol of scipy.sparse.linalg.lsqr,\n      which control the norm of the residual vector in terms of the norms of\n      matrix and coefficients.\n\n    - 'sag' and 'saga': relative change of coef smaller than `tol`.\n\n    - 'lbfgs': maximum of the absolute (projected) gradient=max|residuals|\n      smaller than `tol`.\n\n    .. versionchanged:: 1.2\n       Default value changed from 1e-3 to 1e-4 for consistency with other linear\n       models."
          },
          "solver": {
            "type": "{'auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg',             'sag', 'saga', 'lbfgs'}, default='auto'",
            "description": "Solver to use in the computational routines:\n\n    - 'auto' chooses the solver automatically based on the type of data.\n\n    - 'svd' uses a Singular Value Decomposition of X to compute the Ridge\n      coefficients. It is the most stable solver, in particular more stable\n      for singular matrices than 'cholesky' at the cost of being slower.\n\n    - 'cholesky' uses the standard scipy.linalg.solve function to\n      obtain a closed-form solution.\n\n    - 'sparse_cg' uses the conjugate gradient solver as found in\n      scipy.sparse.linalg.cg. As an iterative algorithm, this solver is\n      more appropriate than 'cholesky' for large-scale data\n      (possibility to set `tol` and `max_iter`).\n\n    - 'lsqr' uses the dedicated regularized least-squares routine\n      scipy.sparse.linalg.lsqr. It is the fastest and uses an iterative\n      procedure.\n\n    - 'sag' uses a Stochastic Average Gradient descent, and 'saga' uses\n      its improved, unbiased version named SAGA. Both methods also use an\n      iterative procedure, and are often faster than other solvers when\n      both n_samples and n_features are large. Note that 'sag' and\n      'saga' fast convergence is only guaranteed on features with\n      approximately the same scale. You can preprocess the data with a\n      scaler from sklearn.preprocessing.\n\n    - 'lbfgs' uses L-BFGS-B algorithm implemented in\n      `scipy.optimize.minimize`. It can be used only when `positive`\n      is True.\n\n    All solvers except 'svd' support both dense and sparse data. However, only\n    'lsqr', 'sag', 'sparse_cg', and 'lbfgs' support sparse input when\n    `fit_intercept` is True.\n\n    .. versionadded:: 0.17\n       Stochastic Average Gradient descent solver.\n    .. versionadded:: 0.19\n       SAGA solver."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "When set to ``True``, forces the coefficients to be positive.\n    Only 'lbfgs' solver is supported in this case."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used when ``solver`` == 'sag' or 'saga' to shuffle the data.\n    See :term:`Glossary <random_state>` for details.\n\n    .. versionadded:: 0.17\n       `random_state` to support Stochastic Average Gradient.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (n_features,) or (n_targets, n_features)",
            "description": "Weight vector(s)."
          },
          "intercept_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Independent term in decision function. Set to 0.0 if\n    ``fit_intercept = False``."
          },
          "n_iter_": {
            "type": "None or ndarray of shape (n_targets,)",
            "description": "Actual number of iterations for each target. Available only for\n    sag and lsqr solvers. Other solvers will return None.\n\n    .. versionadded:: 0.17"
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "solver_": {
            "type": "str",
            "description": "The solver that was used at fit time by the computational\n    routines.\n\n    .. versionadded:: 1.5"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "RidgeClassifier : Ridge classifier.\nRidgeCV : Ridge regression with built-in cross validation.\n:class:`~sklearn.kernel_ridge.KernelRidge` : Kernel ridge regression\n    combines ridge regression with the kernel trick.",
        "notes": "Regularization improves the conditioning of the problem and\nreduces the variance of the estimates. Larger values specify stronger\nregularization. Alpha corresponds to ``1 / (2C)`` in other linear\nmodels such as :class:`~sklearn.linear_model.LogisticRegression` or\n:class:`~sklearn.svm.LinearSVC`.",
        "examples": ">>> from sklearn.linear_model import Ridge\n>>> import numpy as np\n>>> n_samples, n_features = 10, 5\n>>> rng = np.random.RandomState(0)\n>>> y = rng.randn(n_samples)\n>>> X = rng.randn(n_samples, n_features)\n>>> clf = Ridge(alpha=1.0)\n>>> clf.fit(X, y)\nRidge()"
      }
    },
    {
      "name": "RidgeCV",
      "signature": "RidgeCV(alphas=(0.1, 1.0, 10.0), *, fit_intercept=True, scoring=None, cv=None, gcv_mode=None, store_cv_results=None, alpha_per_target=False, store_cv_values='deprecated')",
      "docstring": {
        "description": "Ridge regression with built-in cross-validation.\n\nSee glossary entry for :term:`cross-validation estimator`.\n\nBy default, it performs efficient Leave-One-Out Cross-Validation.\n\nRead more in the :ref:`User Guide <ridge_regression>`.",
        "parameters": {
          "alphas": {
            "type": "array-like of shape (n_alphas,), default=(0.1, 1.0, 10.0)",
            "description": "Array of alpha values to try.\n    Regularization strength; must be a positive float. Regularization\n    improves the conditioning of the problem and reduces the variance of\n    the estimates. Larger values specify stronger regularization.\n    Alpha corresponds to ``1 / (2C)`` in other linear models such as\n    :class:`~sklearn.linear_model.LogisticRegression` or\n    :class:`~sklearn.svm.LinearSVC`.\n    If using Leave-One-Out cross-validation, alphas must be strictly positive."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "scoring": {
            "type": "str, callable, default=None",
            "description": "A string (see :ref:`scoring_parameter`) or a scorer callable object /\n    function with signature ``scorer(estimator, X, y)``. If None, the\n    negative mean squared error if cv is 'auto' or None (i.e. when using\n    leave-one-out cross-validation), and r2 score otherwise."
          },
          "cv": {
            "type": "int, cross-validation generator or an iterable, default=None",
            "description": "Determines the cross-validation splitting strategy.\n    Possible inputs for cv are:\n\n    - None, to use the efficient Leave-One-Out cross-validation\n    - integer, to specify the number of folds.\n    - :term:`CV splitter`,\n    - An iterable yielding (train, test) splits as arrays of indices.\n\n    For integer/None inputs, if ``y`` is binary or multiclass,\n    :class:`~sklearn.model_selection.StratifiedKFold` is used, else,\n    :class:`~sklearn.model_selection.KFold` is used.\n\n    Refer :ref:`User Guide <cross_validation>` for the various\n    cross-validation strategies that can be used here."
          },
          "gcv_mode": {
            "type": "{'auto', 'svd', 'eigen'}, default='auto'",
            "description": "Flag indicating which strategy to use when performing\n    Leave-One-Out Cross-Validation. Options are::\n\n        'auto' : use 'svd' if n_samples > n_features, otherwise use 'eigen'\n        'svd' : force use of singular value decomposition of X when X is\n            dense, eigenvalue decomposition of X^T.X when X is sparse.\n        'eigen' : force computation via eigendecomposition of X.X^T\n\n    The 'auto' mode is the default and is intended to pick the cheaper\n    option of the two depending on the shape of the training data."
          },
          "store_cv_results": {
            "type": "bool, default=False",
            "description": "Flag indicating if the cross-validation values corresponding to\n    each alpha should be stored in the ``cv_results_`` attribute (see\n    below). This flag is only compatible with ``cv=None`` (i.e. using\n    Leave-One-Out Cross-Validation).\n\n    .. versionchanged:: 1.5\n        Parameter name changed from `store_cv_values` to `store_cv_results`."
          },
          "alpha_per_target": {
            "type": "bool, default=False",
            "description": "Flag indicating whether to optimize the alpha value (picked from the\n    `alphas` parameter list) for each target separately (for multi-output\n    settings: multiple prediction targets). When set to `True`, after\n    fitting, the `alpha_` attribute will contain a value for each target.\n    When set to `False`, a single alpha is used for all targets.\n\n    .. versionadded:: 0.24"
          },
          "store_cv_values": {
            "type": "bool",
            "description": "Flag indicating if the cross-validation values corresponding to\n    each alpha should be stored in the ``cv_values_`` attribute (see\n    below). This flag is only compatible with ``cv=None`` (i.e. using\n    Leave-One-Out Cross-Validation).\n\n    .. deprecated:: 1.5\n        `store_cv_values` is deprecated in version 1.5 in favor of\n        `store_cv_results` and will be removed in version 1.7.\n\nAttributes\n----------"
          },
          "cv_results_": {
            "type": "ndarray of shape (n_samples, n_alphas) or             shape (n_samples, n_targets, n_alphas), optional",
            "description": "Cross-validation values for each alpha (only available if\n    ``store_cv_results=True`` and ``cv=None``). After ``fit()`` has been\n    called, this attribute will contain the mean squared errors if\n    `scoring is None` otherwise it will contain standardized per point\n    prediction values.\n\n    .. versionchanged:: 1.5\n        `cv_values_` changed to `cv_results_`."
          },
          "coef_": {
            "type": "ndarray of shape (n_features) or (n_targets, n_features)",
            "description": "Weight vector(s)."
          },
          "intercept_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Independent term in decision function. Set to 0.0 if\n    ``fit_intercept = False``."
          },
          "alpha_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Estimated regularization parameter, or, if ``alpha_per_target=True``,\n    the estimated regularization parameter for each target."
          },
          "best_score_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Score of base estimator with best alpha, or, if\n    ``alpha_per_target=True``, a score for each target.\n\n    .. versionadded:: 0.23"
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "Ridge : Ridge regression.\nRidgeClassifier : Classifier based on ridge regression on {-1, 1} labels.\nRidgeClassifierCV : Ridge classifier with built-in cross validation.",
        "notes": "",
        "examples": ">>> from sklearn.datasets import load_diabetes\n>>> from sklearn.linear_model import RidgeCV\n>>> X, y = load_diabetes(return_X_y=True)\n>>> clf = RidgeCV(alphas=[1e-3, 1e-2, 1e-1, 1]).fit(X, y)\n>>> clf.score(X, y)\n0.5166..."
      }
    },
    {
      "name": "RidgeClassifier",
      "signature": "RidgeClassifier(alpha=1.0, *, fit_intercept=True, copy_X=True, max_iter=None, tol=0.0001, class_weight=None, solver='auto', positive=False, random_state=None)",
      "docstring": {
        "description": "Classifier using Ridge regression.\n\nThis classifier first converts the target values into ``{-1, 1}`` and\nthen treats the problem as a regression task (multi-output regression in\nthe multiclass case).\n\nRead more in the :ref:`User Guide <ridge_regression>`.",
        "parameters": {
          "alpha": {
            "type": "float, default=1.0",
            "description": "Regularization strength; must be a positive float. Regularization\n    improves the conditioning of the problem and reduces the variance of\n    the estimates. Larger values specify stronger regularization.\n    Alpha corresponds to ``1 / (2C)`` in other linear models such as\n    :class:`~sklearn.linear_model.LogisticRegression` or\n    :class:`~sklearn.svm.LinearSVC`."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set to false, no\n    intercept will be used in calculations (e.g. data is expected to be\n    already centered)."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If True, X will be copied; else, it may be overwritten."
          },
          "max_iter": {
            "type": "int, default=None",
            "description": "Maximum number of iterations for conjugate gradient solver.\n    The default value is determined by scipy.sparse.linalg."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "The precision of the solution (`coef_`) is determined by `tol` which\n    specifies a different convergence criterion for each solver:\n\n    - 'svd': `tol` has no impact.\n\n    - 'cholesky': `tol` has no impact.\n\n    - 'sparse_cg': norm of residuals smaller than `tol`.\n\n    - 'lsqr': `tol` is set as atol and btol of scipy.sparse.linalg.lsqr,\n      which control the norm of the residual vector in terms of the norms of\n      matrix and coefficients.\n\n    - 'sag' and 'saga': relative change of coef smaller than `tol`.\n\n    - 'lbfgs': maximum of the absolute (projected) gradient=max|residuals|\n      smaller than `tol`.\n\n    .. versionchanged:: 1.2\n       Default value changed from 1e-3 to 1e-4 for consistency with other linear\n       models."
          },
          "class_weight": {
            "type": "dict or 'balanced', default=None",
            "description": "Weights associated with classes in the form ``{class_label: weight}``.\n    If not given, all classes are supposed to have weight one.\n\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``."
          },
          "solver": {
            "type": "{'auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg',             'sag', 'saga', 'lbfgs'}, default='auto'",
            "description": "Solver to use in the computational routines:\n\n    - 'auto' chooses the solver automatically based on the type of data.\n\n    - 'svd' uses a Singular Value Decomposition of X to compute the Ridge\n      coefficients. It is the most stable solver, in particular more stable\n      for singular matrices than 'cholesky' at the cost of being slower.\n\n    - 'cholesky' uses the standard scipy.linalg.solve function to\n      obtain a closed-form solution.\n\n    - 'sparse_cg' uses the conjugate gradient solver as found in\n      scipy.sparse.linalg.cg. As an iterative algorithm, this solver is\n      more appropriate than 'cholesky' for large-scale data\n      (possibility to set `tol` and `max_iter`).\n\n    - 'lsqr' uses the dedicated regularized least-squares routine\n      scipy.sparse.linalg.lsqr. It is the fastest and uses an iterative\n      procedure.\n\n    - 'sag' uses a Stochastic Average Gradient descent, and 'saga' uses\n      its unbiased and more flexible version named SAGA. Both methods\n      use an iterative procedure, and are often faster than other solvers\n      when both n_samples and n_features are large. Note that 'sag' and\n      'saga' fast convergence is only guaranteed on features with\n      approximately the same scale. You can preprocess the data with a\n      scaler from sklearn.preprocessing.\n\n      .. versionadded:: 0.17\n         Stochastic Average Gradient descent solver.\n      .. versionadded:: 0.19\n         SAGA solver.\n\n    - 'lbfgs' uses L-BFGS-B algorithm implemented in\n      `scipy.optimize.minimize`. It can be used only when `positive`\n      is True."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "When set to ``True``, forces the coefficients to be positive.\n    Only 'lbfgs' solver is supported in this case."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used when ``solver`` == 'sag' or 'saga' to shuffle the data.\n    See :term:`Glossary <random_state>` for details.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features) or (n_classes, n_features)",
            "description": "Coefficient of the features in the decision function.\n\n    ``coef_`` is of shape (1, n_features) when the given problem is binary."
          },
          "intercept_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Independent term in decision function. Set to 0.0 if\n    ``fit_intercept = False``."
          },
          "n_iter_": {
            "type": "None or ndarray of shape (n_targets,)",
            "description": "Actual number of iterations for each target. Available only for\n    sag and lsqr solvers. Other solvers will return None."
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,)",
            "description": "The classes labels."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "solver_": {
            "type": "str",
            "description": "The solver that was used at fit time by the computational\n    routines.\n\n    .. versionadded:: 1.5"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "Ridge : Ridge regression.\nRidgeClassifierCV :  Ridge classifier with built-in cross validation.",
        "notes": "For multi-class classification, n_class classifiers are trained in\na one-versus-all approach. Concretely, this is implemented by taking\nadvantage of the multi-variate response support in Ridge.",
        "examples": ">>> from sklearn.datasets import load_breast_cancer\n>>> from sklearn.linear_model import RidgeClassifier\n>>> X, y = load_breast_cancer(return_X_y=True)\n>>> clf = RidgeClassifier().fit(X, y)\n>>> clf.score(X, y)\n0.9595..."
      }
    },
    {
      "name": "RidgeClassifierCV",
      "signature": "RidgeClassifierCV(alphas=(0.1, 1.0, 10.0), *, fit_intercept=True, scoring=None, cv=None, class_weight=None, store_cv_results=None, store_cv_values='deprecated')",
      "docstring": {
        "description": "Ridge classifier with built-in cross-validation.\n\nSee glossary entry for :term:`cross-validation estimator`.\n\nBy default, it performs Leave-One-Out Cross-Validation. Currently,\nonly the n_features > n_samples case is handled efficiently.\n\nRead more in the :ref:`User Guide <ridge_regression>`.",
        "parameters": {
          "alphas": {
            "type": "array-like of shape (n_alphas,), default=(0.1, 1.0, 10.0)",
            "description": "Array of alpha values to try.\n    Regularization strength; must be a positive float. Regularization\n    improves the conditioning of the problem and reduces the variance of\n    the estimates. Larger values specify stronger regularization.\n    Alpha corresponds to ``1 / (2C)`` in other linear models such as\n    :class:`~sklearn.linear_model.LogisticRegression` or\n    :class:`~sklearn.svm.LinearSVC`.\n    If using Leave-One-Out cross-validation, alphas must be strictly positive."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "scoring": {
            "type": "str, callable, default=None",
            "description": "A string (see :ref:`scoring_parameter`) or a scorer callable object /\n    function with signature ``scorer(estimator, X, y)``."
          },
          "cv": {
            "type": "int, cross-validation generator or an iterable, default=None",
            "description": "Determines the cross-validation splitting strategy.\n    Possible inputs for cv are:\n\n    - None, to use the efficient Leave-One-Out cross-validation\n    - integer, to specify the number of folds.\n    - :term:`CV splitter`,\n    - An iterable yielding (train, test) splits as arrays of indices.\n\n    Refer :ref:`User Guide <cross_validation>` for the various\n    cross-validation strategies that can be used here."
          },
          "class_weight": {
            "type": "dict or 'balanced', default=None",
            "description": "Weights associated with classes in the form ``{class_label: weight}``.\n    If not given, all classes are supposed to have weight one.\n\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``."
          },
          "store_cv_results": {
            "type": "bool, default=False",
            "description": "Flag indicating if the cross-validation results corresponding to\n    each alpha should be stored in the ``cv_results_`` attribute (see\n    below). This flag is only compatible with ``cv=None`` (i.e. using\n    Leave-One-Out Cross-Validation).\n\n    .. versionchanged:: 1.5\n        Parameter name changed from `store_cv_values` to `store_cv_results`."
          },
          "store_cv_values": {
            "type": "bool",
            "description": "Flag indicating if the cross-validation values corresponding to\n    each alpha should be stored in the ``cv_values_`` attribute (see\n    below). This flag is only compatible with ``cv=None`` (i.e. using\n    Leave-One-Out Cross-Validation).\n\n    .. deprecated:: 1.5\n        `store_cv_values` is deprecated in version 1.5 in favor of\n        `store_cv_results` and will be removed in version 1.7.\n\nAttributes\n----------"
          },
          "cv_results_": {
            "type": "ndarray of shape (n_samples, n_targets, n_alphas), optional",
            "description": "Cross-validation results for each alpha (only if ``store_cv_results=True`` and\n    ``cv=None``). After ``fit()`` has been called, this attribute will\n    contain the mean squared errors if `scoring is None` otherwise it\n    will contain standardized per point prediction values.\n\n    .. versionchanged:: 1.5\n        `cv_values_` changed to `cv_results_`."
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features) or (n_targets, n_features)",
            "description": "Coefficient of the features in the decision function.\n\n    ``coef_`` is of shape (1, n_features) when the given problem is binary."
          },
          "intercept_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Independent term in decision function. Set to 0.0 if\n    ``fit_intercept = False``."
          },
          "alpha_": {
            "type": "float",
            "description": "Estimated regularization parameter."
          },
          "best_score_": {
            "type": "float",
            "description": "Score of base estimator with best alpha.\n\n    .. versionadded:: 0.23"
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,)",
            "description": "The classes labels."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "Ridge : Ridge regression.\nRidgeClassifier : Ridge classifier.\nRidgeCV : Ridge regression with built-in cross validation.",
        "notes": "For multi-class classification, n_class classifiers are trained in\na one-versus-all approach. Concretely, this is implemented by taking\nadvantage of the multi-variate response support in Ridge.",
        "examples": ">>> from sklearn.datasets import load_breast_cancer\n>>> from sklearn.linear_model import RidgeClassifierCV\n>>> X, y = load_breast_cancer(return_X_y=True)\n>>> clf = RidgeClassifierCV(alphas=[1e-3, 1e-2, 1e-1, 1]).fit(X, y)\n>>> clf.score(X, y)\n0.9630..."
      }
    },
    {
      "name": "SGDClassifier",
      "signature": "SGDClassifier(loss='hinge', *, penalty='l2', alpha=0.0001, l1_ratio=0.15, fit_intercept=True, max_iter=1000, tol=0.001, shuffle=True, verbose=0, epsilon=0.1, n_jobs=None, random_state=None, learning_rate='optimal', eta0=0.0, power_t=0.5, early_stopping=False, validation_fraction=0.1, n_iter_no_change=5, class_weight=None, warm_start=False, average=False)",
      "docstring": {
        "description": "Linear classifiers (SVM, logistic regression, etc.) with SGD training.\n\nThis estimator implements regularized linear models with stochastic\ngradient descent (SGD) learning: the gradient of the loss is estimated\neach sample at a time and the model is updated along the way with a\ndecreasing strength schedule (aka learning rate). SGD allows minibatch\n(online/out-of-core) learning via the `partial_fit` method.\nFor best results using the default learning rate schedule, the data should\nhave zero mean and unit variance.\n\nThis implementation works with data represented as dense or sparse arrays\nof floating point values for the features. The model it fits can be\ncontrolled with the loss parameter; by default, it fits a linear support\nvector machine (SVM).\n\nThe regularizer is a penalty added to the loss function that shrinks model\nparameters towards the zero vector using either the squared euclidean norm\nL2 or the absolute norm L1 or a combination of both (Elastic Net). If the\nparameter update crosses the 0.0 value because of the regularizer, the\nupdate is truncated to 0.0 to allow for learning sparse models and achieve\nonline feature selection.\n\nRead more in the :ref:`User Guide <sgd>`.",
        "parameters": {
          "loss": {
            "type": "{'hinge', 'log_loss', 'modified_huber', 'squared_hinge',        'perceptron', 'squared_error', 'huber', 'epsilon_insensitive',        'squared_epsilon_insensitive'}, default='hinge'",
            "description": "The loss function to be used.\n\n    - 'hinge' gives a linear SVM.\n    - 'log_loss' gives logistic regression, a probabilistic classifier.\n    - 'modified_huber' is another smooth loss that brings tolerance to\n      outliers as well as probability estimates.\n    - 'squared_hinge' is like hinge but is quadratically penalized.\n    - 'perceptron' is the linear loss used by the perceptron algorithm.\n    - The other losses, 'squared_error', 'huber', 'epsilon_insensitive' and\n      'squared_epsilon_insensitive' are designed for regression but can be useful\n      in classification as well; see\n      :class:`~sklearn.linear_model.SGDRegressor` for a description.\n\n    More details about the losses formulas can be found in the :ref:`User Guide\n    <sgd_mathematical_formulation>` and you can find a visualisation of the loss\n    functions in\n    :ref:`sphx_glr_auto_examples_linear_model_plot_sgd_loss_functions.py`."
          },
          "penalty": {
            "type": "{'l2', 'l1', 'elasticnet', None}, default='l2'",
            "description": "The penalty (aka regularization term) to be used. Defaults to 'l2'\n    which is the standard regularizer for linear SVM models. 'l1' and\n    'elasticnet' might bring sparsity to the model (feature selection)\n    not achievable with 'l2'. No penalty is added when set to `None`.\n\n    You can see a visualisation of the penalties in\n    :ref:`sphx_glr_auto_examples_linear_model_plot_sgd_penalties.py`."
          },
          "alpha": {
            "type": "float, default=0.0001",
            "description": "Constant that multiplies the regularization term. The higher the\n    value, the stronger the regularization. Also used to compute the\n    learning rate when `learning_rate` is set to 'optimal'.\n    Values must be in the range `[0.0, inf)`."
          },
          "l1_ratio": {
            "type": "float, default=0.15",
            "description": "The Elastic Net mixing parameter, with 0 <= l1_ratio <= 1.\n    l1_ratio=0 corresponds to L2 penalty, l1_ratio=1 to L1.\n    Only used if `penalty` is 'elasticnet'.\n    Values must be in the range `[0.0, 1.0]`."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether the intercept should be estimated or not. If False, the\n    data is assumed to be already centered."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of passes over the training data (aka epochs).\n    It only impacts the behavior in the ``fit`` method, and not the\n    :meth:`partial_fit` method.\n    Values must be in the range `[1, inf)`.\n\n    .. versionadded:: 0.19"
          },
          "tol": {
            "type": "float or None, default=1e-3",
            "description": "The stopping criterion. If it is not None, training will stop\n    when (loss > best_loss - tol) for ``n_iter_no_change`` consecutive\n    epochs.\n    Convergence is checked against the training loss or the\n    validation loss depending on the `early_stopping` parameter.\n    Values must be in the range `[0.0, inf)`.\n\n    .. versionadded:: 0.19"
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": "Whether or not the training data should be shuffled after each epoch."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "The verbosity level.\n    Values must be in the range `[0, inf)`."
          },
          "epsilon": {
            "type": "float, default=0.1",
            "description": "Epsilon in the epsilon-insensitive loss functions; only if `loss` is\n    'huber', 'epsilon_insensitive', or 'squared_epsilon_insensitive'.\n    For 'huber', determines the threshold at which it becomes less\n    important to get the prediction exactly right.\n    For epsilon-insensitive, any differences between the current prediction\n    and the correct label are ignored if they are less than this threshold.\n    Values must be in the range `[0.0, inf)`."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "The number of CPUs to use to do the OVA (One Versus All, for\n    multi-class problems) computation.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used for shuffling the data, when ``shuffle`` is set to ``True``.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`.\n    Integer values must be in the range `[0, 2**32 - 1]`."
          },
          "learning_rate": {
            "type": "str, default='optimal'",
            "description": "The learning rate schedule:\n\n    - 'constant': `eta = eta0`\n    - 'optimal': `eta = 1.0 / (alpha * (t + t0))`\n      where `t0` is chosen by a heuristic proposed by Leon Bottou.\n    - 'invscaling': `eta = eta0 / pow(t, power_t)`\n    - 'adaptive': `eta = eta0`, as long as the training keeps decreasing.\n      Each time n_iter_no_change consecutive epochs fail to decrease the\n      training loss by tol or fail to increase validation score by tol if\n      `early_stopping` is `True`, the current learning rate is divided by 5.\n\n    .. versionadded:: 0.20\n        Added 'adaptive' option."
          },
          "eta0": {
            "type": "float, default=0.0",
            "description": "The initial learning rate for the 'constant', 'invscaling' or\n    'adaptive' schedules. The default value is 0.0 as eta0 is not used by\n    the default schedule 'optimal'.\n    Values must be in the range `[0.0, inf)`."
          },
          "power_t": {
            "type": "float, default=0.5",
            "description": "The exponent for inverse scaling learning rate.\n    Values must be in the range `(-inf, inf)`."
          },
          "early_stopping": {
            "type": "bool, default=False",
            "description": "Whether to use early stopping to terminate training when validation\n    score is not improving. If set to `True`, it will automatically set aside\n    a stratified fraction of training data as validation and terminate\n    training when validation score returned by the `score` method is not\n    improving by at least tol for n_iter_no_change consecutive epochs.\n\n    See :ref:`sphx_glr_auto_examples_linear_model_plot_sgd_early_stopping.py` for an\n    example of the effects of early stopping.\n\n    .. versionadded:: 0.20\n        Added 'early_stopping' option"
          },
          "validation_fraction": {
            "type": "float, default=0.1",
            "description": "The proportion of training data to set aside as validation set for\n    early stopping. Must be between 0 and 1.\n    Only used if `early_stopping` is True.\n    Values must be in the range `(0.0, 1.0)`.\n\n    .. versionadded:: 0.20\n        Added 'validation_fraction' option"
          },
          "n_iter_no_change": {
            "type": "int, default=5",
            "description": "Number of iterations with no improvement to wait before stopping\n    fitting.\n    Convergence is checked against the training loss or the\n    validation loss depending on the `early_stopping` parameter.\n    Integer values must be in the range `[1, max_iter)`.\n\n    .. versionadded:: 0.20\n        Added 'n_iter_no_change' option"
          },
          "class_weight": {
            "type": "dict, {class_label: weight} or \"balanced\", default=None",
            "description": "Preset for the class_weight fit parameter.\n\n    Weights associated with classes. If not given, all classes\n    are supposed to have weight one.\n\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to True, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution.\n    See :term:`the Glossary <warm_start>`.\n\n    Repeatedly calling fit or partial_fit when warm_start is True can\n    result in a different solution than when calling fit a single time\n    because of the way the data is shuffled.\n    If a dynamic learning rate is used, the learning rate is adapted\n    depending on the number of samples already seen. Calling ``fit`` resets\n    this counter, while ``partial_fit`` will result in increasing the\n    existing counter."
          },
          "average": {
            "type": "bool or int, default=False",
            "description": "When set to `True`, computes the averaged SGD weights across all\n    updates and stores the result in the ``coef_`` attribute. If set to\n    an int greater than 1, averaging will begin once the total number of\n    samples seen reaches `average`. So ``average=10`` will begin\n    averaging after seeing 10 samples.\n    Integer values must be in the range `[1, n_samples]`.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features) if n_classes == 2 else             (n_classes, n_features)",
            "description": "Weights assigned to the features."
          },
          "intercept_": {
            "type": "ndarray of shape (1,) if n_classes == 2 else (n_classes,)",
            "description": "Constants in decision function."
          },
          "n_iter_": {
            "type": "int",
            "description": "The actual number of iterations before reaching the stopping criterion.\n    For multiclass fits, it is the maximum over every binary fit."
          },
          "classes_": {
            "type": "array of shape (n_classes,)",
            "description": ""
          },
          "t_": {
            "type": "int",
            "description": "Number of weight updates performed during training.\n    Same as ``(n_iter_ * n_samples + 1)``."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "sklearn.svm.LinearSVC : Linear support vector classification.\nLogisticRegression : Logistic regression.\nPerceptron : Inherits from SGDClassifier. ``Perceptron()`` is equivalent to\n    ``SGDClassifier(loss=\"perceptron\", eta0=1, learning_rate=\"constant\",\n    penalty=None)``.",
        "notes": "",
        "examples": ">>> import numpy as np\n>>> from sklearn.linear_model import SGDClassifier\n>>> from sklearn.preprocessing import StandardScaler\n>>> from sklearn.pipeline import make_pipeline\n>>> X = np.array([[-1, -1], [-2, -1], [1, 1], [2, 1]])\n>>> Y = np.array([1, 1, 2, 2])\n>>> # Always scale the input. The most convenient way is to use a pipeline.\n>>> clf = make_pipeline(StandardScaler(),\n...                     SGDClassifier(max_iter=1000, tol=1e-3))\n>>> clf.fit(X, Y)\nPipeline(steps=[('standardscaler', StandardScaler()),\n                ('sgdclassifier', SGDClassifier())])\n>>> print(clf.predict([[-0.8, -1]]))\n[1]"
      }
    },
    {
      "name": "SGDOneClassSVM",
      "signature": "SGDOneClassSVM(nu=0.5, fit_intercept=True, max_iter=1000, tol=0.001, shuffle=True, verbose=0, random_state=None, learning_rate='optimal', eta0=0.0, power_t=0.5, warm_start=False, average=False)",
      "docstring": {
        "description": "Solves linear One-Class SVM using Stochastic Gradient Descent.\n\nThis implementation is meant to be used with a kernel approximation\ntechnique (e.g. `sklearn.kernel_approximation.Nystroem`) to obtain results\nsimilar to `sklearn.svm.OneClassSVM` which uses a Gaussian kernel by\ndefault.\n\nRead more in the :ref:`User Guide <sgd_online_one_class_svm>`.\n\n.. versionadded:: 1.0",
        "parameters": {
          "nu": {
            "type": "float, default=0.5",
            "description": "The nu parameter of the One Class SVM: an upper bound on the\n    fraction of training errors and a lower bound of the fraction of\n    support vectors. Should be in the interval (0, 1]. By default 0.5\n    will be taken."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether the intercept should be estimated or not. Defaults to True."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of passes over the training data (aka epochs).\n    It only impacts the behavior in the ``fit`` method, and not the\n    `partial_fit`. Defaults to 1000.\n    Values must be in the range `[1, inf)`."
          },
          "tol": {
            "type": "float or None, default=1e-3",
            "description": "The stopping criterion. If it is not None, the iterations will stop\n    when (loss > previous_loss - tol). Defaults to 1e-3.\n    Values must be in the range `[0.0, inf)`."
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": "Whether or not the training data should be shuffled after each epoch.\n    Defaults to True."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "The verbosity level."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "The seed of the pseudo random number generator to use when shuffling\n    the data.  If int, random_state is the seed used by the random number\n    generator; If RandomState instance, random_state is the random number\n    generator; If None, the random number generator is the RandomState\n    instance used by `np.random`."
          },
          "learning_rate": {
            "type": "{'constant', 'optimal', 'invscaling', 'adaptive'}, default='optimal'",
            "description": "The learning rate schedule to use with `fit`. (If using `partial_fit`,\n    learning rate must be controlled directly).\n\n    - 'constant': `eta = eta0`\n    - 'optimal': `eta = 1.0 / (alpha * (t + t0))`\n      where t0 is chosen by a heuristic proposed by Leon Bottou.\n    - 'invscaling': `eta = eta0 / pow(t, power_t)`\n    - 'adaptive': eta = eta0, as long as the training keeps decreasing.\n      Each time n_iter_no_change consecutive epochs fail to decrease the\n      training loss by tol or fail to increase validation score by tol if\n      early_stopping is True, the current learning rate is divided by 5."
          },
          "eta0": {
            "type": "float, default=0.0",
            "description": "The initial learning rate for the 'constant', 'invscaling' or\n    'adaptive' schedules. The default value is 0.0 as eta0 is not used by\n    the default schedule 'optimal'.\n    Values must be in the range `[0.0, inf)`."
          },
          "power_t": {
            "type": "float, default=0.5",
            "description": "The exponent for inverse scaling learning rate.\n    Values must be in the range `(-inf, inf)`."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to True, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution.\n    See :term:`the Glossary <warm_start>`.\n\n    Repeatedly calling fit or partial_fit when warm_start is True can\n    result in a different solution than when calling fit a single time\n    because of the way the data is shuffled.\n    If a dynamic learning rate is used, the learning rate is adapted\n    depending on the number of samples already seen. Calling ``fit`` resets\n    this counter, while ``partial_fit``  will result in increasing the\n    existing counter."
          },
          "average": {
            "type": "bool or int, default=False",
            "description": "When set to True, computes the averaged SGD weights and stores the\n    result in the ``coef_`` attribute. If set to an int greater than 1,\n    averaging will begin once the total number of samples seen reaches\n    average. So ``average=10`` will begin averaging after seeing 10\n    samples.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features)",
            "description": "Weights assigned to the features."
          },
          "offset_": {
            "type": "ndarray of shape (1,)",
            "description": "Offset used to define the decision function from the raw scores.\n    We have the relation: decision_function = score_samples - offset."
          },
          "n_iter_": {
            "type": "int",
            "description": "The actual number of iterations to reach the stopping criterion."
          },
          "t_": {
            "type": "int",
            "description": "Number of weight updates performed during training.\n    Same as ``(n_iter_ * n_samples + 1)``."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "sklearn.svm.OneClassSVM : Unsupervised Outlier Detection.",
        "notes": "This estimator has a linear complexity in the number of training samples\nand is thus better suited than the `sklearn.svm.OneClassSVM`\nimplementation for datasets with a large number of training samples (say\n> 10,000).",
        "examples": ">>> import numpy as np\n>>> from sklearn import linear_model\n>>> X = np.array([[-1, -1], [-2, -1], [1, 1], [2, 1]])\n>>> clf = linear_model.SGDOneClassSVM(random_state=42)\n>>> clf.fit(X)\nSGDOneClassSVM(random_state=42)\n\n>>> print(clf.predict([[4, 4]]))\n[1]"
      }
    },
    {
      "name": "SGDRegressor",
      "signature": "SGDRegressor(loss='squared_error', *, penalty='l2', alpha=0.0001, l1_ratio=0.15, fit_intercept=True, max_iter=1000, tol=0.001, shuffle=True, verbose=0, epsilon=0.1, random_state=None, learning_rate='invscaling', eta0=0.01, power_t=0.25, early_stopping=False, validation_fraction=0.1, n_iter_no_change=5, warm_start=False, average=False)",
      "docstring": {
        "description": "Linear model fitted by minimizing a regularized empirical loss with SGD.\n\nSGD stands for Stochastic Gradient Descent: the gradient of the loss is\nestimated each sample at a time and the model is updated along the way with\na decreasing strength schedule (aka learning rate).\n\nThe regularizer is a penalty added to the loss function that shrinks model\nparameters towards the zero vector using either the squared euclidean norm\nL2 or the absolute norm L1 or a combination of both (Elastic Net). If the\nparameter update crosses the 0.0 value because of the regularizer, the\nupdate is truncated to 0.0 to allow for learning sparse models and achieve\nonline feature selection.\n\nThis implementation works with data represented as dense numpy arrays of\nfloating point values for the features.\n\nRead more in the :ref:`User Guide <sgd>`.",
        "parameters": {
          "loss": {
            "type": "str, default='squared_error'",
            "description": "The loss function to be used. The possible values are 'squared_error',\n    'huber', 'epsilon_insensitive', or 'squared_epsilon_insensitive'\n\n    The 'squared_error' refers to the ordinary least squares fit.\n    'huber' modifies 'squared_error' to focus less on getting outliers\n    correct by switching from squared to linear loss past a distance of\n    epsilon. 'epsilon_insensitive' ignores errors less than epsilon and is\n    linear past that; this is the loss function used in SVR.\n    'squared_epsilon_insensitive' is the same but becomes squared loss past\n    a tolerance of epsilon.\n\n    More details about the losses formulas can be found in the\n    :ref:`User Guide <sgd_mathematical_formulation>`."
          },
          "penalty": {
            "type": "{'l2', 'l1', 'elasticnet', None}, default='l2'",
            "description": "The penalty (aka regularization term) to be used. Defaults to 'l2'\n    which is the standard regularizer for linear SVM models. 'l1' and\n    'elasticnet' might bring sparsity to the model (feature selection)\n    not achievable with 'l2'. No penalty is added when set to `None`.\n\n    You can see a visualisation of the penalties in\n    :ref:`sphx_glr_auto_examples_linear_model_plot_sgd_penalties.py`."
          },
          "alpha": {
            "type": "float, default=0.0001",
            "description": "Constant that multiplies the regularization term. The higher the\n    value, the stronger the regularization. Also used to compute the\n    learning rate when `learning_rate` is set to 'optimal'.\n    Values must be in the range `[0.0, inf)`."
          },
          "l1_ratio": {
            "type": "float, default=0.15",
            "description": "The Elastic Net mixing parameter, with 0 <= l1_ratio <= 1.\n    l1_ratio=0 corresponds to L2 penalty, l1_ratio=1 to L1.\n    Only used if `penalty` is 'elasticnet'.\n    Values must be in the range `[0.0, 1.0]`."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether the intercept should be estimated or not. If False, the\n    data is assumed to be already centered."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of passes over the training data (aka epochs).\n    It only impacts the behavior in the ``fit`` method, and not the\n    :meth:`partial_fit` method.\n    Values must be in the range `[1, inf)`.\n\n    .. versionadded:: 0.19"
          },
          "tol": {
            "type": "float or None, default=1e-3",
            "description": "The stopping criterion. If it is not None, training will stop\n    when (loss > best_loss - tol) for ``n_iter_no_change`` consecutive\n    epochs.\n    Convergence is checked against the training loss or the\n    validation loss depending on the `early_stopping` parameter.\n    Values must be in the range `[0.0, inf)`.\n\n    .. versionadded:: 0.19"
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": "Whether or not the training data should be shuffled after each epoch."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "The verbosity level.\n    Values must be in the range `[0, inf)`."
          },
          "epsilon": {
            "type": "float, default=0.1",
            "description": "Epsilon in the epsilon-insensitive loss functions; only if `loss` is\n    'huber', 'epsilon_insensitive', or 'squared_epsilon_insensitive'.\n    For 'huber', determines the threshold at which it becomes less\n    important to get the prediction exactly right.\n    For epsilon-insensitive, any differences between the current prediction\n    and the correct label are ignored if they are less than this threshold.\n    Values must be in the range `[0.0, inf)`."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used for shuffling the data, when ``shuffle`` is set to ``True``.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "learning_rate": {
            "type": "str, default='invscaling'",
            "description": "The learning rate schedule:\n\n    - 'constant': `eta = eta0`\n    - 'optimal': `eta = 1.0 / (alpha * (t + t0))`\n      where t0 is chosen by a heuristic proposed by Leon Bottou.\n    - 'invscaling': `eta = eta0 / pow(t, power_t)`\n    - 'adaptive': eta = eta0, as long as the training keeps decreasing.\n      Each time n_iter_no_change consecutive epochs fail to decrease the\n      training loss by tol or fail to increase validation score by tol if\n      early_stopping is True, the current learning rate is divided by 5.\n\n    .. versionadded:: 0.20\n        Added 'adaptive' option."
          },
          "eta0": {
            "type": "float, default=0.01",
            "description": "The initial learning rate for the 'constant', 'invscaling' or\n    'adaptive' schedules. The default value is 0.01.\n    Values must be in the range `[0.0, inf)`."
          },
          "power_t": {
            "type": "float, default=0.25",
            "description": "The exponent for inverse scaling learning rate.\n    Values must be in the range `(-inf, inf)`."
          },
          "early_stopping": {
            "type": "bool, default=False",
            "description": "Whether to use early stopping to terminate training when validation\n    score is not improving. If set to True, it will automatically set aside\n    a fraction of training data as validation and terminate\n    training when validation score returned by the `score` method is not\n    improving by at least `tol` for `n_iter_no_change` consecutive\n    epochs.\n\n    See :ref:`sphx_glr_auto_examples_linear_model_plot_sgd_early_stopping.py` for an\n    example of the effects of early stopping.\n\n    .. versionadded:: 0.20\n        Added 'early_stopping' option"
          },
          "validation_fraction": {
            "type": "float, default=0.1",
            "description": "The proportion of training data to set aside as validation set for\n    early stopping. Must be between 0 and 1.\n    Only used if `early_stopping` is True.\n    Values must be in the range `(0.0, 1.0)`.\n\n    .. versionadded:: 0.20\n        Added 'validation_fraction' option"
          },
          "n_iter_no_change": {
            "type": "int, default=5",
            "description": "Number of iterations with no improvement to wait before stopping\n    fitting.\n    Convergence is checked against the training loss or the\n    validation loss depending on the `early_stopping` parameter.\n    Integer values must be in the range `[1, max_iter)`.\n\n    .. versionadded:: 0.20\n        Added 'n_iter_no_change' option"
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to True, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution.\n    See :term:`the Glossary <warm_start>`.\n\n    Repeatedly calling fit or partial_fit when warm_start is True can\n    result in a different solution than when calling fit a single time\n    because of the way the data is shuffled.\n    If a dynamic learning rate is used, the learning rate is adapted\n    depending on the number of samples already seen. Calling ``fit`` resets\n    this counter, while ``partial_fit``  will result in increasing the\n    existing counter."
          },
          "average": {
            "type": "bool or int, default=False",
            "description": "When set to True, computes the averaged SGD weights across all\n    updates and stores the result in the ``coef_`` attribute. If set to\n    an int greater than 1, averaging will begin once the total number of\n    samples seen reaches `average`. So ``average=10`` will begin\n    averaging after seeing 10 samples.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (n_features,)",
            "description": "Weights assigned to the features."
          },
          "intercept_": {
            "type": "ndarray of shape (1,)",
            "description": "The intercept term."
          },
          "n_iter_": {
            "type": "int",
            "description": "The actual number of iterations before reaching the stopping criterion."
          },
          "t_": {
            "type": "int",
            "description": "Number of weight updates performed during training.\n    Same as ``(n_iter_ * n_samples + 1)``."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "HuberRegressor : Linear regression model that is robust to outliers.\nLars : Least Angle Regression model.\nLasso : Linear Model trained with L1 prior as regularizer.\nRANSACRegressor : RANSAC (RANdom SAmple Consensus) algorithm.\nRidge : Linear least squares with l2 regularization.\nsklearn.svm.SVR : Epsilon-Support Vector Regression.\nTheilSenRegressor : Theil-Sen Estimator robust multivariate regression model.",
        "notes": "",
        "examples": ">>> import numpy as np\n>>> from sklearn.linear_model import SGDRegressor\n>>> from sklearn.pipeline import make_pipeline\n>>> from sklearn.preprocessing import StandardScaler\n>>> n_samples, n_features = 10, 5\n>>> rng = np.random.RandomState(0)\n>>> y = rng.randn(n_samples)\n>>> X = rng.randn(n_samples, n_features)\n>>> # Always scale the input. The most convenient way is to use a pipeline.\n>>> reg = make_pipeline(StandardScaler(),\n...                     SGDRegressor(max_iter=1000, tol=1e-3))\n>>> reg.fit(X, y)\nPipeline(steps=[('standardscaler', StandardScaler()),\n                ('sgdregressor', SGDRegressor())])"
      }
    },
    {
      "name": "TheilSenRegressor",
      "signature": "TheilSenRegressor(*, fit_intercept=True, copy_X='deprecated', max_subpopulation=10000.0, n_subsamples=None, max_iter=300, tol=0.001, random_state=None, n_jobs=None, verbose=False)",
      "docstring": {
        "description": "Theil-Sen Estimator: robust multivariate regression model.\n\nThe algorithm calculates least square solutions on subsets with size\nn_subsamples of the samples in X. Any value of n_subsamples between the\nnumber of features and samples leads to an estimator with a compromise\nbetween robustness and efficiency. Since the number of least square\nsolutions is \"n_samples choose n_subsamples\", it can be extremely large\nand can therefore be limited with max_subpopulation. If this limit is\nreached, the subsets are chosen randomly. In a final step, the spatial\nmedian (or L1 median) is calculated of all least square solutions.\n\nRead more in the :ref:`User Guide <theil_sen_regression>`.",
        "parameters": {
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If True, X will be copied; else, it may be overwritten.\n\n    .. deprecated:: 1.6\n        `copy_X` was deprecated in 1.6 and will be removed in 1.8.\n        It has no effect as a copy is always made."
          },
          "max_subpopulation": {
            "type": "int, default=1e4",
            "description": "Instead of computing with a set of cardinality 'n choose k', where n is\n    the number of samples and k is the number of subsamples (at least\n    number of features), consider only a stochastic subpopulation of a\n    given maximal size if 'n choose k' is larger than max_subpopulation.\n    For other than small problem sizes this parameter will determine\n    memory usage and runtime if n_subsamples is not changed. Note that the\n    data type should be int but floats such as 1e4 can be accepted too."
          },
          "n_subsamples": {
            "type": "int, default=None",
            "description": "Number of samples to calculate the parameters. This is at least the\n    number of features (plus 1 if fit_intercept=True) and the number of\n    samples as a maximum. A lower number leads to a higher breakdown\n    point and a low efficiency while a high number leads to a low\n    breakdown point and a high efficiency. If None, take the\n    minimum number of subsamples leading to maximal robustness.\n    If n_subsamples is set to n_samples, Theil-Sen is identical to least\n    squares."
          },
          "max_iter": {
            "type": "int, default=300",
            "description": "Maximum number of iterations for the calculation of spatial median."
          },
          "tol": {
            "type": "float, default=1e-3",
            "description": "Tolerance when calculating spatial median."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "A random number generator instance to define the state of the random\n    permutations generator. Pass an int for reproducible output across\n    multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "Number of CPUs to use during the cross validation.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Verbose mode when fitting the model.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (n_features,)",
            "description": "Coefficients of the regression model (median of distribution)."
          },
          "intercept_": {
            "type": "float",
            "description": "Estimated intercept of regression model."
          },
          "breakdown_": {
            "type": "float",
            "description": "Approximated breakdown point."
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations needed for the spatial median."
          },
          "n_subpopulation_": {
            "type": "int",
            "description": "Number of combinations taken into account from 'n choose k', where n is\n    the number of samples and k is the number of subsamples."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "HuberRegressor : Linear regression model that is robust to outliers.\nRANSACRegressor : RANSAC (RANdom SAmple Consensus) algorithm.\nSGDRegressor : Fitted by minimizing a regularized empirical loss with SGD.\n\nReferences\n----------\n- Theil-Sen Estimators in a Multiple Linear Regression Model, 2009\n  Xin Dang, Hanxiang Peng, Xueqin Wang and Heping Zhang\n  http://home.olemiss.edu/~xdang/papers/MTSE.pdf",
        "notes": "",
        "examples": ">>> from sklearn.linear_model import TheilSenRegressor\n>>> from sklearn.datasets import make_regression\n>>> X, y = make_regression(\n...     n_samples=200, n_features=2, noise=4.0, random_state=0)\n>>> reg = TheilSenRegressor(random_state=0).fit(X, y)\n>>> reg.score(X, y)\n0.9884...\n>>> reg.predict(X[:1,])\narray([-31.5871...])"
      }
    },
    {
      "name": "TweedieRegressor",
      "signature": "TweedieRegressor(*, power=0.0, alpha=1.0, fit_intercept=True, link='auto', solver='lbfgs', max_iter=100, tol=0.0001, warm_start=False, verbose=0)",
      "docstring": {
        "description": "Generalized Linear Model with a Tweedie distribution.\n\nThis estimator can be used to model different GLMs depending on the\n``power`` parameter, which determines the underlying distribution.\n\nRead more in the :ref:`User Guide <Generalized_linear_models>`.\n\n.. versionadded:: 0.23",
        "parameters": {
          "power": {
            "type": "float, default=0",
            "description": "The power determines the underlying target distribution according\n        to the following table:\n\n        +-------+------------------------+\n        | Power | Distribution           |\n        +=======+========================+\n        | 0     | Normal                 |\n        +-------+------------------------+\n        | 1     | Poisson                |\n        +-------+------------------------+\n        | (1,2) | Compound Poisson Gamma |\n        +-------+------------------------+\n        | 2     | Gamma                  |\n        +-------+------------------------+\n        | 3     | Inverse Gaussian       |\n        +-------+------------------------+\n\n        For ``0 < power < 1``, no distribution exists."
          },
          "alpha": {
            "type": "float, default=1",
            "description": "Constant that multiplies the L2 penalty term and determines the\n    regularization strength. ``alpha = 0`` is equivalent to unpenalized\n    GLMs. In this case, the design matrix `X` must have full column rank\n    (no collinearities).\n    Values of `alpha` must be in the range `[0.0, inf)`."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Specifies if a constant (a.k.a. bias or intercept) should be\n    added to the linear predictor (`X @ coef + intercept`)."
          },
          "link": {
            "type": "{'auto', 'identity', 'log'}, default='auto'",
            "description": "The link function of the GLM, i.e. mapping from linear predictor\n    `X @ coeff + intercept` to prediction `y_pred`. Option 'auto' sets\n    the link depending on the chosen `power` parameter as follows:\n\n    - 'identity' for ``power <= 0``, e.g. for the Normal distribution\n    - 'log' for ``power > 0``, e.g. for Poisson, Gamma and Inverse Gaussian\n      distributions"
          },
          "solver": {
            "type": "{'lbfgs', 'newton-cholesky'}, default='lbfgs'",
            "description": "Algorithm to use in the optimization problem:\n\n    'lbfgs'\n        Calls scipy's L-BFGS-B optimizer.\n\n    'newton-cholesky'\n        Uses Newton-Raphson steps (in arbitrary precision arithmetic equivalent to\n        iterated reweighted least squares) with an inner Cholesky based solver.\n        This solver is a good choice for `n_samples` >> `n_features`, especially\n        with one-hot encoded categorical features with rare categories. Be aware\n        that the memory usage of this solver has a quadratic dependency on\n        `n_features` because it explicitly computes the Hessian matrix.\n\n        .. versionadded:: 1.2"
          },
          "max_iter": {
            "type": "int, default=100",
            "description": "The maximal number of iterations for the solver.\n    Values must be in the range `[1, inf)`."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "Stopping criterion. For the lbfgs solver,\n    the iteration will stop when ``max{|g_j|, j = 1, ..., d} <= tol``\n    where ``g_j`` is the j-th component of the gradient (derivative) of\n    the objective function.\n    Values must be in the range `(0.0, inf)`."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "If set to ``True``, reuse the solution of the previous call to ``fit``\n    as initialization for ``coef_`` and ``intercept_`` ."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "For the lbfgs solver set verbose to any positive number for verbosity.\n    Values must be in the range `[0, inf)`.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array of shape (n_features,)",
            "description": "Estimated coefficients for the linear predictor (`X @ coef_ +\n    intercept_`) in the GLM."
          },
          "intercept_": {
            "type": "float",
            "description": "Intercept (a.k.a. bias) added to linear predictor."
          },
          "n_iter_": {
            "type": "int",
            "description": "Actual number of iterations used in the solver."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "PoissonRegressor : Generalized Linear Model with a Poisson distribution.\nGammaRegressor : Generalized Linear Model with a Gamma distribution.",
        "notes": "",
        "examples": ">>> from sklearn import linear_model\n>>> clf = linear_model.TweedieRegressor()\n>>> X = [[1, 2], [2, 3], [3, 4], [4, 3]]\n>>> y = [2, 3.5, 5, 5.5]\n>>> clf.fit(X, y)\nTweedieRegressor()\n>>> clf.score(X, y)\nnp.float64(0.839...)\n>>> clf.coef_\narray([0.599..., 0.299...])\n>>> clf.intercept_\nnp.float64(1.600...)\n>>> clf.predict([[1, 1], [3, 4]])\narray([2.500..., 4.599...])"
      }
    },
    {
      "name": "enet_path",
      "signature": "enet_path(X, y, *, l1_ratio=0.5, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, check_input=True, **params)",
      "docstring": {
        "description": "Compute elastic net path with coordinate descent.\n\nThe elastic net optimization function varies for mono and multi-outputs.\n\nFor mono-output tasks it is::\n\n    1 / (2 * n_samples) * ||y - Xw||^2_2\n    + alpha * l1_ratio * ||w||_1\n    + 0.5 * alpha * (1 - l1_ratio) * ||w||^2_2\n\nFor multi-output tasks it is::\n\n    (1 / (2 * n_samples)) * ||Y - XW||_Fro^2\n    + alpha * l1_ratio * ||W||_21\n    + 0.5 * alpha * (1 - l1_ratio) * ||W||_Fro^2\n\nWhere::\n\n    ||W||_21 = \\sum_i \\sqrt{\\sum_j w_{ij}^2}\n\ni.e. the sum of norm of each row.\n\nRead more in the :ref:`User Guide <elastic_net>`.",
        "parameters": {
          "X": {
            "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
            "description": "Training data. Pass directly as Fortran-contiguous data to avoid\n    unnecessary memory duplication. If ``y`` is mono-output then ``X``\n    can be sparse."
          },
          "y": {
            "type": "{array-like, sparse matrix} of shape (n_samples,) or         (n_samples, n_targets)",
            "description": "Target values."
          },
          "l1_ratio": {
            "type": "float, default=0.5",
            "description": "Number between 0 and 1 passed to elastic net (scaling between\n    l1 and l2 penalties). ``l1_ratio=1`` corresponds to the Lasso."
          },
          "eps": {
            "type": "float, default=1e-3",
            "description": "Length of the path. ``eps=1e-3`` means that\n    ``alpha_min / alpha_max = 1e-3``."
          },
          "n_alphas": {
            "type": "int, default=100",
            "description": "Number of alphas along the regularization path."
          },
          "alphas": {
            "type": "array-like, default=None",
            "description": "List of alphas where to compute the models.\n    If None alphas are set automatically."
          },
          "precompute": {
            "type": "'auto', bool or array-like of shape             (n_features, n_features), default='auto'",
            "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram\n    matrix can also be passed as argument."
          },
          "Xy": {
            "type": "array-like of shape (n_features,) or (n_features, n_targets),         default=None",
            "description": "Xy = np.dot(X.T, y) that can be precomputed. It is useful\n    only when the Gram matrix is precomputed."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten."
          },
          "coef_init": {
            "type": "array-like of shape (n_features, ), default=None",
            "description": "The initial values of the coefficients."
          },
          "verbose": {
            "type": "bool or int, default=False",
            "description": "Amount of verbosity."
          },
          "return_n_iter": {
            "type": "bool, default=False",
            "description": "Whether to return the number of iterations or not."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "If set to True, forces coefficients to be positive.\n    (Only allowed when ``y.ndim == 1``)."
          },
          "check_input": {
            "type": "bool, default=True",
            "description": "If set to False, the input validation checks are skipped (including the\n    Gram matrix when provided). It is assumed that they are handled\n    by the caller."
          },
          "**params": {
            "type": "kwargs",
            "description": "Keyword arguments passed to the coordinate descent solver."
          }
        },
        "returns": "alphas : ndarray of shape (n_alphas,)\n    The alphas along the path where models are computed.\n\ncoefs : ndarray of shape (n_features, n_alphas) or             (n_targets, n_features, n_alphas)\n    Coefficients along the path.\n\ndual_gaps : ndarray of shape (n_alphas,)\n    The dual gaps at the end of the optimization for each alpha.\n\nn_iters : list of int\n    The number of iterations taken by the coordinate descent optimizer to\n    reach the specified tolerance for each alpha.\n    (Is returned when ``return_n_iter`` is set to True).",
        "raises": "",
        "see_also": "MultiTaskElasticNet : Multi-task ElasticNet model trained with L1/L2 mixed-norm     as regularizer.\nMultiTaskElasticNetCV : Multi-task L1/L2 ElasticNet with built-in cross-validation.\nElasticNet : Linear regression with combined L1 and L2 priors as regularizer.\nElasticNetCV : Elastic Net model with iterative fitting along a regularization path.",
        "notes": "For an example, see\n:ref:`examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.py\n<sphx_glr_auto_examples_linear_model_plot_lasso_lasso_lars_elasticnet_path.py>`.",
        "examples": ">>> from sklearn.linear_model import enet_path\n>>> from sklearn.datasets import make_regression\n>>> X, y, true_coef = make_regression(\n...    n_samples=100, n_features=5, n_informative=2, coef=True, random_state=0\n... )\n>>> true_coef\narray([ 0.        ,  0.        ,  0.        , 97.9..., 45.7...])\n>>> alphas, estimated_coef, _ = enet_path(X, y, n_alphas=3)\n>>> alphas.shape\n(3,)\n>>> estimated_coef\n array([[ 0.        ,  0.78...,  0.56...],\n        [ 0.        ,  1.12...,  0.61...],\n        [-0.        , -2.12..., -1.12...],\n        [ 0.        , 23.04..., 88.93...],\n        [ 0.        , 10.63..., 41.56...]])"
      }
    },
    {
      "name": "lars_path",
      "signature": "lars_path(X, y, Xy=None, *, Gram=None, max_iter=500, alpha_min=0, method='lar', copy_X=True, eps=2.220446049250313e-16, copy_Gram=True, verbose=0, return_path=True, return_n_iter=False, positive=False)",
      "docstring": {
        "description": "Compute Least Angle Regression or Lasso path using the LARS algorithm.\n\nThe optimization objective for the case method='lasso' is::\n\n(1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\n\nin the case of method='lar', the objective function is only known in\nthe form of an implicit equation (see discussion in [1]_).\n\nRead more in the :ref:`User Guide <least_angle_regression>`.",
        "parameters": {
          "X": {
            "type": "None or ndarray of shape (n_samples, n_features)",
            "description": "Input data. If X is `None`, Gram must also be `None`.\n    If only the Gram matrix is available, use `lars_path_gram` instead."
          },
          "y": {
            "type": "None or ndarray of shape (n_samples,)",
            "description": "Input targets."
          },
          "Xy": {
            "type": "array-like of shape (n_features,), default=None",
            "description": "`Xy = X.T @ y` that can be precomputed. It is useful\n    only when the Gram matrix is precomputed."
          },
          "Gram": {
            "type": "None, 'auto', bool, ndarray of shape (n_features, n_features),             default=None",
            "description": "Precomputed Gram matrix `X.T @ X`, if `'auto'`, the Gram\n    matrix is precomputed from the given X, if there are more samples\n    than features."
          },
          "max_iter": {
            "type": "int, default=500",
            "description": "Maximum number of iterations to perform, set to infinity for no limit."
          },
          "alpha_min": {
            "type": "float, default=0",
            "description": "Minimum correlation along the path. It corresponds to the\n    regularization parameter `alpha` in the Lasso."
          },
          "method": {
            "type": "{'lar', 'lasso'}, default='lar'",
            "description": "Specifies the returned model. Select `'lar'` for Least Angle\n    Regression, `'lasso'` for the Lasso."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If `False`, `X` is overwritten."
          },
          "eps": {
            "type": "float, default=np.finfo(float).eps",
            "description": "The machine-precision regularization in the computation of the\n    Cholesky diagonal factors. Increase this for very ill-conditioned\n    systems. Unlike the `tol` parameter in some iterative\n    optimization-based algorithms, this parameter does not control\n    the tolerance of the optimization."
          },
          "copy_Gram": {
            "type": "bool, default=True",
            "description": "If `False`, `Gram` is overwritten."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "Controls output verbosity."
          },
          "return_path": {
            "type": "bool, default=True",
            "description": "If `True`, returns the entire path, else returns only the\n    last point of the path."
          },
          "return_n_iter": {
            "type": "bool, default=False",
            "description": "Whether to return the number of iterations."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "Restrict coefficients to be >= 0.\n    This option is only allowed with method 'lasso'. Note that the model\n    coefficients will not converge to the ordinary-least-squares solution\n    for small values of alpha. Only coefficients up to the smallest alpha\n    value (`alphas_[alphas_ > 0.].min()` when fit_path=True) reached by\n    the stepwise Lars-Lasso algorithm are typically in congruence with the\n    solution of the coordinate descent `lasso_path` function."
          }
        },
        "returns": "alphas : ndarray of shape (n_alphas + 1,)\n    Maximum of covariances (in absolute value) at each iteration.\n    `n_alphas` is either `max_iter`, `n_features`, or the\n    number of nodes in the path with `alpha >= alpha_min`, whichever\n    is smaller.\n\nactive : ndarray of shape (n_alphas,)\n    Indices of active variables at the end of the path.\n\ncoefs : ndarray of shape (n_features, n_alphas + 1)\n    Coefficients along the path.\n\nn_iter : int\n    Number of iterations run. Returned only if `return_n_iter` is set\n    to True.",
        "raises": "",
        "see_also": "lars_path_gram : Compute LARS path in the sufficient stats mode.\nlasso_path : Compute Lasso path with coordinate descent.\nLassoLars : Lasso model fit with Least Angle Regression a.k.a. Lars.\nLars : Least Angle Regression model a.k.a. LAR.\nLassoLarsCV : Cross-validated Lasso, using the LARS algorithm.\nLarsCV : Cross-validated Least Angle Regression model.\nsklearn.decomposition.sparse_encode : Sparse coding.\n\nReferences\n----------\n.. [1] \"Least Angle Regression\", Efron et al.\n       http://statweb.stanford.edu/~tibs/ftp/lars.pdf\n\n.. [2] `Wikipedia entry on the Least-angle regression\n       <https://en.wikipedia.org/wiki/Least-angle_regression>`_\n\n.. [3] `Wikipedia entry on the Lasso\n       <https://en.wikipedia.org/wiki/Lasso_(statistics)>`_",
        "notes": "",
        "examples": ">>> from sklearn.linear_model import lars_path\n>>> from sklearn.datasets import make_regression\n>>> X, y, true_coef = make_regression(\n...    n_samples=100, n_features=5, n_informative=2, coef=True, random_state=0\n... )\n>>> true_coef\narray([ 0.        ,  0.        ,  0.        , 97.9..., 45.7...])\n>>> alphas, _, estimated_coef = lars_path(X, y)\n>>> alphas.shape\n(3,)\n>>> estimated_coef\narray([[ 0.     ,  0.     ,  0.     ],\n       [ 0.     ,  0.     ,  0.     ],\n       [ 0.     ,  0.     ,  0.     ],\n       [ 0.     , 46.96..., 97.99...],\n       [ 0.     ,  0.     , 45.70...]])"
      }
    },
    {
      "name": "lars_path_gram",
      "signature": "lars_path_gram(Xy, Gram, *, n_samples, max_iter=500, alpha_min=0, method='lar', copy_X=True, eps=2.220446049250313e-16, copy_Gram=True, verbose=0, return_path=True, return_n_iter=False, positive=False)",
      "docstring": {
        "description": "The lars_path in the sufficient stats mode.\n\nThe optimization objective for the case method='lasso' is::\n\n(1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\n\nin the case of method='lar', the objective function is only known in\nthe form of an implicit equation (see discussion in [1]_).\n\nRead more in the :ref:`User Guide <least_angle_regression>`.",
        "parameters": {
          "Xy": {
            "type": "ndarray of shape (n_features,)",
            "description": "`Xy = X.T @ y`."
          },
          "Gram": {
            "type": "ndarray of shape (n_features, n_features)",
            "description": "`Gram = X.T @ X`."
          },
          "n_samples": {
            "type": "int",
            "description": "Equivalent size of sample."
          },
          "max_iter": {
            "type": "int, default=500",
            "description": "Maximum number of iterations to perform, set to infinity for no limit."
          },
          "alpha_min": {
            "type": "float, default=0",
            "description": "Minimum correlation along the path. It corresponds to the\n    regularization parameter alpha parameter in the Lasso."
          },
          "method": {
            "type": "{'lar', 'lasso'}, default='lar'",
            "description": "Specifies the returned model. Select `'lar'` for Least Angle\n    Regression, ``'lasso'`` for the Lasso."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If `False`, `X` is overwritten."
          },
          "eps": {
            "type": "float, default=np.finfo(float).eps",
            "description": "The machine-precision regularization in the computation of the\n    Cholesky diagonal factors. Increase this for very ill-conditioned\n    systems. Unlike the `tol` parameter in some iterative\n    optimization-based algorithms, this parameter does not control\n    the tolerance of the optimization."
          },
          "copy_Gram": {
            "type": "bool, default=True",
            "description": "If `False`, `Gram` is overwritten."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "Controls output verbosity."
          },
          "return_path": {
            "type": "bool, default=True",
            "description": "If `return_path==True` returns the entire path, else returns only the\n    last point of the path."
          },
          "return_n_iter": {
            "type": "bool, default=False",
            "description": "Whether to return the number of iterations."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "Restrict coefficients to be >= 0.\n    This option is only allowed with method 'lasso'. Note that the model\n    coefficients will not converge to the ordinary-least-squares solution\n    for small values of alpha. Only coefficients up to the smallest alpha\n    value (`alphas_[alphas_ > 0.].min()` when `fit_path=True`) reached by\n    the stepwise Lars-Lasso algorithm are typically in congruence with the\n    solution of the coordinate descent lasso_path function."
          }
        },
        "returns": "alphas : ndarray of shape (n_alphas + 1,)\n    Maximum of covariances (in absolute value) at each iteration.\n    `n_alphas` is either `max_iter`, `n_features` or the\n    number of nodes in the path with `alpha >= alpha_min`, whichever\n    is smaller.\n\nactive : ndarray of shape (n_alphas,)\n    Indices of active variables at the end of the path.\n\ncoefs : ndarray of shape (n_features, n_alphas + 1)\n    Coefficients along the path.\n\nn_iter : int\n    Number of iterations run. Returned only if `return_n_iter` is set\n    to True.",
        "raises": "",
        "see_also": "lars_path_gram : Compute LARS path.\nlasso_path : Compute Lasso path with coordinate descent.\nLassoLars : Lasso model fit with Least Angle Regression a.k.a. Lars.\nLars : Least Angle Regression model a.k.a. LAR.\nLassoLarsCV : Cross-validated Lasso, using the LARS algorithm.\nLarsCV : Cross-validated Least Angle Regression model.\nsklearn.decomposition.sparse_encode : Sparse coding.\n\nReferences\n----------\n.. [1] \"Least Angle Regression\", Efron et al.\n       http://statweb.stanford.edu/~tibs/ftp/lars.pdf\n\n.. [2] `Wikipedia entry on the Least-angle regression\n       <https://en.wikipedia.org/wiki/Least-angle_regression>`_\n\n.. [3] `Wikipedia entry on the Lasso\n       <https://en.wikipedia.org/wiki/Lasso_(statistics)>`_",
        "notes": "",
        "examples": ">>> from sklearn.linear_model import lars_path_gram\n>>> from sklearn.datasets import make_regression\n>>> X, y, true_coef = make_regression(\n...    n_samples=100, n_features=5, n_informative=2, coef=True, random_state=0\n... )\n>>> true_coef\narray([ 0.        ,  0.        ,  0.        , 97.9..., 45.7...])\n>>> alphas, _, estimated_coef = lars_path_gram(X.T @ y, X.T @ X, n_samples=100)\n>>> alphas.shape\n(3,)\n>>> estimated_coef\narray([[ 0.     ,  0.     ,  0.     ],\n       [ 0.     ,  0.     ,  0.     ],\n       [ 0.     ,  0.     ,  0.     ],\n       [ 0.     , 46.96..., 97.99...],\n       [ 0.     ,  0.     , 45.70...]])"
      }
    },
    {
      "name": "lasso_path",
      "signature": "lasso_path(X, y, *, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, **params)",
      "docstring": {
        "description": "Compute Lasso path with coordinate descent.\n\nThe Lasso optimization function varies for mono and multi-outputs.\n\nFor mono-output tasks it is::\n\n    (1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\n\nFor multi-output tasks it is::\n\n    (1 / (2 * n_samples)) * ||Y - XW||^2_Fro + alpha * ||W||_21\n\nWhere::\n\n    ||W||_21 = \\sum_i \\sqrt{\\sum_j w_{ij}^2}\n\ni.e. the sum of norm of each row.\n\nRead more in the :ref:`User Guide <lasso>`.",
        "parameters": {
          "X": {
            "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
            "description": "Training data. Pass directly as Fortran-contiguous data to avoid\n    unnecessary memory duplication. If ``y`` is mono-output then ``X``\n    can be sparse."
          },
          "y": {
            "type": "{array-like, sparse matrix} of shape (n_samples,) or         (n_samples, n_targets)",
            "description": "Target values."
          },
          "eps": {
            "type": "float, default=1e-3",
            "description": "Length of the path. ``eps=1e-3`` means that\n    ``alpha_min / alpha_max = 1e-3``."
          },
          "n_alphas": {
            "type": "int, default=100",
            "description": "Number of alphas along the regularization path."
          },
          "alphas": {
            "type": "array-like, default=None",
            "description": "List of alphas where to compute the models.\n    If ``None`` alphas are set automatically."
          },
          "precompute": {
            "type": "'auto', bool or array-like of shape             (n_features, n_features), default='auto'",
            "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram\n    matrix can also be passed as argument."
          },
          "Xy": {
            "type": "array-like of shape (n_features,) or (n_features, n_targets),         default=None",
            "description": "Xy = np.dot(X.T, y) that can be precomputed. It is useful\n    only when the Gram matrix is precomputed."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten."
          },
          "coef_init": {
            "type": "array-like of shape (n_features, ), default=None",
            "description": "The initial values of the coefficients."
          },
          "verbose": {
            "type": "bool or int, default=False",
            "description": "Amount of verbosity."
          },
          "return_n_iter": {
            "type": "bool, default=False",
            "description": "Whether to return the number of iterations or not."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "If set to True, forces coefficients to be positive.\n    (Only allowed when ``y.ndim == 1``)."
          },
          "**params": {
            "type": "kwargs",
            "description": "Keyword arguments passed to the coordinate descent solver."
          }
        },
        "returns": "alphas : ndarray of shape (n_alphas,)\n    The alphas along the path where models are computed.\n\ncoefs : ndarray of shape (n_features, n_alphas) or             (n_targets, n_features, n_alphas)\n    Coefficients along the path.\n\ndual_gaps : ndarray of shape (n_alphas,)\n    The dual gaps at the end of the optimization for each alpha.\n\nn_iters : list of int\n    The number of iterations taken by the coordinate descent optimizer to\n    reach the specified tolerance for each alpha.",
        "raises": "",
        "see_also": "lars_path : Compute Least Angle Regression or Lasso path using LARS\n    algorithm.\nLasso : The Lasso is a linear model that estimates sparse coefficients.\nLassoLars : Lasso model fit with Least Angle Regression a.k.a. Lars.\nLassoCV : Lasso linear model with iterative fitting along a regularization\n    path.\nLassoLarsCV : Cross-validated Lasso using the LARS algorithm.\nsklearn.decomposition.sparse_encode : Estimator that can be used to\n    transform signals into sparse linear combination of atoms from a fixed.",
        "notes": "For an example, see\n:ref:`examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.py\n<sphx_glr_auto_examples_linear_model_plot_lasso_lasso_lars_elasticnet_path.py>`.\n\nTo avoid unnecessary memory duplication the X argument of the fit method\nshould be directly passed as a Fortran-contiguous numpy array.\n\nNote that in certain cases, the Lars solver may be significantly\nfaster to implement this functionality. In particular, linear\ninterpolation can be used to retrieve model coefficients between the\nvalues output by lars_path",
        "examples": "Comparing lasso_path and lars_path with interpolation:\n\n>>> import numpy as np\n>>> from sklearn.linear_model import lasso_path\n>>> X = np.array([[1, 2, 3.1], [2.3, 5.4, 4.3]]).T\n>>> y = np.array([1, 2, 3.1])\n>>> # Use lasso_path to compute a coefficient path\n>>> _, coef_path, _ = lasso_path(X, y, alphas=[5., 1., .5])\n>>> print(coef_path)\n[[0.         0.         0.46874778]\n [0.2159048  0.4425765  0.23689075]]\n\n>>> # Now use lars_path and 1D linear interpolation to compute the\n>>> # same path\n>>> from sklearn.linear_model import lars_path\n>>> alphas, active, coef_path_lars = lars_path(X, y, method='lasso')\n>>> from scipy import interpolate\n>>> coef_path_continuous = interpolate.interp1d(alphas[::-1],\n...                                             coef_path_lars[:, ::-1])\n>>> print(coef_path_continuous([5., 1., .5]))\n[[0.         0.         0.46915237]\n [0.2159048  0.4425765  0.23668876]]"
      }
    },
    {
      "name": "orthogonal_mp",
      "signature": "orthogonal_mp(X, y, *, n_nonzero_coefs=None, tol=None, precompute=False, copy_X=True, return_path=False, return_n_iter=False)",
      "docstring": {
        "description": "Orthogonal Matching Pursuit (OMP).\n\nSolves n_targets Orthogonal Matching Pursuit problems.\nAn instance of the problem has the form:\n\nWhen parametrized by the number of non-zero coefficients using\n`n_nonzero_coefs`:\nargmin ||y - X\\gamma||^2 subject to ||\\gamma||_0 <= n_{nonzero coefs}\n\nWhen parametrized by error using the parameter `tol`:\nargmin ||\\gamma||_0 subject to ||y - X\\gamma||^2 <= tol\n\nRead more in the :ref:`User Guide <omp>`.",
        "parameters": {
          "X": {
            "type": "array-like of shape (n_samples, n_features)",
            "description": "Input data. Columns are assumed to have unit norm."
          },
          "y": {
            "type": "ndarray of shape (n_samples,) or (n_samples, n_targets)",
            "description": "Input targets."
          },
          "n_nonzero_coefs": {
            "type": "int, default=None",
            "description": "Desired number of non-zero entries in the solution. If None (by\n    default) this value is set to 10% of n_features."
          },
          "tol": {
            "type": "float, default=None",
            "description": "Maximum squared norm of the residual. If not None, overrides n_nonzero_coefs."
          },
          "precompute": {
            "type": "'auto' or bool, default=False",
            "description": "Whether to perform precomputations. Improves performance when n_targets\n    or n_samples is very large."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "Whether the design matrix X must be copied by the algorithm. A false\n    value is only helpful if X is already Fortran-ordered, otherwise a\n    copy is made anyway."
          },
          "return_path": {
            "type": "bool, default=False",
            "description": "Whether to return every value of the nonzero coefficients along the\n    forward path. Useful for cross-validation."
          },
          "return_n_iter": {
            "type": "bool, default=False",
            "description": "Whether or not to return the number of iterations."
          }
        },
        "returns": "coef : ndarray of shape (n_features,) or (n_features, n_targets)\n    Coefficients of the OMP solution. If `return_path=True`, this contains\n    the whole coefficient path. In this case its shape is\n    (n_features, n_features) or (n_features, n_targets, n_features) and\n    iterating over the last axis generates coefficients in increasing order\n    of active features.\n\nn_iters : array-like or int\n    Number of active features across every target. Returned only if\n    `return_n_iter` is set to True.",
        "raises": "",
        "see_also": "OrthogonalMatchingPursuit : Orthogonal Matching Pursuit model.\northogonal_mp_gram : Solve OMP problems using Gram matrix and the product X.T * y.\nlars_path : Compute Least Angle Regression or Lasso path using LARS algorithm.\nsklearn.decomposition.sparse_encode : Sparse coding.",
        "notes": "Orthogonal matching pursuit was introduced in S. Mallat, Z. Zhang,\nMatching pursuits with time-frequency dictionaries, IEEE Transactions on\nSignal Processing, Vol. 41, No. 12. (December 1993), pp. 3397-3415.\n(https://www.di.ens.fr/~mallat/papiers/MallatPursuit93.pdf)\n\nThis implementation is based on Rubinstein, R., Zibulevsky, M. and Elad,\nM., Efficient Implementation of the K-SVD Algorithm using Batch Orthogonal\nMatching Pursuit Technical Report - CS Technion, April 2008.\nhttps://www.cs.technion.ac.il/~ronrubin/Publications/KSVD-OMP-v2.pdf",
        "examples": ">>> from sklearn.datasets import make_regression\n>>> from sklearn.linear_model import orthogonal_mp\n>>> X, y = make_regression(noise=4, random_state=0)\n>>> coef = orthogonal_mp(X, y)\n>>> coef.shape\n(100,)\n>>> X[:1,] @ coef\narray([-78.68...])"
      }
    },
    {
      "name": "orthogonal_mp_gram",
      "signature": "orthogonal_mp_gram(Gram, Xy, *, n_nonzero_coefs=None, tol=None, norms_squared=None, copy_Gram=True, copy_Xy=True, return_path=False, return_n_iter=False)",
      "docstring": {
        "description": "Gram Orthogonal Matching Pursuit (OMP).\n\nSolves n_targets Orthogonal Matching Pursuit problems using only\nthe Gram matrix X.T * X and the product X.T * y.\n\nRead more in the :ref:`User Guide <omp>`.",
        "parameters": {
          "Gram": {
            "type": "array-like of shape (n_features, n_features)",
            "description": "Gram matrix of the input data: `X.T * X`."
          },
          "Xy": {
            "type": "array-like of shape (n_features,) or (n_features, n_targets)",
            "description": "Input targets multiplied by `X`: `X.T * y`."
          },
          "n_nonzero_coefs": {
            "type": "int, default=None",
            "description": "Desired number of non-zero entries in the solution. If `None` (by\n    default) this value is set to 10% of n_features."
          },
          "tol": {
            "type": "float, default=None",
            "description": "Maximum squared norm of the residual. If not `None`,\n    overrides `n_nonzero_coefs`."
          },
          "norms_squared": {
            "type": "array-like of shape (n_targets,), default=None",
            "description": "Squared L2 norms of the lines of `y`. Required if `tol` is not None."
          },
          "copy_Gram": {
            "type": "bool, default=True",
            "description": "Whether the gram matrix must be copied by the algorithm. A `False`\n    value is only helpful if it is already Fortran-ordered, otherwise a\n    copy is made anyway."
          },
          "copy_Xy": {
            "type": "bool, default=True",
            "description": "Whether the covariance vector `Xy` must be copied by the algorithm.\n    If `False`, it may be overwritten."
          },
          "return_path": {
            "type": "bool, default=False",
            "description": "Whether to return every value of the nonzero coefficients along the\n    forward path. Useful for cross-validation."
          },
          "return_n_iter": {
            "type": "bool, default=False",
            "description": "Whether or not to return the number of iterations."
          }
        },
        "returns": "coef : ndarray of shape (n_features,) or (n_features, n_targets)\n    Coefficients of the OMP solution. If `return_path=True`, this contains\n    the whole coefficient path. In this case its shape is\n    `(n_features, n_features)` or `(n_features, n_targets, n_features)` and\n    iterating over the last axis yields coefficients in increasing order\n    of active features.\n\nn_iters : list or int\n    Number of active features across every target. Returned only if\n    `return_n_iter` is set to True.",
        "raises": "",
        "see_also": "OrthogonalMatchingPursuit : Orthogonal Matching Pursuit model (OMP).\northogonal_mp : Solves n_targets Orthogonal Matching Pursuit problems.\nlars_path : Compute Least Angle Regression or Lasso path using\n    LARS algorithm.\nsklearn.decomposition.sparse_encode : Generic sparse coding.\n    Each column of the result is the solution to a Lasso problem.",
        "notes": "Orthogonal matching pursuit was introduced in G. Mallat, Z. Zhang,\nMatching pursuits with time-frequency dictionaries, IEEE Transactions on\nSignal Processing, Vol. 41, No. 12. (December 1993), pp. 3397-3415.\n(https://www.di.ens.fr/~mallat/papiers/MallatPursuit93.pdf)\n\nThis implementation is based on Rubinstein, R., Zibulevsky, M. and Elad,\nM., Efficient Implementation of the K-SVD Algorithm using Batch Orthogonal\nMatching Pursuit Technical Report - CS Technion, April 2008.\nhttps://www.cs.technion.ac.il/~ronrubin/Publications/KSVD-OMP-v2.pdf",
        "examples": ">>> from sklearn.datasets import make_regression\n>>> from sklearn.linear_model import orthogonal_mp_gram\n>>> X, y = make_regression(noise=4, random_state=0)\n>>> coef = orthogonal_mp_gram(X.T @ X, X.T @ y)\n>>> coef.shape\n(100,)\n>>> X[:1,] @ coef\narray([-78.68...])"
      }
    },
    {
      "name": "ridge_regression",
      "signature": "ridge_regression(X, y, alpha, *, sample_weight=None, solver='auto', max_iter=None, tol=0.0001, verbose=0, positive=False, random_state=None, return_n_iter=False, return_intercept=False, check_input=True)",
      "docstring": {
        "description": "Solve the ridge equation by the method of normal equations.\n\nRead more in the :ref:`User Guide <ridge_regression>`.",
        "parameters": {
          "X": {
            "type": "{array-like, sparse matrix, LinearOperator} of shape         (n_samples, n_features)",
            "description": "Training data."
          },
          "y": {
            "type": "array-like of shape (n_samples,) or (n_samples, n_targets)",
            "description": "Target values."
          },
          "alpha": {
            "type": "float or array-like of shape (n_targets,)",
            "description": "Constant that multiplies the L2 term, controlling regularization\n    strength. `alpha` must be a non-negative float i.e. in `[0, inf)`.\n\n    When `alpha = 0`, the objective is equivalent to ordinary least\n    squares, solved by the :class:`LinearRegression` object. For numerical\n    reasons, using `alpha = 0` with the `Ridge` object is not advised.\n    Instead, you should use the :class:`LinearRegression` object.\n\n    If an array is passed, penalties are assumed to be specific to the\n    targets. Hence they must correspond in number."
          },
          "sample_weight": {
            "type": "float or array-like of shape (n_samples,), default=None",
            "description": "Individual weights for each sample. If given a float, every sample\n    will have the same weight. If sample_weight is not None and\n    solver='auto', the solver will be set to 'cholesky'.\n\n    .. versionadded:: 0.17"
          },
          "solver": {
            "type": "{'auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg',             'sag', 'saga', 'lbfgs'}, default='auto'",
            "description": "Solver to use in the computational routines:\n\n    - 'auto' chooses the solver automatically based on the type of data.\n\n    - 'svd' uses a Singular Value Decomposition of X to compute the Ridge\n      coefficients. It is the most stable solver, in particular more stable\n      for singular matrices than 'cholesky' at the cost of being slower.\n\n    - 'cholesky' uses the standard scipy.linalg.solve function to\n      obtain a closed-form solution via a Cholesky decomposition of\n      dot(X.T, X)\n\n    - 'sparse_cg' uses the conjugate gradient solver as found in\n      scipy.sparse.linalg.cg. As an iterative algorithm, this solver is\n      more appropriate than 'cholesky' for large-scale data\n      (possibility to set `tol` and `max_iter`).\n\n    - 'lsqr' uses the dedicated regularized least-squares routine\n      scipy.sparse.linalg.lsqr. It is the fastest and uses an iterative\n      procedure.\n\n    - 'sag' uses a Stochastic Average Gradient descent, and 'saga' uses\n      its improved, unbiased version named SAGA. Both methods also use an\n      iterative procedure, and are often faster than other solvers when\n      both n_samples and n_features are large. Note that 'sag' and\n      'saga' fast convergence is only guaranteed on features with\n      approximately the same scale. You can preprocess the data with a\n      scaler from sklearn.preprocessing.\n\n    - 'lbfgs' uses L-BFGS-B algorithm implemented in\n      `scipy.optimize.minimize`. It can be used only when `positive`\n      is True.\n\n    All solvers except 'svd' support both dense and sparse data. However, only\n    'lsqr', 'sag', 'sparse_cg', and 'lbfgs' support sparse input when\n    `fit_intercept` is True.\n\n    .. versionadded:: 0.17\n       Stochastic Average Gradient descent solver.\n    .. versionadded:: 0.19\n       SAGA solver."
          },
          "max_iter": {
            "type": "int, default=None",
            "description": "Maximum number of iterations for conjugate gradient solver.\n    For the 'sparse_cg' and 'lsqr' solvers, the default value is determined\n    by scipy.sparse.linalg. For 'sag' and saga solver, the default value is\n    1000. For 'lbfgs' solver, the default value is 15000."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "Precision of the solution. Note that `tol` has no effect for solvers 'svd' and\n    'cholesky'.\n\n    .. versionchanged:: 1.2\n       Default value changed from 1e-3 to 1e-4 for consistency with other linear\n       models."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "Verbosity level. Setting verbose > 0 will display additional\n    information depending on the solver used."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "When set to ``True``, forces the coefficients to be positive.\n    Only 'lbfgs' solver is supported in this case."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used when ``solver`` == 'sag' or 'saga' to shuffle the data.\n    See :term:`Glossary <random_state>` for details."
          },
          "return_n_iter": {
            "type": "bool, default=False",
            "description": "If True, the method also returns `n_iter`, the actual number of\n    iteration performed by the solver.\n\n    .. versionadded:: 0.17"
          },
          "return_intercept": {
            "type": "bool, default=False",
            "description": "If True and if X is sparse, the method also returns the intercept,\n    and the solver is automatically changed to 'sag'. This is only a\n    temporary fix for fitting the intercept with sparse data. For dense\n    data, use sklearn.linear_model._preprocess_data before your regression.\n\n    .. versionadded:: 0.17"
          },
          "check_input": {
            "type": "bool, default=True",
            "description": "If False, the input arrays X and y will not be checked.\n\n    .. versionadded:: 0.21"
          }
        },
        "returns": "coef : ndarray of shape (n_features,) or (n_targets, n_features)\n    Weight vector(s).\n\nn_iter : int, optional\n    The actual number of iteration performed by the solver.\n    Only returned if `return_n_iter` is True.\n\nintercept : float or ndarray of shape (n_targets,)\n    The intercept of the model. Only returned if `return_intercept`\n    is True and if X is a scipy sparse array.",
        "raises": "",
        "see_also": "",
        "notes": "This function won't compute the intercept.\n\nRegularization improves the conditioning of the problem and\nreduces the variance of the estimates. Larger values specify stronger\nregularization. Alpha corresponds to ``1 / (2C)`` in other linear\nmodels such as :class:`~sklearn.linear_model.LogisticRegression` or\n:class:`~sklearn.svm.LinearSVC`. If an array is passed, penalties are\nassumed to be specific to the targets. Hence they must correspond in\nnumber.",
        "examples": ">>> import numpy as np\n>>> from sklearn.datasets import make_regression\n>>> from sklearn.linear_model import ridge_regression\n>>> rng = np.random.RandomState(0)\n>>> X = rng.randn(100, 4)\n>>> y = 2.0 * X[:, 0] - 1.0 * X[:, 1] + 0.1 * rng.standard_normal(100)\n>>> coef, intercept = ridge_regression(X, y, alpha=1.0, return_intercept=True)\n>>> list(coef)\n[np.float64(1.9...), np.float64(-1.0...), np.float64(-0.0...), np.float64(-0.0...)]\n>>> intercept\nnp.float64(-0.0...)"
      }
    }
  ],
  "classes": [
    {
      "name": "ARDRegression",
      "docstring": {
        "description": "Bayesian ARD regression.\n\nFit the weights of a regression model, using an ARD prior. The weights of\nthe regression model are assumed to be in Gaussian distributions.\nAlso estimate the parameters lambda (precisions of the distributions of the\nweights) and alpha (precision of the distribution of the noise).\nThe estimation is done by an iterative procedures (Evidence Maximization)\n\nRead more in the :ref:`User Guide <bayesian_regression>`.",
        "parameters": {
          "max_iter": {
            "type": "int, default=300",
            "description": "Maximum number of iterations.\n\n    .. versionchanged:: 1.3"
          },
          "tol": {
            "type": "float, default=1e-3",
            "description": "Stop the algorithm if w has converged."
          },
          "alpha_1": {
            "type": "float, default=1e-6",
            "description": "Hyper-parameter : shape parameter for the Gamma distribution prior\n    over the alpha parameter."
          },
          "alpha_2": {
            "type": "float, default=1e-6",
            "description": "Hyper-parameter : inverse scale parameter (rate parameter) for the\n    Gamma distribution prior over the alpha parameter."
          },
          "lambda_1": {
            "type": "float, default=1e-6",
            "description": "Hyper-parameter : shape parameter for the Gamma distribution prior\n    over the lambda parameter."
          },
          "lambda_2": {
            "type": "float, default=1e-6",
            "description": "Hyper-parameter : inverse scale parameter (rate parameter) for the\n    Gamma distribution prior over the lambda parameter."
          },
          "compute_score": {
            "type": "bool, default=False",
            "description": "If True, compute the objective function at each step of the model."
          },
          "threshold_lambda": {
            "type": "float, default=10 000",
            "description": "Threshold for removing (pruning) weights with high precision from\n    the computation."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If True, X will be copied; else, it may be overwritten."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Verbose mode when fitting the model.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array-like of shape (n_features,)",
            "description": "Coefficients of the regression model (mean of distribution)"
          },
          "alpha_": {
            "type": "float",
            "description": "estimated precision of the noise."
          },
          "lambda_": {
            "type": "array-like of shape (n_features,)",
            "description": "estimated precisions of the weights."
          },
          "sigma_": {
            "type": "array-like of shape (n_features, n_features)",
            "description": "estimated variance-covariance matrix of the weights"
          },
          "scores_": {
            "type": "float",
            "description": "if computed, value of the objective function (to be maximized)"
          },
          "n_iter_": {
            "type": "int",
            "description": "The actual number of iterations to reach the stopping criterion.\n\n    .. versionadded:: 1.3"
          },
          "intercept_": {
            "type": "float",
            "description": "Independent term in decision function. Set to 0.0 if\n    ``fit_intercept = False``."
          },
          "X_offset_": {
            "type": "float",
            "description": "If `fit_intercept=True`, offset subtracted for centering data to a\n    zero mean. Set to np.zeros(n_features) otherwise."
          },
          "X_scale_": {
            "type": "float",
            "description": "Set to np.ones(n_features)."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "BayesianRidge : Bayesian ridge regression.",
        "notes": "For an example, see :ref:`examples/linear_model/plot_ard.py\n<sphx_glr_auto_examples_linear_model_plot_ard.py>`.\n\nReferences\n----------\nD. J. C. MacKay, Bayesian nonlinear modeling for the prediction\ncompetition, ASHRAE Transactions, 1994.\n\nR. Salakhutdinov, Lecture notes on Statistical Machine Learning,\nhttp://www.utstat.toronto.edu/~rsalakhu/sta4273/notes/Lecture2.pdf#page=15\nTheir beta is our ``self.alpha_``\nTheir alpha is our ``self.lambda_``\nARD is a little different than the slide: only dimensions/features for\nwhich ``self.lambda_ < self.threshold_lambda`` are kept and the rest are\ndiscarded.",
        "examples": ">>> from sklearn import linear_model\n>>> clf = linear_model.ARDRegression()\n>>> clf.fit([[0,0], [1, 1], [2, 2]], [0, 1, 2])\nARDRegression()\n>>> clf.predict([[1, 1]])\narray([1.])"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y)",
          "docstring": {
            "description": "Fit the model according to the given training data and parameters.\n\nIterative procedure to maximize the evidence",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Training vector, where `n_samples` is the number of samples and\n    `n_features` is the number of features."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Target values (integers). Will be cast to X's dtype if necessary."
              }
            },
            "returns": "self : object\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X, return_std=False)",
          "docstring": {
            "description": "Predict using the linear model.\n\nIn addition to the mean of the predictive distribution, also its\nstandard deviation can be returned.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Samples."
              },
              "return_std": {
                "type": "bool, default=False",
                "description": "Whether to return the standard deviation of posterior prediction."
              }
            },
            "returns": "y_mean : array-like of shape (n_samples,)\n    Mean of predictive distribution of query points.\n\ny_std : array-like of shape (n_samples,)\n    Standard deviation of predictive distribution of query points.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_predict_request",
          "signature": "set_predict_request(self: sklearn.linear_model._bayes.ARDRegression, *, return_std: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._bayes.ARDRegression",
          "docstring": {
            "description": "Request metadata passed to the ``predict`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``predict`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``predict``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "return_std": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``return_std`` parameter in ``predict``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._bayes.ARDRegression, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._bayes.ARDRegression",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "BayesianRidge",
      "docstring": {
        "description": "Bayesian ridge regression.\n\nFit a Bayesian ridge model. See the Notes section for details on this\nimplementation and the optimization of the regularization parameters\nlambda (precision of the weights) and alpha (precision of the noise).\n\nRead more in the :ref:`User Guide <bayesian_regression>`.\nFor an intuitive visualization of how the sinusoid is approximated by\na polynomial using different pairs of initial values, see\n:ref:`sphx_glr_auto_examples_linear_model_plot_bayesian_ridge_curvefit.py`.",
        "parameters": {
          "max_iter": {
            "type": "int, default=300",
            "description": "Maximum number of iterations over the complete dataset before\n    stopping independently of any early stopping criterion.\n\n    .. versionchanged:: 1.3"
          },
          "tol": {
            "type": "float, default=1e-3",
            "description": "Stop the algorithm if w has converged."
          },
          "alpha_1": {
            "type": "float, default=1e-6",
            "description": "Hyper-parameter : shape parameter for the Gamma distribution prior\n    over the alpha parameter."
          },
          "alpha_2": {
            "type": "float, default=1e-6",
            "description": "Hyper-parameter : inverse scale parameter (rate parameter) for the\n    Gamma distribution prior over the alpha parameter."
          },
          "lambda_1": {
            "type": "float, default=1e-6",
            "description": "Hyper-parameter : shape parameter for the Gamma distribution prior\n    over the lambda parameter."
          },
          "lambda_2": {
            "type": "float, default=1e-6",
            "description": "Hyper-parameter : inverse scale parameter (rate parameter) for the\n    Gamma distribution prior over the lambda parameter."
          },
          "alpha_init": {
            "type": "float, default=None",
            "description": "Initial value for alpha (precision of the noise).\n    If not set, alpha_init is 1/Var(y).\n\n    .. versionadded:: 0.22"
          },
          "lambda_init": {
            "type": "float, default=None",
            "description": "Initial value for lambda (precision of the weights).\n    If not set, lambda_init is 1.\n\n    .. versionadded:: 0.22"
          },
          "compute_score": {
            "type": "bool, default=False",
            "description": "If True, compute the log marginal likelihood at each iteration of the\n    optimization."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model.\n    The intercept is not treated as a probabilistic parameter\n    and thus has no associated variance. If set\n    to False, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If True, X will be copied; else, it may be overwritten."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Verbose mode when fitting the model.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array-like of shape (n_features,)",
            "description": "Coefficients of the regression model (mean of distribution)"
          },
          "intercept_": {
            "type": "float",
            "description": "Independent term in decision function. Set to 0.0 if\n    `fit_intercept = False`."
          },
          "alpha_": {
            "type": "float",
            "description": "Estimated precision of the noise."
          },
          "lambda_": {
            "type": "float",
            "description": "Estimated precision of the weights."
          },
          "sigma_": {
            "type": "array-like of shape (n_features, n_features)",
            "description": "Estimated variance-covariance matrix of the weights"
          },
          "scores_": {
            "type": "array-like of shape (n_iter_+1,)",
            "description": "If computed_score is True, value of the log marginal likelihood (to be\n    maximized) at each iteration of the optimization. The array starts\n    with the value of the log marginal likelihood obtained for the initial\n    values of alpha and lambda and ends with the value obtained for the\n    estimated alpha and lambda."
          },
          "n_iter_": {
            "type": "int",
            "description": "The actual number of iterations to reach the stopping criterion."
          },
          "X_offset_": {
            "type": "ndarray of shape (n_features,)",
            "description": "If `fit_intercept=True`, offset subtracted for centering data to a\n    zero mean. Set to np.zeros(n_features) otherwise."
          },
          "X_scale_": {
            "type": "ndarray of shape (n_features,)",
            "description": "Set to np.ones(n_features)."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "ARDRegression : Bayesian ARD regression.",
        "notes": "There exist several strategies to perform Bayesian ridge regression. This\nimplementation is based on the algorithm described in Appendix A of\n(Tipping, 2001) where updates of the regularization parameters are done as\nsuggested in (MacKay, 1992). Note that according to A New\nView of Automatic Relevance Determination (Wipf and Nagarajan, 2008) these\nupdate rules do not guarantee that the marginal likelihood is increasing\nbetween two consecutive iterations of the optimization.\n\nReferences\n----------\nD. J. C. MacKay, Bayesian Interpolation, Computation and Neural Systems,\nVol. 4, No. 3, 1992.\n\nM. E. Tipping, Sparse Bayesian Learning and the Relevance Vector Machine,\nJournal of Machine Learning Research, Vol. 1, 2001.",
        "examples": ">>> from sklearn import linear_model\n>>> clf = linear_model.BayesianRidge()\n>>> clf.fit([[0,0], [1, 1], [2, 2]], [0, 1, 2])\nBayesianRidge()\n>>> clf.predict([[1, 1]])\narray([1.])"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Fit the model.",
            "parameters": {
              "X": {
                "type": "ndarray of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "ndarray of shape (n_samples,)",
                "description": "Target values. Will be cast to X's dtype if necessary."
              },
              "sample_weight": {
                "type": "ndarray of shape (n_samples,), default=None",
                "description": "Individual weights for each sample.\n\n    .. versionadded:: 0.20\n       parameter *sample_weight* support to BayesianRidge."
              }
            },
            "returns": "self : object\n    Returns the instance itself.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X, return_std=False)",
          "docstring": {
            "description": "Predict using the linear model.\n\nIn addition to the mean of the predictive distribution, also its\nstandard deviation can be returned.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Samples."
              },
              "return_std": {
                "type": "bool, default=False",
                "description": "Whether to return the standard deviation of posterior prediction."
              }
            },
            "returns": "y_mean : array-like of shape (n_samples,)\n    Mean of predictive distribution of query points.\n\ny_std : array-like of shape (n_samples,)\n    Standard deviation of predictive distribution of query points.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._bayes.BayesianRidge, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._bayes.BayesianRidge",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_predict_request",
          "signature": "set_predict_request(self: sklearn.linear_model._bayes.BayesianRidge, *, return_std: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._bayes.BayesianRidge",
          "docstring": {
            "description": "Request metadata passed to the ``predict`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``predict`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``predict``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "return_std": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``return_std`` parameter in ``predict``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._bayes.BayesianRidge, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._bayes.BayesianRidge",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "ElasticNet",
      "docstring": {
        "description": "Linear regression with combined L1 and L2 priors as regularizer.\n\nMinimizes the objective function::\n\n        1 / (2 * n_samples) * ||y - Xw||^2_2\n        + alpha * l1_ratio * ||w||_1\n        + 0.5 * alpha * (1 - l1_ratio) * ||w||^2_2\n\nIf you are interested in controlling the L1 and L2 penalty\nseparately, keep in mind that this is equivalent to::\n\n        a * ||w||_1 + 0.5 * b * ||w||_2^2\n\nwhere::\n\n        alpha = a + b and l1_ratio = a / (a + b)\n\nThe parameter l1_ratio corresponds to alpha in the glmnet R package while\nalpha corresponds to the lambda parameter in glmnet. Specifically, l1_ratio\n= 1 is the lasso penalty. Currently, l1_ratio <= 0.01 is not reliable,\nunless you supply your own sequence of alpha.\n\nRead more in the :ref:`User Guide <elastic_net>`.",
        "parameters": {
          "alpha": {
            "type": "float, default=1.0",
            "description": "Constant that multiplies the penalty terms. Defaults to 1.0.\n    See the notes for the exact mathematical meaning of this\n    parameter. ``alpha = 0`` is equivalent to an ordinary least square,\n    solved by the :class:`LinearRegression` object. For numerical\n    reasons, using ``alpha = 0`` with the ``Lasso`` object is not advised.\n    Given this, you should use the :class:`LinearRegression` object."
          },
          "l1_ratio": {
            "type": "float, default=0.5",
            "description": "The ElasticNet mixing parameter, with ``0 <= l1_ratio <= 1``. For\n    ``l1_ratio = 0`` the penalty is an L2 penalty. ``For l1_ratio = 1`` it\n    is an L1 penalty.  For ``0 < l1_ratio < 1``, the penalty is a\n    combination of L1 and L2."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether the intercept should be estimated or not. If ``False``, the\n    data is assumed to be already centered."
          },
          "precompute": {
            "type": "bool or array-like of shape (n_features, n_features),                 default=False",
            "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. The Gram matrix can also be passed as argument.\n    For sparse input this option is always ``False`` to preserve sparsity.\n    Check :ref:`an example on how to use a precomputed Gram Matrix in ElasticNet\n    <sphx_glr_auto_examples_linear_model_plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.py>`\n    for details."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of iterations."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "The tolerance for the optimization: if the updates are\n    smaller than ``tol``, the optimization code checks the\n    dual gap for optimality and continues until it is smaller\n    than ``tol``, see Notes below."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to ``True``, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution.\n    See :term:`the Glossary <warm_start>`."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "When set to ``True``, forces the coefficients to be positive."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "The seed of the pseudo random number generator that selects a random\n    feature to update. Used when ``selection`` == 'random'.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "selection": {
            "type": "{'cyclic', 'random'}, default='cyclic'",
            "description": "If set to 'random', a random coefficient is updated every iteration\n    rather than looping over features sequentially by default. This\n    (setting to 'random') often leads to significantly faster convergence\n    especially when tol is higher than 1e-4.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (n_features,) or (n_targets, n_features)",
            "description": "Parameter vector (w in the cost function formula)."
          },
          "sparse_coef_": {
            "type": "sparse matrix of shape (n_features,) or             (n_targets, n_features)",
            "description": "Sparse representation of the `coef_`."
          },
          "intercept_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "n_iter_": {
            "type": "list of int",
            "description": "Number of iterations run by the coordinate descent solver to reach\n    the specified tolerance."
          },
          "dual_gap_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Given param alpha, the dual gaps at the end of the optimization,\n    same shape as each observation of y."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "ElasticNetCV : Elastic net model with best model selection by\n    cross-validation.\nSGDRegressor : Implements elastic net regression with incremental training.\nSGDClassifier : Implements logistic regression with elastic net penalty\n    (``SGDClassifier(loss=\"log_loss\", penalty=\"elasticnet\")``).",
        "notes": "To avoid unnecessary memory duplication the X argument of the fit method\nshould be directly passed as a Fortran-contiguous numpy array.\n\nThe precise stopping criteria based on `tol` are the following: First, check that\nthat maximum coordinate update, i.e. :math:`\\max_j |w_j^{new} - w_j^{old}|`\nis smaller than `tol` times the maximum absolute coefficient, :math:`\\max_j |w_j|`.\nIf so, then additionally check whether the dual gap is smaller than `tol` times\n:math:`||y||_2^2 / n_{      ext{samples}}`.",
        "examples": ">>> from sklearn.linear_model import ElasticNet\n>>> from sklearn.datasets import make_regression\n\n>>> X, y = make_regression(n_features=2, random_state=0)\n>>> regr = ElasticNet(random_state=0)\n>>> regr.fit(X, y)\nElasticNet(random_state=0)\n>>> print(regr.coef_)\n[18.83816048 64.55968825]\n>>> print(regr.intercept_)\n1.451...\n>>> print(regr.predict([[0, 0]]))\n[1.451...]"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None, check_input=True)",
          "docstring": {
            "description": "Fit model with coordinate descent.",
            "parameters": {
              "X": {
                "type": "{ndarray, sparse matrix, sparse array} of (n_samples, n_features)",
                "description": "Data.\n\n    Note that large sparse matrices and arrays requiring `int64`\n    indices are not accepted."
              },
              "y": {
                "type": "ndarray of shape (n_samples,) or (n_samples, n_targets)",
                "description": "Target. Will be cast to X's dtype if necessary."
              },
              "sample_weight": {
                "type": "float or array-like of shape (n_samples,), default=None",
                "description": "Sample weights. Internally, the `sample_weight` vector will be\n    rescaled to sum to `n_samples`.\n\n    .. versionadded:: 0.23"
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you do."
              }
            },
            "returns": "self : object\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "Coordinate descent is an algorithm that considers each column of\ndata at a time hence it will automatically convert the X input\nas a Fortran-contiguous numpy array if necessary.\n\nTo avoid memory re-allocation it is advised to allocate the\ninitial data in memory directly using that format.",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "path",
          "signature": "enet_path(X, y, *, l1_ratio=0.5, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, check_input=True, **params)",
          "docstring": {
            "description": "Compute elastic net path with coordinate descent.\n\nThe elastic net optimization function varies for mono and multi-outputs.\n\nFor mono-output tasks it is::\n\n    1 / (2 * n_samples) * ||y - Xw||^2_2\n    + alpha * l1_ratio * ||w||_1\n    + 0.5 * alpha * (1 - l1_ratio) * ||w||^2_2\n\nFor multi-output tasks it is::\n\n    (1 / (2 * n_samples)) * ||Y - XW||_Fro^2\n    + alpha * l1_ratio * ||W||_21\n    + 0.5 * alpha * (1 - l1_ratio) * ||W||_Fro^2\n\nWhere::\n\n    ||W||_21 = \\sum_i \\sqrt{\\sum_j w_{ij}^2}\n\ni.e. the sum of norm of each row.\n\nRead more in the :ref:`User Guide <elastic_net>`.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data. Pass directly as Fortran-contiguous data to avoid\n    unnecessary memory duplication. If ``y`` is mono-output then ``X``\n    can be sparse."
              },
              "y": {
                "type": "{array-like, sparse matrix} of shape (n_samples,) or         (n_samples, n_targets)",
                "description": "Target values."
              },
              "l1_ratio": {
                "type": "float, default=0.5",
                "description": "Number between 0 and 1 passed to elastic net (scaling between\n    l1 and l2 penalties). ``l1_ratio=1`` corresponds to the Lasso."
              },
              "eps": {
                "type": "float, default=1e-3",
                "description": "Length of the path. ``eps=1e-3`` means that\n    ``alpha_min / alpha_max = 1e-3``."
              },
              "n_alphas": {
                "type": "int, default=100",
                "description": "Number of alphas along the regularization path."
              },
              "alphas": {
                "type": "array-like, default=None",
                "description": "List of alphas where to compute the models.\n    If None alphas are set automatically."
              },
              "precompute": {
                "type": "'auto', bool or array-like of shape             (n_features, n_features), default='auto'",
                "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram\n    matrix can also be passed as argument."
              },
              "Xy": {
                "type": "array-like of shape (n_features,) or (n_features, n_targets),         default=None",
                "description": "Xy = np.dot(X.T, y) that can be precomputed. It is useful\n    only when the Gram matrix is precomputed."
              },
              "copy_X": {
                "type": "bool, default=True",
                "description": "If ``True``, X will be copied; else, it may be overwritten."
              },
              "coef_init": {
                "type": "array-like of shape (n_features, ), default=None",
                "description": "The initial values of the coefficients."
              },
              "verbose": {
                "type": "bool or int, default=False",
                "description": "Amount of verbosity."
              },
              "return_n_iter": {
                "type": "bool, default=False",
                "description": "Whether to return the number of iterations or not."
              },
              "positive": {
                "type": "bool, default=False",
                "description": "If set to True, forces coefficients to be positive.\n    (Only allowed when ``y.ndim == 1``)."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "If set to False, the input validation checks are skipped (including the\n    Gram matrix when provided). It is assumed that they are handled\n    by the caller."
              },
              "**params": {
                "type": "kwargs",
                "description": "Keyword arguments passed to the coordinate descent solver."
              }
            },
            "returns": "alphas : ndarray of shape (n_alphas,)\n    The alphas along the path where models are computed.\n\ncoefs : ndarray of shape (n_features, n_alphas) or             (n_targets, n_features, n_alphas)\n    Coefficients along the path.\n\ndual_gaps : ndarray of shape (n_alphas,)\n    The dual gaps at the end of the optimization for each alpha.\n\nn_iters : list of int\n    The number of iterations taken by the coordinate descent optimizer to\n    reach the specified tolerance for each alpha.\n    (Is returned when ``return_n_iter`` is set to True).",
            "raises": "",
            "see_also": "MultiTaskElasticNet : Multi-task ElasticNet model trained with L1/L2 mixed-norm     as regularizer.\nMultiTaskElasticNetCV : Multi-task L1/L2 ElasticNet with built-in cross-validation.\nElasticNet : Linear regression with combined L1 and L2 priors as regularizer.\nElasticNetCV : Elastic Net model with iterative fitting along a regularization path.",
            "notes": "For an example, see\n:ref:`examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.py\n<sphx_glr_auto_examples_linear_model_plot_lasso_lasso_lars_elasticnet_path.py>`.",
            "examples": ">>> from sklearn.linear_model import enet_path\n>>> from sklearn.datasets import make_regression\n>>> X, y, true_coef = make_regression(\n...    n_samples=100, n_features=5, n_informative=2, coef=True, random_state=0\n... )\n>>> true_coef\narray([ 0.        ,  0.        ,  0.        , 97.9..., 45.7...])\n>>> alphas, estimated_coef, _ = enet_path(X, y, n_alphas=3)\n>>> alphas.shape\n(3,)\n>>> estimated_coef\n array([[ 0.        ,  0.78...,  0.56...],\n        [ 0.        ,  1.12...,  0.61...],\n        [-0.        , -2.12..., -1.12...],\n        [ 0.        , 23.04..., 88.93...],\n        [ 0.        , 10.63..., 41.56...]])"
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._coordinate_descent.ElasticNet, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._coordinate_descent.ElasticNet",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._coordinate_descent.ElasticNet, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._coordinate_descent.ElasticNet",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "ElasticNetCV",
      "docstring": {
        "description": "Elastic Net model with iterative fitting along a regularization path.\n\nSee glossary entry for :term:`cross-validation estimator`.\n\nRead more in the :ref:`User Guide <elastic_net>`.",
        "parameters": {
          "l1_ratio": {
            "type": "float or list of float, default=0.5",
            "description": "Float between 0 and 1 passed to ElasticNet (scaling between\n    l1 and l2 penalties). For ``l1_ratio = 0``\n    the penalty is an L2 penalty. For ``l1_ratio = 1`` it is an L1 penalty.\n    For ``0 < l1_ratio < 1``, the penalty is a combination of L1 and L2\n    This parameter can be a list, in which case the different\n    values are tested by cross-validation and the one giving the best\n    prediction score is used. Note that a good choice of list of\n    values for l1_ratio is often to put more values close to 1\n    (i.e. Lasso) and less close to 0 (i.e. Ridge), as in ``[.1, .5, .7,\n    .9, .95, .99, 1]``."
          },
          "eps": {
            "type": "float, default=1e-3",
            "description": "Length of the path. ``eps=1e-3`` means that\n    ``alpha_min / alpha_max = 1e-3``."
          },
          "n_alphas": {
            "type": "int, default=100",
            "description": "Number of alphas along the regularization path, used for each l1_ratio."
          },
          "alphas": {
            "type": "array-like, default=None",
            "description": "List of alphas where to compute the models.\n    If None alphas are set automatically."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "precompute": {
            "type": "'auto', bool or array-like of shape             (n_features, n_features), default='auto'",
            "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram\n    matrix can also be passed as argument."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of iterations."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "The tolerance for the optimization: if the updates are\n    smaller than ``tol``, the optimization code checks the\n    dual gap for optimality and continues until it is smaller\n    than ``tol``."
          },
          "cv": {
            "type": "int, cross-validation generator or iterable, default=None",
            "description": "Determines the cross-validation splitting strategy.\n    Possible inputs for cv are:\n\n    - None, to use the default 5-fold cross-validation,\n    - int, to specify the number of folds.\n    - :term:`CV splitter`,\n    - An iterable yielding (train, test) splits as arrays of indices.\n\n    For int/None inputs, :class:`~sklearn.model_selection.KFold` is used.\n\n    Refer :ref:`User Guide <cross_validation>` for the various\n    cross-validation strategies that can be used here.\n\n    .. versionchanged:: 0.22\n        ``cv`` default value if None changed from 3-fold to 5-fold."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten."
          },
          "verbose": {
            "type": "bool or int, default=0",
            "description": "Amount of verbosity."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "Number of CPUs to use during the cross validation.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "When set to ``True``, forces the coefficients to be positive."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "The seed of the pseudo random number generator that selects a random\n    feature to update. Used when ``selection`` == 'random'.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "selection": {
            "type": "{'cyclic', 'random'}, default='cyclic'",
            "description": "If set to 'random', a random coefficient is updated every iteration\n    rather than looping over features sequentially by default. This\n    (setting to 'random') often leads to significantly faster convergence\n    especially when tol is higher than 1e-4.\n\nAttributes\n----------"
          },
          "alpha_": {
            "type": "float",
            "description": "The amount of penalization chosen by cross validation."
          },
          "l1_ratio_": {
            "type": "float",
            "description": "The compromise between l1 and l2 penalization chosen by\n    cross validation."
          },
          "coef_": {
            "type": "ndarray of shape (n_features,) or (n_targets, n_features)",
            "description": "Parameter vector (w in the cost function formula)."
          },
          "intercept_": {
            "type": "float or ndarray of shape (n_targets, n_features)",
            "description": "Independent term in the decision function."
          },
          "mse_path_": {
            "type": "ndarray of shape (n_l1_ratio, n_alpha, n_folds)",
            "description": "Mean square error for the test set on each fold, varying l1_ratio and\n    alpha."
          },
          "alphas_": {
            "type": "ndarray of shape (n_alphas,) or (n_l1_ratio, n_alphas)",
            "description": "The grid of alphas used for fitting, for each l1_ratio."
          },
          "dual_gap_": {
            "type": "float",
            "description": "The dual gaps at the end of the optimization for the optimal alpha."
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations run by the coordinate descent solver to reach\n    the specified tolerance for the optimal alpha."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "enet_path : Compute elastic net path with coordinate descent.\nElasticNet : Linear regression with combined L1 and L2 priors as regularizer.",
        "notes": "In `fit`, once the best parameters `l1_ratio` and `alpha` are found through\ncross-validation, the model is fit again using the entire training set.\n\nTo avoid unnecessary memory duplication the `X` argument of the `fit`\nmethod should be directly passed as a Fortran-contiguous numpy array.\n\nThe parameter `l1_ratio` corresponds to alpha in the glmnet R package\nwhile alpha corresponds to the lambda parameter in glmnet.\nMore specifically, the optimization objective is::\n\n    1 / (2 * n_samples) * ||y - Xw||^2_2\n    + alpha * l1_ratio * ||w||_1\n    + 0.5 * alpha * (1 - l1_ratio) * ||w||^2_2\n\nIf you are interested in controlling the L1 and L2 penalty\nseparately, keep in mind that this is equivalent to::\n\n    a * L1 + b * L2\n\nfor::\n\n    alpha = a + b and l1_ratio = a / (a + b).\n\nFor an example, see\n:ref:`examples/linear_model/plot_lasso_model_selection.py\n<sphx_glr_auto_examples_linear_model_plot_lasso_model_selection.py>`.",
        "examples": ">>> from sklearn.linear_model import ElasticNetCV\n>>> from sklearn.datasets import make_regression\n\n>>> X, y = make_regression(n_features=2, random_state=0)\n>>> regr = ElasticNetCV(cv=5, random_state=0)\n>>> regr.fit(X, y)\nElasticNetCV(cv=5, random_state=0)\n>>> print(regr.alpha_)\n0.199...\n>>> print(regr.intercept_)\n0.398...\n>>> print(regr.predict([[0, 0]]))\n[0.398...]"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None, **params)",
          "docstring": {
            "description": "Fit ElasticNet model with coordinate descent.\n\nFit is on grid of alphas and best alpha estimated by cross-validation.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data. Pass directly as Fortran-contiguous data\n    to avoid unnecessary memory duplication. If y is mono-output,\n    X can be sparse. Note that large sparse matrices and arrays\n    requiring `int64` indices are not accepted."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Target values."
              },
              "sample_weight": {
                "type": "float or array-like of shape (n_samples,),                 default=None",
                "description": "Sample weights used for fitting and evaluation of the weighted\n    mean squared error of each cv-fold. Note that the cross validated\n    MSE that is finally used to find the best model is the unweighted\n    mean over the (weighted) MSEs of each test fold."
              },
              "**params": {
                "type": "dict, default=None",
                "description": "Parameters to be passed to the CV splitter.\n\n    .. versionadded:: 1.4\n        Only available if `enable_metadata_routing=True`,\n        which can be set by using\n        ``sklearn.set_config(enable_metadata_routing=True)``.\n        See :ref:`Metadata Routing User Guide <metadata_routing>` for\n        more details."
              }
            },
            "returns": "self : object\n    Returns an instance of fitted model.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\n.. versionadded:: 1.4",
            "parameters": {},
            "returns": "routing : MetadataRouter\n    A :class:`~sklearn.utils.metadata_routing.MetadataRouter` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "path",
          "signature": "enet_path(X, y, *, l1_ratio=0.5, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, check_input=True, **params)",
          "docstring": {
            "description": "Compute elastic net path with coordinate descent.\n\nThe elastic net optimization function varies for mono and multi-outputs.\n\nFor mono-output tasks it is::\n\n    1 / (2 * n_samples) * ||y - Xw||^2_2\n    + alpha * l1_ratio * ||w||_1\n    + 0.5 * alpha * (1 - l1_ratio) * ||w||^2_2\n\nFor multi-output tasks it is::\n\n    (1 / (2 * n_samples)) * ||Y - XW||_Fro^2\n    + alpha * l1_ratio * ||W||_21\n    + 0.5 * alpha * (1 - l1_ratio) * ||W||_Fro^2\n\nWhere::\n\n    ||W||_21 = \\sum_i \\sqrt{\\sum_j w_{ij}^2}\n\ni.e. the sum of norm of each row.\n\nRead more in the :ref:`User Guide <elastic_net>`.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data. Pass directly as Fortran-contiguous data to avoid\n    unnecessary memory duplication. If ``y`` is mono-output then ``X``\n    can be sparse."
              },
              "y": {
                "type": "{array-like, sparse matrix} of shape (n_samples,) or         (n_samples, n_targets)",
                "description": "Target values."
              },
              "l1_ratio": {
                "type": "float, default=0.5",
                "description": "Number between 0 and 1 passed to elastic net (scaling between\n    l1 and l2 penalties). ``l1_ratio=1`` corresponds to the Lasso."
              },
              "eps": {
                "type": "float, default=1e-3",
                "description": "Length of the path. ``eps=1e-3`` means that\n    ``alpha_min / alpha_max = 1e-3``."
              },
              "n_alphas": {
                "type": "int, default=100",
                "description": "Number of alphas along the regularization path."
              },
              "alphas": {
                "type": "array-like, default=None",
                "description": "List of alphas where to compute the models.\n    If None alphas are set automatically."
              },
              "precompute": {
                "type": "'auto', bool or array-like of shape             (n_features, n_features), default='auto'",
                "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram\n    matrix can also be passed as argument."
              },
              "Xy": {
                "type": "array-like of shape (n_features,) or (n_features, n_targets),         default=None",
                "description": "Xy = np.dot(X.T, y) that can be precomputed. It is useful\n    only when the Gram matrix is precomputed."
              },
              "copy_X": {
                "type": "bool, default=True",
                "description": "If ``True``, X will be copied; else, it may be overwritten."
              },
              "coef_init": {
                "type": "array-like of shape (n_features, ), default=None",
                "description": "The initial values of the coefficients."
              },
              "verbose": {
                "type": "bool or int, default=False",
                "description": "Amount of verbosity."
              },
              "return_n_iter": {
                "type": "bool, default=False",
                "description": "Whether to return the number of iterations or not."
              },
              "positive": {
                "type": "bool, default=False",
                "description": "If set to True, forces coefficients to be positive.\n    (Only allowed when ``y.ndim == 1``)."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "If set to False, the input validation checks are skipped (including the\n    Gram matrix when provided). It is assumed that they are handled\n    by the caller."
              },
              "**params": {
                "type": "kwargs",
                "description": "Keyword arguments passed to the coordinate descent solver."
              }
            },
            "returns": "alphas : ndarray of shape (n_alphas,)\n    The alphas along the path where models are computed.\n\ncoefs : ndarray of shape (n_features, n_alphas) or             (n_targets, n_features, n_alphas)\n    Coefficients along the path.\n\ndual_gaps : ndarray of shape (n_alphas,)\n    The dual gaps at the end of the optimization for each alpha.\n\nn_iters : list of int\n    The number of iterations taken by the coordinate descent optimizer to\n    reach the specified tolerance for each alpha.\n    (Is returned when ``return_n_iter`` is set to True).",
            "raises": "",
            "see_also": "MultiTaskElasticNet : Multi-task ElasticNet model trained with L1/L2 mixed-norm     as regularizer.\nMultiTaskElasticNetCV : Multi-task L1/L2 ElasticNet with built-in cross-validation.\nElasticNet : Linear regression with combined L1 and L2 priors as regularizer.\nElasticNetCV : Elastic Net model with iterative fitting along a regularization path.",
            "notes": "For an example, see\n:ref:`examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.py\n<sphx_glr_auto_examples_linear_model_plot_lasso_lasso_lars_elasticnet_path.py>`.",
            "examples": ">>> from sklearn.linear_model import enet_path\n>>> from sklearn.datasets import make_regression\n>>> X, y, true_coef = make_regression(\n...    n_samples=100, n_features=5, n_informative=2, coef=True, random_state=0\n... )\n>>> true_coef\narray([ 0.        ,  0.        ,  0.        , 97.9..., 45.7...])\n>>> alphas, estimated_coef, _ = enet_path(X, y, n_alphas=3)\n>>> alphas.shape\n(3,)\n>>> estimated_coef\n array([[ 0.        ,  0.78...,  0.56...],\n        [ 0.        ,  1.12...,  0.61...],\n        [-0.        , -2.12..., -1.12...],\n        [ 0.        , 23.04..., 88.93...],\n        [ 0.        , 10.63..., 41.56...]])"
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._coordinate_descent.ElasticNetCV, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._coordinate_descent.ElasticNetCV",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._coordinate_descent.ElasticNetCV, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._coordinate_descent.ElasticNetCV",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "GammaRegressor",
      "docstring": {
        "description": "Generalized Linear Model with a Gamma distribution.\n\nThis regressor uses the 'log' link function.\n\nRead more in the :ref:`User Guide <Generalized_linear_models>`.\n\n.. versionadded:: 0.23",
        "parameters": {
          "alpha": {
            "type": "float, default=1",
            "description": "Constant that multiplies the L2 penalty term and determines the\n    regularization strength. ``alpha = 0`` is equivalent to unpenalized\n    GLMs. In this case, the design matrix `X` must have full column rank\n    (no collinearities).\n    Values of `alpha` must be in the range `[0.0, inf)`."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Specifies if a constant (a.k.a. bias or intercept) should be\n    added to the linear predictor `X @ coef_ + intercept_`."
          },
          "solver": {
            "type": "{'lbfgs', 'newton-cholesky'}, default='lbfgs'",
            "description": "Algorithm to use in the optimization problem:\n\n    'lbfgs'\n        Calls scipy's L-BFGS-B optimizer.\n\n    'newton-cholesky'\n        Uses Newton-Raphson steps (in arbitrary precision arithmetic equivalent to\n        iterated reweighted least squares) with an inner Cholesky based solver.\n        This solver is a good choice for `n_samples` >> `n_features`, especially\n        with one-hot encoded categorical features with rare categories. Be aware\n        that the memory usage of this solver has a quadratic dependency on\n        `n_features` because it explicitly computes the Hessian matrix.\n\n        .. versionadded:: 1.2"
          },
          "max_iter": {
            "type": "int, default=100",
            "description": "The maximal number of iterations for the solver.\n    Values must be in the range `[1, inf)`."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "Stopping criterion. For the lbfgs solver,\n    the iteration will stop when ``max{|g_j|, j = 1, ..., d} <= tol``\n    where ``g_j`` is the j-th component of the gradient (derivative) of\n    the objective function.\n    Values must be in the range `(0.0, inf)`."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "If set to ``True``, reuse the solution of the previous call to ``fit``\n    as initialization for `coef_` and `intercept_`."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "For the lbfgs solver set verbose to any positive number for verbosity.\n    Values must be in the range `[0, inf)`.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array of shape (n_features,)",
            "description": "Estimated coefficients for the linear predictor (`X @ coef_ +\n    intercept_`) in the GLM."
          },
          "intercept_": {
            "type": "float",
            "description": "Intercept (a.k.a. bias) added to linear predictor."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "n_iter_": {
            "type": "int",
            "description": "Actual number of iterations used in the solver."
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "PoissonRegressor : Generalized Linear Model with a Poisson distribution.\nTweedieRegressor : Generalized Linear Model with a Tweedie distribution.",
        "notes": "",
        "examples": ">>> from sklearn import linear_model\n>>> clf = linear_model.GammaRegressor()\n>>> X = [[1, 2], [2, 3], [3, 4], [4, 3]]\n>>> y = [19, 26, 33, 30]\n>>> clf.fit(X, y)\nGammaRegressor()\n>>> clf.score(X, y)\nnp.float64(0.773...)\n>>> clf.coef_\narray([0.072..., 0.066...])\n>>> clf.intercept_\nnp.float64(2.896...)\n>>> clf.predict([[1, 0], [2, 8]])\narray([19.483..., 35.795...])"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Fit a Generalized Linear Model.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Target values."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "self : object\n    Fitted model.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using GLM with feature matrix X.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "y_pred : array of shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Compute D^2, the percentage of deviance explained.\n\nD^2 is a generalization of the coefficient of determination R^2.\nR^2 uses squared error and D^2 uses the deviance of this GLM, see the\n:ref:`User Guide <regression_metrics>`.\n\nD^2 is defined as\n:math:`D^2 = 1-\\frac{D(y_{true},y_{pred})}{D_{null}}`,\n:math:`D_{null}` is the null deviance, i.e. the deviance of a model\nwith intercept alone, which corresponds to :math:`y_{pred} = \\bar{y}`.\nThe mean :math:`\\bar{y}` is averaged by sample_weight.\nBest possible score is 1.0 and it can be negative (because the model\ncan be arbitrarily worse).",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Test samples."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "True values of target."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    D^2 of self.predict(X) w.r.t. y.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._glm.glm.GammaRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._glm.glm.GammaRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._glm.glm.GammaRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._glm.glm.GammaRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "HuberRegressor",
      "docstring": {
        "description": "L2-regularized linear regression model that is robust to outliers.\n\nThe Huber Regressor optimizes the squared loss for the samples where\n``|(y - Xw - c) / sigma| < epsilon`` and the absolute loss for the samples\nwhere ``|(y - Xw - c) / sigma| > epsilon``, where the model coefficients\n``w``, the intercept ``c`` and the scale ``sigma`` are parameters\nto be optimized. The parameter `sigma` makes sure that if `y` is scaled up\nor down by a certain factor, one does not need to rescale `epsilon` to\nachieve the same robustness. Note that this does not take into account\nthe fact that the different features of `X` may be of different scales.\n\nThe Huber loss function has the advantage of not being heavily influenced\nby the outliers while not completely ignoring their effect.\n\nRead more in the :ref:`User Guide <huber_regression>`\n\n.. versionadded:: 0.18",
        "parameters": {
          "epsilon": {
            "type": "float, default=1.35",
            "description": "The parameter epsilon controls the number of samples that should be\n    classified as outliers. The smaller the epsilon, the more robust it is\n    to outliers. Epsilon must be in the range `[1, inf)`."
          },
          "max_iter": {
            "type": "int, default=100",
            "description": "Maximum number of iterations that\n    ``scipy.optimize.minimize(method=\"L-BFGS-B\")`` should run for."
          },
          "alpha": {
            "type": "float, default=0.0001",
            "description": "Strength of the squared L2 regularization. Note that the penalty is\n    equal to ``alpha * ||w||^2``.\n    Must be in the range `[0, inf)`."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "This is useful if the stored attributes of a previously used model\n    has to be reused. If set to False, then the coefficients will\n    be rewritten for every call to fit.\n    See :term:`the Glossary <warm_start>`."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether or not to fit the intercept. This can be set to False\n    if the data is already centered around the origin."
          },
          "tol": {
            "type": "float, default=1e-05",
            "description": "The iteration will stop when\n    ``max{|proj g_i | i = 1, ..., n}`` <= ``tol``\n    where pg_i is the i-th component of the projected gradient.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array, shape (n_features,)",
            "description": "Features got by optimizing the L2-regularized Huber loss."
          },
          "intercept_": {
            "type": "float",
            "description": "Bias."
          },
          "scale_": {
            "type": "float",
            "description": "The value by which ``|y - Xw - c|`` is scaled down."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations that\n    ``scipy.optimize.minimize(method=\"L-BFGS-B\")`` has run for.\n\n    .. versionchanged:: 0.20\n\n        In SciPy <= 1.0.0 the number of lbfgs iterations may exceed\n        ``max_iter``. ``n_iter_`` will now report at most ``max_iter``."
          },
          "outliers_": {
            "type": "array, shape (n_samples,)",
            "description": "A boolean mask which is set to True where the samples are identified\n    as outliers."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "RANSACRegressor : RANSAC (RANdom SAmple Consensus) algorithm.\nTheilSenRegressor : Theil-Sen Estimator robust multivariate regression model.\nSGDRegressor : Fitted by minimizing a regularized empirical loss with SGD.\n\nReferences\n----------\n.. [1] Peter J. Huber, Elvezio M. Ronchetti, Robust Statistics\n       Concomitant scale estimates, p. 172\n.. [2] Art B. Owen (2006), `A robust hybrid of lasso and ridge regression.\n       <https://artowen.su.domains/reports/hhu.pdf>`_",
        "notes": "",
        "examples": ">>> import numpy as np\n>>> from sklearn.linear_model import HuberRegressor, LinearRegression\n>>> from sklearn.datasets import make_regression\n>>> rng = np.random.RandomState(0)\n>>> X, y, coef = make_regression(\n...     n_samples=200, n_features=2, noise=4.0, coef=True, random_state=0)\n>>> X[:4] = rng.uniform(10, 20, (4, 2))\n>>> y[:4] = rng.uniform(10, 20, 4)\n>>> huber = HuberRegressor().fit(X, y)\n>>> huber.score(X, y)\n-7.284...\n>>> huber.predict(X[:1,])\narray([806.7200...])\n>>> linear = LinearRegression().fit(X, y)\n>>> print(\"True coefficients:\", coef)\nTrue coefficients: [20.4923...  34.1698...]\n>>> print(\"Huber coefficients:\", huber.coef_)\nHuber coefficients: [17.7906... 31.0106...]\n>>> print(\"Linear Regression coefficients:\", linear.coef_)\nLinear Regression coefficients: [-1.9221...  7.0226...]"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Fit the model according to the given training data.",
            "parameters": {
              "X": {
                "type": "array-like, shape (n_samples, n_features)",
                "description": "Training vector, where `n_samples` is the number of samples and\n    `n_features` is the number of features."
              },
              "y": {
                "type": "array-like, shape (n_samples,)",
                "description": "Target vector relative to X."
              },
              "sample_weight": {
                "type": "array-like, shape (n_samples,)",
                "description": "Weight given to each sample."
              }
            },
            "returns": "self : object\n    Fitted `HuberRegressor` estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._huber.HuberRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._huber.HuberRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._huber.HuberRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._huber.HuberRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "Lars",
      "docstring": {
        "description": "Least Angle Regression model a.k.a. LAR.\n\nRead more in the :ref:`User Guide <least_angle_regression>`.",
        "parameters": {
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "verbose": {
            "type": "bool or int, default=False",
            "description": "Sets the verbosity amount."
          },
          "precompute": {
            "type": "bool, 'auto' or array-like , default='auto'",
            "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram\n    matrix can also be passed as argument."
          },
          "n_nonzero_coefs": {
            "type": "int, default=500",
            "description": "Target number of non-zero coefficients. Use ``np.inf`` for no limit."
          },
          "eps": {
            "type": "float, default=np.finfo(float).eps",
            "description": "The machine-precision regularization in the computation of the\n    Cholesky diagonal factors. Increase this for very ill-conditioned\n    systems. Unlike the ``tol`` parameter in some iterative\n    optimization-based algorithms, this parameter does not control\n    the tolerance of the optimization."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten."
          },
          "fit_path": {
            "type": "bool, default=True",
            "description": "If True the full path is stored in the ``coef_path_`` attribute.\n    If you compute the solution for a large problem or many targets,\n    setting ``fit_path`` to ``False`` will lead to a speedup, especially\n    with a small alpha."
          },
          "jitter": {
            "type": "float, default=None",
            "description": "Upper bound on a uniform noise parameter to be added to the\n    `y` values, to satisfy the model's assumption of\n    one-at-a-time computations. Might help with stability.\n\n    .. versionadded:: 0.23"
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Determines random number generation for jittering. Pass an int\n    for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`. Ignored if `jitter` is None.\n\n    .. versionadded:: 0.23\n\nAttributes\n----------"
          },
          "alphas_": {
            "type": "array-like of shape (n_alphas + 1,) or list of such arrays",
            "description": "Maximum of covariances (in absolute value) at each iteration.\n    ``n_alphas`` is either ``max_iter``, ``n_features`` or the\n    number of nodes in the path with ``alpha >= alpha_min``, whichever\n    is smaller. If this is a list of array-like, the length of the outer\n    list is `n_targets`."
          },
          "active_": {
            "type": "list of shape (n_alphas,) or list of such lists",
            "description": "Indices of active variables at the end of the path.\n    If this is a list of list, the length of the outer list is `n_targets`."
          },
          "coef_path_": {
            "type": "array-like of shape (n_features, n_alphas + 1) or list             of such arrays",
            "description": "The varying values of the coefficients along the path. It is not\n    present if the ``fit_path`` parameter is ``False``. If this is a list\n    of array-like, the length of the outer list is `n_targets`."
          },
          "coef_": {
            "type": "array-like of shape (n_features,) or (n_targets, n_features)",
            "description": "Parameter vector (w in the formulation formula)."
          },
          "intercept_": {
            "type": "float or array-like of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "n_iter_": {
            "type": "array-like or int",
            "description": "The number of iterations taken by lars_path to find the\n    grid of alphas for each target."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "lars_path: Compute Least Angle Regression or Lasso\n    path using LARS algorithm.\nLarsCV : Cross-validated Least Angle Regression model.\nsklearn.decomposition.sparse_encode : Sparse coding.",
        "notes": "",
        "examples": ">>> from sklearn import linear_model\n>>> reg = linear_model.Lars(n_nonzero_coefs=1)\n>>> reg.fit([[-1, 1], [0, 0], [1, 1]], [-1.1111, 0, -1.1111])\nLars(n_nonzero_coefs=1)\n>>> print(reg.coef_)\n[ 0. -1.11...]"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, Xy=None)",
          "docstring": {
            "description": "Fit the model using X, y as training data.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_targets)",
                "description": "Target values."
              },
              "Xy": {
                "type": "array-like of shape (n_features,) or (n_features, n_targets),                 default=None",
                "description": "Xy = np.dot(X.T, y) that can be precomputed. It is useful\n    only when the Gram matrix is precomputed."
              }
            },
            "returns": "self : object\n    Returns an instance of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._least_angle.Lars, *, Xy: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._least_angle.Lars",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "Xy": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``Xy`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._least_angle.Lars, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._least_angle.Lars",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "LarsCV",
      "docstring": {
        "description": "Cross-validated Least Angle Regression model.\n\nSee glossary entry for :term:`cross-validation estimator`.\n\nRead more in the :ref:`User Guide <least_angle_regression>`.",
        "parameters": {
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "verbose": {
            "type": "bool or int, default=False",
            "description": "Sets the verbosity amount."
          },
          "max_iter": {
            "type": "int, default=500",
            "description": "Maximum number of iterations to perform."
          },
          "precompute": {
            "type": "bool, 'auto' or array-like , default='auto'",
            "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram matrix\n    cannot be passed as argument since we will use only subsets of X."
          },
          "cv": {
            "type": "int, cross-validation generator or an iterable, default=None",
            "description": "Determines the cross-validation splitting strategy.\n    Possible inputs for cv are:\n\n    - None, to use the default 5-fold cross-validation,\n    - integer, to specify the number of folds.\n    - :term:`CV splitter`,\n    - An iterable yielding (train, test) splits as arrays of indices.\n\n    For integer/None inputs, :class:`~sklearn.model_selection.KFold` is used.\n\n    Refer :ref:`User Guide <cross_validation>` for the various\n    cross-validation strategies that can be used here.\n\n    .. versionchanged:: 0.22\n        ``cv`` default value if None changed from 3-fold to 5-fold."
          },
          "max_n_alphas": {
            "type": "int, default=1000",
            "description": "The maximum number of points on the path used to compute the\n    residuals in the cross-validation."
          },
          "n_jobs": {
            "type": "int or None, default=None",
            "description": "Number of CPUs to use during the cross validation.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "eps": {
            "type": "float, default=np.finfo(float).eps",
            "description": "The machine-precision regularization in the computation of the\n    Cholesky diagonal factors. Increase this for very ill-conditioned\n    systems. Unlike the ``tol`` parameter in some iterative\n    optimization-based algorithms, this parameter does not control\n    the tolerance of the optimization."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten.\n\nAttributes\n----------"
          },
          "active_": {
            "type": "list of length n_alphas or list of such lists",
            "description": "Indices of active variables at the end of the path.\n    If this is a list of lists, the outer list length is `n_targets`."
          },
          "coef_": {
            "type": "array-like of shape (n_features,)",
            "description": "parameter vector (w in the formulation formula)"
          },
          "intercept_": {
            "type": "float",
            "description": "independent term in decision function"
          },
          "coef_path_": {
            "type": "array-like of shape (n_features, n_alphas)",
            "description": "the varying values of the coefficients along the path"
          },
          "alpha_": {
            "type": "float",
            "description": "the estimated regularization parameter alpha"
          },
          "alphas_": {
            "type": "array-like of shape (n_alphas,)",
            "description": "the different values of alpha along the path"
          },
          "cv_alphas_": {
            "type": "array-like of shape (n_cv_alphas,)",
            "description": "all the values of alpha along the path for the different folds"
          },
          "mse_path_": {
            "type": "array-like of shape (n_folds, n_cv_alphas)",
            "description": "the mean square error on left-out for each fold along the path\n    (alpha values given by ``cv_alphas``)"
          },
          "n_iter_": {
            "type": "array-like or int",
            "description": "the number of iterations run by Lars with the optimal alpha."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "lars_path : Compute Least Angle Regression or Lasso\n    path using LARS algorithm.\nlasso_path : Compute Lasso path with coordinate descent.\nLasso : Linear Model trained with L1 prior as\n    regularizer (aka the Lasso).\nLassoCV : Lasso linear model with iterative fitting\n    along a regularization path.\nLassoLars : Lasso model fit with Least Angle Regression a.k.a. Lars.\nLassoLarsIC : Lasso model fit with Lars using BIC\n    or AIC for model selection.\nsklearn.decomposition.sparse_encode : Sparse coding.",
        "notes": "In `fit`, once the best parameter `alpha` is found through\ncross-validation, the model is fit again using the entire training set.",
        "examples": ">>> from sklearn.linear_model import LarsCV\n>>> from sklearn.datasets import make_regression\n>>> X, y = make_regression(n_samples=200, noise=4.0, random_state=0)\n>>> reg = LarsCV(cv=5).fit(X, y)\n>>> reg.score(X, y)\n0.9996...\n>>> reg.alpha_\nnp.float64(0.2961...)\n>>> reg.predict(X[:1,])\narray([154.3996...])"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, **params)",
          "docstring": {
            "description": "Fit the model using X, y as training data.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Target values."
              },
              "**params": {
                "type": "dict, default=None",
                "description": "Parameters to be passed to the CV splitter.\n\n    .. versionadded:: 1.4\n        Only available if `enable_metadata_routing=True`,\n        which can be set by using\n        ``sklearn.set_config(enable_metadata_routing=True)``.\n        See :ref:`Metadata Routing User Guide <metadata_routing>` for\n        more details."
              }
            },
            "returns": "self : object\n    Returns an instance of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\n.. versionadded:: 1.4",
            "parameters": {},
            "returns": "routing : MetadataRouter\n    A :class:`~sklearn.utils.metadata_routing.MetadataRouter` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._least_angle.LarsCV, *, Xy: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._least_angle.LarsCV",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "Xy": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``Xy`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._least_angle.LarsCV, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._least_angle.LarsCV",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "Lasso",
      "docstring": {
        "description": "Linear Model trained with L1 prior as regularizer (aka the Lasso).\n\nThe optimization objective for Lasso is::\n\n    (1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\n\nTechnically the Lasso model is optimizing the same objective function as\nthe Elastic Net with ``l1_ratio=1.0`` (no L2 penalty).\n\nRead more in the :ref:`User Guide <lasso>`.",
        "parameters": {
          "alpha": {
            "type": "float, default=1.0",
            "description": "Constant that multiplies the L1 term, controlling regularization\n    strength. `alpha` must be a non-negative float i.e. in `[0, inf)`.\n\n    When `alpha = 0`, the objective is equivalent to ordinary least\n    squares, solved by the :class:`LinearRegression` object. For numerical\n    reasons, using `alpha = 0` with the `Lasso` object is not advised.\n    Instead, you should use the :class:`LinearRegression` object."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to False, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "precompute": {
            "type": "bool or array-like of shape (n_features, n_features),                 default=False",
            "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. The Gram matrix can also be passed as argument.\n    For sparse input this option is always ``False`` to preserve sparsity."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of iterations."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "The tolerance for the optimization: if the updates are\n    smaller than ``tol``, the optimization code checks the\n    dual gap for optimality and continues until it is smaller\n    than ``tol``, see Notes below."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to True, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution.\n    See :term:`the Glossary <warm_start>`."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "When set to ``True``, forces the coefficients to be positive."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "The seed of the pseudo random number generator that selects a random\n    feature to update. Used when ``selection`` == 'random'.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "selection": {
            "type": "{'cyclic', 'random'}, default='cyclic'",
            "description": "If set to 'random', a random coefficient is updated every iteration\n    rather than looping over features sequentially by default. This\n    (setting to 'random') often leads to significantly faster convergence\n    especially when tol is higher than 1e-4.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (n_features,) or (n_targets, n_features)",
            "description": "Parameter vector (w in the cost function formula)."
          },
          "dual_gap_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Given param alpha, the dual gaps at the end of the optimization,\n    same shape as each observation of y."
          },
          "sparse_coef_": {
            "type": "sparse matrix of shape (n_features, 1) or             (n_targets, n_features)",
            "description": "Readonly property derived from ``coef_``."
          },
          "intercept_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "n_iter_": {
            "type": "int or list of int",
            "description": "Number of iterations run by the coordinate descent solver to reach\n    the specified tolerance."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "lars_path : Regularization path using LARS.\nlasso_path : Regularization path using Lasso.\nLassoLars : Lasso Path along the regularization parameter using LARS algorithm.\nLassoCV : Lasso alpha parameter by cross-validation.\nLassoLarsCV : Lasso least angle parameter algorithm by cross-validation.\nsklearn.decomposition.sparse_encode : Sparse coding array estimator.",
        "notes": "The algorithm used to fit the model is coordinate descent.\n\nTo avoid unnecessary memory duplication the X argument of the fit method\nshould be directly passed as a Fortran-contiguous numpy array.\n\nRegularization improves the conditioning of the problem and\nreduces the variance of the estimates. Larger values specify stronger\nregularization. Alpha corresponds to `1 / (2C)` in other linear\nmodels such as :class:`~sklearn.linear_model.LogisticRegression` or\n:class:`~sklearn.svm.LinearSVC`. If an array is passed, penalties are\nassumed to be specific to the targets. Hence they must correspond in\nnumber.\n\nThe precise stopping criteria based on `tol` are the following: First, check that\nthat maximum coordinate update, i.e. :math:`\\max_j |w_j^{new} - w_j^{old}|`\nis smaller than `tol` times the maximum absolute coefficient, :math:`\\max_j |w_j|`.\nIf so, then additionally check whether the dual gap is smaller than `tol` times\n:math:`||y||_2^2 / n_{\\text{samples}}`.\n\nThe target can be a 2-dimensional array, resulting in the optimization of the\nfollowing objective::\n\n    (1 / (2 * n_samples)) * ||Y - XW||^2_F + alpha * ||W||_11\n\nwhere :math:`||W||_{1,1}` is the sum of the magnitude of the matrix coefficients.\nIt should not be confused with :class:`~sklearn.linear_model.MultiTaskLasso` which\ninstead penalizes the :math:`L_{2,1}` norm of the coefficients, yielding row-wise\nsparsity in the coefficients.",
        "examples": ">>> from sklearn import linear_model\n>>> clf = linear_model.Lasso(alpha=0.1)\n>>> clf.fit([[0,0], [1, 1], [2, 2]], [0, 1, 2])\nLasso(alpha=0.1)\n>>> print(clf.coef_)\n[0.85 0.  ]\n>>> print(clf.intercept_)\n0.15..."
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None, check_input=True)",
          "docstring": {
            "description": "Fit model with coordinate descent.",
            "parameters": {
              "X": {
                "type": "{ndarray, sparse matrix, sparse array} of (n_samples, n_features)",
                "description": "Data.\n\n    Note that large sparse matrices and arrays requiring `int64`\n    indices are not accepted."
              },
              "y": {
                "type": "ndarray of shape (n_samples,) or (n_samples, n_targets)",
                "description": "Target. Will be cast to X's dtype if necessary."
              },
              "sample_weight": {
                "type": "float or array-like of shape (n_samples,), default=None",
                "description": "Sample weights. Internally, the `sample_weight` vector will be\n    rescaled to sum to `n_samples`.\n\n    .. versionadded:: 0.23"
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you do."
              }
            },
            "returns": "self : object\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "Coordinate descent is an algorithm that considers each column of\ndata at a time hence it will automatically convert the X input\nas a Fortran-contiguous numpy array if necessary.\n\nTo avoid memory re-allocation it is advised to allocate the\ninitial data in memory directly using that format.",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "path",
          "signature": "enet_path(X, y, *, l1_ratio=0.5, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, check_input=True, **params)",
          "docstring": {
            "description": "Compute elastic net path with coordinate descent.\n\nThe elastic net optimization function varies for mono and multi-outputs.\n\nFor mono-output tasks it is::\n\n    1 / (2 * n_samples) * ||y - Xw||^2_2\n    + alpha * l1_ratio * ||w||_1\n    + 0.5 * alpha * (1 - l1_ratio) * ||w||^2_2\n\nFor multi-output tasks it is::\n\n    (1 / (2 * n_samples)) * ||Y - XW||_Fro^2\n    + alpha * l1_ratio * ||W||_21\n    + 0.5 * alpha * (1 - l1_ratio) * ||W||_Fro^2\n\nWhere::\n\n    ||W||_21 = \\sum_i \\sqrt{\\sum_j w_{ij}^2}\n\ni.e. the sum of norm of each row.\n\nRead more in the :ref:`User Guide <elastic_net>`.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data. Pass directly as Fortran-contiguous data to avoid\n    unnecessary memory duplication. If ``y`` is mono-output then ``X``\n    can be sparse."
              },
              "y": {
                "type": "{array-like, sparse matrix} of shape (n_samples,) or         (n_samples, n_targets)",
                "description": "Target values."
              },
              "l1_ratio": {
                "type": "float, default=0.5",
                "description": "Number between 0 and 1 passed to elastic net (scaling between\n    l1 and l2 penalties). ``l1_ratio=1`` corresponds to the Lasso."
              },
              "eps": {
                "type": "float, default=1e-3",
                "description": "Length of the path. ``eps=1e-3`` means that\n    ``alpha_min / alpha_max = 1e-3``."
              },
              "n_alphas": {
                "type": "int, default=100",
                "description": "Number of alphas along the regularization path."
              },
              "alphas": {
                "type": "array-like, default=None",
                "description": "List of alphas where to compute the models.\n    If None alphas are set automatically."
              },
              "precompute": {
                "type": "'auto', bool or array-like of shape             (n_features, n_features), default='auto'",
                "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram\n    matrix can also be passed as argument."
              },
              "Xy": {
                "type": "array-like of shape (n_features,) or (n_features, n_targets),         default=None",
                "description": "Xy = np.dot(X.T, y) that can be precomputed. It is useful\n    only when the Gram matrix is precomputed."
              },
              "copy_X": {
                "type": "bool, default=True",
                "description": "If ``True``, X will be copied; else, it may be overwritten."
              },
              "coef_init": {
                "type": "array-like of shape (n_features, ), default=None",
                "description": "The initial values of the coefficients."
              },
              "verbose": {
                "type": "bool or int, default=False",
                "description": "Amount of verbosity."
              },
              "return_n_iter": {
                "type": "bool, default=False",
                "description": "Whether to return the number of iterations or not."
              },
              "positive": {
                "type": "bool, default=False",
                "description": "If set to True, forces coefficients to be positive.\n    (Only allowed when ``y.ndim == 1``)."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "If set to False, the input validation checks are skipped (including the\n    Gram matrix when provided). It is assumed that they are handled\n    by the caller."
              },
              "**params": {
                "type": "kwargs",
                "description": "Keyword arguments passed to the coordinate descent solver."
              }
            },
            "returns": "alphas : ndarray of shape (n_alphas,)\n    The alphas along the path where models are computed.\n\ncoefs : ndarray of shape (n_features, n_alphas) or             (n_targets, n_features, n_alphas)\n    Coefficients along the path.\n\ndual_gaps : ndarray of shape (n_alphas,)\n    The dual gaps at the end of the optimization for each alpha.\n\nn_iters : list of int\n    The number of iterations taken by the coordinate descent optimizer to\n    reach the specified tolerance for each alpha.\n    (Is returned when ``return_n_iter`` is set to True).",
            "raises": "",
            "see_also": "MultiTaskElasticNet : Multi-task ElasticNet model trained with L1/L2 mixed-norm     as regularizer.\nMultiTaskElasticNetCV : Multi-task L1/L2 ElasticNet with built-in cross-validation.\nElasticNet : Linear regression with combined L1 and L2 priors as regularizer.\nElasticNetCV : Elastic Net model with iterative fitting along a regularization path.",
            "notes": "For an example, see\n:ref:`examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.py\n<sphx_glr_auto_examples_linear_model_plot_lasso_lasso_lars_elasticnet_path.py>`.",
            "examples": ">>> from sklearn.linear_model import enet_path\n>>> from sklearn.datasets import make_regression\n>>> X, y, true_coef = make_regression(\n...    n_samples=100, n_features=5, n_informative=2, coef=True, random_state=0\n... )\n>>> true_coef\narray([ 0.        ,  0.        ,  0.        , 97.9..., 45.7...])\n>>> alphas, estimated_coef, _ = enet_path(X, y, n_alphas=3)\n>>> alphas.shape\n(3,)\n>>> estimated_coef\n array([[ 0.        ,  0.78...,  0.56...],\n        [ 0.        ,  1.12...,  0.61...],\n        [-0.        , -2.12..., -1.12...],\n        [ 0.        , 23.04..., 88.93...],\n        [ 0.        , 10.63..., 41.56...]])"
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._coordinate_descent.Lasso, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._coordinate_descent.Lasso",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._coordinate_descent.Lasso, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._coordinate_descent.Lasso",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "LassoCV",
      "docstring": {
        "description": "Lasso linear model with iterative fitting along a regularization path.\n\nSee glossary entry for :term:`cross-validation estimator`.\n\nThe best model is selected by cross-validation.\n\nThe optimization objective for Lasso is::\n\n    (1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\n\nRead more in the :ref:`User Guide <lasso>`.",
        "parameters": {
          "eps": {
            "type": "float, default=1e-3",
            "description": "Length of the path. ``eps=1e-3`` means that\n    ``alpha_min / alpha_max = 1e-3``."
          },
          "n_alphas": {
            "type": "int, default=100",
            "description": "Number of alphas along the regularization path."
          },
          "alphas": {
            "type": "array-like, default=None",
            "description": "List of alphas where to compute the models.\n    If ``None`` alphas are set automatically."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "precompute": {
            "type": "'auto', bool or array-like of shape             (n_features, n_features), default='auto'",
            "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram\n    matrix can also be passed as argument."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of iterations."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "The tolerance for the optimization: if the updates are\n    smaller than ``tol``, the optimization code checks the\n    dual gap for optimality and continues until it is smaller\n    than ``tol``."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten."
          },
          "cv": {
            "type": "int, cross-validation generator or iterable, default=None",
            "description": "Determines the cross-validation splitting strategy.\n    Possible inputs for cv are:\n\n    - None, to use the default 5-fold cross-validation,\n    - int, to specify the number of folds.\n    - :term:`CV splitter`,\n    - An iterable yielding (train, test) splits as arrays of indices.\n\n    For int/None inputs, :class:`~sklearn.model_selection.KFold` is used.\n\n    Refer :ref:`User Guide <cross_validation>` for the various\n    cross-validation strategies that can be used here.\n\n    .. versionchanged:: 0.22\n        ``cv`` default value if None changed from 3-fold to 5-fold."
          },
          "verbose": {
            "type": "bool or int, default=False",
            "description": "Amount of verbosity."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "Number of CPUs to use during the cross validation.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "If positive, restrict regression coefficients to be positive."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "The seed of the pseudo random number generator that selects a random\n    feature to update. Used when ``selection`` == 'random'.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "selection": {
            "type": "{'cyclic', 'random'}, default='cyclic'",
            "description": "If set to 'random', a random coefficient is updated every iteration\n    rather than looping over features sequentially by default. This\n    (setting to 'random') often leads to significantly faster convergence\n    especially when tol is higher than 1e-4.\n\nAttributes\n----------"
          },
          "alpha_": {
            "type": "float",
            "description": "The amount of penalization chosen by cross validation."
          },
          "coef_": {
            "type": "ndarray of shape (n_features,) or (n_targets, n_features)",
            "description": "Parameter vector (w in the cost function formula)."
          },
          "intercept_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "mse_path_": {
            "type": "ndarray of shape (n_alphas, n_folds)",
            "description": "Mean square error for the test set on each fold, varying alpha."
          },
          "alphas_": {
            "type": "ndarray of shape (n_alphas,)",
            "description": "The grid of alphas used for fitting."
          },
          "dual_gap_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "The dual gap at the end of the optimization for the optimal alpha\n    (``alpha_``)."
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations run by the coordinate descent solver to reach\n    the specified tolerance for the optimal alpha."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "lars_path : Compute Least Angle Regression or Lasso path using LARS\n    algorithm.\nlasso_path : Compute Lasso path with coordinate descent.\nLasso : The Lasso is a linear model that estimates sparse coefficients.\nLassoLars : Lasso model fit with Least Angle Regression a.k.a. Lars.\nLassoCV : Lasso linear model with iterative fitting along a regularization\n    path.\nLassoLarsCV : Cross-validated Lasso using the LARS algorithm.",
        "notes": "In `fit`, once the best parameter `alpha` is found through\ncross-validation, the model is fit again using the entire training set.\n\nTo avoid unnecessary memory duplication the `X` argument of the `fit`\nmethod should be directly passed as a Fortran-contiguous numpy array.\n\nFor an example, see :ref:`examples/linear_model/plot_lasso_model_selection.py\n<sphx_glr_auto_examples_linear_model_plot_lasso_model_selection.py>`.\n\n:class:`LassoCV` leads to different results than a hyperparameter\nsearch using :class:`~sklearn.model_selection.GridSearchCV` with a\n:class:`Lasso` model. In :class:`LassoCV`, a model for a given\npenalty `alpha` is warm started using the coefficients of the\nclosest model (trained at the previous iteration) on the\nregularization path. It tends to speed up the hyperparameter\nsearch.",
        "examples": ">>> from sklearn.linear_model import LassoCV\n>>> from sklearn.datasets import make_regression\n>>> X, y = make_regression(noise=4, random_state=0)\n>>> reg = LassoCV(cv=5, random_state=0).fit(X, y)\n>>> reg.score(X, y)\n0.9993...\n>>> reg.predict(X[:1,])\narray([-78.4951...])"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None, **params)",
          "docstring": {
            "description": "Fit Lasso model with coordinate descent.\n\nFit is on grid of alphas and best alpha estimated by cross-validation.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data. Pass directly as Fortran-contiguous data\n    to avoid unnecessary memory duplication. If y is mono-output,\n    X can be sparse. Note that large sparse matrices and arrays\n    requiring `int64` indices are not accepted."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Target values."
              },
              "sample_weight": {
                "type": "float or array-like of shape (n_samples,),                 default=None",
                "description": "Sample weights used for fitting and evaluation of the weighted\n    mean squared error of each cv-fold. Note that the cross validated\n    MSE that is finally used to find the best model is the unweighted\n    mean over the (weighted) MSEs of each test fold."
              },
              "**params": {
                "type": "dict, default=None",
                "description": "Parameters to be passed to the CV splitter.\n\n    .. versionadded:: 1.4\n        Only available if `enable_metadata_routing=True`,\n        which can be set by using\n        ``sklearn.set_config(enable_metadata_routing=True)``.\n        See :ref:`Metadata Routing User Guide <metadata_routing>` for\n        more details."
              }
            },
            "returns": "self : object\n    Returns an instance of fitted model.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\n.. versionadded:: 1.4",
            "parameters": {},
            "returns": "routing : MetadataRouter\n    A :class:`~sklearn.utils.metadata_routing.MetadataRouter` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "path",
          "signature": "lasso_path(X, y, *, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, **params)",
          "docstring": {
            "description": "Compute Lasso path with coordinate descent.\n\nThe Lasso optimization function varies for mono and multi-outputs.\n\nFor mono-output tasks it is::\n\n    (1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\n\nFor multi-output tasks it is::\n\n    (1 / (2 * n_samples)) * ||Y - XW||^2_Fro + alpha * ||W||_21\n\nWhere::\n\n    ||W||_21 = \\sum_i \\sqrt{\\sum_j w_{ij}^2}\n\ni.e. the sum of norm of each row.\n\nRead more in the :ref:`User Guide <lasso>`.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data. Pass directly as Fortran-contiguous data to avoid\n    unnecessary memory duplication. If ``y`` is mono-output then ``X``\n    can be sparse."
              },
              "y": {
                "type": "{array-like, sparse matrix} of shape (n_samples,) or         (n_samples, n_targets)",
                "description": "Target values."
              },
              "eps": {
                "type": "float, default=1e-3",
                "description": "Length of the path. ``eps=1e-3`` means that\n    ``alpha_min / alpha_max = 1e-3``."
              },
              "n_alphas": {
                "type": "int, default=100",
                "description": "Number of alphas along the regularization path."
              },
              "alphas": {
                "type": "array-like, default=None",
                "description": "List of alphas where to compute the models.\n    If ``None`` alphas are set automatically."
              },
              "precompute": {
                "type": "'auto', bool or array-like of shape             (n_features, n_features), default='auto'",
                "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram\n    matrix can also be passed as argument."
              },
              "Xy": {
                "type": "array-like of shape (n_features,) or (n_features, n_targets),         default=None",
                "description": "Xy = np.dot(X.T, y) that can be precomputed. It is useful\n    only when the Gram matrix is precomputed."
              },
              "copy_X": {
                "type": "bool, default=True",
                "description": "If ``True``, X will be copied; else, it may be overwritten."
              },
              "coef_init": {
                "type": "array-like of shape (n_features, ), default=None",
                "description": "The initial values of the coefficients."
              },
              "verbose": {
                "type": "bool or int, default=False",
                "description": "Amount of verbosity."
              },
              "return_n_iter": {
                "type": "bool, default=False",
                "description": "Whether to return the number of iterations or not."
              },
              "positive": {
                "type": "bool, default=False",
                "description": "If set to True, forces coefficients to be positive.\n    (Only allowed when ``y.ndim == 1``)."
              },
              "**params": {
                "type": "kwargs",
                "description": "Keyword arguments passed to the coordinate descent solver."
              }
            },
            "returns": "alphas : ndarray of shape (n_alphas,)\n    The alphas along the path where models are computed.\n\ncoefs : ndarray of shape (n_features, n_alphas) or             (n_targets, n_features, n_alphas)\n    Coefficients along the path.\n\ndual_gaps : ndarray of shape (n_alphas,)\n    The dual gaps at the end of the optimization for each alpha.\n\nn_iters : list of int\n    The number of iterations taken by the coordinate descent optimizer to\n    reach the specified tolerance for each alpha.",
            "raises": "",
            "see_also": "lars_path : Compute Least Angle Regression or Lasso path using LARS\n    algorithm.\nLasso : The Lasso is a linear model that estimates sparse coefficients.\nLassoLars : Lasso model fit with Least Angle Regression a.k.a. Lars.\nLassoCV : Lasso linear model with iterative fitting along a regularization\n    path.\nLassoLarsCV : Cross-validated Lasso using the LARS algorithm.\nsklearn.decomposition.sparse_encode : Estimator that can be used to\n    transform signals into sparse linear combination of atoms from a fixed.",
            "notes": "For an example, see\n:ref:`examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.py\n<sphx_glr_auto_examples_linear_model_plot_lasso_lasso_lars_elasticnet_path.py>`.\n\nTo avoid unnecessary memory duplication the X argument of the fit method\nshould be directly passed as a Fortran-contiguous numpy array.\n\nNote that in certain cases, the Lars solver may be significantly\nfaster to implement this functionality. In particular, linear\ninterpolation can be used to retrieve model coefficients between the\nvalues output by lars_path",
            "examples": "Comparing lasso_path and lars_path with interpolation:\n\n>>> import numpy as np\n>>> from sklearn.linear_model import lasso_path\n>>> X = np.array([[1, 2, 3.1], [2.3, 5.4, 4.3]]).T\n>>> y = np.array([1, 2, 3.1])\n>>> # Use lasso_path to compute a coefficient path\n>>> _, coef_path, _ = lasso_path(X, y, alphas=[5., 1., .5])\n>>> print(coef_path)\n[[0.         0.         0.46874778]\n [0.2159048  0.4425765  0.23689075]]\n\n>>> # Now use lars_path and 1D linear interpolation to compute the\n>>> # same path\n>>> from sklearn.linear_model import lars_path\n>>> alphas, active, coef_path_lars = lars_path(X, y, method='lasso')\n>>> from scipy import interpolate\n>>> coef_path_continuous = interpolate.interp1d(alphas[::-1],\n...                                             coef_path_lars[:, ::-1])\n>>> print(coef_path_continuous([5., 1., .5]))\n[[0.         0.         0.46915237]\n [0.2159048  0.4425765  0.23668876]]"
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._coordinate_descent.LassoCV, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._coordinate_descent.LassoCV",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._coordinate_descent.LassoCV, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._coordinate_descent.LassoCV",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "LassoLars",
      "docstring": {
        "description": "Lasso model fit with Least Angle Regression a.k.a. Lars.\n\nIt is a Linear Model trained with an L1 prior as regularizer.\n\nThe optimization objective for Lasso is::\n\n(1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\n\nRead more in the :ref:`User Guide <least_angle_regression>`.",
        "parameters": {
          "alpha": {
            "type": "float, default=1.0",
            "description": "Constant that multiplies the penalty term. Defaults to 1.0.\n    ``alpha = 0`` is equivalent to an ordinary least square, solved\n    by :class:`LinearRegression`. For numerical reasons, using\n    ``alpha = 0`` with the LassoLars object is not advised and you\n    should prefer the LinearRegression object."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "verbose": {
            "type": "bool or int, default=False",
            "description": "Sets the verbosity amount."
          },
          "precompute": {
            "type": "bool, 'auto' or array-like, default='auto'",
            "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram\n    matrix can also be passed as argument."
          },
          "max_iter": {
            "type": "int, default=500",
            "description": "Maximum number of iterations to perform."
          },
          "eps": {
            "type": "float, default=np.finfo(float).eps",
            "description": "The machine-precision regularization in the computation of the\n    Cholesky diagonal factors. Increase this for very ill-conditioned\n    systems. Unlike the ``tol`` parameter in some iterative\n    optimization-based algorithms, this parameter does not control\n    the tolerance of the optimization."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If True, X will be copied; else, it may be overwritten."
          },
          "fit_path": {
            "type": "bool, default=True",
            "description": "If ``True`` the full path is stored in the ``coef_path_`` attribute.\n    If you compute the solution for a large problem or many targets,\n    setting ``fit_path`` to ``False`` will lead to a speedup, especially\n    with a small alpha."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "Restrict coefficients to be >= 0. Be aware that you might want to\n    remove fit_intercept which is set True by default.\n    Under the positive restriction the model coefficients will not converge\n    to the ordinary-least-squares solution for small values of alpha.\n    Only coefficients up to the smallest alpha value (``alphas_[alphas_ >\n    0.].min()`` when fit_path=True) reached by the stepwise Lars-Lasso\n    algorithm are typically in congruence with the solution of the\n    coordinate descent Lasso estimator."
          },
          "jitter": {
            "type": "float, default=None",
            "description": "Upper bound on a uniform noise parameter to be added to the\n    `y` values, to satisfy the model's assumption of\n    one-at-a-time computations. Might help with stability.\n\n    .. versionadded:: 0.23"
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Determines random number generation for jittering. Pass an int\n    for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`. Ignored if `jitter` is None.\n\n    .. versionadded:: 0.23\n\nAttributes\n----------"
          },
          "alphas_": {
            "type": "array-like of shape (n_alphas + 1,) or list of such arrays",
            "description": "Maximum of covariances (in absolute value) at each iteration.\n    ``n_alphas`` is either ``max_iter``, ``n_features`` or the\n    number of nodes in the path with ``alpha >= alpha_min``, whichever\n    is smaller. If this is a list of array-like, the length of the outer\n    list is `n_targets`."
          },
          "active_": {
            "type": "list of length n_alphas or list of such lists",
            "description": "Indices of active variables at the end of the path.\n    If this is a list of list, the length of the outer list is `n_targets`."
          },
          "coef_path_": {
            "type": "array-like of shape (n_features, n_alphas + 1) or list             of such arrays",
            "description": "If a list is passed it's expected to be one of n_targets such arrays.\n    The varying values of the coefficients along the path. It is not\n    present if the ``fit_path`` parameter is ``False``. If this is a list\n    of array-like, the length of the outer list is `n_targets`."
          },
          "coef_": {
            "type": "array-like of shape (n_features,) or (n_targets, n_features)",
            "description": "Parameter vector (w in the formulation formula)."
          },
          "intercept_": {
            "type": "float or array-like of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "n_iter_": {
            "type": "array-like or int",
            "description": "The number of iterations taken by lars_path to find the\n    grid of alphas for each target."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "lars_path : Compute Least Angle Regression or Lasso\n    path using LARS algorithm.\nlasso_path : Compute Lasso path with coordinate descent.\nLasso : Linear Model trained with L1 prior as\n    regularizer (aka the Lasso).\nLassoCV : Lasso linear model with iterative fitting\n    along a regularization path.\nLassoLarsCV: Cross-validated Lasso, using the LARS algorithm.\nLassoLarsIC : Lasso model fit with Lars using BIC\n    or AIC for model selection.\nsklearn.decomposition.sparse_encode : Sparse coding.",
        "notes": "",
        "examples": ">>> from sklearn import linear_model\n>>> reg = linear_model.LassoLars(alpha=0.01)\n>>> reg.fit([[-1, 1], [0, 0], [1, 1]], [-1, 0, -1])\nLassoLars(alpha=0.01)\n>>> print(reg.coef_)\n[ 0.         -0.955...]"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, Xy=None)",
          "docstring": {
            "description": "Fit the model using X, y as training data.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_targets)",
                "description": "Target values."
              },
              "Xy": {
                "type": "array-like of shape (n_features,) or (n_features, n_targets),                 default=None",
                "description": "Xy = np.dot(X.T, y) that can be precomputed. It is useful\n    only when the Gram matrix is precomputed."
              }
            },
            "returns": "self : object\n    Returns an instance of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._least_angle.LassoLars, *, Xy: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._least_angle.LassoLars",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "Xy": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``Xy`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._least_angle.LassoLars, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._least_angle.LassoLars",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "LassoLarsCV",
      "docstring": {
        "description": "Cross-validated Lasso, using the LARS algorithm.\n\nSee glossary entry for :term:`cross-validation estimator`.\n\nThe optimization objective for Lasso is::\n\n(1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\n\nRead more in the :ref:`User Guide <least_angle_regression>`.",
        "parameters": {
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "verbose": {
            "type": "bool or int, default=False",
            "description": "Sets the verbosity amount."
          },
          "max_iter": {
            "type": "int, default=500",
            "description": "Maximum number of iterations to perform."
          },
          "precompute": {
            "type": "bool or 'auto' , default='auto'",
            "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram matrix\n    cannot be passed as argument since we will use only subsets of X."
          },
          "cv": {
            "type": "int, cross-validation generator or an iterable, default=None",
            "description": "Determines the cross-validation splitting strategy.\n    Possible inputs for cv are:\n\n    - None, to use the default 5-fold cross-validation,\n    - integer, to specify the number of folds.\n    - :term:`CV splitter`,\n    - An iterable yielding (train, test) splits as arrays of indices.\n\n    For integer/None inputs, :class:`~sklearn.model_selection.KFold` is used.\n\n    Refer :ref:`User Guide <cross_validation>` for the various\n    cross-validation strategies that can be used here.\n\n    .. versionchanged:: 0.22\n        ``cv`` default value if None changed from 3-fold to 5-fold."
          },
          "max_n_alphas": {
            "type": "int, default=1000",
            "description": "The maximum number of points on the path used to compute the\n    residuals in the cross-validation."
          },
          "n_jobs": {
            "type": "int or None, default=None",
            "description": "Number of CPUs to use during the cross validation.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "eps": {
            "type": "float, default=np.finfo(float).eps",
            "description": "The machine-precision regularization in the computation of the\n    Cholesky diagonal factors. Increase this for very ill-conditioned\n    systems. Unlike the ``tol`` parameter in some iterative\n    optimization-based algorithms, this parameter does not control\n    the tolerance of the optimization."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If True, X will be copied; else, it may be overwritten."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "Restrict coefficients to be >= 0. Be aware that you might want to\n    remove fit_intercept which is set True by default.\n    Under the positive restriction the model coefficients do not converge\n    to the ordinary-least-squares solution for small values of alpha.\n    Only coefficients up to the smallest alpha value (``alphas_[alphas_ >\n    0.].min()`` when fit_path=True) reached by the stepwise Lars-Lasso\n    algorithm are typically in congruence with the solution of the\n    coordinate descent Lasso estimator.\n    As a consequence using LassoLarsCV only makes sense for problems where\n    a sparse solution is expected and/or reached.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array-like of shape (n_features,)",
            "description": "parameter vector (w in the formulation formula)"
          },
          "intercept_": {
            "type": "float",
            "description": "independent term in decision function."
          },
          "coef_path_": {
            "type": "array-like of shape (n_features, n_alphas)",
            "description": "the varying values of the coefficients along the path"
          },
          "alpha_": {
            "type": "float",
            "description": "the estimated regularization parameter alpha"
          },
          "alphas_": {
            "type": "array-like of shape (n_alphas,)",
            "description": "the different values of alpha along the path"
          },
          "cv_alphas_": {
            "type": "array-like of shape (n_cv_alphas,)",
            "description": "all the values of alpha along the path for the different folds"
          },
          "mse_path_": {
            "type": "array-like of shape (n_folds, n_cv_alphas)",
            "description": "the mean square error on left-out for each fold along the path\n    (alpha values given by ``cv_alphas``)"
          },
          "n_iter_": {
            "type": "array-like or int",
            "description": "the number of iterations run by Lars with the optimal alpha."
          },
          "active_": {
            "type": "list of int",
            "description": "Indices of active variables at the end of the path."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "lars_path : Compute Least Angle Regression or Lasso\n    path using LARS algorithm.\nlasso_path : Compute Lasso path with coordinate descent.\nLasso : Linear Model trained with L1 prior as\n    regularizer (aka the Lasso).\nLassoCV : Lasso linear model with iterative fitting\n    along a regularization path.\nLassoLars : Lasso model fit with Least Angle Regression a.k.a. Lars.\nLassoLarsIC : Lasso model fit with Lars using BIC\n    or AIC for model selection.\nsklearn.decomposition.sparse_encode : Sparse coding.",
        "notes": "The object solves the same problem as the\n:class:`~sklearn.linear_model.LassoCV` object. However, unlike the\n:class:`~sklearn.linear_model.LassoCV`, it find the relevant alphas values\nby itself. In general, because of this property, it will be more stable.\nHowever, it is more fragile to heavily multicollinear datasets.\n\nIt is more efficient than the :class:`~sklearn.linear_model.LassoCV` if\nonly a small number of features are selected compared to the total number,\nfor instance if there are very few samples compared to the number of\nfeatures.\n\nIn `fit`, once the best parameter `alpha` is found through\ncross-validation, the model is fit again using the entire training set.",
        "examples": ">>> from sklearn.linear_model import LassoLarsCV\n>>> from sklearn.datasets import make_regression\n>>> X, y = make_regression(noise=4.0, random_state=0)\n>>> reg = LassoLarsCV(cv=5).fit(X, y)\n>>> reg.score(X, y)\n0.9993...\n>>> reg.alpha_\nnp.float64(0.3972...)\n>>> reg.predict(X[:1,])\narray([-78.4831...])"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, **params)",
          "docstring": {
            "description": "Fit the model using X, y as training data.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Target values."
              },
              "**params": {
                "type": "dict, default=None",
                "description": "Parameters to be passed to the CV splitter.\n\n    .. versionadded:: 1.4\n        Only available if `enable_metadata_routing=True`,\n        which can be set by using\n        ``sklearn.set_config(enable_metadata_routing=True)``.\n        See :ref:`Metadata Routing User Guide <metadata_routing>` for\n        more details."
              }
            },
            "returns": "self : object\n    Returns an instance of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\n.. versionadded:: 1.4",
            "parameters": {},
            "returns": "routing : MetadataRouter\n    A :class:`~sklearn.utils.metadata_routing.MetadataRouter` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._least_angle.LassoLarsCV, *, Xy: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._least_angle.LassoLarsCV",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "Xy": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``Xy`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._least_angle.LassoLarsCV, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._least_angle.LassoLarsCV",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "LassoLarsIC",
      "docstring": {
        "description": "Lasso model fit with Lars using BIC or AIC for model selection.\n\nThe optimization objective for Lasso is::\n\n(1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\n\nAIC is the Akaike information criterion [2]_ and BIC is the Bayes\nInformation criterion [3]_. Such criteria are useful to select the value\nof the regularization parameter by making a trade-off between the\ngoodness of fit and the complexity of the model. A good model should\nexplain well the data while being simple.\n\nRead more in the :ref:`User Guide <lasso_lars_ic>`.",
        "parameters": {
          "criterion": {
            "type": "{'aic', 'bic'}, default='aic'",
            "description": "The type of criterion to use."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "verbose": {
            "type": "bool or int, default=False",
            "description": "Sets the verbosity amount."
          },
          "precompute": {
            "type": "bool, 'auto' or array-like, default='auto'",
            "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram\n    matrix can also be passed as argument."
          },
          "max_iter": {
            "type": "int, default=500",
            "description": "Maximum number of iterations to perform. Can be used for\n    early stopping."
          },
          "eps": {
            "type": "float, default=np.finfo(float).eps",
            "description": "The machine-precision regularization in the computation of the\n    Cholesky diagonal factors. Increase this for very ill-conditioned\n    systems. Unlike the ``tol`` parameter in some iterative\n    optimization-based algorithms, this parameter does not control\n    the tolerance of the optimization."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If True, X will be copied; else, it may be overwritten."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "Restrict coefficients to be >= 0. Be aware that you might want to\n    remove fit_intercept which is set True by default.\n    Under the positive restriction the model coefficients do not converge\n    to the ordinary-least-squares solution for small values of alpha.\n    Only coefficients up to the smallest alpha value (``alphas_[alphas_ >\n    0.].min()`` when fit_path=True) reached by the stepwise Lars-Lasso\n    algorithm are typically in congruence with the solution of the\n    coordinate descent Lasso estimator.\n    As a consequence using LassoLarsIC only makes sense for problems where\n    a sparse solution is expected and/or reached."
          },
          "noise_variance": {
            "type": "float, default=None",
            "description": "The estimated noise variance of the data. If `None`, an unbiased\n    estimate is computed by an OLS model. However, it is only possible\n    in the case where `n_samples > n_features + fit_intercept`.\n\n    .. versionadded:: 1.1\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array-like of shape (n_features,)",
            "description": "parameter vector (w in the formulation formula)"
          },
          "intercept_": {
            "type": "float",
            "description": "independent term in decision function."
          },
          "alpha_": {
            "type": "float",
            "description": "the alpha parameter chosen by the information criterion"
          },
          "alphas_": {
            "type": "array-like of shape (n_alphas + 1,) or list of such arrays",
            "description": "Maximum of covariances (in absolute value) at each iteration.\n    ``n_alphas`` is either ``max_iter``, ``n_features`` or the\n    number of nodes in the path with ``alpha >= alpha_min``, whichever\n    is smaller. If a list, it will be of length `n_targets`."
          },
          "n_iter_": {
            "type": "int",
            "description": "number of iterations run by lars_path to find the grid of\n    alphas."
          },
          "criterion_": {
            "type": "array-like of shape (n_alphas,)",
            "description": "The value of the information criteria ('aic', 'bic') across all\n    alphas. The alpha which has the smallest information criterion is\n    chosen, as specified in [1]_."
          },
          "noise_variance_": {
            "type": "float",
            "description": "The estimated noise variance from the data used to compute the\n    criterion.\n\n    .. versionadded:: 1.1"
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "lars_path : Compute Least Angle Regression or Lasso\n    path using LARS algorithm.\nlasso_path : Compute Lasso path with coordinate descent.\nLasso : Linear Model trained with L1 prior as\n    regularizer (aka the Lasso).\nLassoCV : Lasso linear model with iterative fitting\n    along a regularization path.\nLassoLars : Lasso model fit with Least Angle Regression a.k.a. Lars.\nLassoLarsCV: Cross-validated Lasso, using the LARS algorithm.\nsklearn.decomposition.sparse_encode : Sparse coding.",
        "notes": "The number of degrees of freedom is computed as in [1]_.\n\nTo have more details regarding the mathematical formulation of the\nAIC and BIC criteria, please refer to :ref:`User Guide <lasso_lars_ic>`.\n\nReferences\n----------\n.. [1] :arxiv:`Zou, Hui, Trevor Hastie, and Robert Tibshirani.\n        \"On the degrees of freedom of the lasso.\"\n        The Annals of Statistics 35.5 (2007): 2173-2192.\n        <0712.0881>`\n\n.. [2] `Wikipedia entry on the Akaike information criterion\n        <https://en.wikipedia.org/wiki/Akaike_information_criterion>`_\n\n.. [3] `Wikipedia entry on the Bayesian information criterion\n        <https://en.wikipedia.org/wiki/Bayesian_information_criterion>`_",
        "examples": ">>> from sklearn import linear_model\n>>> reg = linear_model.LassoLarsIC(criterion='bic')\n>>> X = [[-2, 2], [-1, 1], [0, 0], [1, 1], [2, 2]]\n>>> y = [-2.2222, -1.1111, 0, -1.1111, -2.2222]\n>>> reg.fit(X, y)\nLassoLarsIC(criterion='bic')\n>>> print(reg.coef_)\n[ 0.  -1.11...]"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, copy_X=None)",
          "docstring": {
            "description": "Fit the model using X, y as training data.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Target values. Will be cast to X's dtype if necessary."
              },
              "copy_X": {
                "type": "bool, default=None",
                "description": "If provided, this parameter will override the choice\n    of copy_X made at instance creation.\n    If ``True``, X will be copied; else, it may be overwritten."
              }
            },
            "returns": "self : object\n    Returns an instance of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._least_angle.LassoLarsIC, *, copy_X: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._least_angle.LassoLarsIC",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "copy_X": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``copy_X`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._least_angle.LassoLarsIC, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._least_angle.LassoLarsIC",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "LinearRegression",
      "docstring": {
        "description": "Ordinary least squares Linear Regression.\n\nLinearRegression fits a linear model with coefficients w = (w1, ..., wp)\nto minimize the residual sum of squares between the observed targets in\nthe dataset, and the targets predicted by the linear approximation.",
        "parameters": {
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to False, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If True, X will be copied; else, it may be overwritten."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "The number of jobs to use for the computation. This will only provide\n    speedup in case of sufficiently large problems, that is if firstly\n    `n_targets > 1` and secondly `X` is sparse or if `positive` is set\n    to `True`. ``None`` means 1 unless in a\n    :obj:`joblib.parallel_backend` context. ``-1`` means using all\n    processors. See :term:`Glossary <n_jobs>` for more details."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "When set to ``True``, forces the coefficients to be positive. This\n    option is only supported for dense arrays.\n\n    .. versionadded:: 0.24\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array of shape (n_features, ) or (n_targets, n_features)",
            "description": "Estimated coefficients for the linear regression problem.\n    If multiple targets are passed during the fit (y 2D), this\n    is a 2D array of shape (n_targets, n_features), while if only\n    one target is passed, this is a 1D array of length n_features."
          },
          "rank_": {
            "type": "int",
            "description": "Rank of matrix `X`. Only available when `X` is dense."
          },
          "singular_": {
            "type": "array of shape (min(X, y),)",
            "description": "Singular values of `X`. Only available when `X` is dense."
          },
          "intercept_": {
            "type": "float or array of shape (n_targets,)",
            "description": "Independent term in the linear model. Set to 0.0 if\n    `fit_intercept = False`."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "Ridge : Ridge regression addresses some of the\n    problems of Ordinary Least Squares by imposing a penalty on the\n    size of the coefficients with l2 regularization.\nLasso : The Lasso is a linear model that estimates\n    sparse coefficients with l1 regularization.\nElasticNet : Elastic-Net is a linear regression\n    model trained with both l1 and l2 -norm regularization of the\n    coefficients.",
        "notes": "From the implementation point of view, this is just plain Ordinary\nLeast Squares (scipy.linalg.lstsq) or Non Negative Least Squares\n(scipy.optimize.nnls) wrapped as a predictor object.",
        "examples": ">>> import numpy as np\n>>> from sklearn.linear_model import LinearRegression\n>>> X = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\n>>> # y = 1 * x_0 + 2 * x_1 + 3\n>>> y = np.dot(X, np.array([1, 2])) + 3\n>>> reg = LinearRegression().fit(X, y)\n>>> reg.score(X, y)\n1.0\n>>> reg.coef_\narray([1., 2.])\n>>> reg.intercept_\nnp.float64(3.0...)\n>>> reg.predict(np.array([[3, 5]]))\narray([16.])"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Fit linear model.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_targets)",
                "description": "Target values. Will be cast to X's dtype if necessary."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Individual weights for each sample.\n\n    .. versionadded:: 0.17\n       parameter *sample_weight* support to LinearRegression."
              }
            },
            "returns": "self : object\n    Fitted Estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._base.LinearRegression, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._base.LinearRegression",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._base.LinearRegression, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._base.LinearRegression",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "LogisticRegression",
      "docstring": {
        "description": "Logistic Regression (aka logit, MaxEnt) classifier.\n\nThis class implements regularized logistic regression using the\n'liblinear' library, 'newton-cg', 'sag', 'saga' and 'lbfgs' solvers. **Note\nthat regularization is applied by default**. It can handle both dense\nand sparse input. Use C-ordered arrays or CSR matrices containing 64-bit\nfloats for optimal performance; any other input format will be converted\n(and copied).\n\nThe 'newton-cg', 'sag', and 'lbfgs' solvers support only L2 regularization\nwith primal formulation, or no regularization. The 'liblinear' solver\nsupports both L1 and L2 regularization, with a dual formulation only for\nthe L2 penalty. The Elastic-Net regularization is only supported by the\n'saga' solver.\n\nFor :term:`multiclass` problems, only 'newton-cg', 'sag', 'saga' and 'lbfgs'\nhandle multinomial loss. 'liblinear' and 'newton-cholesky' only handle binary\nclassification but can be extended to handle multiclass by using\n:class:`~sklearn.multiclass.OneVsRestClassifier`.\n\nRead more in the :ref:`User Guide <logistic_regression>`.",
        "parameters": {
          "penalty": {
            "type": "{'l1', 'l2', 'elasticnet', None}, default='l2'",
            "description": "Specify the norm of the penalty:\n\n    - `None`: no penalty is added;\n    - `'l2'`: add a L2 penalty term and it is the default choice;\n    - `'l1'`: add a L1 penalty term;\n    - `'elasticnet'`: both L1 and L2 penalty terms are added.\n\n    .. warning::\n       Some penalties may not work with some solvers. See the parameter\n       `solver` below, to know the compatibility between the penalty and\n       solver.\n\n    .. versionadded:: 0.19\n       l1 penalty with SAGA solver (allowing 'multinomial' + L1)"
          },
          "dual": {
            "type": "bool, default=False",
            "description": "Dual (constrained) or primal (regularized, see also\n    :ref:`this equation <regularized-logistic-loss>`) formulation. Dual formulation\n    is only implemented for l2 penalty with liblinear solver. Prefer dual=False when\n    n_samples > n_features."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "Tolerance for stopping criteria."
          },
          "C": {
            "type": "float, default=1.0",
            "description": "Inverse of regularization strength; must be a positive float.\n    Like in support vector machines, smaller values specify stronger\n    regularization."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Specifies if a constant (a.k.a. bias or intercept) should be\n    added to the decision function."
          },
          "intercept_scaling": {
            "type": "float, default=1",
            "description": "Useful only when the solver 'liblinear' is used\n    and self.fit_intercept is set to True. In this case, x becomes\n    [x, self.intercept_scaling],\n    i.e. a \"synthetic\" feature with constant value equal to\n    intercept_scaling is appended to the instance vector.\n    The intercept becomes ``intercept_scaling * synthetic_feature_weight``.\n\n    Note! the synthetic feature weight is subject to l1/l2 regularization\n    as all other features.\n    To lessen the effect of regularization on synthetic feature weight\n    (and therefore on the intercept) intercept_scaling has to be increased."
          },
          "class_weight": {
            "type": "dict or 'balanced', default=None",
            "description": "Weights associated with classes in the form ``{class_label: weight}``.\n    If not given, all classes are supposed to have weight one.\n\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``.\n\n    Note that these weights will be multiplied with sample_weight (passed\n    through the fit method) if sample_weight is specified.\n\n    .. versionadded:: 0.17\n       *class_weight='balanced'*"
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used when ``solver`` == 'sag', 'saga' or 'liblinear' to shuffle the\n    data. See :term:`Glossary <random_state>` for details."
          },
          "solver": {
            "type": "{'lbfgs', 'liblinear', 'newton-cg', 'newton-cholesky', 'sag', 'saga'},             default='lbfgs'",
            "description": "Algorithm to use in the optimization problem. Default is 'lbfgs'.\n    To choose a solver, you might want to consider the following aspects:\n\n    - For small datasets, 'liblinear' is a good choice, whereas 'sag'\n      and 'saga' are faster for large ones;\n    - For :term:`multiclass` problems, all solvers except 'liblinear' minimize the\n      full multinomial loss;\n    - 'liblinear' can only handle binary classification by default. To apply a\n      one-versus-rest scheme for the multiclass setting one can wrap it with the\n      :class:`~sklearn.multiclass.OneVsRestClassifier`.\n    - 'newton-cholesky' is a good choice for\n      `n_samples` >> `n_features * n_classes`, especially with one-hot encoded\n      categorical features with rare categories. Be aware that the memory usage\n      of this solver has a quadratic dependency on `n_features * n_classes`\n      because it explicitly computes the full Hessian matrix.\n\n    .. warning::\n       The choice of the algorithm depends on the penalty chosen and on\n       (multinomial) multiclass support:\n\n       ================= ============================== ======================\n       solver            penalty                        multinomial multiclass\n       ================= ============================== ======================\n       'lbfgs'           'l2', None                     yes\n       'liblinear'       'l1', 'l2'                     no\n       'newton-cg'       'l2', None                     yes\n       'newton-cholesky' 'l2', None                     no\n       'sag'             'l2', None                     yes\n       'saga'            'elasticnet', 'l1', 'l2', None yes\n       ================= ============================== ======================\n\n    .. note::\n       'sag' and 'saga' fast convergence is only guaranteed on features\n       with approximately the same scale. You can preprocess the data with\n       a scaler from :mod:`sklearn.preprocessing`.\n\n    .. seealso::\n       Refer to the :ref:`User Guide <Logistic_regression>` for more\n       information regarding :class:`LogisticRegression` and more specifically the\n       :ref:`Table <logistic_regression_solvers>`\n       summarizing solver/penalty supports.\n\n    .. versionadded:: 0.17\n       Stochastic Average Gradient descent solver.\n    .. versionadded:: 0.19\n       SAGA solver.\n    .. versionchanged:: 0.22\n        The default solver changed from 'liblinear' to 'lbfgs' in 0.22.\n    .. versionadded:: 1.2\n       newton-cholesky solver."
          },
          "max_iter": {
            "type": "int, default=100",
            "description": "Maximum number of iterations taken for the solvers to converge."
          },
          "multi_class": {
            "type": "{'auto', 'ovr', 'multinomial'}, default='auto'",
            "description": "If the option chosen is 'ovr', then a binary problem is fit for each\n    label. For 'multinomial' the loss minimised is the multinomial loss fit\n    across the entire probability distribution, *even when the data is\n    binary*. 'multinomial' is unavailable when solver='liblinear'.\n    'auto' selects 'ovr' if the data is binary, or if solver='liblinear',\n    and otherwise selects 'multinomial'.\n\n    .. versionadded:: 0.18\n       Stochastic Average Gradient descent solver for 'multinomial' case.\n    .. versionchanged:: 0.22\n        Default changed from 'ovr' to 'auto' in 0.22.\n    .. deprecated:: 1.5\n       ``multi_class`` was deprecated in version 1.5 and will be removed in 1.7.\n       From then on, the recommended 'multinomial' will always be used for\n       `n_classes >= 3`.\n       Solvers that do not support 'multinomial' will raise an error.\n       Use `sklearn.multiclass.OneVsRestClassifier(LogisticRegression())` if you\n       still want to use OvR."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "For the liblinear and lbfgs solvers set verbose to any positive\n    number for verbosity."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to True, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution.\n    Useless for liblinear solver. See :term:`the Glossary <warm_start>`.\n\n    .. versionadded:: 0.17\n       *warm_start* to support *lbfgs*, *newton-cg*, *sag*, *saga* solvers."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "Number of CPU cores used when parallelizing over classes if\n    multi_class='ovr'\". This parameter is ignored when the ``solver`` is\n    set to 'liblinear' regardless of whether 'multi_class' is specified or\n    not. ``None`` means 1 unless in a :obj:`joblib.parallel_backend`\n    context. ``-1`` means using all processors.\n    See :term:`Glossary <n_jobs>` for more details."
          },
          "l1_ratio": {
            "type": "float, default=None",
            "description": "The Elastic-Net mixing parameter, with ``0 <= l1_ratio <= 1``. Only\n    used if ``penalty='elasticnet'``. Setting ``l1_ratio=0`` is equivalent\n    to using ``penalty='l2'``, while setting ``l1_ratio=1`` is equivalent\n    to using ``penalty='l1'``. For ``0 < l1_ratio <1``, the penalty is a\n    combination of L1 and L2.\n\nAttributes\n----------"
          },
          "classes_": {
            "type": "ndarray of shape (n_classes, )",
            "description": "A list of class labels known to the classifier."
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features) or (n_classes, n_features)",
            "description": "Coefficient of the features in the decision function.\n\n    `coef_` is of shape (1, n_features) when the given problem is binary.\n    In particular, when `multi_class='multinomial'`, `coef_` corresponds\n    to outcome 1 (True) and `-coef_` corresponds to outcome 0 (False)."
          },
          "intercept_": {
            "type": "ndarray of shape (1,) or (n_classes,)",
            "description": "Intercept (a.k.a. bias) added to the decision function.\n\n    If `fit_intercept` is set to False, the intercept is set to zero.\n    `intercept_` is of shape (1,) when the given problem is binary.\n    In particular, when `multi_class='multinomial'`, `intercept_`\n    corresponds to outcome 1 (True) and `-intercept_` corresponds to\n    outcome 0 (False)."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "ndarray of shape (n_classes,) or (1, )",
            "description": "Actual number of iterations for all classes. If binary or multinomial,\n    it returns only 1 element. For liblinear solver, only the maximum\n    number of iteration across all classes is given.\n\n    .. versionchanged:: 0.20\n\n        In SciPy <= 1.0.0 the number of lbfgs iterations may exceed\n        ``max_iter``. ``n_iter_`` will now report at most ``max_iter``."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "SGDClassifier : Incrementally trained logistic regression (when given\n    the parameter ``loss=\"log_loss\"``).\nLogisticRegressionCV : Logistic regression with built-in cross validation.",
        "notes": "The underlying C implementation uses a random number generator to\nselect features when fitting the model. It is thus not uncommon,\nto have slightly different results for the same input data. If\nthat happens, try with a smaller tol parameter.\n\nPredict output may not match that of standalone liblinear in certain\ncases. See :ref:`differences from liblinear <liblinear_differences>`\nin the narrative documentation.\n\nReferences\n----------\n\nL-BFGS-B -- Software for Large-scale Bound-constrained Optimization\n    Ciyou Zhu, Richard Byrd, Jorge Nocedal and Jose Luis Morales.\n    http://users.iems.northwestern.edu/~nocedal/lbfgsb.html\n\nLIBLINEAR -- A Library for Large Linear Classification\n    https://www.csie.ntu.edu.tw/~cjlin/liblinear/\n\nSAG -- Mark Schmidt, Nicolas Le Roux, and Francis Bach\n    Minimizing Finite Sums with the Stochastic Average Gradient\n    https://hal.inria.fr/hal-00860051/document\n\nSAGA -- Defazio, A., Bach F. & Lacoste-Julien S. (2014).\n        :arxiv:`\"SAGA: A Fast Incremental Gradient Method With Support\n        for Non-Strongly Convex Composite Objectives\" <1407.0202>`\n\nHsiang-Fu Yu, Fang-Lan Huang, Chih-Jen Lin (2011). Dual coordinate descent\n    methods for logistic regression and maximum entropy models.\n    Machine Learning 85(1-2):41-75.\n    https://www.csie.ntu.edu.tw/~cjlin/papers/maxent_dual.pdf",
        "examples": ">>> from sklearn.datasets import load_iris\n>>> from sklearn.linear_model import LogisticRegression\n>>> X, y = load_iris(return_X_y=True)\n>>> clf = LogisticRegression(random_state=0).fit(X, y)\n>>> clf.predict(X[:2, :])\narray([0, 0])\n>>> clf.predict_proba(X[:2, :])\narray([[9.8...e-01, 1.8...e-02, 1.4...e-08],\n       [9.7...e-01, 2.8...e-02, ...e-08]])\n>>> clf.score(X, y)\n0.97...\n\nFor a comaprison of the LogisticRegression with other classifiers see:\n:ref:`sphx_glr_auto_examples_classification_plot_classification_probability.py`."
      },
      "methods": [
        {
          "name": "decision_function",
          "signature": "decision_function(self, X)",
          "docstring": {
            "description": "Predict confidence scores for samples.\n\nThe confidence score for a sample is proportional to the signed\ndistance of that sample to the hyperplane.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The data matrix for which we want to get the confidence scores."
              }
            },
            "returns": "scores : ndarray of shape (n_samples,) or (n_samples, n_classes)\n    Confidence scores per `(n_samples, n_classes)` combination. In the\n    binary case, confidence score for `self.classes_[1]` where >0 means\n    this class would be predicted.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "densify",
          "signature": "densify(self)",
          "docstring": {
            "description": "Convert coefficient matrix to dense array format.\n\nConverts the ``coef_`` member (back) to a numpy.ndarray. This is the\ndefault format of ``coef_`` and is required for fitting, so calling\nthis method is only required on models that have previously been\nsparsified; otherwise, it is a no-op.",
            "parameters": {},
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Fit the model according to the given training data.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training vector, where `n_samples` is the number of samples and\n    `n_features` is the number of features."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Target vector relative to X."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,) default=None",
                "description": "Array of weights that are assigned to individual samples.\n    If not provided, then each sample is given unit weight.\n\n    .. versionadded:: 0.17\n       *sample_weight* support to LogisticRegression."
              }
            },
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "The SAGA solver supports both float64 and float32 bit arrays.",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict class labels for samples in X.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The data matrix for which we want to get the predictions."
              }
            },
            "returns": "y_pred : ndarray of shape (n_samples,)\n    Vector containing the class labels for each sample.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_log_proba",
          "signature": "predict_log_proba(self, X)",
          "docstring": {
            "description": "Predict logarithm of probability estimates.\n\nThe returned estimates for all classes are ordered by the\nlabel of classes.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Vector to be scored, where `n_samples` is the number of samples and\n    `n_features` is the number of features."
              }
            },
            "returns": "T : array-like of shape (n_samples, n_classes)\n    Returns the log-probability of the sample for each class in the\n    model, where classes are ordered as they are in ``self.classes_``.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_proba",
          "signature": "predict_proba(self, X)",
          "docstring": {
            "description": "Probability estimates.\n\nThe returned estimates for all classes are ordered by the\nlabel of classes.\n\nFor a multi_class problem, if multi_class is set to be \"multinomial\"\nthe softmax function is used to find the predicted probability of\neach class.\nElse use a one-vs-rest approach, i.e. calculate the probability\nof each class assuming it to be positive using the logistic function\nand normalize these values across all the classes.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Vector to be scored, where `n_samples` is the number of samples and\n    `n_features` is the number of features."
              }
            },
            "returns": "T : array-like of shape (n_samples, n_classes)\n    Returns the probability of the sample for each class in the model,\n    where classes are ordered as they are in ``self.classes_``.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the mean accuracy on the given test data and labels.\n\nIn multi-label classification, this is the subset accuracy\nwhich is a harsh metric since you require for each sample that\neach label set be correctly predicted.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True labels for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._logistic.LogisticRegression, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._logistic.LogisticRegression",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._logistic.LogisticRegression, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._logistic.LogisticRegression",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sparsify",
          "signature": "sparsify(self)",
          "docstring": {
            "description": "Convert coefficient matrix to sparse format.\n\nConverts the ``coef_`` member to a scipy.sparse matrix, which for\nL1-regularized models can be much more memory- and storage-efficient\nthan the usual numpy.ndarray representation.\n\nThe ``intercept_`` member is not converted.",
            "parameters": {},
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "For non-sparse models, i.e. when there are not many zeros in ``coef_``,\nthis may actually *increase* memory usage, so use this method with\ncare. A rule of thumb is that the number of zero elements, which can\nbe computed with ``(coef_ == 0).sum()``, must be more than 50% for this\nto provide significant benefits.\n\nAfter calling this method, further fitting with the partial_fit\nmethod (if any) will not work until you call densify.",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "LogisticRegressionCV",
      "docstring": {
        "description": "Logistic Regression CV (aka logit, MaxEnt) classifier.\n\nSee glossary entry for :term:`cross-validation estimator`.\n\nThis class implements logistic regression using liblinear, newton-cg, sag\nor lbfgs optimizer. The newton-cg, sag and lbfgs solvers support only L2\nregularization with primal formulation. The liblinear solver supports both\nL1 and L2 regularization, with a dual formulation only for the L2 penalty.\nElastic-Net penalty is only supported by the saga solver.\n\nFor the grid of `Cs` values and `l1_ratios` values, the best hyperparameter\nis selected by the cross-validator\n:class:`~sklearn.model_selection.StratifiedKFold`, but it can be changed\nusing the :term:`cv` parameter. The 'newton-cg', 'sag', 'saga' and 'lbfgs'\nsolvers can warm-start the coefficients (see :term:`Glossary<warm_start>`).\n\nRead more in the :ref:`User Guide <logistic_regression>`.",
        "parameters": {
          "Cs": {
            "type": "int or list of floats, default=10",
            "description": "Each of the values in Cs describes the inverse of regularization\n    strength. If Cs is as an int, then a grid of Cs values are chosen\n    in a logarithmic scale between 1e-4 and 1e4.\n    Like in support vector machines, smaller values specify stronger\n    regularization."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Specifies if a constant (a.k.a. bias or intercept) should be\n    added to the decision function."
          },
          "cv": {
            "type": "int or cross-validation generator, default=None",
            "description": "The default cross-validation generator used is Stratified K-Folds.\n    If an integer is provided, then it is the number of folds used.\n    See the module :mod:`sklearn.model_selection` module for the\n    list of possible cross-validation objects.\n\n    .. versionchanged:: 0.22\n        ``cv`` default value if None changed from 3-fold to 5-fold."
          },
          "dual": {
            "type": "bool, default=False",
            "description": "Dual (constrained) or primal (regularized, see also\n    :ref:`this equation <regularized-logistic-loss>`) formulation. Dual formulation\n    is only implemented for l2 penalty with liblinear solver. Prefer dual=False when\n    n_samples > n_features."
          },
          "penalty": {
            "type": "{'l1', 'l2', 'elasticnet'}, default='l2'",
            "description": "Specify the norm of the penalty:\n\n    - `'l2'`: add a L2 penalty term (used by default);\n    - `'l1'`: add a L1 penalty term;\n    - `'elasticnet'`: both L1 and L2 penalty terms are added.\n\n    .. warning::\n       Some penalties may not work with some solvers. See the parameter\n       `solver` below, to know the compatibility between the penalty and\n       solver."
          },
          "scoring": {
            "type": "str or callable, default=None",
            "description": "A string (see :ref:`scoring_parameter`) or\n    a scorer callable object / function with signature\n    ``scorer(estimator, X, y)``. For a list of scoring functions\n    that can be used, look at :mod:`sklearn.metrics`. The\n    default scoring option used is 'accuracy'."
          },
          "solver": {
            "type": "{'lbfgs', 'liblinear', 'newton-cg', 'newton-cholesky', 'sag', 'saga'},             default='lbfgs'",
            "description": "Algorithm to use in the optimization problem. Default is 'lbfgs'.\n    To choose a solver, you might want to consider the following aspects:\n\n    - For small datasets, 'liblinear' is a good choice, whereas 'sag'\n      and 'saga' are faster for large ones;\n    - For multiclass problems, all solvers except 'liblinear' minimize the full\n      multinomial loss;\n    - 'liblinear' might be slower in :class:`LogisticRegressionCV`\n      because it does not handle warm-starting.\n    - 'liblinear' can only handle binary classification by default. To apply a\n      one-versus-rest scheme for the multiclass setting one can wrap it with the\n      :class:`~sklearn.multiclass.OneVsRestClassifier`.\n    - 'newton-cholesky' is a good choice for\n      `n_samples` >> `n_features * n_classes`, especially with one-hot encoded\n      categorical features with rare categories. Be aware that the memory usage\n      of this solver has a quadratic dependency on `n_features * n_classes`\n      because it explicitly computes the full Hessian matrix.\n\n    .. warning::\n       The choice of the algorithm depends on the penalty chosen and on\n       (multinomial) multiclass support:\n\n       ================= ============================== ======================\n       solver            penalty                        multinomial multiclass\n       ================= ============================== ======================\n       'lbfgs'           'l2'                           yes\n       'liblinear'       'l1', 'l2'                     no\n       'newton-cg'       'l2'                           yes\n       'newton-cholesky' 'l2',                          no\n       'sag'             'l2',                          yes\n       'saga'            'elasticnet', 'l1', 'l2'       yes\n       ================= ============================== ======================\n\n    .. note::\n       'sag' and 'saga' fast convergence is only guaranteed on features\n       with approximately the same scale. You can preprocess the data with\n       a scaler from :mod:`sklearn.preprocessing`.\n\n    .. versionadded:: 0.17\n       Stochastic Average Gradient descent solver.\n    .. versionadded:: 0.19\n       SAGA solver.\n    .. versionadded:: 1.2\n       newton-cholesky solver."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "Tolerance for stopping criteria."
          },
          "max_iter": {
            "type": "int, default=100",
            "description": "Maximum number of iterations of the optimization algorithm."
          },
          "class_weight": {
            "type": "dict or 'balanced', default=None",
            "description": "Weights associated with classes in the form ``{class_label: weight}``.\n    If not given, all classes are supposed to have weight one.\n\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``.\n\n    Note that these weights will be multiplied with sample_weight (passed\n    through the fit method) if sample_weight is specified.\n\n    .. versionadded:: 0.17\n       class_weight == 'balanced'"
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "Number of CPU cores used during the cross-validation loop.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "For the 'liblinear', 'sag' and 'lbfgs' solvers set verbose to any\n    positive number for verbosity."
          },
          "refit": {
            "type": "bool, default=True",
            "description": "If set to True, the scores are averaged across all folds, and the\n    coefs and the C that corresponds to the best score is taken, and a\n    final refit is done using these parameters.\n    Otherwise the coefs, intercepts and C that correspond to the\n    best scores across folds are averaged."
          },
          "intercept_scaling": {
            "type": "float, default=1",
            "description": "Useful only when the solver 'liblinear' is used\n    and self.fit_intercept is set to True. In this case, x becomes\n    [x, self.intercept_scaling],\n    i.e. a \"synthetic\" feature with constant value equal to\n    intercept_scaling is appended to the instance vector.\n    The intercept becomes ``intercept_scaling * synthetic_feature_weight``.\n\n    Note! the synthetic feature weight is subject to l1/l2 regularization\n    as all other features.\n    To lessen the effect of regularization on synthetic feature weight\n    (and therefore on the intercept) intercept_scaling has to be increased."
          },
          "multi_class": {
            "type": "{'auto, 'ovr', 'multinomial'}, default='auto'",
            "description": "If the option chosen is 'ovr', then a binary problem is fit for each\n    label. For 'multinomial' the loss minimised is the multinomial loss fit\n    across the entire probability distribution, *even when the data is\n    binary*. 'multinomial' is unavailable when solver='liblinear'.\n    'auto' selects 'ovr' if the data is binary, or if solver='liblinear',\n    and otherwise selects 'multinomial'.\n\n    .. versionadded:: 0.18\n       Stochastic Average Gradient descent solver for 'multinomial' case.\n    .. versionchanged:: 0.22\n        Default changed from 'ovr' to 'auto' in 0.22.\n    .. deprecated:: 1.5\n       ``multi_class`` was deprecated in version 1.5 and will be removed in 1.7.\n       From then on, the recommended 'multinomial' will always be used for\n       `n_classes >= 3`.\n       Solvers that do not support 'multinomial' will raise an error.\n       Use `sklearn.multiclass.OneVsRestClassifier(LogisticRegressionCV())` if you\n       still want to use OvR."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used when `solver='sag'`, 'saga' or 'liblinear' to shuffle the data.\n    Note that this only applies to the solver and not the cross-validation\n    generator. See :term:`Glossary <random_state>` for details."
          },
          "l1_ratios": {
            "type": "list of float, default=None",
            "description": "The list of Elastic-Net mixing parameter, with ``0 <= l1_ratio <= 1``.\n    Only used if ``penalty='elasticnet'``. A value of 0 is equivalent to\n    using ``penalty='l2'``, while 1 is equivalent to using\n    ``penalty='l1'``. For ``0 < l1_ratio <1``, the penalty is a combination\n    of L1 and L2.\n\nAttributes\n----------"
          },
          "classes_": {
            "type": "ndarray of shape (n_classes, )",
            "description": "A list of class labels known to the classifier."
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features) or (n_classes, n_features)",
            "description": "Coefficient of the features in the decision function.\n\n    `coef_` is of shape (1, n_features) when the given problem\n    is binary."
          },
          "intercept_": {
            "type": "ndarray of shape (1,) or (n_classes,)",
            "description": "Intercept (a.k.a. bias) added to the decision function.\n\n    If `fit_intercept` is set to False, the intercept is set to zero.\n    `intercept_` is of shape(1,) when the problem is binary."
          },
          "Cs_": {
            "type": "ndarray of shape (n_cs)",
            "description": "Array of C i.e. inverse of regularization parameter values used\n    for cross-validation."
          },
          "l1_ratios_": {
            "type": "ndarray of shape (n_l1_ratios)",
            "description": "Array of l1_ratios used for cross-validation. If no l1_ratio is used\n    (i.e. penalty is not 'elasticnet'), this is set to ``[None]``"
          },
          "coefs_paths_": {
            "type": "ndarray of shape (n_folds, n_cs, n_features) or                    (n_folds, n_cs, n_features + 1)",
            "description": "dict with classes as the keys, and the path of coefficients obtained\n    during cross-validating across each fold and then across each Cs\n    after doing an OvR for the corresponding class as values.\n    If the 'multi_class' option is set to 'multinomial', then\n    the coefs_paths are the coefficients corresponding to each class.\n    Each dict value has shape ``(n_folds, n_cs, n_features)`` or\n    ``(n_folds, n_cs, n_features + 1)`` depending on whether the\n    intercept is fit or not. If ``penalty='elasticnet'``, the shape is\n    ``(n_folds, n_cs, n_l1_ratios_, n_features)`` or\n    ``(n_folds, n_cs, n_l1_ratios_, n_features + 1)``."
          },
          "scores_": {
            "type": "dict",
            "description": "dict with classes as the keys, and the values as the\n    grid of scores obtained during cross-validating each fold, after doing\n    an OvR for the corresponding class. If the 'multi_class' option\n    given is 'multinomial' then the same scores are repeated across\n    all classes, since this is the multinomial class. Each dict value\n    has shape ``(n_folds, n_cs)`` or ``(n_folds, n_cs, n_l1_ratios)`` if\n    ``penalty='elasticnet'``."
          },
          "C_": {
            "type": "ndarray of shape (n_classes,) or (n_classes - 1,)",
            "description": "Array of C that maps to the best scores across every class. If refit is\n    set to False, then for each class, the best C is the average of the\n    C's that correspond to the best scores for each fold.\n    `C_` is of shape(n_classes,) when the problem is binary."
          },
          "l1_ratio_": {
            "type": "ndarray of shape (n_classes,) or (n_classes - 1,)",
            "description": "Array of l1_ratio that maps to the best scores across every class. If\n    refit is set to False, then for each class, the best l1_ratio is the\n    average of the l1_ratio's that correspond to the best scores for each\n    fold.  `l1_ratio_` is of shape(n_classes,) when the problem is binary."
          },
          "n_iter_": {
            "type": "ndarray of shape (n_classes, n_folds, n_cs) or (1, n_folds, n_cs)",
            "description": "Actual number of iterations for all classes, folds and Cs.\n    In the binary or multinomial cases, the first dimension is equal to 1.\n    If ``penalty='elasticnet'``, the shape is ``(n_classes, n_folds,\n    n_cs, n_l1_ratios)`` or ``(1, n_folds, n_cs, n_l1_ratios)``."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "LogisticRegression : Logistic regression without tuning the\n    hyperparameter `C`.",
        "notes": "",
        "examples": ">>> from sklearn.datasets import load_iris\n>>> from sklearn.linear_model import LogisticRegressionCV\n>>> X, y = load_iris(return_X_y=True)\n>>> clf = LogisticRegressionCV(cv=5, random_state=0).fit(X, y)\n>>> clf.predict(X[:2, :])\narray([0, 0])\n>>> clf.predict_proba(X[:2, :]).shape\n(2, 3)\n>>> clf.score(X, y)\n0.98..."
      },
      "methods": [
        {
          "name": "decision_function",
          "signature": "decision_function(self, X)",
          "docstring": {
            "description": "Predict confidence scores for samples.\n\nThe confidence score for a sample is proportional to the signed\ndistance of that sample to the hyperplane.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The data matrix for which we want to get the confidence scores."
              }
            },
            "returns": "scores : ndarray of shape (n_samples,) or (n_samples, n_classes)\n    Confidence scores per `(n_samples, n_classes)` combination. In the\n    binary case, confidence score for `self.classes_[1]` where >0 means\n    this class would be predicted.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "densify",
          "signature": "densify(self)",
          "docstring": {
            "description": "Convert coefficient matrix to dense array format.\n\nConverts the ``coef_`` member (back) to a numpy.ndarray. This is the\ndefault format of ``coef_`` and is required for fitting, so calling\nthis method is only required on models that have previously been\nsparsified; otherwise, it is a no-op.",
            "parameters": {},
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None, **params)",
          "docstring": {
            "description": "Fit the model according to the given training data.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training vector, where `n_samples` is the number of samples and\n    `n_features` is the number of features."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Target vector relative to X."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,) default=None",
                "description": "Array of weights that are assigned to individual samples.\n    If not provided, then each sample is given unit weight."
              },
              "**params": {
                "type": "dict",
                "description": "Parameters to pass to the underlying splitter and scorer.\n\n    .. versionadded:: 1.4"
              }
            },
            "returns": "self : object\n    Fitted LogisticRegressionCV estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\n.. versionadded:: 1.4",
            "parameters": {},
            "returns": "routing : MetadataRouter\n    A :class:`~sklearn.utils.metadata_routing.MetadataRouter` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict class labels for samples in X.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The data matrix for which we want to get the predictions."
              }
            },
            "returns": "y_pred : ndarray of shape (n_samples,)\n    Vector containing the class labels for each sample.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_log_proba",
          "signature": "predict_log_proba(self, X)",
          "docstring": {
            "description": "Predict logarithm of probability estimates.\n\nThe returned estimates for all classes are ordered by the\nlabel of classes.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Vector to be scored, where `n_samples` is the number of samples and\n    `n_features` is the number of features."
              }
            },
            "returns": "T : array-like of shape (n_samples, n_classes)\n    Returns the log-probability of the sample for each class in the\n    model, where classes are ordered as they are in ``self.classes_``.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_proba",
          "signature": "predict_proba(self, X)",
          "docstring": {
            "description": "Probability estimates.\n\nThe returned estimates for all classes are ordered by the\nlabel of classes.\n\nFor a multi_class problem, if multi_class is set to be \"multinomial\"\nthe softmax function is used to find the predicted probability of\neach class.\nElse use a one-vs-rest approach, i.e. calculate the probability\nof each class assuming it to be positive using the logistic function\nand normalize these values across all the classes.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Vector to be scored, where `n_samples` is the number of samples and\n    `n_features` is the number of features."
              }
            },
            "returns": "T : array-like of shape (n_samples, n_classes)\n    Returns the probability of the sample for each class in the model,\n    where classes are ordered as they are in ``self.classes_``.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None, **score_params)",
          "docstring": {
            "description": "Score using the `scoring` option on the given test data and labels.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "True labels for X."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              },
              "**score_params": {
                "type": "dict",
                "description": "Parameters to pass to the `score` method of the underlying scorer.\n\n    .. versionadded:: 1.4"
              }
            },
            "returns": "score : float\n    Score of self.predict(X) w.r.t. y.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._logistic.LogisticRegressionCV, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._logistic.LogisticRegressionCV",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._logistic.LogisticRegressionCV, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._logistic.LogisticRegressionCV",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sparsify",
          "signature": "sparsify(self)",
          "docstring": {
            "description": "Convert coefficient matrix to sparse format.\n\nConverts the ``coef_`` member to a scipy.sparse matrix, which for\nL1-regularized models can be much more memory- and storage-efficient\nthan the usual numpy.ndarray representation.\n\nThe ``intercept_`` member is not converted.",
            "parameters": {},
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "For non-sparse models, i.e. when there are not many zeros in ``coef_``,\nthis may actually *increase* memory usage, so use this method with\ncare. A rule of thumb is that the number of zero elements, which can\nbe computed with ``(coef_ == 0).sum()``, must be more than 50% for this\nto provide significant benefits.\n\nAfter calling this method, further fitting with the partial_fit\nmethod (if any) will not work until you call densify.",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "MultiTaskElasticNet",
      "docstring": {
        "description": "Multi-task ElasticNet model trained with L1/L2 mixed-norm as regularizer.\n\nThe optimization objective for MultiTaskElasticNet is::\n\n    (1 / (2 * n_samples)) * ||Y - XW||_Fro^2\n    + alpha * l1_ratio * ||W||_21\n    + 0.5 * alpha * (1 - l1_ratio) * ||W||_Fro^2\n\nWhere::\n\n    ||W||_21 = sum_i sqrt(sum_j W_ij ^ 2)\n\ni.e. the sum of norms of each row.\n\nRead more in the :ref:`User Guide <multi_task_elastic_net>`.",
        "parameters": {
          "alpha": {
            "type": "float, default=1.0",
            "description": "Constant that multiplies the L1/L2 term. Defaults to 1.0."
          },
          "l1_ratio": {
            "type": "float, default=0.5",
            "description": "The ElasticNet mixing parameter, with 0 < l1_ratio <= 1.\n    For l1_ratio = 1 the penalty is an L1/L2 penalty. For l1_ratio = 0 it\n    is an L2 penalty.\n    For ``0 < l1_ratio < 1``, the penalty is a combination of L1/L2 and L2."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of iterations."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "The tolerance for the optimization: if the updates are\n    smaller than ``tol``, the optimization code checks the\n    dual gap for optimality and continues until it is smaller\n    than ``tol``."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to ``True``, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution.\n    See :term:`the Glossary <warm_start>`."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "The seed of the pseudo random number generator that selects a random\n    feature to update. Used when ``selection`` == 'random'.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "selection": {
            "type": "{'cyclic', 'random'}, default='cyclic'",
            "description": "If set to 'random', a random coefficient is updated every iteration\n    rather than looping over features sequentially by default. This\n    (setting to 'random') often leads to significantly faster convergence\n    especially when tol is higher than 1e-4.\n\nAttributes\n----------"
          },
          "intercept_": {
            "type": "ndarray of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "coef_": {
            "type": "ndarray of shape (n_targets, n_features)",
            "description": "Parameter vector (W in the cost function formula). If a 1D y is\n    passed in at fit (non multi-task usage), ``coef_`` is then a 1D array.\n    Note that ``coef_`` stores the transpose of ``W``, ``W.T``."
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations run by the coordinate descent solver to reach\n    the specified tolerance."
          },
          "dual_gap_": {
            "type": "float",
            "description": "The dual gaps at the end of the optimization."
          },
          "eps_": {
            "type": "float",
            "description": "The tolerance scaled scaled by the variance of the target `y`."
          },
          "sparse_coef_": {
            "type": "sparse matrix of shape (n_features,) or             (n_targets, n_features)",
            "description": "Sparse representation of the `coef_`."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "MultiTaskElasticNetCV : Multi-task L1/L2 ElasticNet with built-in\n    cross-validation.\nElasticNet : Linear regression with combined L1 and L2 priors as regularizer.\nMultiTaskLasso : Multi-task Lasso model trained with L1/L2\n    mixed-norm as regularizer.",
        "notes": "The algorithm used to fit the model is coordinate descent.\n\nTo avoid unnecessary memory duplication the X and y arguments of the fit\nmethod should be directly passed as Fortran-contiguous numpy arrays.",
        "examples": ">>> from sklearn import linear_model\n>>> clf = linear_model.MultiTaskElasticNet(alpha=0.1)\n>>> clf.fit([[0,0], [1, 1], [2, 2]], [[0, 0], [1, 1], [2, 2]])\nMultiTaskElasticNet(alpha=0.1)\n>>> print(clf.coef_)\n[[0.45663524 0.45612256]\n [0.45663524 0.45612256]]\n>>> print(clf.intercept_)\n[0.0872422 0.0872422]"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y)",
          "docstring": {
            "description": "Fit MultiTaskElasticNet model with coordinate descent.",
            "parameters": {
              "X": {
                "type": "ndarray of shape (n_samples, n_features)",
                "description": "Data."
              },
              "y": {
                "type": "ndarray of shape (n_samples, n_targets)",
                "description": "Target. Will be cast to X's dtype if necessary."
              }
            },
            "returns": "self : object\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "Coordinate descent is an algorithm that considers each column of\ndata at a time hence it will automatically convert the X input\nas a Fortran-contiguous numpy array if necessary.\n\nTo avoid memory re-allocation it is advised to allocate the\ninitial data in memory directly using that format.",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "path",
          "signature": "enet_path(X, y, *, l1_ratio=0.5, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, check_input=True, **params)",
          "docstring": {
            "description": "Compute elastic net path with coordinate descent.\n\nThe elastic net optimization function varies for mono and multi-outputs.\n\nFor mono-output tasks it is::\n\n    1 / (2 * n_samples) * ||y - Xw||^2_2\n    + alpha * l1_ratio * ||w||_1\n    + 0.5 * alpha * (1 - l1_ratio) * ||w||^2_2\n\nFor multi-output tasks it is::\n\n    (1 / (2 * n_samples)) * ||Y - XW||_Fro^2\n    + alpha * l1_ratio * ||W||_21\n    + 0.5 * alpha * (1 - l1_ratio) * ||W||_Fro^2\n\nWhere::\n\n    ||W||_21 = \\sum_i \\sqrt{\\sum_j w_{ij}^2}\n\ni.e. the sum of norm of each row.\n\nRead more in the :ref:`User Guide <elastic_net>`.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data. Pass directly as Fortran-contiguous data to avoid\n    unnecessary memory duplication. If ``y`` is mono-output then ``X``\n    can be sparse."
              },
              "y": {
                "type": "{array-like, sparse matrix} of shape (n_samples,) or         (n_samples, n_targets)",
                "description": "Target values."
              },
              "l1_ratio": {
                "type": "float, default=0.5",
                "description": "Number between 0 and 1 passed to elastic net (scaling between\n    l1 and l2 penalties). ``l1_ratio=1`` corresponds to the Lasso."
              },
              "eps": {
                "type": "float, default=1e-3",
                "description": "Length of the path. ``eps=1e-3`` means that\n    ``alpha_min / alpha_max = 1e-3``."
              },
              "n_alphas": {
                "type": "int, default=100",
                "description": "Number of alphas along the regularization path."
              },
              "alphas": {
                "type": "array-like, default=None",
                "description": "List of alphas where to compute the models.\n    If None alphas are set automatically."
              },
              "precompute": {
                "type": "'auto', bool or array-like of shape             (n_features, n_features), default='auto'",
                "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram\n    matrix can also be passed as argument."
              },
              "Xy": {
                "type": "array-like of shape (n_features,) or (n_features, n_targets),         default=None",
                "description": "Xy = np.dot(X.T, y) that can be precomputed. It is useful\n    only when the Gram matrix is precomputed."
              },
              "copy_X": {
                "type": "bool, default=True",
                "description": "If ``True``, X will be copied; else, it may be overwritten."
              },
              "coef_init": {
                "type": "array-like of shape (n_features, ), default=None",
                "description": "The initial values of the coefficients."
              },
              "verbose": {
                "type": "bool or int, default=False",
                "description": "Amount of verbosity."
              },
              "return_n_iter": {
                "type": "bool, default=False",
                "description": "Whether to return the number of iterations or not."
              },
              "positive": {
                "type": "bool, default=False",
                "description": "If set to True, forces coefficients to be positive.\n    (Only allowed when ``y.ndim == 1``)."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "If set to False, the input validation checks are skipped (including the\n    Gram matrix when provided). It is assumed that they are handled\n    by the caller."
              },
              "**params": {
                "type": "kwargs",
                "description": "Keyword arguments passed to the coordinate descent solver."
              }
            },
            "returns": "alphas : ndarray of shape (n_alphas,)\n    The alphas along the path where models are computed.\n\ncoefs : ndarray of shape (n_features, n_alphas) or             (n_targets, n_features, n_alphas)\n    Coefficients along the path.\n\ndual_gaps : ndarray of shape (n_alphas,)\n    The dual gaps at the end of the optimization for each alpha.\n\nn_iters : list of int\n    The number of iterations taken by the coordinate descent optimizer to\n    reach the specified tolerance for each alpha.\n    (Is returned when ``return_n_iter`` is set to True).",
            "raises": "",
            "see_also": "MultiTaskElasticNet : Multi-task ElasticNet model trained with L1/L2 mixed-norm     as regularizer.\nMultiTaskElasticNetCV : Multi-task L1/L2 ElasticNet with built-in cross-validation.\nElasticNet : Linear regression with combined L1 and L2 priors as regularizer.\nElasticNetCV : Elastic Net model with iterative fitting along a regularization path.",
            "notes": "For an example, see\n:ref:`examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.py\n<sphx_glr_auto_examples_linear_model_plot_lasso_lasso_lars_elasticnet_path.py>`.",
            "examples": ">>> from sklearn.linear_model import enet_path\n>>> from sklearn.datasets import make_regression\n>>> X, y, true_coef = make_regression(\n...    n_samples=100, n_features=5, n_informative=2, coef=True, random_state=0\n... )\n>>> true_coef\narray([ 0.        ,  0.        ,  0.        , 97.9..., 45.7...])\n>>> alphas, estimated_coef, _ = enet_path(X, y, n_alphas=3)\n>>> alphas.shape\n(3,)\n>>> estimated_coef\n array([[ 0.        ,  0.78...,  0.56...],\n        [ 0.        ,  1.12...,  0.61...],\n        [-0.        , -2.12..., -1.12...],\n        [ 0.        , 23.04..., 88.93...],\n        [ 0.        , 10.63..., 41.56...]])"
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._coordinate_descent.MultiTaskElasticNet",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._coordinate_descent.MultiTaskElasticNet",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "MultiTaskElasticNetCV",
      "docstring": {
        "description": "Multi-task L1/L2 ElasticNet with built-in cross-validation.\n\nSee glossary entry for :term:`cross-validation estimator`.\n\nThe optimization objective for MultiTaskElasticNet is::\n\n    (1 / (2 * n_samples)) * ||Y - XW||^Fro_2\n    + alpha * l1_ratio * ||W||_21\n    + 0.5 * alpha * (1 - l1_ratio) * ||W||_Fro^2\n\nWhere::\n\n    ||W||_21 = \\sum_i \\sqrt{\\sum_j w_{ij}^2}\n\ni.e. the sum of norm of each row.\n\nRead more in the :ref:`User Guide <multi_task_elastic_net>`.\n\n.. versionadded:: 0.15",
        "parameters": {
          "l1_ratio": {
            "type": "float or list of float, default=0.5",
            "description": "The ElasticNet mixing parameter, with 0 < l1_ratio <= 1.\n    For l1_ratio = 1 the penalty is an L1/L2 penalty. For l1_ratio = 0 it\n    is an L2 penalty.\n    For ``0 < l1_ratio < 1``, the penalty is a combination of L1/L2 and L2.\n    This parameter can be a list, in which case the different\n    values are tested by cross-validation and the one giving the best\n    prediction score is used. Note that a good choice of list of\n    values for l1_ratio is often to put more values close to 1\n    (i.e. Lasso) and less close to 0 (i.e. Ridge), as in ``[.1, .5, .7,\n    .9, .95, .99, 1]``."
          },
          "eps": {
            "type": "float, default=1e-3",
            "description": "Length of the path. ``eps=1e-3`` means that\n    ``alpha_min / alpha_max = 1e-3``."
          },
          "n_alphas": {
            "type": "int, default=100",
            "description": "Number of alphas along the regularization path."
          },
          "alphas": {
            "type": "array-like, default=None",
            "description": "List of alphas where to compute the models.\n    If not provided, set automatically."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of iterations."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "The tolerance for the optimization: if the updates are\n    smaller than ``tol``, the optimization code checks the\n    dual gap for optimality and continues until it is smaller\n    than ``tol``."
          },
          "cv": {
            "type": "int, cross-validation generator or iterable, default=None",
            "description": "Determines the cross-validation splitting strategy.\n    Possible inputs for cv are:\n\n    - None, to use the default 5-fold cross-validation,\n    - int, to specify the number of folds.\n    - :term:`CV splitter`,\n    - An iterable yielding (train, test) splits as arrays of indices.\n\n    For int/None inputs, :class:`~sklearn.model_selection.KFold` is used.\n\n    Refer :ref:`User Guide <cross_validation>` for the various\n    cross-validation strategies that can be used here.\n\n    .. versionchanged:: 0.22\n        ``cv`` default value if None changed from 3-fold to 5-fold."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten."
          },
          "verbose": {
            "type": "bool or int, default=0",
            "description": "Amount of verbosity."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "Number of CPUs to use during the cross validation. Note that this is\n    used only if multiple values for l1_ratio are given.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "The seed of the pseudo random number generator that selects a random\n    feature to update. Used when ``selection`` == 'random'.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "selection": {
            "type": "{'cyclic', 'random'}, default='cyclic'",
            "description": "If set to 'random', a random coefficient is updated every iteration\n    rather than looping over features sequentially by default. This\n    (setting to 'random') often leads to significantly faster convergence\n    especially when tol is higher than 1e-4.\n\nAttributes\n----------"
          },
          "intercept_": {
            "type": "ndarray of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "coef_": {
            "type": "ndarray of shape (n_targets, n_features)",
            "description": "Parameter vector (W in the cost function formula).\n    Note that ``coef_`` stores the transpose of ``W``, ``W.T``."
          },
          "alpha_": {
            "type": "float",
            "description": "The amount of penalization chosen by cross validation."
          },
          "mse_path_": {
            "type": "ndarray of shape (n_alphas, n_folds) or                 (n_l1_ratio, n_alphas, n_folds)",
            "description": "Mean square error for the test set on each fold, varying alpha."
          },
          "alphas_": {
            "type": "ndarray of shape (n_alphas,) or (n_l1_ratio, n_alphas)",
            "description": "The grid of alphas used for fitting, for each l1_ratio."
          },
          "l1_ratio_": {
            "type": "float",
            "description": "Best l1_ratio obtained by cross-validation."
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations run by the coordinate descent solver to reach\n    the specified tolerance for the optimal alpha."
          },
          "dual_gap_": {
            "type": "float",
            "description": "The dual gap at the end of the optimization for the optimal alpha."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "MultiTaskElasticNet : Multi-task L1/L2 ElasticNet with built-in cross-validation.\nElasticNetCV : Elastic net model with best model selection by\n    cross-validation.\nMultiTaskLassoCV : Multi-task Lasso model trained with L1 norm\n    as regularizer and built-in cross-validation.",
        "notes": "The algorithm used to fit the model is coordinate descent.\n\nIn `fit`, once the best parameters `l1_ratio` and `alpha` are found through\ncross-validation, the model is fit again using the entire training set.\n\nTo avoid unnecessary memory duplication the `X` and `y` arguments of the\n`fit` method should be directly passed as Fortran-contiguous numpy arrays.",
        "examples": ">>> from sklearn import linear_model\n>>> clf = linear_model.MultiTaskElasticNetCV(cv=3)\n>>> clf.fit([[0,0], [1, 1], [2, 2]],\n...         [[0, 0], [1, 1], [2, 2]])\nMultiTaskElasticNetCV(cv=3)\n>>> print(clf.coef_)\n[[0.52875032 0.46958558]\n [0.52875032 0.46958558]]\n>>> print(clf.intercept_)\n[0.00166409 0.00166409]"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, **params)",
          "docstring": {
            "description": "Fit MultiTaskElasticNet model with coordinate descent.\n\nFit is on grid of alphas and best alpha estimated by cross-validation.",
            "parameters": {
              "X": {
                "type": "ndarray of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "ndarray of shape (n_samples, n_targets)",
                "description": "Training target variable. Will be cast to X's dtype if necessary."
              },
              "**params": {
                "type": "dict, default=None",
                "description": "Parameters to be passed to the CV splitter.\n\n    .. versionadded:: 1.4\n        Only available if `enable_metadata_routing=True`,\n        which can be set by using\n        ``sklearn.set_config(enable_metadata_routing=True)``.\n        See :ref:`Metadata Routing User Guide <metadata_routing>` for\n        more details."
              }
            },
            "returns": "self : object\n    Returns MultiTaskElasticNet instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\n.. versionadded:: 1.4",
            "parameters": {},
            "returns": "routing : MetadataRouter\n    A :class:`~sklearn.utils.metadata_routing.MetadataRouter` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "path",
          "signature": "enet_path(X, y, *, l1_ratio=0.5, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, check_input=True, **params)",
          "docstring": {
            "description": "Compute elastic net path with coordinate descent.\n\nThe elastic net optimization function varies for mono and multi-outputs.\n\nFor mono-output tasks it is::\n\n    1 / (2 * n_samples) * ||y - Xw||^2_2\n    + alpha * l1_ratio * ||w||_1\n    + 0.5 * alpha * (1 - l1_ratio) * ||w||^2_2\n\nFor multi-output tasks it is::\n\n    (1 / (2 * n_samples)) * ||Y - XW||_Fro^2\n    + alpha * l1_ratio * ||W||_21\n    + 0.5 * alpha * (1 - l1_ratio) * ||W||_Fro^2\n\nWhere::\n\n    ||W||_21 = \\sum_i \\sqrt{\\sum_j w_{ij}^2}\n\ni.e. the sum of norm of each row.\n\nRead more in the :ref:`User Guide <elastic_net>`.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data. Pass directly as Fortran-contiguous data to avoid\n    unnecessary memory duplication. If ``y`` is mono-output then ``X``\n    can be sparse."
              },
              "y": {
                "type": "{array-like, sparse matrix} of shape (n_samples,) or         (n_samples, n_targets)",
                "description": "Target values."
              },
              "l1_ratio": {
                "type": "float, default=0.5",
                "description": "Number between 0 and 1 passed to elastic net (scaling between\n    l1 and l2 penalties). ``l1_ratio=1`` corresponds to the Lasso."
              },
              "eps": {
                "type": "float, default=1e-3",
                "description": "Length of the path. ``eps=1e-3`` means that\n    ``alpha_min / alpha_max = 1e-3``."
              },
              "n_alphas": {
                "type": "int, default=100",
                "description": "Number of alphas along the regularization path."
              },
              "alphas": {
                "type": "array-like, default=None",
                "description": "List of alphas where to compute the models.\n    If None alphas are set automatically."
              },
              "precompute": {
                "type": "'auto', bool or array-like of shape             (n_features, n_features), default='auto'",
                "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram\n    matrix can also be passed as argument."
              },
              "Xy": {
                "type": "array-like of shape (n_features,) or (n_features, n_targets),         default=None",
                "description": "Xy = np.dot(X.T, y) that can be precomputed. It is useful\n    only when the Gram matrix is precomputed."
              },
              "copy_X": {
                "type": "bool, default=True",
                "description": "If ``True``, X will be copied; else, it may be overwritten."
              },
              "coef_init": {
                "type": "array-like of shape (n_features, ), default=None",
                "description": "The initial values of the coefficients."
              },
              "verbose": {
                "type": "bool or int, default=False",
                "description": "Amount of verbosity."
              },
              "return_n_iter": {
                "type": "bool, default=False",
                "description": "Whether to return the number of iterations or not."
              },
              "positive": {
                "type": "bool, default=False",
                "description": "If set to True, forces coefficients to be positive.\n    (Only allowed when ``y.ndim == 1``)."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "If set to False, the input validation checks are skipped (including the\n    Gram matrix when provided). It is assumed that they are handled\n    by the caller."
              },
              "**params": {
                "type": "kwargs",
                "description": "Keyword arguments passed to the coordinate descent solver."
              }
            },
            "returns": "alphas : ndarray of shape (n_alphas,)\n    The alphas along the path where models are computed.\n\ncoefs : ndarray of shape (n_features, n_alphas) or             (n_targets, n_features, n_alphas)\n    Coefficients along the path.\n\ndual_gaps : ndarray of shape (n_alphas,)\n    The dual gaps at the end of the optimization for each alpha.\n\nn_iters : list of int\n    The number of iterations taken by the coordinate descent optimizer to\n    reach the specified tolerance for each alpha.\n    (Is returned when ``return_n_iter`` is set to True).",
            "raises": "",
            "see_also": "MultiTaskElasticNet : Multi-task ElasticNet model trained with L1/L2 mixed-norm     as regularizer.\nMultiTaskElasticNetCV : Multi-task L1/L2 ElasticNet with built-in cross-validation.\nElasticNet : Linear regression with combined L1 and L2 priors as regularizer.\nElasticNetCV : Elastic Net model with iterative fitting along a regularization path.",
            "notes": "For an example, see\n:ref:`examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.py\n<sphx_glr_auto_examples_linear_model_plot_lasso_lasso_lars_elasticnet_path.py>`.",
            "examples": ">>> from sklearn.linear_model import enet_path\n>>> from sklearn.datasets import make_regression\n>>> X, y, true_coef = make_regression(\n...    n_samples=100, n_features=5, n_informative=2, coef=True, random_state=0\n... )\n>>> true_coef\narray([ 0.        ,  0.        ,  0.        , 97.9..., 45.7...])\n>>> alphas, estimated_coef, _ = enet_path(X, y, n_alphas=3)\n>>> alphas.shape\n(3,)\n>>> estimated_coef\n array([[ 0.        ,  0.78...,  0.56...],\n        [ 0.        ,  1.12...,  0.61...],\n        [-0.        , -2.12..., -1.12...],\n        [ 0.        , 23.04..., 88.93...],\n        [ 0.        , 10.63..., 41.56...]])"
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._coordinate_descent.MultiTaskElasticNetCV, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._coordinate_descent.MultiTaskElasticNetCV",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._coordinate_descent.MultiTaskElasticNetCV, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._coordinate_descent.MultiTaskElasticNetCV",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "MultiTaskLasso",
      "docstring": {
        "description": "Multi-task Lasso model trained with L1/L2 mixed-norm as regularizer.\n\nThe optimization objective for Lasso is::\n\n    (1 / (2 * n_samples)) * ||Y - XW||^2_Fro + alpha * ||W||_21\n\nWhere::\n\n    ||W||_21 = \\sum_i \\sqrt{\\sum_j w_{ij}^2}\n\ni.e. the sum of norm of each row.\n\nRead more in the :ref:`User Guide <multi_task_lasso>`.",
        "parameters": {
          "alpha": {
            "type": "float, default=1.0",
            "description": "Constant that multiplies the L1/L2 term. Defaults to 1.0."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of iterations."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "The tolerance for the optimization: if the updates are\n    smaller than ``tol``, the optimization code checks the\n    dual gap for optimality and continues until it is smaller\n    than ``tol``."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to ``True``, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution.\n    See :term:`the Glossary <warm_start>`."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "The seed of the pseudo random number generator that selects a random\n    feature to update. Used when ``selection`` == 'random'.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "selection": {
            "type": "{'cyclic', 'random'}, default='cyclic'",
            "description": "If set to 'random', a random coefficient is updated every iteration\n    rather than looping over features sequentially by default. This\n    (setting to 'random') often leads to significantly faster convergence\n    especially when tol is higher than 1e-4.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (n_targets, n_features)",
            "description": "Parameter vector (W in the cost function formula).\n    Note that ``coef_`` stores the transpose of ``W``, ``W.T``."
          },
          "intercept_": {
            "type": "ndarray of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations run by the coordinate descent solver to reach\n    the specified tolerance."
          },
          "dual_gap_": {
            "type": "ndarray of shape (n_alphas,)",
            "description": "The dual gaps at the end of the optimization for each alpha."
          },
          "eps_": {
            "type": "float",
            "description": "The tolerance scaled scaled by the variance of the target `y`."
          },
          "sparse_coef_": {
            "type": "sparse matrix of shape (n_features,) or             (n_targets, n_features)",
            "description": "Sparse representation of the `coef_`."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "Lasso: Linear Model trained with L1 prior as regularizer (aka the Lasso).\nMultiTaskLassoCV: Multi-task L1 regularized linear model with built-in\n    cross-validation.\nMultiTaskElasticNetCV: Multi-task L1/L2 ElasticNet with built-in cross-validation.",
        "notes": "The algorithm used to fit the model is coordinate descent.\n\nTo avoid unnecessary memory duplication the X and y arguments of the fit\nmethod should be directly passed as Fortran-contiguous numpy arrays.",
        "examples": ">>> from sklearn import linear_model\n>>> clf = linear_model.MultiTaskLasso(alpha=0.1)\n>>> clf.fit([[0, 1], [1, 2], [2, 4]], [[0, 0], [1, 1], [2, 3]])\nMultiTaskLasso(alpha=0.1)\n>>> print(clf.coef_)\n[[0.         0.60809415]\n[0.         0.94592424]]\n>>> print(clf.intercept_)\n[-0.41888636 -0.87382323]"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y)",
          "docstring": {
            "description": "Fit MultiTaskElasticNet model with coordinate descent.",
            "parameters": {
              "X": {
                "type": "ndarray of shape (n_samples, n_features)",
                "description": "Data."
              },
              "y": {
                "type": "ndarray of shape (n_samples, n_targets)",
                "description": "Target. Will be cast to X's dtype if necessary."
              }
            },
            "returns": "self : object\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "Coordinate descent is an algorithm that considers each column of\ndata at a time hence it will automatically convert the X input\nas a Fortran-contiguous numpy array if necessary.\n\nTo avoid memory re-allocation it is advised to allocate the\ninitial data in memory directly using that format.",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "path",
          "signature": "enet_path(X, y, *, l1_ratio=0.5, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, check_input=True, **params)",
          "docstring": {
            "description": "Compute elastic net path with coordinate descent.\n\nThe elastic net optimization function varies for mono and multi-outputs.\n\nFor mono-output tasks it is::\n\n    1 / (2 * n_samples) * ||y - Xw||^2_2\n    + alpha * l1_ratio * ||w||_1\n    + 0.5 * alpha * (1 - l1_ratio) * ||w||^2_2\n\nFor multi-output tasks it is::\n\n    (1 / (2 * n_samples)) * ||Y - XW||_Fro^2\n    + alpha * l1_ratio * ||W||_21\n    + 0.5 * alpha * (1 - l1_ratio) * ||W||_Fro^2\n\nWhere::\n\n    ||W||_21 = \\sum_i \\sqrt{\\sum_j w_{ij}^2}\n\ni.e. the sum of norm of each row.\n\nRead more in the :ref:`User Guide <elastic_net>`.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data. Pass directly as Fortran-contiguous data to avoid\n    unnecessary memory duplication. If ``y`` is mono-output then ``X``\n    can be sparse."
              },
              "y": {
                "type": "{array-like, sparse matrix} of shape (n_samples,) or         (n_samples, n_targets)",
                "description": "Target values."
              },
              "l1_ratio": {
                "type": "float, default=0.5",
                "description": "Number between 0 and 1 passed to elastic net (scaling between\n    l1 and l2 penalties). ``l1_ratio=1`` corresponds to the Lasso."
              },
              "eps": {
                "type": "float, default=1e-3",
                "description": "Length of the path. ``eps=1e-3`` means that\n    ``alpha_min / alpha_max = 1e-3``."
              },
              "n_alphas": {
                "type": "int, default=100",
                "description": "Number of alphas along the regularization path."
              },
              "alphas": {
                "type": "array-like, default=None",
                "description": "List of alphas where to compute the models.\n    If None alphas are set automatically."
              },
              "precompute": {
                "type": "'auto', bool or array-like of shape             (n_features, n_features), default='auto'",
                "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram\n    matrix can also be passed as argument."
              },
              "Xy": {
                "type": "array-like of shape (n_features,) or (n_features, n_targets),         default=None",
                "description": "Xy = np.dot(X.T, y) that can be precomputed. It is useful\n    only when the Gram matrix is precomputed."
              },
              "copy_X": {
                "type": "bool, default=True",
                "description": "If ``True``, X will be copied; else, it may be overwritten."
              },
              "coef_init": {
                "type": "array-like of shape (n_features, ), default=None",
                "description": "The initial values of the coefficients."
              },
              "verbose": {
                "type": "bool or int, default=False",
                "description": "Amount of verbosity."
              },
              "return_n_iter": {
                "type": "bool, default=False",
                "description": "Whether to return the number of iterations or not."
              },
              "positive": {
                "type": "bool, default=False",
                "description": "If set to True, forces coefficients to be positive.\n    (Only allowed when ``y.ndim == 1``)."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "If set to False, the input validation checks are skipped (including the\n    Gram matrix when provided). It is assumed that they are handled\n    by the caller."
              },
              "**params": {
                "type": "kwargs",
                "description": "Keyword arguments passed to the coordinate descent solver."
              }
            },
            "returns": "alphas : ndarray of shape (n_alphas,)\n    The alphas along the path where models are computed.\n\ncoefs : ndarray of shape (n_features, n_alphas) or             (n_targets, n_features, n_alphas)\n    Coefficients along the path.\n\ndual_gaps : ndarray of shape (n_alphas,)\n    The dual gaps at the end of the optimization for each alpha.\n\nn_iters : list of int\n    The number of iterations taken by the coordinate descent optimizer to\n    reach the specified tolerance for each alpha.\n    (Is returned when ``return_n_iter`` is set to True).",
            "raises": "",
            "see_also": "MultiTaskElasticNet : Multi-task ElasticNet model trained with L1/L2 mixed-norm     as regularizer.\nMultiTaskElasticNetCV : Multi-task L1/L2 ElasticNet with built-in cross-validation.\nElasticNet : Linear regression with combined L1 and L2 priors as regularizer.\nElasticNetCV : Elastic Net model with iterative fitting along a regularization path.",
            "notes": "For an example, see\n:ref:`examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.py\n<sphx_glr_auto_examples_linear_model_plot_lasso_lasso_lars_elasticnet_path.py>`.",
            "examples": ">>> from sklearn.linear_model import enet_path\n>>> from sklearn.datasets import make_regression\n>>> X, y, true_coef = make_regression(\n...    n_samples=100, n_features=5, n_informative=2, coef=True, random_state=0\n... )\n>>> true_coef\narray([ 0.        ,  0.        ,  0.        , 97.9..., 45.7...])\n>>> alphas, estimated_coef, _ = enet_path(X, y, n_alphas=3)\n>>> alphas.shape\n(3,)\n>>> estimated_coef\n array([[ 0.        ,  0.78...,  0.56...],\n        [ 0.        ,  1.12...,  0.61...],\n        [-0.        , -2.12..., -1.12...],\n        [ 0.        , 23.04..., 88.93...],\n        [ 0.        , 10.63..., 41.56...]])"
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._coordinate_descent.MultiTaskLasso, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._coordinate_descent.MultiTaskLasso",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._coordinate_descent.MultiTaskLasso, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._coordinate_descent.MultiTaskLasso",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "MultiTaskLassoCV",
      "docstring": {
        "description": "Multi-task Lasso model trained with L1/L2 mixed-norm as regularizer.\n\nSee glossary entry for :term:`cross-validation estimator`.\n\nThe optimization objective for MultiTaskLasso is::\n\n    (1 / (2 * n_samples)) * ||Y - XW||^Fro_2 + alpha * ||W||_21\n\nWhere::\n\n    ||W||_21 = \\sum_i \\sqrt{\\sum_j w_{ij}^2}\n\ni.e. the sum of norm of each row.\n\nRead more in the :ref:`User Guide <multi_task_lasso>`.\n\n.. versionadded:: 0.15",
        "parameters": {
          "eps": {
            "type": "float, default=1e-3",
            "description": "Length of the path. ``eps=1e-3`` means that\n    ``alpha_min / alpha_max = 1e-3``."
          },
          "n_alphas": {
            "type": "int, default=100",
            "description": "Number of alphas along the regularization path."
          },
          "alphas": {
            "type": "array-like, default=None",
            "description": "List of alphas where to compute the models.\n    If not provided, set automatically."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of iterations."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "The tolerance for the optimization: if the updates are\n    smaller than ``tol``, the optimization code checks the\n    dual gap for optimality and continues until it is smaller\n    than ``tol``."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If ``True``, X will be copied; else, it may be overwritten."
          },
          "cv": {
            "type": "int, cross-validation generator or iterable, default=None",
            "description": "Determines the cross-validation splitting strategy.\n    Possible inputs for cv are:\n\n    - None, to use the default 5-fold cross-validation,\n    - int, to specify the number of folds.\n    - :term:`CV splitter`,\n    - An iterable yielding (train, test) splits as arrays of indices.\n\n    For int/None inputs, :class:`~sklearn.model_selection.KFold` is used.\n\n    Refer :ref:`User Guide <cross_validation>` for the various\n    cross-validation strategies that can be used here.\n\n    .. versionchanged:: 0.22\n        ``cv`` default value if None changed from 3-fold to 5-fold."
          },
          "verbose": {
            "type": "bool or int, default=False",
            "description": "Amount of verbosity."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "Number of CPUs to use during the cross validation. Note that this is\n    used only if multiple values for l1_ratio are given.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "The seed of the pseudo random number generator that selects a random\n    feature to update. Used when ``selection`` == 'random'.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "selection": {
            "type": "{'cyclic', 'random'}, default='cyclic'",
            "description": "If set to 'random', a random coefficient is updated every iteration\n    rather than looping over features sequentially by default. This\n    (setting to 'random') often leads to significantly faster convergence\n    especially when tol is higher than 1e-4.\n\nAttributes\n----------"
          },
          "intercept_": {
            "type": "ndarray of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "coef_": {
            "type": "ndarray of shape (n_targets, n_features)",
            "description": "Parameter vector (W in the cost function formula).\n    Note that ``coef_`` stores the transpose of ``W``, ``W.T``."
          },
          "alpha_": {
            "type": "float",
            "description": "The amount of penalization chosen by cross validation."
          },
          "mse_path_": {
            "type": "ndarray of shape (n_alphas, n_folds)",
            "description": "Mean square error for the test set on each fold, varying alpha."
          },
          "alphas_": {
            "type": "ndarray of shape (n_alphas,)",
            "description": "The grid of alphas used for fitting."
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations run by the coordinate descent solver to reach\n    the specified tolerance for the optimal alpha."
          },
          "dual_gap_": {
            "type": "float",
            "description": "The dual gap at the end of the optimization for the optimal alpha."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "MultiTaskElasticNet : Multi-task ElasticNet model trained with L1/L2\n    mixed-norm as regularizer.\nElasticNetCV : Elastic net model with best model selection by\n    cross-validation.\nMultiTaskElasticNetCV : Multi-task L1/L2 ElasticNet with built-in\n    cross-validation.",
        "notes": "The algorithm used to fit the model is coordinate descent.\n\nIn `fit`, once the best parameter `alpha` is found through\ncross-validation, the model is fit again using the entire training set.\n\nTo avoid unnecessary memory duplication the `X` and `y` arguments of the\n`fit` method should be directly passed as Fortran-contiguous numpy arrays.",
        "examples": ">>> from sklearn.linear_model import MultiTaskLassoCV\n>>> from sklearn.datasets import make_regression\n>>> from sklearn.metrics import r2_score\n>>> X, y = make_regression(n_targets=2, noise=4, random_state=0)\n>>> reg = MultiTaskLassoCV(cv=5, random_state=0).fit(X, y)\n>>> r2_score(y, reg.predict(X))\n0.9994...\n>>> reg.alpha_\nnp.float64(0.5713...)\n>>> reg.predict(X[:1,])\narray([[153.7971...,  94.9015...]])"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, **params)",
          "docstring": {
            "description": "Fit MultiTaskLasso model with coordinate descent.\n\nFit is on grid of alphas and best alpha estimated by cross-validation.",
            "parameters": {
              "X": {
                "type": "ndarray of shape (n_samples, n_features)",
                "description": "Data."
              },
              "y": {
                "type": "ndarray of shape (n_samples, n_targets)",
                "description": "Target. Will be cast to X's dtype if necessary."
              },
              "**params": {
                "type": "dict, default=None",
                "description": "Parameters to be passed to the CV splitter.\n\n    .. versionadded:: 1.4\n        Only available if `enable_metadata_routing=True`,\n        which can be set by using\n        ``sklearn.set_config(enable_metadata_routing=True)``.\n        See :ref:`Metadata Routing User Guide <metadata_routing>` for\n        more details."
              }
            },
            "returns": "self : object\n    Returns an instance of fitted model.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\n.. versionadded:: 1.4",
            "parameters": {},
            "returns": "routing : MetadataRouter\n    A :class:`~sklearn.utils.metadata_routing.MetadataRouter` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "path",
          "signature": "lasso_path(X, y, *, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, **params)",
          "docstring": {
            "description": "Compute Lasso path with coordinate descent.\n\nThe Lasso optimization function varies for mono and multi-outputs.\n\nFor mono-output tasks it is::\n\n    (1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\n\nFor multi-output tasks it is::\n\n    (1 / (2 * n_samples)) * ||Y - XW||^2_Fro + alpha * ||W||_21\n\nWhere::\n\n    ||W||_21 = \\sum_i \\sqrt{\\sum_j w_{ij}^2}\n\ni.e. the sum of norm of each row.\n\nRead more in the :ref:`User Guide <lasso>`.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data. Pass directly as Fortran-contiguous data to avoid\n    unnecessary memory duplication. If ``y`` is mono-output then ``X``\n    can be sparse."
              },
              "y": {
                "type": "{array-like, sparse matrix} of shape (n_samples,) or         (n_samples, n_targets)",
                "description": "Target values."
              },
              "eps": {
                "type": "float, default=1e-3",
                "description": "Length of the path. ``eps=1e-3`` means that\n    ``alpha_min / alpha_max = 1e-3``."
              },
              "n_alphas": {
                "type": "int, default=100",
                "description": "Number of alphas along the regularization path."
              },
              "alphas": {
                "type": "array-like, default=None",
                "description": "List of alphas where to compute the models.\n    If ``None`` alphas are set automatically."
              },
              "precompute": {
                "type": "'auto', bool or array-like of shape             (n_features, n_features), default='auto'",
                "description": "Whether to use a precomputed Gram matrix to speed up\n    calculations. If set to ``'auto'`` let us decide. The Gram\n    matrix can also be passed as argument."
              },
              "Xy": {
                "type": "array-like of shape (n_features,) or (n_features, n_targets),         default=None",
                "description": "Xy = np.dot(X.T, y) that can be precomputed. It is useful\n    only when the Gram matrix is precomputed."
              },
              "copy_X": {
                "type": "bool, default=True",
                "description": "If ``True``, X will be copied; else, it may be overwritten."
              },
              "coef_init": {
                "type": "array-like of shape (n_features, ), default=None",
                "description": "The initial values of the coefficients."
              },
              "verbose": {
                "type": "bool or int, default=False",
                "description": "Amount of verbosity."
              },
              "return_n_iter": {
                "type": "bool, default=False",
                "description": "Whether to return the number of iterations or not."
              },
              "positive": {
                "type": "bool, default=False",
                "description": "If set to True, forces coefficients to be positive.\n    (Only allowed when ``y.ndim == 1``)."
              },
              "**params": {
                "type": "kwargs",
                "description": "Keyword arguments passed to the coordinate descent solver."
              }
            },
            "returns": "alphas : ndarray of shape (n_alphas,)\n    The alphas along the path where models are computed.\n\ncoefs : ndarray of shape (n_features, n_alphas) or             (n_targets, n_features, n_alphas)\n    Coefficients along the path.\n\ndual_gaps : ndarray of shape (n_alphas,)\n    The dual gaps at the end of the optimization for each alpha.\n\nn_iters : list of int\n    The number of iterations taken by the coordinate descent optimizer to\n    reach the specified tolerance for each alpha.",
            "raises": "",
            "see_also": "lars_path : Compute Least Angle Regression or Lasso path using LARS\n    algorithm.\nLasso : The Lasso is a linear model that estimates sparse coefficients.\nLassoLars : Lasso model fit with Least Angle Regression a.k.a. Lars.\nLassoCV : Lasso linear model with iterative fitting along a regularization\n    path.\nLassoLarsCV : Cross-validated Lasso using the LARS algorithm.\nsklearn.decomposition.sparse_encode : Estimator that can be used to\n    transform signals into sparse linear combination of atoms from a fixed.",
            "notes": "For an example, see\n:ref:`examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.py\n<sphx_glr_auto_examples_linear_model_plot_lasso_lasso_lars_elasticnet_path.py>`.\n\nTo avoid unnecessary memory duplication the X argument of the fit method\nshould be directly passed as a Fortran-contiguous numpy array.\n\nNote that in certain cases, the Lars solver may be significantly\nfaster to implement this functionality. In particular, linear\ninterpolation can be used to retrieve model coefficients between the\nvalues output by lars_path",
            "examples": "Comparing lasso_path and lars_path with interpolation:\n\n>>> import numpy as np\n>>> from sklearn.linear_model import lasso_path\n>>> X = np.array([[1, 2, 3.1], [2.3, 5.4, 4.3]]).T\n>>> y = np.array([1, 2, 3.1])\n>>> # Use lasso_path to compute a coefficient path\n>>> _, coef_path, _ = lasso_path(X, y, alphas=[5., 1., .5])\n>>> print(coef_path)\n[[0.         0.         0.46874778]\n [0.2159048  0.4425765  0.23689075]]\n\n>>> # Now use lars_path and 1D linear interpolation to compute the\n>>> # same path\n>>> from sklearn.linear_model import lars_path\n>>> alphas, active, coef_path_lars = lars_path(X, y, method='lasso')\n>>> from scipy import interpolate\n>>> coef_path_continuous = interpolate.interp1d(alphas[::-1],\n...                                             coef_path_lars[:, ::-1])\n>>> print(coef_path_continuous([5., 1., .5]))\n[[0.         0.         0.46915237]\n [0.2159048  0.4425765  0.23668876]]"
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._coordinate_descent.MultiTaskLassoCV, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._coordinate_descent.MultiTaskLassoCV",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._coordinate_descent.MultiTaskLassoCV, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._coordinate_descent.MultiTaskLassoCV",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "OrthogonalMatchingPursuit",
      "docstring": {
        "description": "Orthogonal Matching Pursuit model (OMP).\n\nRead more in the :ref:`User Guide <omp>`.",
        "parameters": {
          "n_nonzero_coefs": {
            "type": "int, default=None",
            "description": "Desired number of non-zero entries in the solution. Ignored if `tol` is set.\n    When `None` and `tol` is also `None`, this value is either set to 10% of\n    `n_features` or 1, whichever is greater."
          },
          "tol": {
            "type": "float, default=None",
            "description": "Maximum squared norm of the residual. If not None, overrides n_nonzero_coefs."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "precompute": {
            "type": "'auto' or bool, default='auto'",
            "description": "Whether to use a precomputed Gram and Xy matrix to speed up\n    calculations. Improves performance when :term:`n_targets` or\n    :term:`n_samples` is very large. Note that if you already have such\n    matrices, you can pass them directly to the fit method.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (n_features,) or (n_targets, n_features)",
            "description": "Parameter vector (w in the formula)."
          },
          "intercept_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "n_iter_": {
            "type": "int or array-like",
            "description": "Number of active features across every target."
          },
          "n_nonzero_coefs_": {
            "type": "int or None",
            "description": "The number of non-zero coefficients in the solution or `None` when `tol` is\n    set. If `n_nonzero_coefs` is None and `tol` is None this value is either set\n    to 10% of `n_features` or 1, whichever is greater."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "orthogonal_mp : Solves n_targets Orthogonal Matching Pursuit problems.\northogonal_mp_gram :  Solves n_targets Orthogonal Matching Pursuit\n    problems using only the Gram matrix X.T * X and the product X.T * y.\nlars_path : Compute Least Angle Regression or Lasso path using LARS algorithm.\nLars : Least Angle Regression model a.k.a. LAR.\nLassoLars : Lasso model fit with Least Angle Regression a.k.a. Lars.\nsklearn.decomposition.sparse_encode : Generic sparse coding.\n    Each column of the result is the solution to a Lasso problem.\nOrthogonalMatchingPursuitCV : Cross-validated\n    Orthogonal Matching Pursuit model (OMP).",
        "notes": "Orthogonal matching pursuit was introduced in G. Mallat, Z. Zhang,\nMatching pursuits with time-frequency dictionaries, IEEE Transactions on\nSignal Processing, Vol. 41, No. 12. (December 1993), pp. 3397-3415.\n(https://www.di.ens.fr/~mallat/papiers/MallatPursuit93.pdf)\n\nThis implementation is based on Rubinstein, R., Zibulevsky, M. and Elad,\nM., Efficient Implementation of the K-SVD Algorithm using Batch Orthogonal\nMatching Pursuit Technical Report - CS Technion, April 2008.\nhttps://www.cs.technion.ac.il/~ronrubin/Publications/KSVD-OMP-v2.pdf",
        "examples": ">>> from sklearn.linear_model import OrthogonalMatchingPursuit\n>>> from sklearn.datasets import make_regression\n>>> X, y = make_regression(noise=4, random_state=0)\n>>> reg = OrthogonalMatchingPursuit().fit(X, y)\n>>> reg.score(X, y)\n0.9991...\n>>> reg.predict(X[:1,])\narray([-78.3854...])"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y)",
          "docstring": {
            "description": "Fit the model using X, y as training data.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_targets)",
                "description": "Target values. Will be cast to X's dtype if necessary."
              }
            },
            "returns": "self : object\n    Returns an instance of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._omp.OrthogonalMatchingPursuit, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._omp.OrthogonalMatchingPursuit",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "OrthogonalMatchingPursuitCV",
      "docstring": {
        "description": "Cross-validated Orthogonal Matching Pursuit model (OMP).\n\nSee glossary entry for :term:`cross-validation estimator`.\n\nRead more in the :ref:`User Guide <omp>`.",
        "parameters": {
          "copy": {
            "type": "bool, default=True",
            "description": "Whether the design matrix X must be copied by the algorithm. A false\n    value is only helpful if X is already Fortran-ordered, otherwise a\n    copy is made anyway."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "max_iter": {
            "type": "int, default=None",
            "description": "Maximum numbers of iterations to perform, therefore maximum features\n    to include. 10% of ``n_features`` but at least 5 if available."
          },
          "cv": {
            "type": "int, cross-validation generator or iterable, default=None",
            "description": "Determines the cross-validation splitting strategy.\n    Possible inputs for cv are:\n\n    - None, to use the default 5-fold cross-validation,\n    - integer, to specify the number of folds.\n    - :term:`CV splitter`,\n    - An iterable yielding (train, test) splits as arrays of indices.\n\n    For integer/None inputs, :class:`~sklearn.model_selection.KFold` is used.\n\n    Refer :ref:`User Guide <cross_validation>` for the various\n    cross-validation strategies that can be used here.\n\n    .. versionchanged:: 0.22\n        ``cv`` default value if None changed from 3-fold to 5-fold."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "Number of CPUs to use during the cross validation.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "verbose": {
            "type": "bool or int, default=False",
            "description": "Sets the verbosity amount.\n\nAttributes\n----------"
          },
          "intercept_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Independent term in decision function."
          },
          "coef_": {
            "type": "ndarray of shape (n_features,) or (n_targets, n_features)",
            "description": "Parameter vector (w in the problem formulation)."
          },
          "n_nonzero_coefs_": {
            "type": "int",
            "description": "Estimated number of non-zero coefficients giving the best mean squared\n    error over the cross-validation folds."
          },
          "n_iter_": {
            "type": "int or array-like",
            "description": "Number of active features across every target for the model refit with\n    the best hyperparameters got by cross-validating across all folds."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "orthogonal_mp : Solves n_targets Orthogonal Matching Pursuit problems.\northogonal_mp_gram : Solves n_targets Orthogonal Matching Pursuit\n    problems using only the Gram matrix X.T * X and the product X.T * y.\nlars_path : Compute Least Angle Regression or Lasso path using LARS algorithm.\nLars : Least Angle Regression model a.k.a. LAR.\nLassoLars : Lasso model fit with Least Angle Regression a.k.a. Lars.\nOrthogonalMatchingPursuit : Orthogonal Matching Pursuit model (OMP).\nLarsCV : Cross-validated Least Angle Regression model.\nLassoLarsCV : Cross-validated Lasso model fit with Least Angle Regression.\nsklearn.decomposition.sparse_encode : Generic sparse coding.\n    Each column of the result is the solution to a Lasso problem.",
        "notes": "In `fit`, once the optimal number of non-zero coefficients is found through\ncross-validation, the model is fit again using the entire training set.",
        "examples": ">>> from sklearn.linear_model import OrthogonalMatchingPursuitCV\n>>> from sklearn.datasets import make_regression\n>>> X, y = make_regression(n_features=100, n_informative=10,\n...                        noise=4, random_state=0)\n>>> reg = OrthogonalMatchingPursuitCV(cv=5).fit(X, y)\n>>> reg.score(X, y)\n0.9991...\n>>> reg.n_nonzero_coefs_\nnp.int64(10)\n>>> reg.predict(X[:1,])\narray([-78.3854...])"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, **fit_params)",
          "docstring": {
            "description": "Fit the model using X, y as training data.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Target values. Will be cast to X's dtype if necessary."
              },
              "**fit_params": {
                "type": "dict",
                "description": "Parameters to pass to the underlying splitter.\n\n    .. versionadded:: 1.4\n        Only available if `enable_metadata_routing=True`,\n        which can be set by using\n        ``sklearn.set_config(enable_metadata_routing=True)``.\n        See :ref:`Metadata Routing User Guide <metadata_routing>` for\n        more details."
              }
            },
            "returns": "self : object\n    Returns an instance of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\n.. versionadded:: 1.4",
            "parameters": {},
            "returns": "routing : MetadataRouter\n    A :class:`~sklearn.utils.metadata_routing.MetadataRouter` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._omp.OrthogonalMatchingPursuitCV, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._omp.OrthogonalMatchingPursuitCV",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "PassiveAggressiveClassifier",
      "docstring": {
        "description": "Passive Aggressive Classifier.\n\nRead more in the :ref:`User Guide <passive_aggressive>`.",
        "parameters": {
          "C": {
            "type": "float, default=1.0",
            "description": "Maximum step size (regularization). Defaults to 1.0."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether the intercept should be estimated or not. If False, the\n    data is assumed to be already centered."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of passes over the training data (aka epochs).\n    It only impacts the behavior in the ``fit`` method, and not the\n    :meth:`~sklearn.linear_model.PassiveAggressiveClassifier.partial_fit` method.\n\n    .. versionadded:: 0.19"
          },
          "tol": {
            "type": "float or None, default=1e-3",
            "description": "The stopping criterion. If it is not None, the iterations will stop\n    when (loss > previous_loss - tol).\n\n    .. versionadded:: 0.19"
          },
          "early_stopping": {
            "type": "bool, default=False",
            "description": "Whether to use early stopping to terminate training when validation\n    score is not improving. If set to True, it will automatically set aside\n    a stratified fraction of training data as validation and terminate\n    training when validation score is not improving by at least `tol` for\n    `n_iter_no_change` consecutive epochs.\n\n    .. versionadded:: 0.20"
          },
          "validation_fraction": {
            "type": "float, default=0.1",
            "description": "The proportion of training data to set aside as validation set for\n    early stopping. Must be between 0 and 1.\n    Only used if early_stopping is True.\n\n    .. versionadded:: 0.20"
          },
          "n_iter_no_change": {
            "type": "int, default=5",
            "description": "Number of iterations with no improvement to wait before early stopping.\n\n    .. versionadded:: 0.20"
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": "Whether or not the training data should be shuffled after each epoch."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "The verbosity level."
          },
          "loss": {
            "type": "str, default=\"hinge\"",
            "description": "The loss function to be used:\n    hinge: equivalent to PA-I in the reference paper.\n    squared_hinge: equivalent to PA-II in the reference paper."
          },
          "n_jobs": {
            "type": "int or None, default=None",
            "description": "The number of CPUs to use to do the OVA (One Versus All, for\n    multi-class problems) computation.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used to shuffle the training data, when ``shuffle`` is set to\n    ``True``. Pass an int for reproducible output across multiple\n    function calls.\n    See :term:`Glossary <random_state>`."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to True, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution.\n    See :term:`the Glossary <warm_start>`.\n\n    Repeatedly calling fit or partial_fit when warm_start is True can\n    result in a different solution than when calling fit a single time\n    because of the way the data is shuffled."
          },
          "class_weight": {
            "type": "dict, {class_label: weight} or \"balanced\" or None,             default=None",
            "description": "Preset for the class_weight fit parameter.\n\n    Weights associated with classes. If not given, all classes\n    are supposed to have weight one.\n\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``.\n\n    .. versionadded:: 0.17\n       parameter *class_weight* to automatically weight samples."
          },
          "average": {
            "type": "bool or int, default=False",
            "description": "When set to True, computes the averaged SGD weights and stores the\n    result in the ``coef_`` attribute. If set to an int greater than 1,\n    averaging will begin once the total number of samples seen reaches\n    average. So average=10 will begin averaging after seeing 10 samples.\n\n    .. versionadded:: 0.19\n       parameter *average* to use weights averaging in SGD.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features) if n_classes == 2 else             (n_classes, n_features)",
            "description": "Weights assigned to the features."
          },
          "intercept_": {
            "type": "ndarray of shape (1,) if n_classes == 2 else (n_classes,)",
            "description": "Constants in decision function."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "The actual number of iterations to reach the stopping criterion.\n    For multiclass fits, it is the maximum over every binary fit."
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,)",
            "description": "The unique classes labels."
          },
          "t_": {
            "type": "int",
            "description": "Number of weight updates performed during training.\n    Same as ``(n_iter_ * n_samples + 1)``."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "SGDClassifier : Incrementally trained logistic regression.\nPerceptron : Linear perceptron classifier.\n\nReferences\n----------\nOnline Passive-Aggressive Algorithms\n<http://jmlr.csail.mit.edu/papers/volume7/crammer06a/crammer06a.pdf>\nK. Crammer, O. Dekel, J. Keshat, S. Shalev-Shwartz, Y. Singer - JMLR (2006)",
        "notes": "",
        "examples": ">>> from sklearn.linear_model import PassiveAggressiveClassifier\n>>> from sklearn.datasets import make_classification\n>>> X, y = make_classification(n_features=4, random_state=0)\n>>> clf = PassiveAggressiveClassifier(max_iter=1000, random_state=0,\n... tol=1e-3)\n>>> clf.fit(X, y)\nPassiveAggressiveClassifier(random_state=0)\n>>> print(clf.coef_)\n[[0.26642044 0.45070924 0.67251877 0.64185414]]\n>>> print(clf.intercept_)\n[1.84127814]\n>>> print(clf.predict([[0, 0, 0, 0]]))\n[1]"
      },
      "methods": [
        {
          "name": "decision_function",
          "signature": "decision_function(self, X)",
          "docstring": {
            "description": "Predict confidence scores for samples.\n\nThe confidence score for a sample is proportional to the signed\ndistance of that sample to the hyperplane.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The data matrix for which we want to get the confidence scores."
              }
            },
            "returns": "scores : ndarray of shape (n_samples,) or (n_samples, n_classes)\n    Confidence scores per `(n_samples, n_classes)` combination. In the\n    binary case, confidence score for `self.classes_[1]` where >0 means\n    this class would be predicted.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "densify",
          "signature": "densify(self)",
          "docstring": {
            "description": "Convert coefficient matrix to dense array format.\n\nConverts the ``coef_`` member (back) to a numpy.ndarray. This is the\ndefault format of ``coef_`` and is required for fitting, so calling\nthis method is only required on models that have previously been\nsparsified; otherwise, it is a no-op.",
            "parameters": {},
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, coef_init=None, intercept_init=None)",
          "docstring": {
            "description": "Fit linear model with Passive Aggressive algorithm.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Target values."
              },
              "coef_init": {
                "type": "ndarray of shape (n_classes, n_features)",
                "description": "The initial coefficients to warm-start the optimization."
              },
              "intercept_init": {
                "type": "ndarray of shape (n_classes,)",
                "description": "The initial intercept to warm-start the optimization."
              }
            },
            "returns": "self : object\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "partial_fit",
          "signature": "partial_fit(self, X, y, classes=None)",
          "docstring": {
            "description": "Fit linear model with Passive Aggressive algorithm.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Subset of the training data."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Subset of the target values."
              },
              "classes": {
                "type": "ndarray of shape (n_classes,)",
                "description": "Classes across all calls to partial_fit.\n    Can be obtained by via `np.unique(y_all)`, where y_all is the\n    target vector of the entire dataset.\n    This argument is required for the first call to partial_fit\n    and can be omitted in the subsequent calls.\n    Note that y doesn't need to contain all labels in `classes`."
              }
            },
            "returns": "self : object\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict class labels for samples in X.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The data matrix for which we want to get the predictions."
              }
            },
            "returns": "y_pred : ndarray of shape (n_samples,)\n    Vector containing the class labels for each sample.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the mean accuracy on the given test data and labels.\n\nIn multi-label classification, this is the subset accuracy\nwhich is a harsh metric since you require for each sample that\neach label set be correctly predicted.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True labels for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier, *, coef_init: Union[bool, NoneType, str] = '$UNCHANGED$', intercept_init: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "coef_init": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``coef_init`` parameter in ``fit``."
              },
              "intercept_init": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``intercept_init`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_partial_fit_request",
          "signature": "set_partial_fit_request(self: sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier, *, classes: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier",
          "docstring": {
            "description": "Request metadata passed to the ``partial_fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``partial_fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``partial_fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "classes": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``classes`` parameter in ``partial_fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sparsify",
          "signature": "sparsify(self)",
          "docstring": {
            "description": "Convert coefficient matrix to sparse format.\n\nConverts the ``coef_`` member to a scipy.sparse matrix, which for\nL1-regularized models can be much more memory- and storage-efficient\nthan the usual numpy.ndarray representation.\n\nThe ``intercept_`` member is not converted.",
            "parameters": {},
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "For non-sparse models, i.e. when there are not many zeros in ``coef_``,\nthis may actually *increase* memory usage, so use this method with\ncare. A rule of thumb is that the number of zero elements, which can\nbe computed with ``(coef_ == 0).sum()``, must be more than 50% for this\nto provide significant benefits.\n\nAfter calling this method, further fitting with the partial_fit\nmethod (if any) will not work until you call densify.",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "PassiveAggressiveRegressor",
      "docstring": {
        "description": "Passive Aggressive Regressor.\n\nRead more in the :ref:`User Guide <passive_aggressive>`.",
        "parameters": {
          "C": {
            "type": "float, default=1.0",
            "description": "Maximum step size (regularization). Defaults to 1.0."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether the intercept should be estimated or not. If False, the\n    data is assumed to be already centered. Defaults to True."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of passes over the training data (aka epochs).\n    It only impacts the behavior in the ``fit`` method, and not the\n    :meth:`~sklearn.linear_model.PassiveAggressiveRegressor.partial_fit` method.\n\n    .. versionadded:: 0.19"
          },
          "tol": {
            "type": "float or None, default=1e-3",
            "description": "The stopping criterion. If it is not None, the iterations will stop\n    when (loss > previous_loss - tol).\n\n    .. versionadded:: 0.19"
          },
          "early_stopping": {
            "type": "bool, default=False",
            "description": "Whether to use early stopping to terminate training when validation.\n    score is not improving. If set to True, it will automatically set aside\n    a fraction of training data as validation and terminate\n    training when validation score is not improving by at least tol for\n    n_iter_no_change consecutive epochs.\n\n    .. versionadded:: 0.20"
          },
          "validation_fraction": {
            "type": "float, default=0.1",
            "description": "The proportion of training data to set aside as validation set for\n    early stopping. Must be between 0 and 1.\n    Only used if early_stopping is True.\n\n    .. versionadded:: 0.20"
          },
          "n_iter_no_change": {
            "type": "int, default=5",
            "description": "Number of iterations with no improvement to wait before early stopping.\n\n    .. versionadded:: 0.20"
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": "Whether or not the training data should be shuffled after each epoch."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "The verbosity level."
          },
          "loss": {
            "type": "str, default=\"epsilon_insensitive\"",
            "description": "The loss function to be used:\n    epsilon_insensitive: equivalent to PA-I in the reference paper.\n    squared_epsilon_insensitive: equivalent to PA-II in the reference\n    paper."
          },
          "epsilon": {
            "type": "float, default=0.1",
            "description": "If the difference between the current prediction and the correct label\n    is below this threshold, the model is not updated."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used to shuffle the training data, when ``shuffle`` is set to\n    ``True``. Pass an int for reproducible output across multiple\n    function calls.\n    See :term:`Glossary <random_state>`."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to True, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution.\n    See :term:`the Glossary <warm_start>`.\n\n    Repeatedly calling fit or partial_fit when warm_start is True can\n    result in a different solution than when calling fit a single time\n    because of the way the data is shuffled."
          },
          "average": {
            "type": "bool or int, default=False",
            "description": "When set to True, computes the averaged SGD weights and stores the\n    result in the ``coef_`` attribute. If set to an int greater than 1,\n    averaging will begin once the total number of samples seen reaches\n    average. So average=10 will begin averaging after seeing 10 samples.\n\n    .. versionadded:: 0.19\n       parameter *average* to use weights averaging in SGD.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array, shape = [1, n_features] if n_classes == 2 else [n_classes,            n_features]",
            "description": "Weights assigned to the features."
          },
          "intercept_": {
            "type": "array, shape = [1] if n_classes == 2 else [n_classes]",
            "description": "Constants in decision function."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "The actual number of iterations to reach the stopping criterion."
          },
          "t_": {
            "type": "int",
            "description": "Number of weight updates performed during training.\n    Same as ``(n_iter_ * n_samples + 1)``."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "SGDRegressor : Linear model fitted by minimizing a regularized\n    empirical loss with SGD.\n\nReferences\n----------\nOnline Passive-Aggressive Algorithms\n<http://jmlr.csail.mit.edu/papers/volume7/crammer06a/crammer06a.pdf>\nK. Crammer, O. Dekel, J. Keshat, S. Shalev-Shwartz, Y. Singer - JMLR (2006).",
        "notes": "",
        "examples": ">>> from sklearn.linear_model import PassiveAggressiveRegressor\n>>> from sklearn.datasets import make_regression\n\n>>> X, y = make_regression(n_features=4, random_state=0)\n>>> regr = PassiveAggressiveRegressor(max_iter=100, random_state=0,\n... tol=1e-3)\n>>> regr.fit(X, y)\nPassiveAggressiveRegressor(max_iter=100, random_state=0)\n>>> print(regr.coef_)\n[20.48736655 34.18818427 67.59122734 87.94731329]\n>>> print(regr.intercept_)\n[-0.02306214]\n>>> print(regr.predict([[0, 0, 0, 0]]))\n[-0.02306214]"
      },
      "methods": [
        {
          "name": "densify",
          "signature": "densify(self)",
          "docstring": {
            "description": "Convert coefficient matrix to dense array format.\n\nConverts the ``coef_`` member (back) to a numpy.ndarray. This is the\ndefault format of ``coef_`` and is required for fitting, so calling\nthis method is only required on models that have previously been\nsparsified; otherwise, it is a no-op.",
            "parameters": {},
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, coef_init=None, intercept_init=None)",
          "docstring": {
            "description": "Fit linear model with Passive Aggressive algorithm.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "numpy array of shape [n_samples]",
                "description": "Target values."
              },
              "coef_init": {
                "type": "array, shape = [n_features]",
                "description": "The initial coefficients to warm-start the optimization."
              },
              "intercept_init": {
                "type": "array, shape = [1]",
                "description": "The initial intercept to warm-start the optimization."
              }
            },
            "returns": "self : object\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "partial_fit",
          "signature": "partial_fit(self, X, y)",
          "docstring": {
            "description": "Fit linear model with Passive Aggressive algorithm.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Subset of training data."
              },
              "y": {
                "type": "numpy array of shape [n_samples]",
                "description": "Subset of target values."
              }
            },
            "returns": "self : object\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                "description": "Input data."
              }
            },
            "returns": "ndarray of shape (n_samples,)\n   Predicted target values per element in X.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._passive_aggressive.PassiveAggressiveRegressor, *, coef_init: Union[bool, NoneType, str] = '$UNCHANGED$', intercept_init: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._passive_aggressive.PassiveAggressiveRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "coef_init": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``coef_init`` parameter in ``fit``."
              },
              "intercept_init": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``intercept_init`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_partial_fit_request",
          "signature": "set_partial_fit_request(self: sklearn.linear_model._passive_aggressive.PassiveAggressiveRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._passive_aggressive.PassiveAggressiveRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``partial_fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``partial_fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``partial_fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``partial_fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._passive_aggressive.PassiveAggressiveRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._passive_aggressive.PassiveAggressiveRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sparsify",
          "signature": "sparsify(self)",
          "docstring": {
            "description": "Convert coefficient matrix to sparse format.\n\nConverts the ``coef_`` member to a scipy.sparse matrix, which for\nL1-regularized models can be much more memory- and storage-efficient\nthan the usual numpy.ndarray representation.\n\nThe ``intercept_`` member is not converted.",
            "parameters": {},
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "For non-sparse models, i.e. when there are not many zeros in ``coef_``,\nthis may actually *increase* memory usage, so use this method with\ncare. A rule of thumb is that the number of zero elements, which can\nbe computed with ``(coef_ == 0).sum()``, must be more than 50% for this\nto provide significant benefits.\n\nAfter calling this method, further fitting with the partial_fit\nmethod (if any) will not work until you call densify.",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "Perceptron",
      "docstring": {
        "description": "Linear perceptron classifier.\n\nThe implementation is a wrapper around :class:`~sklearn.linear_model.SGDClassifier`\nby fixing the `loss` and `learning_rate` parameters as::\n\n    SGDClassifier(loss=\"perceptron\", learning_rate=\"constant\")\n\nOther available parameters are described below and are forwarded to\n:class:`~sklearn.linear_model.SGDClassifier`.\n\nRead more in the :ref:`User Guide <perceptron>`.",
        "parameters": {
          "penalty": {
            "type": "{'l2','l1','elasticnet'}, default=None",
            "description": "The penalty (aka regularization term) to be used."
          },
          "alpha": {
            "type": "float, default=0.0001",
            "description": "Constant that multiplies the regularization term if regularization is\n    used."
          },
          "l1_ratio": {
            "type": "float, default=0.15",
            "description": "The Elastic Net mixing parameter, with `0 <= l1_ratio <= 1`.\n    `l1_ratio=0` corresponds to L2 penalty, `l1_ratio=1` to L1.\n    Only used if `penalty='elasticnet'`.\n\n    .. versionadded:: 0.24"
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether the intercept should be estimated or not. If False, the\n    data is assumed to be already centered."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of passes over the training data (aka epochs).\n    It only impacts the behavior in the ``fit`` method, and not the\n    :meth:`partial_fit` method.\n\n    .. versionadded:: 0.19"
          },
          "tol": {
            "type": "float or None, default=1e-3",
            "description": "The stopping criterion. If it is not None, the iterations will stop\n    when (loss > previous_loss - tol).\n\n    .. versionadded:: 0.19"
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": "Whether or not the training data should be shuffled after each epoch."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "The verbosity level."
          },
          "eta0": {
            "type": "float, default=1",
            "description": "Constant by which the updates are multiplied."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "The number of CPUs to use to do the OVA (One Versus All, for\n    multi-class problems) computation.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=0",
            "description": "Used to shuffle the training data, when ``shuffle`` is set to\n    ``True``. Pass an int for reproducible output across multiple\n    function calls.\n    See :term:`Glossary <random_state>`."
          },
          "early_stopping": {
            "type": "bool, default=False",
            "description": "Whether to use early stopping to terminate training when validation\n    score is not improving. If set to True, it will automatically set aside\n    a stratified fraction of training data as validation and terminate\n    training when validation score is not improving by at least `tol` for\n    `n_iter_no_change` consecutive epochs.\n\n    .. versionadded:: 0.20"
          },
          "validation_fraction": {
            "type": "float, default=0.1",
            "description": "The proportion of training data to set aside as validation set for\n    early stopping. Must be between 0 and 1.\n    Only used if early_stopping is True.\n\n    .. versionadded:: 0.20"
          },
          "n_iter_no_change": {
            "type": "int, default=5",
            "description": "Number of iterations with no improvement to wait before early stopping.\n\n    .. versionadded:: 0.20"
          },
          "class_weight": {
            "type": "dict, {class_label: weight} or \"balanced\", default=None",
            "description": "Preset for the class_weight fit parameter.\n\n    Weights associated with classes. If not given, all classes\n    are supposed to have weight one.\n\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to True, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution. See\n    :term:`the Glossary <warm_start>`.\n\nAttributes\n----------"
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,)",
            "description": "The unique classes labels."
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features) if n_classes == 2 else             (n_classes, n_features)",
            "description": "Weights assigned to the features."
          },
          "intercept_": {
            "type": "ndarray of shape (1,) if n_classes == 2 else (n_classes,)",
            "description": "Constants in decision function."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "The actual number of iterations to reach the stopping criterion.\n    For multiclass fits, it is the maximum over every binary fit."
          },
          "t_": {
            "type": "int",
            "description": "Number of weight updates performed during training.\n    Same as ``(n_iter_ * n_samples + 1)``."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "sklearn.linear_model.SGDClassifier : Linear classifiers\n    (SVM, logistic regression, etc.) with SGD training.",
        "notes": "``Perceptron`` is a classification algorithm which shares the same\nunderlying implementation with ``SGDClassifier``. In fact,\n``Perceptron()`` is equivalent to `SGDClassifier(loss=\"perceptron\",\neta0=1, learning_rate=\"constant\", penalty=None)`.\n\nReferences\n----------\nhttps://en.wikipedia.org/wiki/Perceptron and references therein.",
        "examples": ">>> from sklearn.datasets import load_digits\n>>> from sklearn.linear_model import Perceptron\n>>> X, y = load_digits(return_X_y=True)\n>>> clf = Perceptron(tol=1e-3, random_state=0)\n>>> clf.fit(X, y)\nPerceptron()\n>>> clf.score(X, y)\n0.939..."
      },
      "methods": [
        {
          "name": "decision_function",
          "signature": "decision_function(self, X)",
          "docstring": {
            "description": "Predict confidence scores for samples.\n\nThe confidence score for a sample is proportional to the signed\ndistance of that sample to the hyperplane.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The data matrix for which we want to get the confidence scores."
              }
            },
            "returns": "scores : ndarray of shape (n_samples,) or (n_samples, n_classes)\n    Confidence scores per `(n_samples, n_classes)` combination. In the\n    binary case, confidence score for `self.classes_[1]` where >0 means\n    this class would be predicted.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "densify",
          "signature": "densify(self)",
          "docstring": {
            "description": "Convert coefficient matrix to dense array format.\n\nConverts the ``coef_`` member (back) to a numpy.ndarray. This is the\ndefault format of ``coef_`` and is required for fitting, so calling\nthis method is only required on models that have previously been\nsparsified; otherwise, it is a no-op.",
            "parameters": {},
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, coef_init=None, intercept_init=None, sample_weight=None)",
          "docstring": {
            "description": "Fit linear model with Stochastic Gradient Descent.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "ndarray of shape (n_samples,)",
                "description": "Target values."
              },
              "coef_init": {
                "type": "ndarray of shape (n_classes, n_features), default=None",
                "description": "The initial coefficients to warm-start the optimization."
              },
              "intercept_init": {
                "type": "ndarray of shape (n_classes,), default=None",
                "description": "The initial intercept to warm-start the optimization."
              },
              "sample_weight": {
                "type": "array-like, shape (n_samples,), default=None",
                "description": "Weights applied to individual samples.\n    If not provided, uniform weights are assumed. These weights will\n    be multiplied with class_weight (passed through the\n    constructor) if class_weight is specified."
              }
            },
            "returns": "self : object\n    Returns an instance of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "partial_fit",
          "signature": "partial_fit(self, X, y, classes=None, sample_weight=None)",
          "docstring": {
            "description": "Perform one epoch of stochastic gradient descent on given samples.\n\nInternally, this method uses ``max_iter = 1``. Therefore, it is not\nguaranteed that a minimum of the cost function is reached after calling\nit once. Matters such as objective convergence, early stopping, and\nlearning rate adjustments should be handled by the user.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                "description": "Subset of the training data."
              },
              "y": {
                "type": "ndarray of shape (n_samples,)",
                "description": "Subset of the target values."
              },
              "classes": {
                "type": "ndarray of shape (n_classes,), default=None",
                "description": "Classes across all calls to partial_fit.\n    Can be obtained by via `np.unique(y_all)`, where y_all is the\n    target vector of the entire dataset.\n    This argument is required for the first call to partial_fit\n    and can be omitted in the subsequent calls.\n    Note that y doesn't need to contain all labels in `classes`."
              },
              "sample_weight": {
                "type": "array-like, shape (n_samples,), default=None",
                "description": "Weights applied to individual samples.\n    If not provided, uniform weights are assumed."
              }
            },
            "returns": "self : object\n    Returns an instance of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict class labels for samples in X.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The data matrix for which we want to get the predictions."
              }
            },
            "returns": "y_pred : ndarray of shape (n_samples,)\n    Vector containing the class labels for each sample.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the mean accuracy on the given test data and labels.\n\nIn multi-label classification, this is the subset accuracy\nwhich is a harsh metric since you require for each sample that\neach label set be correctly predicted.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True labels for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._perceptron.Perceptron, *, coef_init: Union[bool, NoneType, str] = '$UNCHANGED$', intercept_init: Union[bool, NoneType, str] = '$UNCHANGED$', sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._perceptron.Perceptron",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "coef_init": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``coef_init`` parameter in ``fit``."
              },
              "intercept_init": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``intercept_init`` parameter in ``fit``."
              },
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_partial_fit_request",
          "signature": "set_partial_fit_request(self: sklearn.linear_model._perceptron.Perceptron, *, classes: Union[bool, NoneType, str] = '$UNCHANGED$', sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._perceptron.Perceptron",
          "docstring": {
            "description": "Request metadata passed to the ``partial_fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``partial_fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``partial_fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "classes": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``classes`` parameter in ``partial_fit``."
              },
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``partial_fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._perceptron.Perceptron, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._perceptron.Perceptron",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sparsify",
          "signature": "sparsify(self)",
          "docstring": {
            "description": "Convert coefficient matrix to sparse format.\n\nConverts the ``coef_`` member to a scipy.sparse matrix, which for\nL1-regularized models can be much more memory- and storage-efficient\nthan the usual numpy.ndarray representation.\n\nThe ``intercept_`` member is not converted.",
            "parameters": {},
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "For non-sparse models, i.e. when there are not many zeros in ``coef_``,\nthis may actually *increase* memory usage, so use this method with\ncare. A rule of thumb is that the number of zero elements, which can\nbe computed with ``(coef_ == 0).sum()``, must be more than 50% for this\nto provide significant benefits.\n\nAfter calling this method, further fitting with the partial_fit\nmethod (if any) will not work until you call densify.",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "PoissonRegressor",
      "docstring": {
        "description": "Generalized Linear Model with a Poisson distribution.\n\nThis regressor uses the 'log' link function.\n\nRead more in the :ref:`User Guide <Generalized_linear_models>`.\n\n.. versionadded:: 0.23",
        "parameters": {
          "alpha": {
            "type": "float, default=1",
            "description": "Constant that multiplies the L2 penalty term and determines the\n    regularization strength. ``alpha = 0`` is equivalent to unpenalized\n    GLMs. In this case, the design matrix `X` must have full column rank\n    (no collinearities).\n    Values of `alpha` must be in the range `[0.0, inf)`."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Specifies if a constant (a.k.a. bias or intercept) should be\n    added to the linear predictor (`X @ coef + intercept`)."
          },
          "solver": {
            "type": "{'lbfgs', 'newton-cholesky'}, default='lbfgs'",
            "description": "Algorithm to use in the optimization problem:\n\n    'lbfgs'\n        Calls scipy's L-BFGS-B optimizer.\n\n    'newton-cholesky'\n        Uses Newton-Raphson steps (in arbitrary precision arithmetic equivalent to\n        iterated reweighted least squares) with an inner Cholesky based solver.\n        This solver is a good choice for `n_samples` >> `n_features`, especially\n        with one-hot encoded categorical features with rare categories. Be aware\n        that the memory usage of this solver has a quadratic dependency on\n        `n_features` because it explicitly computes the Hessian matrix.\n\n        .. versionadded:: 1.2"
          },
          "max_iter": {
            "type": "int, default=100",
            "description": "The maximal number of iterations for the solver.\n    Values must be in the range `[1, inf)`."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "Stopping criterion. For the lbfgs solver,\n    the iteration will stop when ``max{|g_j|, j = 1, ..., d} <= tol``\n    where ``g_j`` is the j-th component of the gradient (derivative) of\n    the objective function.\n    Values must be in the range `(0.0, inf)`."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "If set to ``True``, reuse the solution of the previous call to ``fit``\n    as initialization for ``coef_`` and ``intercept_`` ."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "For the lbfgs solver set verbose to any positive number for verbosity.\n    Values must be in the range `[0, inf)`.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array of shape (n_features,)",
            "description": "Estimated coefficients for the linear predictor (`X @ coef_ +\n    intercept_`) in the GLM."
          },
          "intercept_": {
            "type": "float",
            "description": "Intercept (a.k.a. bias) added to linear predictor."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "Actual number of iterations used in the solver."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "TweedieRegressor : Generalized Linear Model with a Tweedie distribution.",
        "notes": "",
        "examples": ">>> from sklearn import linear_model\n>>> clf = linear_model.PoissonRegressor()\n>>> X = [[1, 2], [2, 3], [3, 4], [4, 3]]\n>>> y = [12, 17, 22, 21]\n>>> clf.fit(X, y)\nPoissonRegressor()\n>>> clf.score(X, y)\nnp.float64(0.990...)\n>>> clf.coef_\narray([0.121..., 0.158...])\n>>> clf.intercept_\nnp.float64(2.088...)\n>>> clf.predict([[1, 1], [3, 4]])\narray([10.676..., 21.875...])"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Fit a Generalized Linear Model.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Target values."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "self : object\n    Fitted model.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using GLM with feature matrix X.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "y_pred : array of shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Compute D^2, the percentage of deviance explained.\n\nD^2 is a generalization of the coefficient of determination R^2.\nR^2 uses squared error and D^2 uses the deviance of this GLM, see the\n:ref:`User Guide <regression_metrics>`.\n\nD^2 is defined as\n:math:`D^2 = 1-\\frac{D(y_{true},y_{pred})}{D_{null}}`,\n:math:`D_{null}` is the null deviance, i.e. the deviance of a model\nwith intercept alone, which corresponds to :math:`y_{pred} = \\bar{y}`.\nThe mean :math:`\\bar{y}` is averaged by sample_weight.\nBest possible score is 1.0 and it can be negative (because the model\ncan be arbitrarily worse).",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Test samples."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "True values of target."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    D^2 of self.predict(X) w.r.t. y.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._glm.glm.PoissonRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._glm.glm.PoissonRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._glm.glm.PoissonRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._glm.glm.PoissonRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "QuantileRegressor",
      "docstring": {
        "description": "Linear regression model that predicts conditional quantiles.\n\nThe linear :class:`QuantileRegressor` optimizes the pinball loss for a\ndesired `quantile` and is robust to outliers.\n\nThis model uses an L1 regularization like\n:class:`~sklearn.linear_model.Lasso`.\n\nRead more in the :ref:`User Guide <quantile_regression>`.\n\n.. versionadded:: 1.0",
        "parameters": {
          "quantile": {
            "type": "float, default=0.5",
            "description": "The quantile that the model tries to predict. It must be strictly\n    between 0 and 1. If 0.5 (default), the model predicts the 50%\n    quantile, i.e. the median."
          },
          "alpha": {
            "type": "float, default=1.0",
            "description": "Regularization constant that multiplies the L1 penalty term."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether or not to fit the intercept."
          },
          "solver": {
            "type": "{'highs-ds', 'highs-ipm', 'highs', 'interior-point',             'revised simplex'}, default='highs'",
            "description": "Method used by :func:`scipy.optimize.linprog` to solve the linear\n    programming formulation.\n\n    It is recommended to use the highs methods because\n    they are the fastest ones. Solvers \"highs-ds\", \"highs-ipm\" and \"highs\"\n    support sparse input data and, in fact, always convert to sparse csc.\n\n    From `scipy>=1.11.0`, \"interior-point\" is not available anymore.\n\n    .. versionchanged:: 1.4\n       The default of `solver` changed to `\"highs\"` in version 1.4."
          },
          "solver_options": {
            "type": "dict, default=None",
            "description": "Additional parameters passed to :func:`scipy.optimize.linprog` as\n    options. If `None` and if `solver='interior-point'`, then\n    `{\"lstsq\": True}` is passed to :func:`scipy.optimize.linprog` for the\n    sake of stability.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array of shape (n_features,)",
            "description": "Estimated coefficients for the features."
          },
          "intercept_": {
            "type": "float",
            "description": "The intercept of the model, aka bias term."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_iter_": {
            "type": "int",
            "description": "The actual number of iterations performed by the solver."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "Lasso : The Lasso is a linear model that estimates sparse coefficients\n    with l1 regularization.\nHuberRegressor : Linear regression model that is robust to outliers.",
        "notes": "",
        "examples": ">>> from sklearn.linear_model import QuantileRegressor\n>>> import numpy as np\n>>> n_samples, n_features = 10, 2\n>>> rng = np.random.RandomState(0)\n>>> y = rng.randn(n_samples)\n>>> X = rng.randn(n_samples, n_features)\n>>> # the two following lines are optional in practice\n>>> from sklearn.utils.fixes import sp_version, parse_version\n>>> reg = QuantileRegressor(quantile=0.8).fit(X, y)\n>>> np.mean(y <= reg.predict(X))\nnp.float64(0.8)"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Fit the model according to the given training data.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Target values."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "self : object\n    Returns self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._quantile.QuantileRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._quantile.QuantileRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._quantile.QuantileRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._quantile.QuantileRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "RANSACRegressor",
      "docstring": {
        "description": "RANSAC (RANdom SAmple Consensus) algorithm.\n\nRANSAC is an iterative algorithm for the robust estimation of parameters\nfrom a subset of inliers from the complete data set.\n\nRead more in the :ref:`User Guide <ransac_regression>`.",
        "parameters": {
          "estimator": {
            "type": "object, default=None",
            "description": "Base estimator object which implements the following methods:\n\n    * `fit(X, y)`: Fit model to given training data and target values.\n    * `score(X, y)`: Returns the mean accuracy on the given test data,\n      which is used for the stop criterion defined by `stop_score`.\n      Additionally, the score is used to decide which of two equally\n      large consensus sets is chosen as the better one.\n    * `predict(X)`: Returns predicted values using the linear model,\n      which is used to compute residual error using loss function.\n\n    If `estimator` is None, then\n    :class:`~sklearn.linear_model.LinearRegression` is used for\n    target values of dtype float.\n\n    Note that the current implementation only supports regression\n    estimators."
          },
          "min_samples": {
            "type": "int (>= 1) or float ([0, 1]), default=None",
            "description": "Minimum number of samples chosen randomly from original data. Treated\n    as an absolute number of samples for `min_samples >= 1`, treated as a\n    relative number `ceil(min_samples * X.shape[0])` for\n    `min_samples < 1`. This is typically chosen as the minimal number of\n    samples necessary to estimate the given `estimator`. By default a\n    :class:`~sklearn.linear_model.LinearRegression` estimator is assumed and\n    `min_samples` is chosen as ``X.shape[1] + 1``. This parameter is highly\n    dependent upon the model, so if a `estimator` other than\n    :class:`~sklearn.linear_model.LinearRegression` is used, the user must\n    provide a value."
          },
          "residual_threshold": {
            "type": "float, default=None",
            "description": "Maximum residual for a data sample to be classified as an inlier.\n    By default the threshold is chosen as the MAD (median absolute\n    deviation) of the target values `y`. Points whose residuals are\n    strictly equal to the threshold are considered as inliers."
          },
          "is_data_valid": {
            "type": "callable, default=None",
            "description": "This function is called with the randomly selected data before the\n    model is fitted to it: `is_data_valid(X, y)`. If its return value is\n    False the current randomly chosen sub-sample is skipped."
          },
          "is_model_valid": {
            "type": "callable, default=None",
            "description": "This function is called with the estimated model and the randomly\n    selected data: `is_model_valid(model, X, y)`. If its return value is\n    False the current randomly chosen sub-sample is skipped.\n    Rejecting samples with this function is computationally costlier than\n    with `is_data_valid`. `is_model_valid` should therefore only be used if\n    the estimated model is needed for making the rejection decision."
          },
          "max_trials": {
            "type": "int, default=100",
            "description": "Maximum number of iterations for random sample selection."
          },
          "max_skips": {
            "type": "int, default=np.inf",
            "description": "Maximum number of iterations that can be skipped due to finding zero\n    inliers or invalid data defined by ``is_data_valid`` or invalid models\n    defined by ``is_model_valid``.\n\n    .. versionadded:: 0.19"
          },
          "stop_n_inliers": {
            "type": "int, default=np.inf",
            "description": "Stop iteration if at least this number of inliers are found."
          },
          "stop_score": {
            "type": "float, default=np.inf",
            "description": "Stop iteration if score is greater equal than this threshold."
          },
          "stop_probability": {
            "type": "float in range [0, 1], default=0.99",
            "description": "RANSAC iteration stops if at least one outlier-free set of the training\n    data is sampled in RANSAC. This requires to generate at least N\n    samples (iterations)::\n\n        N >= log(1 - probability) / log(1 - e**m)\n\n    where the probability (confidence) is typically set to high value such\n    as 0.99 (the default) and e is the current fraction of inliers w.r.t.\n    the total number of samples."
          },
          "loss": {
            "type": "str, callable, default='absolute_error'",
            "description": "String inputs, 'absolute_error' and 'squared_error' are supported which\n    find the absolute error and squared error per sample respectively.\n\n    If ``loss`` is a callable, then it should be a function that takes\n    two arrays as inputs, the true and predicted value and returns a 1-D\n    array with the i-th value of the array corresponding to the loss\n    on ``X[i]``.\n\n    If the loss on a sample is greater than the ``residual_threshold``,\n    then this sample is classified as an outlier.\n\n    .. versionadded:: 0.18"
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "The generator used to initialize the centers.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`.\n\nAttributes\n----------"
          },
          "estimator_": {
            "type": "object",
            "description": "Final model fitted on the inliers predicted by the \"best\" model found\n    during RANSAC sampling (copy of the `estimator` object)."
          },
          "n_trials_": {
            "type": "int",
            "description": "Number of random selection trials until one of the stop criteria is\n    met. It is always ``<= max_trials``."
          },
          "inlier_mask_": {
            "type": "bool array of shape [n_samples]",
            "description": "Boolean mask of inliers classified as ``True``."
          },
          "n_skips_no_inliers_": {
            "type": "int",
            "description": "Number of iterations skipped due to finding zero inliers.\n\n    .. versionadded:: 0.19"
          },
          "n_skips_invalid_data_": {
            "type": "int",
            "description": "Number of iterations skipped due to invalid data defined by\n    ``is_data_valid``.\n\n    .. versionadded:: 0.19"
          },
          "n_skips_invalid_model_": {
            "type": "int",
            "description": "Number of iterations skipped due to an invalid model defined by\n    ``is_model_valid``.\n\n    .. versionadded:: 0.19"
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "HuberRegressor : Linear regression model that is robust to outliers.\nTheilSenRegressor : Theil-Sen Estimator robust multivariate regression model.\nSGDRegressor : Fitted by minimizing a regularized empirical loss with SGD.\n\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/RANSAC\n.. [2] https://www.sri.com/wp-content/uploads/2021/12/ransac-publication.pdf\n.. [3] https://bmva-archive.org.uk/bmvc/2009/Papers/Paper355/Paper355.pdf",
        "notes": "",
        "examples": ">>> from sklearn.linear_model import RANSACRegressor\n>>> from sklearn.datasets import make_regression\n>>> X, y = make_regression(\n...     n_samples=200, n_features=2, noise=4.0, random_state=0)\n>>> reg = RANSACRegressor(random_state=0).fit(X, y)\n>>> reg.score(X, y)\n0.9885...\n>>> reg.predict(X[:1,])\narray([-31.9417...])\n\nFor a more detailed example, see\n:ref:`sphx_glr_auto_examples_linear_model_plot_ransac.py`"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, *, sample_weight=None, **fit_params)",
          "docstring": {
            "description": "Fit estimator using RANSAC algorithm.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_targets)",
                "description": "Target values."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Individual weights for each sample\n    raises error if sample_weight is passed and estimator\n    fit method does not support it.\n\n    .. versionadded:: 0.18"
              },
              "**fit_params": {
                "type": "dict",
                "description": "Parameters routed to the `fit` method of the sub-estimator via the\n    metadata routing API.\n\n    .. versionadded:: 1.5\n\n        Only available if\n        `sklearn.set_config(enable_metadata_routing=True)` is set. See\n        :ref:`Metadata Routing User Guide <metadata_routing>` for more\n        details."
              }
            },
            "returns": "self : object\n    Fitted `RANSACRegressor` estimator.",
            "raises": "ValueError\n    If no valid consensus set could be found. This occurs if\n    `is_data_valid` and `is_model_valid` return False for all\n    `max_trials` randomly chosen sub-samples.",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\n.. versionadded:: 1.5",
            "parameters": {},
            "returns": "routing : MetadataRouter\n    A :class:`~sklearn.utils.metadata_routing.MetadataRouter` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X, **params)",
          "docstring": {
            "description": "Predict using the estimated model.\n\nThis is a wrapper for `estimator_.predict(X)`.",
            "parameters": {
              "X": {
                "type": "{array-like or sparse matrix} of shape (n_samples, n_features)",
                "description": "Input data."
              },
              "**params": {
                "type": "dict",
                "description": "Parameters routed to the `predict` method of the sub-estimator via\n    the metadata routing API.\n\n    .. versionadded:: 1.5\n\n        Only available if\n        `sklearn.set_config(enable_metadata_routing=True)` is set. See\n        :ref:`Metadata Routing User Guide <metadata_routing>` for more\n        details."
              }
            },
            "returns": "y : array, shape = [n_samples] or [n_samples, n_targets]\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, **params)",
          "docstring": {
            "description": "Return the score of the prediction.\n\nThis is a wrapper for `estimator_.score(X, y)`.",
            "parameters": {
              "X": {
                "type": "(array-like or sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_targets)",
                "description": "Target values."
              },
              "**params": {
                "type": "dict",
                "description": "Parameters routed to the `score` method of the sub-estimator via\n    the metadata routing API.\n\n    .. versionadded:: 1.5\n\n        Only available if\n        `sklearn.set_config(enable_metadata_routing=True)` is set. See\n        :ref:`Metadata Routing User Guide <metadata_routing>` for more\n        details."
              }
            },
            "returns": "z : float\n    Score of the prediction.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._ransac.RANSACRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._ransac.RANSACRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "Ridge",
      "docstring": {
        "description": "Linear least squares with l2 regularization.\n\nMinimizes the objective function::\n\n||y - Xw||^2_2 + alpha * ||w||^2_2\n\nThis model solves a regression model where the loss function is\nthe linear least squares function and regularization is given by\nthe l2-norm. Also known as Ridge Regression or Tikhonov regularization.\nThis estimator has built-in support for multi-variate regression\n(i.e., when y is a 2d-array of shape (n_samples, n_targets)).\n\nRead more in the :ref:`User Guide <ridge_regression>`.",
        "parameters": {
          "alpha": {
            "type": "{float, ndarray of shape (n_targets,)}, default=1.0",
            "description": "Constant that multiplies the L2 term, controlling regularization\n    strength. `alpha` must be a non-negative float i.e. in `[0, inf)`.\n\n    When `alpha = 0`, the objective is equivalent to ordinary least\n    squares, solved by the :class:`LinearRegression` object. For numerical\n    reasons, using `alpha = 0` with the `Ridge` object is not advised.\n    Instead, you should use the :class:`LinearRegression` object.\n\n    If an array is passed, penalties are assumed to be specific to the\n    targets. Hence they must correspond in number."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to fit the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. ``X`` and ``y`` are expected to be centered)."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If True, X will be copied; else, it may be overwritten."
          },
          "max_iter": {
            "type": "int, default=None",
            "description": "Maximum number of iterations for conjugate gradient solver.\n    For 'sparse_cg' and 'lsqr' solvers, the default value is determined\n    by scipy.sparse.linalg. For 'sag' solver, the default value is 1000.\n    For 'lbfgs' solver, the default value is 15000."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "The precision of the solution (`coef_`) is determined by `tol` which\n    specifies a different convergence criterion for each solver:\n\n    - 'svd': `tol` has no impact.\n\n    - 'cholesky': `tol` has no impact.\n\n    - 'sparse_cg': norm of residuals smaller than `tol`.\n\n    - 'lsqr': `tol` is set as atol and btol of scipy.sparse.linalg.lsqr,\n      which control the norm of the residual vector in terms of the norms of\n      matrix and coefficients.\n\n    - 'sag' and 'saga': relative change of coef smaller than `tol`.\n\n    - 'lbfgs': maximum of the absolute (projected) gradient=max|residuals|\n      smaller than `tol`.\n\n    .. versionchanged:: 1.2\n       Default value changed from 1e-3 to 1e-4 for consistency with other linear\n       models."
          },
          "solver": {
            "type": "{'auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg',             'sag', 'saga', 'lbfgs'}, default='auto'",
            "description": "Solver to use in the computational routines:\n\n    - 'auto' chooses the solver automatically based on the type of data.\n\n    - 'svd' uses a Singular Value Decomposition of X to compute the Ridge\n      coefficients. It is the most stable solver, in particular more stable\n      for singular matrices than 'cholesky' at the cost of being slower.\n\n    - 'cholesky' uses the standard scipy.linalg.solve function to\n      obtain a closed-form solution.\n\n    - 'sparse_cg' uses the conjugate gradient solver as found in\n      scipy.sparse.linalg.cg. As an iterative algorithm, this solver is\n      more appropriate than 'cholesky' for large-scale data\n      (possibility to set `tol` and `max_iter`).\n\n    - 'lsqr' uses the dedicated regularized least-squares routine\n      scipy.sparse.linalg.lsqr. It is the fastest and uses an iterative\n      procedure.\n\n    - 'sag' uses a Stochastic Average Gradient descent, and 'saga' uses\n      its improved, unbiased version named SAGA. Both methods also use an\n      iterative procedure, and are often faster than other solvers when\n      both n_samples and n_features are large. Note that 'sag' and\n      'saga' fast convergence is only guaranteed on features with\n      approximately the same scale. You can preprocess the data with a\n      scaler from sklearn.preprocessing.\n\n    - 'lbfgs' uses L-BFGS-B algorithm implemented in\n      `scipy.optimize.minimize`. It can be used only when `positive`\n      is True.\n\n    All solvers except 'svd' support both dense and sparse data. However, only\n    'lsqr', 'sag', 'sparse_cg', and 'lbfgs' support sparse input when\n    `fit_intercept` is True.\n\n    .. versionadded:: 0.17\n       Stochastic Average Gradient descent solver.\n    .. versionadded:: 0.19\n       SAGA solver."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "When set to ``True``, forces the coefficients to be positive.\n    Only 'lbfgs' solver is supported in this case."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used when ``solver`` == 'sag' or 'saga' to shuffle the data.\n    See :term:`Glossary <random_state>` for details.\n\n    .. versionadded:: 0.17\n       `random_state` to support Stochastic Average Gradient.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (n_features,) or (n_targets, n_features)",
            "description": "Weight vector(s)."
          },
          "intercept_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Independent term in decision function. Set to 0.0 if\n    ``fit_intercept = False``."
          },
          "n_iter_": {
            "type": "None or ndarray of shape (n_targets,)",
            "description": "Actual number of iterations for each target. Available only for\n    sag and lsqr solvers. Other solvers will return None.\n\n    .. versionadded:: 0.17"
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "solver_": {
            "type": "str",
            "description": "The solver that was used at fit time by the computational\n    routines.\n\n    .. versionadded:: 1.5"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "RidgeClassifier : Ridge classifier.\nRidgeCV : Ridge regression with built-in cross validation.\n:class:`~sklearn.kernel_ridge.KernelRidge` : Kernel ridge regression\n    combines ridge regression with the kernel trick.",
        "notes": "Regularization improves the conditioning of the problem and\nreduces the variance of the estimates. Larger values specify stronger\nregularization. Alpha corresponds to ``1 / (2C)`` in other linear\nmodels such as :class:`~sklearn.linear_model.LogisticRegression` or\n:class:`~sklearn.svm.LinearSVC`.",
        "examples": ">>> from sklearn.linear_model import Ridge\n>>> import numpy as np\n>>> n_samples, n_features = 10, 5\n>>> rng = np.random.RandomState(0)\n>>> y = rng.randn(n_samples)\n>>> X = rng.randn(n_samples, n_features)\n>>> clf = Ridge(alpha=1.0)\n>>> clf.fit(X, y)\nRidge()"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Fit Ridge regression model.",
            "parameters": {
              "X": {
                "type": "{ndarray, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "ndarray of shape (n_samples,) or (n_samples, n_targets)",
                "description": "Target values."
              },
              "sample_weight": {
                "type": "float or ndarray of shape (n_samples,), default=None",
                "description": "Individual weights for each sample. If given a float, every sample\n    will have the same weight."
              }
            },
            "returns": "self : object\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._ridge.Ridge, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._ridge.Ridge",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._ridge.Ridge, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._ridge.Ridge",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "RidgeCV",
      "docstring": {
        "description": "Ridge regression with built-in cross-validation.\n\nSee glossary entry for :term:`cross-validation estimator`.\n\nBy default, it performs efficient Leave-One-Out Cross-Validation.\n\nRead more in the :ref:`User Guide <ridge_regression>`.",
        "parameters": {
          "alphas": {
            "type": "array-like of shape (n_alphas,), default=(0.1, 1.0, 10.0)",
            "description": "Array of alpha values to try.\n    Regularization strength; must be a positive float. Regularization\n    improves the conditioning of the problem and reduces the variance of\n    the estimates. Larger values specify stronger regularization.\n    Alpha corresponds to ``1 / (2C)`` in other linear models such as\n    :class:`~sklearn.linear_model.LogisticRegression` or\n    :class:`~sklearn.svm.LinearSVC`.\n    If using Leave-One-Out cross-validation, alphas must be strictly positive."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "scoring": {
            "type": "str, callable, default=None",
            "description": "A string (see :ref:`scoring_parameter`) or a scorer callable object /\n    function with signature ``scorer(estimator, X, y)``. If None, the\n    negative mean squared error if cv is 'auto' or None (i.e. when using\n    leave-one-out cross-validation), and r2 score otherwise."
          },
          "cv": {
            "type": "int, cross-validation generator or an iterable, default=None",
            "description": "Determines the cross-validation splitting strategy.\n    Possible inputs for cv are:\n\n    - None, to use the efficient Leave-One-Out cross-validation\n    - integer, to specify the number of folds.\n    - :term:`CV splitter`,\n    - An iterable yielding (train, test) splits as arrays of indices.\n\n    For integer/None inputs, if ``y`` is binary or multiclass,\n    :class:`~sklearn.model_selection.StratifiedKFold` is used, else,\n    :class:`~sklearn.model_selection.KFold` is used.\n\n    Refer :ref:`User Guide <cross_validation>` for the various\n    cross-validation strategies that can be used here."
          },
          "gcv_mode": {
            "type": "{'auto', 'svd', 'eigen'}, default='auto'",
            "description": "Flag indicating which strategy to use when performing\n    Leave-One-Out Cross-Validation. Options are::\n\n        'auto' : use 'svd' if n_samples > n_features, otherwise use 'eigen'\n        'svd' : force use of singular value decomposition of X when X is\n            dense, eigenvalue decomposition of X^T.X when X is sparse.\n        'eigen' : force computation via eigendecomposition of X.X^T\n\n    The 'auto' mode is the default and is intended to pick the cheaper\n    option of the two depending on the shape of the training data."
          },
          "store_cv_results": {
            "type": "bool, default=False",
            "description": "Flag indicating if the cross-validation values corresponding to\n    each alpha should be stored in the ``cv_results_`` attribute (see\n    below). This flag is only compatible with ``cv=None`` (i.e. using\n    Leave-One-Out Cross-Validation).\n\n    .. versionchanged:: 1.5\n        Parameter name changed from `store_cv_values` to `store_cv_results`."
          },
          "alpha_per_target": {
            "type": "bool, default=False",
            "description": "Flag indicating whether to optimize the alpha value (picked from the\n    `alphas` parameter list) for each target separately (for multi-output\n    settings: multiple prediction targets). When set to `True`, after\n    fitting, the `alpha_` attribute will contain a value for each target.\n    When set to `False`, a single alpha is used for all targets.\n\n    .. versionadded:: 0.24"
          },
          "store_cv_values": {
            "type": "bool",
            "description": "Flag indicating if the cross-validation values corresponding to\n    each alpha should be stored in the ``cv_values_`` attribute (see\n    below). This flag is only compatible with ``cv=None`` (i.e. using\n    Leave-One-Out Cross-Validation).\n\n    .. deprecated:: 1.5\n        `store_cv_values` is deprecated in version 1.5 in favor of\n        `store_cv_results` and will be removed in version 1.7.\n\nAttributes\n----------"
          },
          "cv_results_": {
            "type": "ndarray of shape (n_samples, n_alphas) or             shape (n_samples, n_targets, n_alphas), optional",
            "description": "Cross-validation values for each alpha (only available if\n    ``store_cv_results=True`` and ``cv=None``). After ``fit()`` has been\n    called, this attribute will contain the mean squared errors if\n    `scoring is None` otherwise it will contain standardized per point\n    prediction values.\n\n    .. versionchanged:: 1.5\n        `cv_values_` changed to `cv_results_`."
          },
          "coef_": {
            "type": "ndarray of shape (n_features) or (n_targets, n_features)",
            "description": "Weight vector(s)."
          },
          "intercept_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Independent term in decision function. Set to 0.0 if\n    ``fit_intercept = False``."
          },
          "alpha_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Estimated regularization parameter, or, if ``alpha_per_target=True``,\n    the estimated regularization parameter for each target."
          },
          "best_score_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Score of base estimator with best alpha, or, if\n    ``alpha_per_target=True``, a score for each target.\n\n    .. versionadded:: 0.23"
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "Ridge : Ridge regression.\nRidgeClassifier : Classifier based on ridge regression on {-1, 1} labels.\nRidgeClassifierCV : Ridge classifier with built-in cross validation.",
        "notes": "",
        "examples": ">>> from sklearn.datasets import load_diabetes\n>>> from sklearn.linear_model import RidgeCV\n>>> X, y = load_diabetes(return_X_y=True)\n>>> clf = RidgeCV(alphas=[1e-3, 1e-2, 1e-1, 1]).fit(X, y)\n>>> clf.score(X, y)\n0.5166..."
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None, **params)",
          "docstring": {
            "description": "Fit Ridge regression model with cv.",
            "parameters": {
              "X": {
                "type": "ndarray of shape (n_samples, n_features)",
                "description": "Training data. If using GCV, will be cast to float64\n    if necessary."
              },
              "y": {
                "type": "ndarray of shape (n_samples,) or (n_samples, n_targets)",
                "description": "Target values. Will be cast to X's dtype if necessary."
              },
              "sample_weight": {
                "type": "float or ndarray of shape (n_samples,), default=None",
                "description": "Individual weights for each sample. If given a float, every sample\n    will have the same weight."
              },
              "**params": {
                "type": "dict, default=None",
                "description": "Parameters to be passed to the underlying scorer.\n\n    .. versionadded:: 1.5\n        Only available if `enable_metadata_routing=True`,\n        which can be set by using\n        ``sklearn.set_config(enable_metadata_routing=True)``.\n        See :ref:`Metadata Routing User Guide <metadata_routing>` for\n        more details."
              }
            },
            "returns": "self : object\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "When sample_weight is provided, the selected hyperparameter may depend\non whether we use leave-one-out cross-validation (cv=None or cv='auto')\nor another form of cross-validation, because only leave-one-out\ncross-validation takes the sample weights into account when computing\nthe validation score.",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\n.. versionadded:: 1.5",
            "parameters": {},
            "returns": "routing : MetadataRouter\n    A :class:`~sklearn.utils.metadata_routing.MetadataRouter` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._ridge.RidgeCV, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._ridge.RidgeCV",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._ridge.RidgeCV, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._ridge.RidgeCV",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "RidgeClassifier",
      "docstring": {
        "description": "Classifier using Ridge regression.\n\nThis classifier first converts the target values into ``{-1, 1}`` and\nthen treats the problem as a regression task (multi-output regression in\nthe multiclass case).\n\nRead more in the :ref:`User Guide <ridge_regression>`.",
        "parameters": {
          "alpha": {
            "type": "float, default=1.0",
            "description": "Regularization strength; must be a positive float. Regularization\n    improves the conditioning of the problem and reduces the variance of\n    the estimates. Larger values specify stronger regularization.\n    Alpha corresponds to ``1 / (2C)`` in other linear models such as\n    :class:`~sklearn.linear_model.LogisticRegression` or\n    :class:`~sklearn.svm.LinearSVC`."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set to false, no\n    intercept will be used in calculations (e.g. data is expected to be\n    already centered)."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If True, X will be copied; else, it may be overwritten."
          },
          "max_iter": {
            "type": "int, default=None",
            "description": "Maximum number of iterations for conjugate gradient solver.\n    The default value is determined by scipy.sparse.linalg."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "The precision of the solution (`coef_`) is determined by `tol` which\n    specifies a different convergence criterion for each solver:\n\n    - 'svd': `tol` has no impact.\n\n    - 'cholesky': `tol` has no impact.\n\n    - 'sparse_cg': norm of residuals smaller than `tol`.\n\n    - 'lsqr': `tol` is set as atol and btol of scipy.sparse.linalg.lsqr,\n      which control the norm of the residual vector in terms of the norms of\n      matrix and coefficients.\n\n    - 'sag' and 'saga': relative change of coef smaller than `tol`.\n\n    - 'lbfgs': maximum of the absolute (projected) gradient=max|residuals|\n      smaller than `tol`.\n\n    .. versionchanged:: 1.2\n       Default value changed from 1e-3 to 1e-4 for consistency with other linear\n       models."
          },
          "class_weight": {
            "type": "dict or 'balanced', default=None",
            "description": "Weights associated with classes in the form ``{class_label: weight}``.\n    If not given, all classes are supposed to have weight one.\n\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``."
          },
          "solver": {
            "type": "{'auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg',             'sag', 'saga', 'lbfgs'}, default='auto'",
            "description": "Solver to use in the computational routines:\n\n    - 'auto' chooses the solver automatically based on the type of data.\n\n    - 'svd' uses a Singular Value Decomposition of X to compute the Ridge\n      coefficients. It is the most stable solver, in particular more stable\n      for singular matrices than 'cholesky' at the cost of being slower.\n\n    - 'cholesky' uses the standard scipy.linalg.solve function to\n      obtain a closed-form solution.\n\n    - 'sparse_cg' uses the conjugate gradient solver as found in\n      scipy.sparse.linalg.cg. As an iterative algorithm, this solver is\n      more appropriate than 'cholesky' for large-scale data\n      (possibility to set `tol` and `max_iter`).\n\n    - 'lsqr' uses the dedicated regularized least-squares routine\n      scipy.sparse.linalg.lsqr. It is the fastest and uses an iterative\n      procedure.\n\n    - 'sag' uses a Stochastic Average Gradient descent, and 'saga' uses\n      its unbiased and more flexible version named SAGA. Both methods\n      use an iterative procedure, and are often faster than other solvers\n      when both n_samples and n_features are large. Note that 'sag' and\n      'saga' fast convergence is only guaranteed on features with\n      approximately the same scale. You can preprocess the data with a\n      scaler from sklearn.preprocessing.\n\n      .. versionadded:: 0.17\n         Stochastic Average Gradient descent solver.\n      .. versionadded:: 0.19\n         SAGA solver.\n\n    - 'lbfgs' uses L-BFGS-B algorithm implemented in\n      `scipy.optimize.minimize`. It can be used only when `positive`\n      is True."
          },
          "positive": {
            "type": "bool, default=False",
            "description": "When set to ``True``, forces the coefficients to be positive.\n    Only 'lbfgs' solver is supported in this case."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used when ``solver`` == 'sag' or 'saga' to shuffle the data.\n    See :term:`Glossary <random_state>` for details.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features) or (n_classes, n_features)",
            "description": "Coefficient of the features in the decision function.\n\n    ``coef_`` is of shape (1, n_features) when the given problem is binary."
          },
          "intercept_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Independent term in decision function. Set to 0.0 if\n    ``fit_intercept = False``."
          },
          "n_iter_": {
            "type": "None or ndarray of shape (n_targets,)",
            "description": "Actual number of iterations for each target. Available only for\n    sag and lsqr solvers. Other solvers will return None."
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,)",
            "description": "The classes labels."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "solver_": {
            "type": "str",
            "description": "The solver that was used at fit time by the computational\n    routines.\n\n    .. versionadded:: 1.5"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "Ridge : Ridge regression.\nRidgeClassifierCV :  Ridge classifier with built-in cross validation.",
        "notes": "For multi-class classification, n_class classifiers are trained in\na one-versus-all approach. Concretely, this is implemented by taking\nadvantage of the multi-variate response support in Ridge.",
        "examples": ">>> from sklearn.datasets import load_breast_cancer\n>>> from sklearn.linear_model import RidgeClassifier\n>>> X, y = load_breast_cancer(return_X_y=True)\n>>> clf = RidgeClassifier().fit(X, y)\n>>> clf.score(X, y)\n0.9595..."
      },
      "methods": [
        {
          "name": "decision_function",
          "signature": "decision_function(self, X)",
          "docstring": {
            "description": "Predict confidence scores for samples.\n\nThe confidence score for a sample is proportional to the signed\ndistance of that sample to the hyperplane.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The data matrix for which we want to get the confidence scores."
              }
            },
            "returns": "scores : ndarray of shape (n_samples,) or (n_samples, n_classes)\n    Confidence scores per `(n_samples, n_classes)` combination. In the\n    binary case, confidence score for `self.classes_[1]` where >0 means\n    this class would be predicted.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Fit Ridge classifier model.",
            "parameters": {
              "X": {
                "type": "{ndarray, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "ndarray of shape (n_samples,)",
                "description": "Target values."
              },
              "sample_weight": {
                "type": "float or ndarray of shape (n_samples,), default=None",
                "description": "Individual weights for each sample. If given a float, every sample\n    will have the same weight.\n\n    .. versionadded:: 0.17\n       *sample_weight* support to RidgeClassifier."
              }
            },
            "returns": "self : object\n    Instance of the estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict class labels for samples in `X`.",
            "parameters": {
              "X": {
                "type": "{array-like, spare matrix} of shape (n_samples, n_features)",
                "description": "The data matrix for which we want to predict the targets."
              }
            },
            "returns": "y_pred : ndarray of shape (n_samples,) or (n_samples, n_outputs)\n    Vector or matrix containing the predictions. In binary and\n    multiclass problems, this is a vector containing `n_samples`. In\n    a multilabel problem, it returns a matrix of shape\n    `(n_samples, n_outputs)`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the mean accuracy on the given test data and labels.\n\nIn multi-label classification, this is the subset accuracy\nwhich is a harsh metric since you require for each sample that\neach label set be correctly predicted.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True labels for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._ridge.RidgeClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._ridge.RidgeClassifier",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._ridge.RidgeClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._ridge.RidgeClassifier",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "RidgeClassifierCV",
      "docstring": {
        "description": "Ridge classifier with built-in cross-validation.\n\nSee glossary entry for :term:`cross-validation estimator`.\n\nBy default, it performs Leave-One-Out Cross-Validation. Currently,\nonly the n_features > n_samples case is handled efficiently.\n\nRead more in the :ref:`User Guide <ridge_regression>`.",
        "parameters": {
          "alphas": {
            "type": "array-like of shape (n_alphas,), default=(0.1, 1.0, 10.0)",
            "description": "Array of alpha values to try.\n    Regularization strength; must be a positive float. Regularization\n    improves the conditioning of the problem and reduces the variance of\n    the estimates. Larger values specify stronger regularization.\n    Alpha corresponds to ``1 / (2C)`` in other linear models such as\n    :class:`~sklearn.linear_model.LogisticRegression` or\n    :class:`~sklearn.svm.LinearSVC`.\n    If using Leave-One-Out cross-validation, alphas must be strictly positive."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations\n    (i.e. data is expected to be centered)."
          },
          "scoring": {
            "type": "str, callable, default=None",
            "description": "A string (see :ref:`scoring_parameter`) or a scorer callable object /\n    function with signature ``scorer(estimator, X, y)``."
          },
          "cv": {
            "type": "int, cross-validation generator or an iterable, default=None",
            "description": "Determines the cross-validation splitting strategy.\n    Possible inputs for cv are:\n\n    - None, to use the efficient Leave-One-Out cross-validation\n    - integer, to specify the number of folds.\n    - :term:`CV splitter`,\n    - An iterable yielding (train, test) splits as arrays of indices.\n\n    Refer :ref:`User Guide <cross_validation>` for the various\n    cross-validation strategies that can be used here."
          },
          "class_weight": {
            "type": "dict or 'balanced', default=None",
            "description": "Weights associated with classes in the form ``{class_label: weight}``.\n    If not given, all classes are supposed to have weight one.\n\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``."
          },
          "store_cv_results": {
            "type": "bool, default=False",
            "description": "Flag indicating if the cross-validation results corresponding to\n    each alpha should be stored in the ``cv_results_`` attribute (see\n    below). This flag is only compatible with ``cv=None`` (i.e. using\n    Leave-One-Out Cross-Validation).\n\n    .. versionchanged:: 1.5\n        Parameter name changed from `store_cv_values` to `store_cv_results`."
          },
          "store_cv_values": {
            "type": "bool",
            "description": "Flag indicating if the cross-validation values corresponding to\n    each alpha should be stored in the ``cv_values_`` attribute (see\n    below). This flag is only compatible with ``cv=None`` (i.e. using\n    Leave-One-Out Cross-Validation).\n\n    .. deprecated:: 1.5\n        `store_cv_values` is deprecated in version 1.5 in favor of\n        `store_cv_results` and will be removed in version 1.7.\n\nAttributes\n----------"
          },
          "cv_results_": {
            "type": "ndarray of shape (n_samples, n_targets, n_alphas), optional",
            "description": "Cross-validation results for each alpha (only if ``store_cv_results=True`` and\n    ``cv=None``). After ``fit()`` has been called, this attribute will\n    contain the mean squared errors if `scoring is None` otherwise it\n    will contain standardized per point prediction values.\n\n    .. versionchanged:: 1.5\n        `cv_values_` changed to `cv_results_`."
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features) or (n_targets, n_features)",
            "description": "Coefficient of the features in the decision function.\n\n    ``coef_`` is of shape (1, n_features) when the given problem is binary."
          },
          "intercept_": {
            "type": "float or ndarray of shape (n_targets,)",
            "description": "Independent term in decision function. Set to 0.0 if\n    ``fit_intercept = False``."
          },
          "alpha_": {
            "type": "float",
            "description": "Estimated regularization parameter."
          },
          "best_score_": {
            "type": "float",
            "description": "Score of base estimator with best alpha.\n\n    .. versionadded:: 0.23"
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,)",
            "description": "The classes labels."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "Ridge : Ridge regression.\nRidgeClassifier : Ridge classifier.\nRidgeCV : Ridge regression with built-in cross validation.",
        "notes": "For multi-class classification, n_class classifiers are trained in\na one-versus-all approach. Concretely, this is implemented by taking\nadvantage of the multi-variate response support in Ridge.",
        "examples": ">>> from sklearn.datasets import load_breast_cancer\n>>> from sklearn.linear_model import RidgeClassifierCV\n>>> X, y = load_breast_cancer(return_X_y=True)\n>>> clf = RidgeClassifierCV(alphas=[1e-3, 1e-2, 1e-1, 1]).fit(X, y)\n>>> clf.score(X, y)\n0.9630..."
      },
      "methods": [
        {
          "name": "decision_function",
          "signature": "decision_function(self, X)",
          "docstring": {
            "description": "Predict confidence scores for samples.\n\nThe confidence score for a sample is proportional to the signed\ndistance of that sample to the hyperplane.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The data matrix for which we want to get the confidence scores."
              }
            },
            "returns": "scores : ndarray of shape (n_samples,) or (n_samples, n_classes)\n    Confidence scores per `(n_samples, n_classes)` combination. In the\n    binary case, confidence score for `self.classes_[1]` where >0 means\n    this class would be predicted.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None, **params)",
          "docstring": {
            "description": "Fit Ridge classifier with cv.",
            "parameters": {
              "X": {
                "type": "ndarray of shape (n_samples, n_features)",
                "description": "Training vectors, where `n_samples` is the number of samples\n    and `n_features` is the number of features. When using GCV,\n    will be cast to float64 if necessary."
              },
              "y": {
                "type": "ndarray of shape (n_samples,)",
                "description": "Target values. Will be cast to X's dtype if necessary."
              },
              "sample_weight": {
                "type": "float or ndarray of shape (n_samples,), default=None",
                "description": "Individual weights for each sample. If given a float, every sample\n    will have the same weight."
              },
              "**params": {
                "type": "dict, default=None",
                "description": "Parameters to be passed to the underlying scorer.\n\n    .. versionadded:: 1.5\n        Only available if `enable_metadata_routing=True`,\n        which can be set by using\n        ``sklearn.set_config(enable_metadata_routing=True)``.\n        See :ref:`Metadata Routing User Guide <metadata_routing>` for\n        more details."
              }
            },
            "returns": "self : object\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\n.. versionadded:: 1.5",
            "parameters": {},
            "returns": "routing : MetadataRouter\n    A :class:`~sklearn.utils.metadata_routing.MetadataRouter` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict class labels for samples in `X`.",
            "parameters": {
              "X": {
                "type": "{array-like, spare matrix} of shape (n_samples, n_features)",
                "description": "The data matrix for which we want to predict the targets."
              }
            },
            "returns": "y_pred : ndarray of shape (n_samples,) or (n_samples, n_outputs)\n    Vector or matrix containing the predictions. In binary and\n    multiclass problems, this is a vector containing `n_samples`. In\n    a multilabel problem, it returns a matrix of shape\n    `(n_samples, n_outputs)`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the mean accuracy on the given test data and labels.\n\nIn multi-label classification, this is the subset accuracy\nwhich is a harsh metric since you require for each sample that\neach label set be correctly predicted.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True labels for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._ridge.RidgeClassifierCV, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._ridge.RidgeClassifierCV",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._ridge.RidgeClassifierCV, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._ridge.RidgeClassifierCV",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "SGDClassifier",
      "docstring": {
        "description": "Linear classifiers (SVM, logistic regression, etc.) with SGD training.\n\nThis estimator implements regularized linear models with stochastic\ngradient descent (SGD) learning: the gradient of the loss is estimated\neach sample at a time and the model is updated along the way with a\ndecreasing strength schedule (aka learning rate). SGD allows minibatch\n(online/out-of-core) learning via the `partial_fit` method.\nFor best results using the default learning rate schedule, the data should\nhave zero mean and unit variance.\n\nThis implementation works with data represented as dense or sparse arrays\nof floating point values for the features. The model it fits can be\ncontrolled with the loss parameter; by default, it fits a linear support\nvector machine (SVM).\n\nThe regularizer is a penalty added to the loss function that shrinks model\nparameters towards the zero vector using either the squared euclidean norm\nL2 or the absolute norm L1 or a combination of both (Elastic Net). If the\nparameter update crosses the 0.0 value because of the regularizer, the\nupdate is truncated to 0.0 to allow for learning sparse models and achieve\nonline feature selection.\n\nRead more in the :ref:`User Guide <sgd>`.",
        "parameters": {
          "loss": {
            "type": "{'hinge', 'log_loss', 'modified_huber', 'squared_hinge',        'perceptron', 'squared_error', 'huber', 'epsilon_insensitive',        'squared_epsilon_insensitive'}, default='hinge'",
            "description": "The loss function to be used.\n\n    - 'hinge' gives a linear SVM.\n    - 'log_loss' gives logistic regression, a probabilistic classifier.\n    - 'modified_huber' is another smooth loss that brings tolerance to\n      outliers as well as probability estimates.\n    - 'squared_hinge' is like hinge but is quadratically penalized.\n    - 'perceptron' is the linear loss used by the perceptron algorithm.\n    - The other losses, 'squared_error', 'huber', 'epsilon_insensitive' and\n      'squared_epsilon_insensitive' are designed for regression but can be useful\n      in classification as well; see\n      :class:`~sklearn.linear_model.SGDRegressor` for a description.\n\n    More details about the losses formulas can be found in the :ref:`User Guide\n    <sgd_mathematical_formulation>` and you can find a visualisation of the loss\n    functions in\n    :ref:`sphx_glr_auto_examples_linear_model_plot_sgd_loss_functions.py`."
          },
          "penalty": {
            "type": "{'l2', 'l1', 'elasticnet', None}, default='l2'",
            "description": "The penalty (aka regularization term) to be used. Defaults to 'l2'\n    which is the standard regularizer for linear SVM models. 'l1' and\n    'elasticnet' might bring sparsity to the model (feature selection)\n    not achievable with 'l2'. No penalty is added when set to `None`.\n\n    You can see a visualisation of the penalties in\n    :ref:`sphx_glr_auto_examples_linear_model_plot_sgd_penalties.py`."
          },
          "alpha": {
            "type": "float, default=0.0001",
            "description": "Constant that multiplies the regularization term. The higher the\n    value, the stronger the regularization. Also used to compute the\n    learning rate when `learning_rate` is set to 'optimal'.\n    Values must be in the range `[0.0, inf)`."
          },
          "l1_ratio": {
            "type": "float, default=0.15",
            "description": "The Elastic Net mixing parameter, with 0 <= l1_ratio <= 1.\n    l1_ratio=0 corresponds to L2 penalty, l1_ratio=1 to L1.\n    Only used if `penalty` is 'elasticnet'.\n    Values must be in the range `[0.0, 1.0]`."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether the intercept should be estimated or not. If False, the\n    data is assumed to be already centered."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of passes over the training data (aka epochs).\n    It only impacts the behavior in the ``fit`` method, and not the\n    :meth:`partial_fit` method.\n    Values must be in the range `[1, inf)`.\n\n    .. versionadded:: 0.19"
          },
          "tol": {
            "type": "float or None, default=1e-3",
            "description": "The stopping criterion. If it is not None, training will stop\n    when (loss > best_loss - tol) for ``n_iter_no_change`` consecutive\n    epochs.\n    Convergence is checked against the training loss or the\n    validation loss depending on the `early_stopping` parameter.\n    Values must be in the range `[0.0, inf)`.\n\n    .. versionadded:: 0.19"
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": "Whether or not the training data should be shuffled after each epoch."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "The verbosity level.\n    Values must be in the range `[0, inf)`."
          },
          "epsilon": {
            "type": "float, default=0.1",
            "description": "Epsilon in the epsilon-insensitive loss functions; only if `loss` is\n    'huber', 'epsilon_insensitive', or 'squared_epsilon_insensitive'.\n    For 'huber', determines the threshold at which it becomes less\n    important to get the prediction exactly right.\n    For epsilon-insensitive, any differences between the current prediction\n    and the correct label are ignored if they are less than this threshold.\n    Values must be in the range `[0.0, inf)`."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "The number of CPUs to use to do the OVA (One Versus All, for\n    multi-class problems) computation.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used for shuffling the data, when ``shuffle`` is set to ``True``.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`.\n    Integer values must be in the range `[0, 2**32 - 1]`."
          },
          "learning_rate": {
            "type": "str, default='optimal'",
            "description": "The learning rate schedule:\n\n    - 'constant': `eta = eta0`\n    - 'optimal': `eta = 1.0 / (alpha * (t + t0))`\n      where `t0` is chosen by a heuristic proposed by Leon Bottou.\n    - 'invscaling': `eta = eta0 / pow(t, power_t)`\n    - 'adaptive': `eta = eta0`, as long as the training keeps decreasing.\n      Each time n_iter_no_change consecutive epochs fail to decrease the\n      training loss by tol or fail to increase validation score by tol if\n      `early_stopping` is `True`, the current learning rate is divided by 5.\n\n    .. versionadded:: 0.20\n        Added 'adaptive' option."
          },
          "eta0": {
            "type": "float, default=0.0",
            "description": "The initial learning rate for the 'constant', 'invscaling' or\n    'adaptive' schedules. The default value is 0.0 as eta0 is not used by\n    the default schedule 'optimal'.\n    Values must be in the range `[0.0, inf)`."
          },
          "power_t": {
            "type": "float, default=0.5",
            "description": "The exponent for inverse scaling learning rate.\n    Values must be in the range `(-inf, inf)`."
          },
          "early_stopping": {
            "type": "bool, default=False",
            "description": "Whether to use early stopping to terminate training when validation\n    score is not improving. If set to `True`, it will automatically set aside\n    a stratified fraction of training data as validation and terminate\n    training when validation score returned by the `score` method is not\n    improving by at least tol for n_iter_no_change consecutive epochs.\n\n    See :ref:`sphx_glr_auto_examples_linear_model_plot_sgd_early_stopping.py` for an\n    example of the effects of early stopping.\n\n    .. versionadded:: 0.20\n        Added 'early_stopping' option"
          },
          "validation_fraction": {
            "type": "float, default=0.1",
            "description": "The proportion of training data to set aside as validation set for\n    early stopping. Must be between 0 and 1.\n    Only used if `early_stopping` is True.\n    Values must be in the range `(0.0, 1.0)`.\n\n    .. versionadded:: 0.20\n        Added 'validation_fraction' option"
          },
          "n_iter_no_change": {
            "type": "int, default=5",
            "description": "Number of iterations with no improvement to wait before stopping\n    fitting.\n    Convergence is checked against the training loss or the\n    validation loss depending on the `early_stopping` parameter.\n    Integer values must be in the range `[1, max_iter)`.\n\n    .. versionadded:: 0.20\n        Added 'n_iter_no_change' option"
          },
          "class_weight": {
            "type": "dict, {class_label: weight} or \"balanced\", default=None",
            "description": "Preset for the class_weight fit parameter.\n\n    Weights associated with classes. If not given, all classes\n    are supposed to have weight one.\n\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to True, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution.\n    See :term:`the Glossary <warm_start>`.\n\n    Repeatedly calling fit or partial_fit when warm_start is True can\n    result in a different solution than when calling fit a single time\n    because of the way the data is shuffled.\n    If a dynamic learning rate is used, the learning rate is adapted\n    depending on the number of samples already seen. Calling ``fit`` resets\n    this counter, while ``partial_fit`` will result in increasing the\n    existing counter."
          },
          "average": {
            "type": "bool or int, default=False",
            "description": "When set to `True`, computes the averaged SGD weights across all\n    updates and stores the result in the ``coef_`` attribute. If set to\n    an int greater than 1, averaging will begin once the total number of\n    samples seen reaches `average`. So ``average=10`` will begin\n    averaging after seeing 10 samples.\n    Integer values must be in the range `[1, n_samples]`.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features) if n_classes == 2 else             (n_classes, n_features)",
            "description": "Weights assigned to the features."
          },
          "intercept_": {
            "type": "ndarray of shape (1,) if n_classes == 2 else (n_classes,)",
            "description": "Constants in decision function."
          },
          "n_iter_": {
            "type": "int",
            "description": "The actual number of iterations before reaching the stopping criterion.\n    For multiclass fits, it is the maximum over every binary fit."
          },
          "classes_": {
            "type": "array of shape (n_classes,)",
            "description": ""
          },
          "t_": {
            "type": "int",
            "description": "Number of weight updates performed during training.\n    Same as ``(n_iter_ * n_samples + 1)``."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "sklearn.svm.LinearSVC : Linear support vector classification.\nLogisticRegression : Logistic regression.\nPerceptron : Inherits from SGDClassifier. ``Perceptron()`` is equivalent to\n    ``SGDClassifier(loss=\"perceptron\", eta0=1, learning_rate=\"constant\",\n    penalty=None)``.",
        "notes": "",
        "examples": ">>> import numpy as np\n>>> from sklearn.linear_model import SGDClassifier\n>>> from sklearn.preprocessing import StandardScaler\n>>> from sklearn.pipeline import make_pipeline\n>>> X = np.array([[-1, -1], [-2, -1], [1, 1], [2, 1]])\n>>> Y = np.array([1, 1, 2, 2])\n>>> # Always scale the input. The most convenient way is to use a pipeline.\n>>> clf = make_pipeline(StandardScaler(),\n...                     SGDClassifier(max_iter=1000, tol=1e-3))\n>>> clf.fit(X, Y)\nPipeline(steps=[('standardscaler', StandardScaler()),\n                ('sgdclassifier', SGDClassifier())])\n>>> print(clf.predict([[-0.8, -1]]))\n[1]"
      },
      "methods": [
        {
          "name": "decision_function",
          "signature": "decision_function(self, X)",
          "docstring": {
            "description": "Predict confidence scores for samples.\n\nThe confidence score for a sample is proportional to the signed\ndistance of that sample to the hyperplane.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The data matrix for which we want to get the confidence scores."
              }
            },
            "returns": "scores : ndarray of shape (n_samples,) or (n_samples, n_classes)\n    Confidence scores per `(n_samples, n_classes)` combination. In the\n    binary case, confidence score for `self.classes_[1]` where >0 means\n    this class would be predicted.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "densify",
          "signature": "densify(self)",
          "docstring": {
            "description": "Convert coefficient matrix to dense array format.\n\nConverts the ``coef_`` member (back) to a numpy.ndarray. This is the\ndefault format of ``coef_`` and is required for fitting, so calling\nthis method is only required on models that have previously been\nsparsified; otherwise, it is a no-op.",
            "parameters": {},
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, coef_init=None, intercept_init=None, sample_weight=None)",
          "docstring": {
            "description": "Fit linear model with Stochastic Gradient Descent.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "ndarray of shape (n_samples,)",
                "description": "Target values."
              },
              "coef_init": {
                "type": "ndarray of shape (n_classes, n_features), default=None",
                "description": "The initial coefficients to warm-start the optimization."
              },
              "intercept_init": {
                "type": "ndarray of shape (n_classes,), default=None",
                "description": "The initial intercept to warm-start the optimization."
              },
              "sample_weight": {
                "type": "array-like, shape (n_samples,), default=None",
                "description": "Weights applied to individual samples.\n    If not provided, uniform weights are assumed. These weights will\n    be multiplied with class_weight (passed through the\n    constructor) if class_weight is specified."
              }
            },
            "returns": "self : object\n    Returns an instance of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "partial_fit",
          "signature": "partial_fit(self, X, y, classes=None, sample_weight=None)",
          "docstring": {
            "description": "Perform one epoch of stochastic gradient descent on given samples.\n\nInternally, this method uses ``max_iter = 1``. Therefore, it is not\nguaranteed that a minimum of the cost function is reached after calling\nit once. Matters such as objective convergence, early stopping, and\nlearning rate adjustments should be handled by the user.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                "description": "Subset of the training data."
              },
              "y": {
                "type": "ndarray of shape (n_samples,)",
                "description": "Subset of the target values."
              },
              "classes": {
                "type": "ndarray of shape (n_classes,), default=None",
                "description": "Classes across all calls to partial_fit.\n    Can be obtained by via `np.unique(y_all)`, where y_all is the\n    target vector of the entire dataset.\n    This argument is required for the first call to partial_fit\n    and can be omitted in the subsequent calls.\n    Note that y doesn't need to contain all labels in `classes`."
              },
              "sample_weight": {
                "type": "array-like, shape (n_samples,), default=None",
                "description": "Weights applied to individual samples.\n    If not provided, uniform weights are assumed."
              }
            },
            "returns": "self : object\n    Returns an instance of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict class labels for samples in X.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The data matrix for which we want to get the predictions."
              }
            },
            "returns": "y_pred : ndarray of shape (n_samples,)\n    Vector containing the class labels for each sample.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_log_proba",
          "signature": "predict_log_proba(self, X)",
          "docstring": {
            "description": "Log of probability estimates.\n\nThis method is only available for log loss and modified Huber loss.\n\nWhen loss=\"modified_huber\", probability estimates may be hard zeros\nand ones, so taking the logarithm is not possible.\n\nSee ``predict_proba`` for details.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Input data for prediction."
              }
            },
            "returns": "T : array-like, shape (n_samples, n_classes)\n    Returns the log-probability of the sample for each class in the\n    model, where classes are ordered as they are in\n    `self.classes_`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_proba",
          "signature": "predict_proba(self, X)",
          "docstring": {
            "description": "Probability estimates.\n\nThis method is only available for log loss and modified Huber loss.\n\nMulticlass probability estimates are derived from binary (one-vs.-rest)\nestimates by simple normalization, as recommended by Zadrozny and\nElkan.\n\nBinary probability estimates for loss=\"modified_huber\" are given by\n(clip(decision_function(X), -1, 1) + 1) / 2. For other loss functions\nit is necessary to perform proper probability calibration by wrapping\nthe classifier with\n:class:`~sklearn.calibration.CalibratedClassifierCV` instead.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                "description": "Input data for prediction."
              }
            },
            "returns": "ndarray of shape (n_samples, n_classes)\n    Returns the probability of the sample for each class in the model,\n    where classes are ordered as they are in `self.classes_`.\n\nReferences\n----------\nZadrozny and Elkan, \"Transforming classifier scores into multiclass\nprobability estimates\", SIGKDD'02,\nhttps://dl.acm.org/doi/pdf/10.1145/775047.775151\n\nThe justification for the formula in the loss=\"modified_huber\"\ncase is in the appendix B in:\nhttp://jmlr.csail.mit.edu/papers/volume2/zhang02c/zhang02c.pdf",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the mean accuracy on the given test data and labels.\n\nIn multi-label classification, this is the subset accuracy\nwhich is a harsh metric since you require for each sample that\neach label set be correctly predicted.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True labels for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._stochastic_gradient.SGDClassifier, *, coef_init: Union[bool, NoneType, str] = '$UNCHANGED$', intercept_init: Union[bool, NoneType, str] = '$UNCHANGED$', sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._stochastic_gradient.SGDClassifier",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "coef_init": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``coef_init`` parameter in ``fit``."
              },
              "intercept_init": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``intercept_init`` parameter in ``fit``."
              },
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_partial_fit_request",
          "signature": "set_partial_fit_request(self: sklearn.linear_model._stochastic_gradient.SGDClassifier, *, classes: Union[bool, NoneType, str] = '$UNCHANGED$', sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._stochastic_gradient.SGDClassifier",
          "docstring": {
            "description": "Request metadata passed to the ``partial_fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``partial_fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``partial_fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "classes": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``classes`` parameter in ``partial_fit``."
              },
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``partial_fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._stochastic_gradient.SGDClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._stochastic_gradient.SGDClassifier",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sparsify",
          "signature": "sparsify(self)",
          "docstring": {
            "description": "Convert coefficient matrix to sparse format.\n\nConverts the ``coef_`` member to a scipy.sparse matrix, which for\nL1-regularized models can be much more memory- and storage-efficient\nthan the usual numpy.ndarray representation.\n\nThe ``intercept_`` member is not converted.",
            "parameters": {},
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "For non-sparse models, i.e. when there are not many zeros in ``coef_``,\nthis may actually *increase* memory usage, so use this method with\ncare. A rule of thumb is that the number of zero elements, which can\nbe computed with ``(coef_ == 0).sum()``, must be more than 50% for this\nto provide significant benefits.\n\nAfter calling this method, further fitting with the partial_fit\nmethod (if any) will not work until you call densify.",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "SGDOneClassSVM",
      "docstring": {
        "description": "Solves linear One-Class SVM using Stochastic Gradient Descent.\n\nThis implementation is meant to be used with a kernel approximation\ntechnique (e.g. `sklearn.kernel_approximation.Nystroem`) to obtain results\nsimilar to `sklearn.svm.OneClassSVM` which uses a Gaussian kernel by\ndefault.\n\nRead more in the :ref:`User Guide <sgd_online_one_class_svm>`.\n\n.. versionadded:: 1.0",
        "parameters": {
          "nu": {
            "type": "float, default=0.5",
            "description": "The nu parameter of the One Class SVM: an upper bound on the\n    fraction of training errors and a lower bound of the fraction of\n    support vectors. Should be in the interval (0, 1]. By default 0.5\n    will be taken."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether the intercept should be estimated or not. Defaults to True."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of passes over the training data (aka epochs).\n    It only impacts the behavior in the ``fit`` method, and not the\n    `partial_fit`. Defaults to 1000.\n    Values must be in the range `[1, inf)`."
          },
          "tol": {
            "type": "float or None, default=1e-3",
            "description": "The stopping criterion. If it is not None, the iterations will stop\n    when (loss > previous_loss - tol). Defaults to 1e-3.\n    Values must be in the range `[0.0, inf)`."
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": "Whether or not the training data should be shuffled after each epoch.\n    Defaults to True."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "The verbosity level."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "The seed of the pseudo random number generator to use when shuffling\n    the data.  If int, random_state is the seed used by the random number\n    generator; If RandomState instance, random_state is the random number\n    generator; If None, the random number generator is the RandomState\n    instance used by `np.random`."
          },
          "learning_rate": {
            "type": "{'constant', 'optimal', 'invscaling', 'adaptive'}, default='optimal'",
            "description": "The learning rate schedule to use with `fit`. (If using `partial_fit`,\n    learning rate must be controlled directly).\n\n    - 'constant': `eta = eta0`\n    - 'optimal': `eta = 1.0 / (alpha * (t + t0))`\n      where t0 is chosen by a heuristic proposed by Leon Bottou.\n    - 'invscaling': `eta = eta0 / pow(t, power_t)`\n    - 'adaptive': eta = eta0, as long as the training keeps decreasing.\n      Each time n_iter_no_change consecutive epochs fail to decrease the\n      training loss by tol or fail to increase validation score by tol if\n      early_stopping is True, the current learning rate is divided by 5."
          },
          "eta0": {
            "type": "float, default=0.0",
            "description": "The initial learning rate for the 'constant', 'invscaling' or\n    'adaptive' schedules. The default value is 0.0 as eta0 is not used by\n    the default schedule 'optimal'.\n    Values must be in the range `[0.0, inf)`."
          },
          "power_t": {
            "type": "float, default=0.5",
            "description": "The exponent for inverse scaling learning rate.\n    Values must be in the range `(-inf, inf)`."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to True, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution.\n    See :term:`the Glossary <warm_start>`.\n\n    Repeatedly calling fit or partial_fit when warm_start is True can\n    result in a different solution than when calling fit a single time\n    because of the way the data is shuffled.\n    If a dynamic learning rate is used, the learning rate is adapted\n    depending on the number of samples already seen. Calling ``fit`` resets\n    this counter, while ``partial_fit``  will result in increasing the\n    existing counter."
          },
          "average": {
            "type": "bool or int, default=False",
            "description": "When set to True, computes the averaged SGD weights and stores the\n    result in the ``coef_`` attribute. If set to an int greater than 1,\n    averaging will begin once the total number of samples seen reaches\n    average. So ``average=10`` will begin averaging after seeing 10\n    samples.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (1, n_features)",
            "description": "Weights assigned to the features."
          },
          "offset_": {
            "type": "ndarray of shape (1,)",
            "description": "Offset used to define the decision function from the raw scores.\n    We have the relation: decision_function = score_samples - offset."
          },
          "n_iter_": {
            "type": "int",
            "description": "The actual number of iterations to reach the stopping criterion."
          },
          "t_": {
            "type": "int",
            "description": "Number of weight updates performed during training.\n    Same as ``(n_iter_ * n_samples + 1)``."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "sklearn.svm.OneClassSVM : Unsupervised Outlier Detection.",
        "notes": "This estimator has a linear complexity in the number of training samples\nand is thus better suited than the `sklearn.svm.OneClassSVM`\nimplementation for datasets with a large number of training samples (say\n> 10,000).",
        "examples": ">>> import numpy as np\n>>> from sklearn import linear_model\n>>> X = np.array([[-1, -1], [-2, -1], [1, 1], [2, 1]])\n>>> clf = linear_model.SGDOneClassSVM(random_state=42)\n>>> clf.fit(X)\nSGDOneClassSVM(random_state=42)\n\n>>> print(clf.predict([[4, 4]]))\n[1]"
      },
      "methods": [
        {
          "name": "decision_function",
          "signature": "decision_function(self, X)",
          "docstring": {
            "description": "Signed distance to the separating hyperplane.\n\nSigned distance is positive for an inlier and negative for an\noutlier.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                "description": "Testing data."
              }
            },
            "returns": "dec : array-like, shape (n_samples,)\n    Decision function values of the samples.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "densify",
          "signature": "densify(self)",
          "docstring": {
            "description": "Convert coefficient matrix to dense array format.\n\nConverts the ``coef_`` member (back) to a numpy.ndarray. This is the\ndefault format of ``coef_`` and is required for fitting, so calling\nthis method is only required on models that have previously been\nsparsified; otherwise, it is a no-op.",
            "parameters": {},
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y=None, coef_init=None, offset_init=None, sample_weight=None)",
          "docstring": {
            "description": "Fit linear One-Class SVM with Stochastic Gradient Descent.\n\nThis solves an equivalent optimization problem of the\nOne-Class SVM primal optimization problem and returns a weight vector\nw and an offset rho such that the decision function is given by\n<w, x> - rho.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present for API consistency by convention."
              },
              "coef_init": {
                "type": "array, shape (n_classes, n_features)",
                "description": "The initial coefficients to warm-start the optimization."
              },
              "offset_init": {
                "type": "array, shape (n_classes,)",
                "description": "The initial offset to warm-start the optimization."
              },
              "sample_weight": {
                "type": "array-like, shape (n_samples,), optional",
                "description": "Weights applied to individual samples.\n    If not provided, uniform weights are assumed. These weights will\n    be multiplied with class_weight (passed through the\n    constructor) if class_weight is specified."
              }
            },
            "returns": "self : object\n    Returns a fitted instance of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit_predict",
          "signature": "fit_predict(self, X, y=None, **kwargs)",
          "docstring": {
            "description": "Perform fit on X and returns labels for X.\n\nReturns -1 for outliers and 1 for inliers.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present for API consistency by convention."
              },
              "**kwargs": {
                "type": "dict",
                "description": "Arguments to be passed to ``fit``.\n\n    .. versionadded:: 1.4"
              }
            },
            "returns": "y : ndarray of shape (n_samples,)\n    1 for inliers, -1 for outliers.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "partial_fit",
          "signature": "partial_fit(self, X, y=None, sample_weight=None)",
          "docstring": {
            "description": "Fit linear One-Class SVM with Stochastic Gradient Descent.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                "description": "Subset of the training data."
              },
              "y": {
                "type": "Ignored",
                "description": "Not used, present for API consistency by convention."
              },
              "sample_weight": {
                "type": "array-like, shape (n_samples,), optional",
                "description": "Weights applied to individual samples.\n    If not provided, uniform weights are assumed."
              }
            },
            "returns": "self : object\n    Returns a fitted instance of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Return labels (1 inlier, -1 outlier) of the samples.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                "description": "Testing data."
              }
            },
            "returns": "y : array, shape (n_samples,)\n    Labels of the samples.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score_samples",
          "signature": "score_samples(self, X)",
          "docstring": {
            "description": "Raw scoring function of the samples.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                "description": "Testing data."
              }
            },
            "returns": "score_samples : array-like, shape (n_samples,)\n    Unshiffted scoring function values of the samples.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._stochastic_gradient.SGDOneClassSVM, *, coef_init: Union[bool, NoneType, str] = '$UNCHANGED$', offset_init: Union[bool, NoneType, str] = '$UNCHANGED$', sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._stochastic_gradient.SGDOneClassSVM",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "coef_init": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``coef_init`` parameter in ``fit``."
              },
              "offset_init": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``offset_init`` parameter in ``fit``."
              },
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_partial_fit_request",
          "signature": "set_partial_fit_request(self: sklearn.linear_model._stochastic_gradient.SGDOneClassSVM, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._stochastic_gradient.SGDOneClassSVM",
          "docstring": {
            "description": "Request metadata passed to the ``partial_fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``partial_fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``partial_fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``partial_fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sparsify",
          "signature": "sparsify(self)",
          "docstring": {
            "description": "Convert coefficient matrix to sparse format.\n\nConverts the ``coef_`` member to a scipy.sparse matrix, which for\nL1-regularized models can be much more memory- and storage-efficient\nthan the usual numpy.ndarray representation.\n\nThe ``intercept_`` member is not converted.",
            "parameters": {},
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "For non-sparse models, i.e. when there are not many zeros in ``coef_``,\nthis may actually *increase* memory usage, so use this method with\ncare. A rule of thumb is that the number of zero elements, which can\nbe computed with ``(coef_ == 0).sum()``, must be more than 50% for this\nto provide significant benefits.\n\nAfter calling this method, further fitting with the partial_fit\nmethod (if any) will not work until you call densify.",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "SGDRegressor",
      "docstring": {
        "description": "Linear model fitted by minimizing a regularized empirical loss with SGD.\n\nSGD stands for Stochastic Gradient Descent: the gradient of the loss is\nestimated each sample at a time and the model is updated along the way with\na decreasing strength schedule (aka learning rate).\n\nThe regularizer is a penalty added to the loss function that shrinks model\nparameters towards the zero vector using either the squared euclidean norm\nL2 or the absolute norm L1 or a combination of both (Elastic Net). If the\nparameter update crosses the 0.0 value because of the regularizer, the\nupdate is truncated to 0.0 to allow for learning sparse models and achieve\nonline feature selection.\n\nThis implementation works with data represented as dense numpy arrays of\nfloating point values for the features.\n\nRead more in the :ref:`User Guide <sgd>`.",
        "parameters": {
          "loss": {
            "type": "str, default='squared_error'",
            "description": "The loss function to be used. The possible values are 'squared_error',\n    'huber', 'epsilon_insensitive', or 'squared_epsilon_insensitive'\n\n    The 'squared_error' refers to the ordinary least squares fit.\n    'huber' modifies 'squared_error' to focus less on getting outliers\n    correct by switching from squared to linear loss past a distance of\n    epsilon. 'epsilon_insensitive' ignores errors less than epsilon and is\n    linear past that; this is the loss function used in SVR.\n    'squared_epsilon_insensitive' is the same but becomes squared loss past\n    a tolerance of epsilon.\n\n    More details about the losses formulas can be found in the\n    :ref:`User Guide <sgd_mathematical_formulation>`."
          },
          "penalty": {
            "type": "{'l2', 'l1', 'elasticnet', None}, default='l2'",
            "description": "The penalty (aka regularization term) to be used. Defaults to 'l2'\n    which is the standard regularizer for linear SVM models. 'l1' and\n    'elasticnet' might bring sparsity to the model (feature selection)\n    not achievable with 'l2'. No penalty is added when set to `None`.\n\n    You can see a visualisation of the penalties in\n    :ref:`sphx_glr_auto_examples_linear_model_plot_sgd_penalties.py`."
          },
          "alpha": {
            "type": "float, default=0.0001",
            "description": "Constant that multiplies the regularization term. The higher the\n    value, the stronger the regularization. Also used to compute the\n    learning rate when `learning_rate` is set to 'optimal'.\n    Values must be in the range `[0.0, inf)`."
          },
          "l1_ratio": {
            "type": "float, default=0.15",
            "description": "The Elastic Net mixing parameter, with 0 <= l1_ratio <= 1.\n    l1_ratio=0 corresponds to L2 penalty, l1_ratio=1 to L1.\n    Only used if `penalty` is 'elasticnet'.\n    Values must be in the range `[0.0, 1.0]`."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether the intercept should be estimated or not. If False, the\n    data is assumed to be already centered."
          },
          "max_iter": {
            "type": "int, default=1000",
            "description": "The maximum number of passes over the training data (aka epochs).\n    It only impacts the behavior in the ``fit`` method, and not the\n    :meth:`partial_fit` method.\n    Values must be in the range `[1, inf)`.\n\n    .. versionadded:: 0.19"
          },
          "tol": {
            "type": "float or None, default=1e-3",
            "description": "The stopping criterion. If it is not None, training will stop\n    when (loss > best_loss - tol) for ``n_iter_no_change`` consecutive\n    epochs.\n    Convergence is checked against the training loss or the\n    validation loss depending on the `early_stopping` parameter.\n    Values must be in the range `[0.0, inf)`.\n\n    .. versionadded:: 0.19"
          },
          "shuffle": {
            "type": "bool, default=True",
            "description": "Whether or not the training data should be shuffled after each epoch."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "The verbosity level.\n    Values must be in the range `[0, inf)`."
          },
          "epsilon": {
            "type": "float, default=0.1",
            "description": "Epsilon in the epsilon-insensitive loss functions; only if `loss` is\n    'huber', 'epsilon_insensitive', or 'squared_epsilon_insensitive'.\n    For 'huber', determines the threshold at which it becomes less\n    important to get the prediction exactly right.\n    For epsilon-insensitive, any differences between the current prediction\n    and the correct label are ignored if they are less than this threshold.\n    Values must be in the range `[0.0, inf)`."
          },
          "random_state": {
            "type": "int, RandomState instance, default=None",
            "description": "Used for shuffling the data, when ``shuffle`` is set to ``True``.\n    Pass an int for reproducible output across multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "learning_rate": {
            "type": "str, default='invscaling'",
            "description": "The learning rate schedule:\n\n    - 'constant': `eta = eta0`\n    - 'optimal': `eta = 1.0 / (alpha * (t + t0))`\n      where t0 is chosen by a heuristic proposed by Leon Bottou.\n    - 'invscaling': `eta = eta0 / pow(t, power_t)`\n    - 'adaptive': eta = eta0, as long as the training keeps decreasing.\n      Each time n_iter_no_change consecutive epochs fail to decrease the\n      training loss by tol or fail to increase validation score by tol if\n      early_stopping is True, the current learning rate is divided by 5.\n\n    .. versionadded:: 0.20\n        Added 'adaptive' option."
          },
          "eta0": {
            "type": "float, default=0.01",
            "description": "The initial learning rate for the 'constant', 'invscaling' or\n    'adaptive' schedules. The default value is 0.01.\n    Values must be in the range `[0.0, inf)`."
          },
          "power_t": {
            "type": "float, default=0.25",
            "description": "The exponent for inverse scaling learning rate.\n    Values must be in the range `(-inf, inf)`."
          },
          "early_stopping": {
            "type": "bool, default=False",
            "description": "Whether to use early stopping to terminate training when validation\n    score is not improving. If set to True, it will automatically set aside\n    a fraction of training data as validation and terminate\n    training when validation score returned by the `score` method is not\n    improving by at least `tol` for `n_iter_no_change` consecutive\n    epochs.\n\n    See :ref:`sphx_glr_auto_examples_linear_model_plot_sgd_early_stopping.py` for an\n    example of the effects of early stopping.\n\n    .. versionadded:: 0.20\n        Added 'early_stopping' option"
          },
          "validation_fraction": {
            "type": "float, default=0.1",
            "description": "The proportion of training data to set aside as validation set for\n    early stopping. Must be between 0 and 1.\n    Only used if `early_stopping` is True.\n    Values must be in the range `(0.0, 1.0)`.\n\n    .. versionadded:: 0.20\n        Added 'validation_fraction' option"
          },
          "n_iter_no_change": {
            "type": "int, default=5",
            "description": "Number of iterations with no improvement to wait before stopping\n    fitting.\n    Convergence is checked against the training loss or the\n    validation loss depending on the `early_stopping` parameter.\n    Integer values must be in the range `[1, max_iter)`.\n\n    .. versionadded:: 0.20\n        Added 'n_iter_no_change' option"
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "When set to True, reuse the solution of the previous call to fit as\n    initialization, otherwise, just erase the previous solution.\n    See :term:`the Glossary <warm_start>`.\n\n    Repeatedly calling fit or partial_fit when warm_start is True can\n    result in a different solution than when calling fit a single time\n    because of the way the data is shuffled.\n    If a dynamic learning rate is used, the learning rate is adapted\n    depending on the number of samples already seen. Calling ``fit`` resets\n    this counter, while ``partial_fit``  will result in increasing the\n    existing counter."
          },
          "average": {
            "type": "bool or int, default=False",
            "description": "When set to True, computes the averaged SGD weights across all\n    updates and stores the result in the ``coef_`` attribute. If set to\n    an int greater than 1, averaging will begin once the total number of\n    samples seen reaches `average`. So ``average=10`` will begin\n    averaging after seeing 10 samples.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (n_features,)",
            "description": "Weights assigned to the features."
          },
          "intercept_": {
            "type": "ndarray of shape (1,)",
            "description": "The intercept term."
          },
          "n_iter_": {
            "type": "int",
            "description": "The actual number of iterations before reaching the stopping criterion."
          },
          "t_": {
            "type": "int",
            "description": "Number of weight updates performed during training.\n    Same as ``(n_iter_ * n_samples + 1)``."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "HuberRegressor : Linear regression model that is robust to outliers.\nLars : Least Angle Regression model.\nLasso : Linear Model trained with L1 prior as regularizer.\nRANSACRegressor : RANSAC (RANdom SAmple Consensus) algorithm.\nRidge : Linear least squares with l2 regularization.\nsklearn.svm.SVR : Epsilon-Support Vector Regression.\nTheilSenRegressor : Theil-Sen Estimator robust multivariate regression model.",
        "notes": "",
        "examples": ">>> import numpy as np\n>>> from sklearn.linear_model import SGDRegressor\n>>> from sklearn.pipeline import make_pipeline\n>>> from sklearn.preprocessing import StandardScaler\n>>> n_samples, n_features = 10, 5\n>>> rng = np.random.RandomState(0)\n>>> y = rng.randn(n_samples)\n>>> X = rng.randn(n_samples, n_features)\n>>> # Always scale the input. The most convenient way is to use a pipeline.\n>>> reg = make_pipeline(StandardScaler(),\n...                     SGDRegressor(max_iter=1000, tol=1e-3))\n>>> reg.fit(X, y)\nPipeline(steps=[('standardscaler', StandardScaler()),\n                ('sgdregressor', SGDRegressor())])"
      },
      "methods": [
        {
          "name": "densify",
          "signature": "densify(self)",
          "docstring": {
            "description": "Convert coefficient matrix to dense array format.\n\nConverts the ``coef_`` member (back) to a numpy.ndarray. This is the\ndefault format of ``coef_`` and is required for fitting, so calling\nthis method is only required on models that have previously been\nsparsified; otherwise, it is a no-op.",
            "parameters": {},
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, coef_init=None, intercept_init=None, sample_weight=None)",
          "docstring": {
            "description": "Fit linear model with Stochastic Gradient Descent.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "ndarray of shape (n_samples,)",
                "description": "Target values."
              },
              "coef_init": {
                "type": "ndarray of shape (n_features,), default=None",
                "description": "The initial coefficients to warm-start the optimization."
              },
              "intercept_init": {
                "type": "ndarray of shape (1,), default=None",
                "description": "The initial intercept to warm-start the optimization."
              },
              "sample_weight": {
                "type": "array-like, shape (n_samples,), default=None",
                "description": "Weights applied to individual samples (1. for unweighted)."
              }
            },
            "returns": "self : object\n    Fitted `SGDRegressor` estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "partial_fit",
          "signature": "partial_fit(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Perform one epoch of stochastic gradient descent on given samples.\n\nInternally, this method uses ``max_iter = 1``. Therefore, it is not\nguaranteed that a minimum of the cost function is reached after calling\nit once. Matters such as objective convergence and early stopping\nshould be handled by the user.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                "description": "Subset of training data."
              },
              "y": {
                "type": "numpy array of shape (n_samples,)",
                "description": "Subset of target values."
              },
              "sample_weight": {
                "type": "array-like, shape (n_samples,), default=None",
                "description": "Weights applied to individual samples.\n    If not provided, uniform weights are assumed."
              }
            },
            "returns": "self : object\n    Returns an instance of self.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix}, shape (n_samples, n_features)",
                "description": "Input data."
              }
            },
            "returns": "ndarray of shape (n_samples,)\n   Predicted target values per element in X.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._stochastic_gradient.SGDRegressor, *, coef_init: Union[bool, NoneType, str] = '$UNCHANGED$', intercept_init: Union[bool, NoneType, str] = '$UNCHANGED$', sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._stochastic_gradient.SGDRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "coef_init": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``coef_init`` parameter in ``fit``."
              },
              "intercept_init": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``intercept_init`` parameter in ``fit``."
              },
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_partial_fit_request",
          "signature": "set_partial_fit_request(self: sklearn.linear_model._stochastic_gradient.SGDRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._stochastic_gradient.SGDRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``partial_fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``partial_fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``partial_fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``partial_fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._stochastic_gradient.SGDRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._stochastic_gradient.SGDRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "sparsify",
          "signature": "sparsify(self)",
          "docstring": {
            "description": "Convert coefficient matrix to sparse format.\n\nConverts the ``coef_`` member to a scipy.sparse matrix, which for\nL1-regularized models can be much more memory- and storage-efficient\nthan the usual numpy.ndarray representation.\n\nThe ``intercept_`` member is not converted.",
            "parameters": {},
            "returns": "self\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "For non-sparse models, i.e. when there are not many zeros in ``coef_``,\nthis may actually *increase* memory usage, so use this method with\ncare. A rule of thumb is that the number of zero elements, which can\nbe computed with ``(coef_ == 0).sum()``, must be more than 50% for this\nto provide significant benefits.\n\nAfter calling this method, further fitting with the partial_fit\nmethod (if any) will not work until you call densify.",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "TheilSenRegressor",
      "docstring": {
        "description": "Theil-Sen Estimator: robust multivariate regression model.\n\nThe algorithm calculates least square solutions on subsets with size\nn_subsamples of the samples in X. Any value of n_subsamples between the\nnumber of features and samples leads to an estimator with a compromise\nbetween robustness and efficiency. Since the number of least square\nsolutions is \"n_samples choose n_subsamples\", it can be extremely large\nand can therefore be limited with max_subpopulation. If this limit is\nreached, the subsets are chosen randomly. In a final step, the spatial\nmedian (or L1 median) is calculated of all least square solutions.\n\nRead more in the :ref:`User Guide <theil_sen_regression>`.",
        "parameters": {
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Whether to calculate the intercept for this model. If set\n    to false, no intercept will be used in calculations."
          },
          "copy_X": {
            "type": "bool, default=True",
            "description": "If True, X will be copied; else, it may be overwritten.\n\n    .. deprecated:: 1.6\n        `copy_X` was deprecated in 1.6 and will be removed in 1.8.\n        It has no effect as a copy is always made."
          },
          "max_subpopulation": {
            "type": "int, default=1e4",
            "description": "Instead of computing with a set of cardinality 'n choose k', where n is\n    the number of samples and k is the number of subsamples (at least\n    number of features), consider only a stochastic subpopulation of a\n    given maximal size if 'n choose k' is larger than max_subpopulation.\n    For other than small problem sizes this parameter will determine\n    memory usage and runtime if n_subsamples is not changed. Note that the\n    data type should be int but floats such as 1e4 can be accepted too."
          },
          "n_subsamples": {
            "type": "int, default=None",
            "description": "Number of samples to calculate the parameters. This is at least the\n    number of features (plus 1 if fit_intercept=True) and the number of\n    samples as a maximum. A lower number leads to a higher breakdown\n    point and a low efficiency while a high number leads to a low\n    breakdown point and a high efficiency. If None, take the\n    minimum number of subsamples leading to maximal robustness.\n    If n_subsamples is set to n_samples, Theil-Sen is identical to least\n    squares."
          },
          "max_iter": {
            "type": "int, default=300",
            "description": "Maximum number of iterations for the calculation of spatial median."
          },
          "tol": {
            "type": "float, default=1e-3",
            "description": "Tolerance when calculating spatial median."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "A random number generator instance to define the state of the random\n    permutations generator. Pass an int for reproducible output across\n    multiple function calls.\n    See :term:`Glossary <random_state>`."
          },
          "n_jobs": {
            "type": "int, default=None",
            "description": "Number of CPUs to use during the cross validation.\n    ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n    ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n    for more details."
          },
          "verbose": {
            "type": "bool, default=False",
            "description": "Verbose mode when fitting the model.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "ndarray of shape (n_features,)",
            "description": "Coefficients of the regression model (median of distribution)."
          },
          "intercept_": {
            "type": "float",
            "description": "Estimated intercept of regression model."
          },
          "breakdown_": {
            "type": "float",
            "description": "Approximated breakdown point."
          },
          "n_iter_": {
            "type": "int",
            "description": "Number of iterations needed for the spatial median."
          },
          "n_subpopulation_": {
            "type": "int",
            "description": "Number of combinations taken into account from 'n choose k', where n is\n    the number of samples and k is the number of subsamples."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "HuberRegressor : Linear regression model that is robust to outliers.\nRANSACRegressor : RANSAC (RANdom SAmple Consensus) algorithm.\nSGDRegressor : Fitted by minimizing a regularized empirical loss with SGD.\n\nReferences\n----------\n- Theil-Sen Estimators in a Multiple Linear Regression Model, 2009\n  Xin Dang, Hanxiang Peng, Xueqin Wang and Heping Zhang\n  http://home.olemiss.edu/~xdang/papers/MTSE.pdf",
        "notes": "",
        "examples": ">>> from sklearn.linear_model import TheilSenRegressor\n>>> from sklearn.datasets import make_regression\n>>> X, y = make_regression(\n...     n_samples=200, n_features=2, noise=4.0, random_state=0)\n>>> reg = TheilSenRegressor(random_state=0).fit(X, y)\n>>> reg.score(X, y)\n0.9884...\n>>> reg.predict(X[:1,])\narray([-31.5871...])"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y)",
          "docstring": {
            "description": "Fit linear model.",
            "parameters": {
              "X": {
                "type": "ndarray of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "ndarray of shape (n_samples,)",
                "description": "Target values."
              }
            },
            "returns": "self : returns an instance of self.\n    Fitted `TheilSenRegressor` estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using the linear model.",
            "parameters": {
              "X": {
                "type": "array-like or sparse matrix, shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "C : array, shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._theil_sen.TheilSenRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._theil_sen.TheilSenRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "TweedieRegressor",
      "docstring": {
        "description": "Generalized Linear Model with a Tweedie distribution.\n\nThis estimator can be used to model different GLMs depending on the\n``power`` parameter, which determines the underlying distribution.\n\nRead more in the :ref:`User Guide <Generalized_linear_models>`.\n\n.. versionadded:: 0.23",
        "parameters": {
          "power": {
            "type": "float, default=0",
            "description": "The power determines the underlying target distribution according\n        to the following table:\n\n        +-------+------------------------+\n        | Power | Distribution           |\n        +=======+========================+\n        | 0     | Normal                 |\n        +-------+------------------------+\n        | 1     | Poisson                |\n        +-------+------------------------+\n        | (1,2) | Compound Poisson Gamma |\n        +-------+------------------------+\n        | 2     | Gamma                  |\n        +-------+------------------------+\n        | 3     | Inverse Gaussian       |\n        +-------+------------------------+\n\n        For ``0 < power < 1``, no distribution exists."
          },
          "alpha": {
            "type": "float, default=1",
            "description": "Constant that multiplies the L2 penalty term and determines the\n    regularization strength. ``alpha = 0`` is equivalent to unpenalized\n    GLMs. In this case, the design matrix `X` must have full column rank\n    (no collinearities).\n    Values of `alpha` must be in the range `[0.0, inf)`."
          },
          "fit_intercept": {
            "type": "bool, default=True",
            "description": "Specifies if a constant (a.k.a. bias or intercept) should be\n    added to the linear predictor (`X @ coef + intercept`)."
          },
          "link": {
            "type": "{'auto', 'identity', 'log'}, default='auto'",
            "description": "The link function of the GLM, i.e. mapping from linear predictor\n    `X @ coeff + intercept` to prediction `y_pred`. Option 'auto' sets\n    the link depending on the chosen `power` parameter as follows:\n\n    - 'identity' for ``power <= 0``, e.g. for the Normal distribution\n    - 'log' for ``power > 0``, e.g. for Poisson, Gamma and Inverse Gaussian\n      distributions"
          },
          "solver": {
            "type": "{'lbfgs', 'newton-cholesky'}, default='lbfgs'",
            "description": "Algorithm to use in the optimization problem:\n\n    'lbfgs'\n        Calls scipy's L-BFGS-B optimizer.\n\n    'newton-cholesky'\n        Uses Newton-Raphson steps (in arbitrary precision arithmetic equivalent to\n        iterated reweighted least squares) with an inner Cholesky based solver.\n        This solver is a good choice for `n_samples` >> `n_features`, especially\n        with one-hot encoded categorical features with rare categories. Be aware\n        that the memory usage of this solver has a quadratic dependency on\n        `n_features` because it explicitly computes the Hessian matrix.\n\n        .. versionadded:: 1.2"
          },
          "max_iter": {
            "type": "int, default=100",
            "description": "The maximal number of iterations for the solver.\n    Values must be in the range `[1, inf)`."
          },
          "tol": {
            "type": "float, default=1e-4",
            "description": "Stopping criterion. For the lbfgs solver,\n    the iteration will stop when ``max{|g_j|, j = 1, ..., d} <= tol``\n    where ``g_j`` is the j-th component of the gradient (derivative) of\n    the objective function.\n    Values must be in the range `(0.0, inf)`."
          },
          "warm_start": {
            "type": "bool, default=False",
            "description": "If set to ``True``, reuse the solution of the previous call to ``fit``\n    as initialization for ``coef_`` and ``intercept_`` ."
          },
          "verbose": {
            "type": "int, default=0",
            "description": "For the lbfgs solver set verbose to any positive number for verbosity.\n    Values must be in the range `[0, inf)`.\n\nAttributes\n----------"
          },
          "coef_": {
            "type": "array of shape (n_features,)",
            "description": "Estimated coefficients for the linear predictor (`X @ coef_ +\n    intercept_`) in the GLM."
          },
          "intercept_": {
            "type": "float",
            "description": "Intercept (a.k.a. bias) added to linear predictor."
          },
          "n_iter_": {
            "type": "int",
            "description": "Actual number of iterations used in the solver."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "PoissonRegressor : Generalized Linear Model with a Poisson distribution.\nGammaRegressor : Generalized Linear Model with a Gamma distribution.",
        "notes": "",
        "examples": ">>> from sklearn import linear_model\n>>> clf = linear_model.TweedieRegressor()\n>>> X = [[1, 2], [2, 3], [3, 4], [4, 3]]\n>>> y = [2, 3.5, 5, 5.5]\n>>> clf.fit(X, y)\nTweedieRegressor()\n>>> clf.score(X, y)\nnp.float64(0.839...)\n>>> clf.coef_\narray([0.599..., 0.299...])\n>>> clf.intercept_\nnp.float64(1.600...)\n>>> clf.predict([[1, 1], [3, 4]])\narray([2.500..., 4.599...])"
      },
      "methods": [
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Fit a Generalized Linear Model.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Training data."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "Target values."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "self : object\n    Fitted model.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X)",
          "docstring": {
            "description": "Predict using GLM with feature matrix X.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Samples."
              }
            },
            "returns": "y_pred : array of shape (n_samples,)\n    Returns predicted values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Compute D^2, the percentage of deviance explained.\n\nD^2 is a generalization of the coefficient of determination R^2.\nR^2 uses squared error and D^2 uses the deviance of this GLM, see the\n:ref:`User Guide <regression_metrics>`.\n\nD^2 is defined as\n:math:`D^2 = 1-\\frac{D(y_{true},y_{pred})}{D_{null}}`,\n:math:`D_{null}` is the null deviance, i.e. the deviance of a model\nwith intercept alone, which corresponds to :math:`y_{pred} = \\bar{y}`.\nThe mean :math:`\\bar{y}` is averaged by sample_weight.\nBest possible score is 1.0 and it can be negative (because the model\ncan be arbitrarily worse).",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "Test samples."
              },
              "y": {
                "type": "array-like of shape (n_samples,)",
                "description": "True values of target."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    D^2 of self.predict(X) w.r.t. y.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.linear_model._glm.glm.TweedieRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._glm.glm.TweedieRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.linear_model._glm.glm.TweedieRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.linear_model._glm.glm.TweedieRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    }
  ],
  "constants": []
}