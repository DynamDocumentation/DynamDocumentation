{
  "description": "Decision tree based models for classification and regression.",
  "functions": [
    {
      "name": "BaseDecisionTree",
      "signature": "BaseDecisionTree(*, criterion, splitter, max_depth, min_samples_split, min_samples_leaf, min_weight_fraction_leaf, max_features, max_leaf_nodes, random_state, min_impurity_decrease, class_weight=None, ccp_alpha=0.0, monotonic_cst=None)",
      "docstring": {
        "description": "Base class for decision trees.\n\nWarning: This class should not be used directly.\nUse derived classes instead.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      }
    },
    {
      "name": "DecisionTreeClassifier",
      "signature": "DecisionTreeClassifier(*, criterion='gini', splitter='best', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=None, random_state=None, max_leaf_nodes=None, min_impurity_decrease=0.0, class_weight=None, ccp_alpha=0.0, monotonic_cst=None)",
      "docstring": {
        "description": "A decision tree classifier.\n\nRead more in the :ref:`User Guide <tree>`.",
        "parameters": {
          "criterion": {
            "type": "{\"gini\", \"entropy\", \"log_loss\"}, default=\"gini\"",
            "description": "The function to measure the quality of a split. Supported criteria are\n    \"gini\" for the Gini impurity and \"log_loss\" and \"entropy\" both for the\n    Shannon information gain, see :ref:`tree_mathematical_formulation`."
          },
          "splitter": {
            "type": "{\"best\", \"random\"}, default=\"best\"",
            "description": "The strategy used to choose the split at each node. Supported\n    strategies are \"best\" to choose the best split and \"random\" to choose\n    the best random split."
          },
          "max_depth": {
            "type": "int, default=None",
            "description": "The maximum depth of the tree. If None, then nodes are expanded until\n    all leaves are pure or until all leaves contain less than\n    min_samples_split samples."
          },
          "min_samples_split": {
            "type": "int or float, default=2",
            "description": "The minimum number of samples required to split an internal node:\n\n    - If int, then consider `min_samples_split` as the minimum number.\n    - If float, then `min_samples_split` is a fraction and\n      `ceil(min_samples_split * n_samples)` are the minimum\n      number of samples for each split.\n\n    .. versionchanged:: 0.18\n       Added float values for fractions."
          },
          "min_samples_leaf": {
            "type": "int or float, default=1",
            "description": "The minimum number of samples required to be at a leaf node.\n    A split point at any depth will only be considered if it leaves at\n    least ``min_samples_leaf`` training samples in each of the left and\n    right branches.  This may have the effect of smoothing the model,\n    especially in regression.\n\n    - If int, then consider `min_samples_leaf` as the minimum number.\n    - If float, then `min_samples_leaf` is a fraction and\n      `ceil(min_samples_leaf * n_samples)` are the minimum\n      number of samples for each node.\n\n    .. versionchanged:: 0.18\n       Added float values for fractions."
          },
          "min_weight_fraction_leaf": {
            "type": "float, default=0.0",
            "description": "The minimum weighted fraction of the sum total of weights (of all\n    the input samples) required to be at a leaf node. Samples have\n    equal weight when sample_weight is not provided."
          },
          "max_features": {
            "type": "int, float or {\"sqrt\", \"log2\"}, default=None",
            "description": "The number of features to consider when looking for the best split:\n\n    - If int, then consider `max_features` features at each split.\n    - If float, then `max_features` is a fraction and\n      `max(1, int(max_features * n_features_in_))` features are considered at\n      each split.\n    - If \"sqrt\", then `max_features=sqrt(n_features)`.\n    - If \"log2\", then `max_features=log2(n_features)`.\n    - If None, then `max_features=n_features`.\n\n    .. note::\n\n        The search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Controls the randomness of the estimator. The features are always\n    randomly permuted at each split, even if ``splitter`` is set to\n    ``\"best\"``. When ``max_features < n_features``, the algorithm will\n    select ``max_features`` at random at each split before finding the best\n    split among them. But the best found split may vary across different\n    runs, even if ``max_features=n_features``. That is the case, if the\n    improvement of the criterion is identical for several splits and one\n    split has to be selected at random. To obtain a deterministic behaviour\n    during fitting, ``random_state`` has to be fixed to an integer.\n    See :term:`Glossary <random_state>` for details."
          },
          "max_leaf_nodes": {
            "type": "int, default=None",
            "description": "Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n    Best nodes are defined as relative reduction in impurity.\n    If None then unlimited number of leaf nodes."
          },
          "min_impurity_decrease": {
            "type": "float, default=0.0",
            "description": "A node will be split if this split induces a decrease of the impurity\n    greater than or equal to this value.\n\n    The weighted impurity decrease equation is the following::\n\n        N_t / N * (impurity - N_t_R / N_t * right_impurity\n                            - N_t_L / N_t * left_impurity)\n\n    where ``N`` is the total number of samples, ``N_t`` is the number of\n    samples at the current node, ``N_t_L`` is the number of samples in the\n    left child, and ``N_t_R`` is the number of samples in the right child.\n\n    ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n    if ``sample_weight`` is passed.\n\n    .. versionadded:: 0.19"
          },
          "class_weight": {
            "type": "dict, list of dict or \"balanced\", default=None",
            "description": "Weights associated with classes in the form ``{class_label: weight}``.\n    If None, all classes are supposed to have weight one. For\n    multi-output problems, a list of dicts can be provided in the same\n    order as the columns of y.\n\n    Note that for multioutput (including multilabel) weights should be\n    defined for each class of every column in its own dict. For example,\n    for four-class multilabel classification weights should be\n    [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of\n    [{1:1}, {2:5}, {3:1}, {4:1}].\n\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``\n\n    For multi-output, the weights of each column of y will be multiplied.\n\n    Note that these weights will be multiplied with sample_weight (passed\n    through the fit method) if sample_weight is specified."
          },
          "ccp_alpha": {
            "type": "non-negative float, default=0.0",
            "description": "Complexity parameter used for Minimal Cost-Complexity Pruning. The\n    subtree with the largest cost complexity that is smaller than\n    ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n    :ref:`minimal_cost_complexity_pruning` for details. See\n    :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n    for an example of such pruning.\n\n    .. versionadded:: 0.22"
          },
          "monotonic_cst": {
            "type": "array-like of int of shape (n_features), default=None",
            "description": "Indicates the monotonicity constraint to enforce on each feature.\n      - 1: monotonic increase\n      - 0: no constraint\n      - -1: monotonic decrease\n\n    If monotonic_cst is None, no constraints are applied.\n\n    Monotonicity constraints are not supported for:\n      - multiclass classifications (i.e. when `n_classes > 2`),\n      - multioutput classifications (i.e. when `n_outputs_ > 1`),\n      - classifications trained on data with missing values.\n\n    The constraints hold over the probability of the positive class.\n\n    Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n    .. versionadded:: 1.4\n\nAttributes\n----------"
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,) or list of ndarray",
            "description": "The classes labels (single output problem),\n    or a list of arrays of class labels (multi-output problem)."
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": "The impurity-based feature importances.\n    The higher, the more important the feature.\n    The importance of a feature is computed as the (normalized)\n    total reduction of the criterion brought by that feature.  It is also\n    known as the Gini importance [4]_.\n\n    Warning: impurity-based feature importances can be misleading for\n    high cardinality features (many unique values). See\n    :func:`sklearn.inspection.permutation_importance` as an alternative."
          },
          "max_features_": {
            "type": "int",
            "description": "The inferred value of max_features."
          },
          "n_classes_": {
            "type": "int or list of int",
            "description": "The number of classes (for single output problems),\n    or a list containing the number of classes for each\n    output (for multi-output problems)."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_outputs_": {
            "type": "int",
            "description": "The number of outputs when ``fit`` is performed."
          },
          "tree_": {
            "type": "Tree instance",
            "description": "The underlying Tree object. Please refer to\n    ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n    :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n    for basic usage of these attributes."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "DecisionTreeRegressor : A decision tree regressor.",
        "notes": "The default values for the parameters controlling the size of the trees\n(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\nunpruned trees which can potentially be very large on some data sets. To\nreduce memory consumption, the complexity and size of the trees should be\ncontrolled by setting those parameter values.\n\nThe :meth:`predict` method operates using the :func:`numpy.argmax`\nfunction on the outputs of :meth:`predict_proba`. This means that in\ncase the highest predicted probabilities are tied, the classifier will\npredict the tied class with the lowest index in :term:`classes_`.\n\nReferences\n----------\n\n.. [1] https://en.wikipedia.org/wiki/Decision_tree_learning\n\n.. [2] L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification\n       and Regression Trees\", Wadsworth, Belmont, CA, 1984.\n\n.. [3] T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical\n       Learning\", Springer, 2009.\n\n.. [4] L. Breiman, and A. Cutler, \"Random Forests\",\n       https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm",
        "examples": ">>> from sklearn.datasets import load_iris\n>>> from sklearn.model_selection import cross_val_score\n>>> from sklearn.tree import DecisionTreeClassifier\n>>> clf = DecisionTreeClassifier(random_state=0)\n>>> iris = load_iris()\n>>> cross_val_score(clf, iris.data, iris.target, cv=10)\n...                             # doctest: +SKIP\n...\narray([ 1.     ,  0.93...,  0.86...,  0.93...,  0.93...,\n        0.93...,  0.93...,  1.     ,  0.93...,  1.      ])"
      }
    },
    {
      "name": "DecisionTreeRegressor",
      "signature": "DecisionTreeRegressor(*, criterion='squared_error', splitter='best', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=None, random_state=None, max_leaf_nodes=None, min_impurity_decrease=0.0, ccp_alpha=0.0, monotonic_cst=None)",
      "docstring": {
        "description": "A decision tree regressor.\n\nRead more in the :ref:`User Guide <tree>`.",
        "parameters": {
          "criterion": {
            "type": "{\"squared_error\", \"friedman_mse\", \"absolute_error\",             \"poisson\"}, default=\"squared_error\"",
            "description": "The function to measure the quality of a split. Supported criteria\n    are \"squared_error\" for the mean squared error, which is equal to\n    variance reduction as feature selection criterion and minimizes the L2\n    loss using the mean of each terminal node, \"friedman_mse\", which uses\n    mean squared error with Friedman's improvement score for potential\n    splits, \"absolute_error\" for the mean absolute error, which minimizes\n    the L1 loss using the median of each terminal node, and \"poisson\" which\n    uses reduction in the half mean Poisson deviance to find splits.\n\n    .. versionadded:: 0.18\n       Mean Absolute Error (MAE) criterion.\n\n    .. versionadded:: 0.24\n        Poisson deviance criterion."
          },
          "splitter": {
            "type": "{\"best\", \"random\"}, default=\"best\"",
            "description": "The strategy used to choose the split at each node. Supported\n    strategies are \"best\" to choose the best split and \"random\" to choose\n    the best random split."
          },
          "max_depth": {
            "type": "int, default=None",
            "description": "The maximum depth of the tree. If None, then nodes are expanded until\n    all leaves are pure or until all leaves contain less than\n    min_samples_split samples.\n\n    For an example of how ``max_depth`` influences the model, see\n    :ref:`sphx_glr_auto_examples_tree_plot_tree_regression.py`."
          },
          "min_samples_split": {
            "type": "int or float, default=2",
            "description": "The minimum number of samples required to split an internal node:\n\n    - If int, then consider `min_samples_split` as the minimum number.\n    - If float, then `min_samples_split` is a fraction and\n      `ceil(min_samples_split * n_samples)` are the minimum\n      number of samples for each split.\n\n    .. versionchanged:: 0.18\n       Added float values for fractions."
          },
          "min_samples_leaf": {
            "type": "int or float, default=1",
            "description": "The minimum number of samples required to be at a leaf node.\n    A split point at any depth will only be considered if it leaves at\n    least ``min_samples_leaf`` training samples in each of the left and\n    right branches.  This may have the effect of smoothing the model,\n    especially in regression.\n\n    - If int, then consider `min_samples_leaf` as the minimum number.\n    - If float, then `min_samples_leaf` is a fraction and\n      `ceil(min_samples_leaf * n_samples)` are the minimum\n      number of samples for each node.\n\n    .. versionchanged:: 0.18\n       Added float values for fractions."
          },
          "min_weight_fraction_leaf": {
            "type": "float, default=0.0",
            "description": "The minimum weighted fraction of the sum total of weights (of all\n    the input samples) required to be at a leaf node. Samples have\n    equal weight when sample_weight is not provided."
          },
          "max_features": {
            "type": "int, float or {\"sqrt\", \"log2\"}, default=None",
            "description": "The number of features to consider when looking for the best split:\n\n    - If int, then consider `max_features` features at each split.\n    - If float, then `max_features` is a fraction and\n      `max(1, int(max_features * n_features_in_))` features are considered at each\n      split.\n    - If \"sqrt\", then `max_features=sqrt(n_features)`.\n    - If \"log2\", then `max_features=log2(n_features)`.\n    - If None, then `max_features=n_features`.\n\n    Note: the search for a split does not stop until at least one\n    valid partition of the node samples is found, even if it requires to\n    effectively inspect more than ``max_features`` features."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Controls the randomness of the estimator. The features are always\n    randomly permuted at each split, even if ``splitter`` is set to\n    ``\"best\"``. When ``max_features < n_features``, the algorithm will\n    select ``max_features`` at random at each split before finding the best\n    split among them. But the best found split may vary across different\n    runs, even if ``max_features=n_features``. That is the case, if the\n    improvement of the criterion is identical for several splits and one\n    split has to be selected at random. To obtain a deterministic behaviour\n    during fitting, ``random_state`` has to be fixed to an integer.\n    See :term:`Glossary <random_state>` for details."
          },
          "max_leaf_nodes": {
            "type": "int, default=None",
            "description": "Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n    Best nodes are defined as relative reduction in impurity.\n    If None then unlimited number of leaf nodes."
          },
          "min_impurity_decrease": {
            "type": "float, default=0.0",
            "description": "A node will be split if this split induces a decrease of the impurity\n    greater than or equal to this value.\n\n    The weighted impurity decrease equation is the following::\n\n        N_t / N * (impurity - N_t_R / N_t * right_impurity\n                            - N_t_L / N_t * left_impurity)\n\n    where ``N`` is the total number of samples, ``N_t`` is the number of\n    samples at the current node, ``N_t_L`` is the number of samples in the\n    left child, and ``N_t_R`` is the number of samples in the right child.\n\n    ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n    if ``sample_weight`` is passed.\n\n    .. versionadded:: 0.19"
          },
          "ccp_alpha": {
            "type": "non-negative float, default=0.0",
            "description": "Complexity parameter used for Minimal Cost-Complexity Pruning. The\n    subtree with the largest cost complexity that is smaller than\n    ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n    :ref:`minimal_cost_complexity_pruning` for details. See\n    :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n    for an example of such pruning.\n\n    .. versionadded:: 0.22"
          },
          "monotonic_cst": {
            "type": "array-like of int of shape (n_features), default=None",
            "description": "Indicates the monotonicity constraint to enforce on each feature.\n      - 1: monotonic increase\n      - 0: no constraint\n      - -1: monotonic decrease\n\n    If monotonic_cst is None, no constraints are applied.\n\n    Monotonicity constraints are not supported for:\n      - multioutput regressions (i.e. when `n_outputs_ > 1`),\n      - regressions trained on data with missing values.\n\n    Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n    .. versionadded:: 1.4\n\nAttributes\n----------"
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": "The feature importances.\n    The higher, the more important the feature.\n    The importance of a feature is computed as the\n    (normalized) total reduction of the criterion brought\n    by that feature. It is also known as the Gini importance [4]_.\n\n    Warning: impurity-based feature importances can be misleading for\n    high cardinality features (many unique values). See\n    :func:`sklearn.inspection.permutation_importance` as an alternative."
          },
          "max_features_": {
            "type": "int",
            "description": "The inferred value of max_features."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_outputs_": {
            "type": "int",
            "description": "The number of outputs when ``fit`` is performed."
          },
          "tree_": {
            "type": "Tree instance",
            "description": "The underlying Tree object. Please refer to\n    ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n    :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n    for basic usage of these attributes."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "DecisionTreeClassifier : A decision tree classifier.",
        "notes": "The default values for the parameters controlling the size of the trees\n(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\nunpruned trees which can potentially be very large on some data sets. To\nreduce memory consumption, the complexity and size of the trees should be\ncontrolled by setting those parameter values.\n\nReferences\n----------\n\n.. [1] https://en.wikipedia.org/wiki/Decision_tree_learning\n\n.. [2] L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification\n       and Regression Trees\", Wadsworth, Belmont, CA, 1984.\n\n.. [3] T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical\n       Learning\", Springer, 2009.\n\n.. [4] L. Breiman, and A. Cutler, \"Random Forests\",\n       https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm",
        "examples": ">>> from sklearn.datasets import load_diabetes\n>>> from sklearn.model_selection import cross_val_score\n>>> from sklearn.tree import DecisionTreeRegressor\n>>> X, y = load_diabetes(return_X_y=True)\n>>> regressor = DecisionTreeRegressor(random_state=0)\n>>> cross_val_score(regressor, X, y, cv=10)\n...                    # doctest: +SKIP\n...\narray([-0.39..., -0.46...,  0.02...,  0.06..., -0.50...,\n       0.16...,  0.11..., -0.73..., -0.30..., -0.00...])"
      }
    },
    {
      "name": "ExtraTreeClassifier",
      "signature": "ExtraTreeClassifier(*, criterion='gini', splitter='random', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features='sqrt', random_state=None, max_leaf_nodes=None, min_impurity_decrease=0.0, class_weight=None, ccp_alpha=0.0, monotonic_cst=None)",
      "docstring": {
        "description": "An extremely randomized tree classifier.\n\nExtra-trees differ from classic decision trees in the way they are built.\nWhen looking for the best split to separate the samples of a node into two\ngroups, random splits are drawn for each of the `max_features` randomly\nselected features and the best split among those is chosen. When\n`max_features` is set 1, this amounts to building a totally random\ndecision tree.\n\nWarning: Extra-trees should only be used within ensemble methods.\n\nRead more in the :ref:`User Guide <tree>`.",
        "parameters": {
          "criterion": {
            "type": "{\"gini\", \"entropy\", \"log_loss\"}, default=\"gini\"",
            "description": "The function to measure the quality of a split. Supported criteria are\n    \"gini\" for the Gini impurity and \"log_loss\" and \"entropy\" both for the\n    Shannon information gain, see :ref:`tree_mathematical_formulation`."
          },
          "splitter": {
            "type": "{\"random\", \"best\"}, default=\"random\"",
            "description": "The strategy used to choose the split at each node. Supported\n    strategies are \"best\" to choose the best split and \"random\" to choose\n    the best random split."
          },
          "max_depth": {
            "type": "int, default=None",
            "description": "The maximum depth of the tree. If None, then nodes are expanded until\n    all leaves are pure or until all leaves contain less than\n    min_samples_split samples."
          },
          "min_samples_split": {
            "type": "int or float, default=2",
            "description": "The minimum number of samples required to split an internal node:\n\n    - If int, then consider `min_samples_split` as the minimum number.\n    - If float, then `min_samples_split` is a fraction and\n      `ceil(min_samples_split * n_samples)` are the minimum\n      number of samples for each split.\n\n    .. versionchanged:: 0.18\n       Added float values for fractions."
          },
          "min_samples_leaf": {
            "type": "int or float, default=1",
            "description": "The minimum number of samples required to be at a leaf node.\n    A split point at any depth will only be considered if it leaves at\n    least ``min_samples_leaf`` training samples in each of the left and\n    right branches.  This may have the effect of smoothing the model,\n    especially in regression.\n\n    - If int, then consider `min_samples_leaf` as the minimum number.\n    - If float, then `min_samples_leaf` is a fraction and\n      `ceil(min_samples_leaf * n_samples)` are the minimum\n      number of samples for each node.\n\n    .. versionchanged:: 0.18\n       Added float values for fractions."
          },
          "min_weight_fraction_leaf": {
            "type": "float, default=0.0",
            "description": "The minimum weighted fraction of the sum total of weights (of all\n    the input samples) required to be at a leaf node. Samples have\n    equal weight when sample_weight is not provided."
          },
          "max_features": {
            "type": "int, float, {\"sqrt\", \"log2\"} or None, default=\"sqrt\"",
            "description": "The number of features to consider when looking for the best split:\n\n    - If int, then consider `max_features` features at each split.\n    - If float, then `max_features` is a fraction and\n      `max(1, int(max_features * n_features_in_))` features are considered at\n      each split.\n    - If \"sqrt\", then `max_features=sqrt(n_features)`.\n    - If \"log2\", then `max_features=log2(n_features)`.\n    - If None, then `max_features=n_features`.\n\n    .. versionchanged:: 1.1\n        The default of `max_features` changed from `\"auto\"` to `\"sqrt\"`.\n\n    Note: the search for a split does not stop until at least one\n    valid partition of the node samples is found, even if it requires to\n    effectively inspect more than ``max_features`` features."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Used to pick randomly the `max_features` used at each split.\n    See :term:`Glossary <random_state>` for details."
          },
          "max_leaf_nodes": {
            "type": "int, default=None",
            "description": "Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n    Best nodes are defined as relative reduction in impurity.\n    If None then unlimited number of leaf nodes."
          },
          "min_impurity_decrease": {
            "type": "float, default=0.0",
            "description": "A node will be split if this split induces a decrease of the impurity\n    greater than or equal to this value.\n\n    The weighted impurity decrease equation is the following::\n\n        N_t / N * (impurity - N_t_R / N_t * right_impurity\n                            - N_t_L / N_t * left_impurity)\n\n    where ``N`` is the total number of samples, ``N_t`` is the number of\n    samples at the current node, ``N_t_L`` is the number of samples in the\n    left child, and ``N_t_R`` is the number of samples in the right child.\n\n    ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n    if ``sample_weight`` is passed.\n\n    .. versionadded:: 0.19"
          },
          "class_weight": {
            "type": "dict, list of dict or \"balanced\", default=None",
            "description": "Weights associated with classes in the form ``{class_label: weight}``.\n    If None, all classes are supposed to have weight one. For\n    multi-output problems, a list of dicts can be provided in the same\n    order as the columns of y.\n\n    Note that for multioutput (including multilabel) weights should be\n    defined for each class of every column in its own dict. For example,\n    for four-class multilabel classification weights should be\n    [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of\n    [{1:1}, {2:5}, {3:1}, {4:1}].\n\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``\n\n    For multi-output, the weights of each column of y will be multiplied.\n\n    Note that these weights will be multiplied with sample_weight (passed\n    through the fit method) if sample_weight is specified."
          },
          "ccp_alpha": {
            "type": "non-negative float, default=0.0",
            "description": "Complexity parameter used for Minimal Cost-Complexity Pruning. The\n    subtree with the largest cost complexity that is smaller than\n    ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n    :ref:`minimal_cost_complexity_pruning` for details. See\n    :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n    for an example of such pruning.\n\n    .. versionadded:: 0.22"
          },
          "monotonic_cst": {
            "type": "array-like of int of shape (n_features), default=None",
            "description": "Indicates the monotonicity constraint to enforce on each feature.\n      - 1: monotonic increase\n      - 0: no constraint\n      - -1: monotonic decrease\n\n    If monotonic_cst is None, no constraints are applied.\n\n    Monotonicity constraints are not supported for:\n      - multiclass classifications (i.e. when `n_classes > 2`),\n      - multioutput classifications (i.e. when `n_outputs_ > 1`),\n      - classifications trained on data with missing values.\n\n    The constraints hold over the probability of the positive class.\n\n    Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n    .. versionadded:: 1.4\n\nAttributes\n----------"
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,) or list of ndarray",
            "description": "The classes labels (single output problem),\n    or a list of arrays of class labels (multi-output problem)."
          },
          "max_features_": {
            "type": "int",
            "description": "The inferred value of max_features."
          },
          "n_classes_": {
            "type": "int or list of int",
            "description": "The number of classes (for single output problems),\n    or a list containing the number of classes for each\n    output (for multi-output problems)."
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": "The impurity-based feature importances.\n    The higher, the more important the feature.\n    The importance of a feature is computed as the (normalized)\n    total reduction of the criterion brought by that feature.  It is also\n    known as the Gini importance.\n\n    Warning: impurity-based feature importances can be misleading for\n    high cardinality features (many unique values). See\n    :func:`sklearn.inspection.permutation_importance` as an alternative."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_outputs_": {
            "type": "int",
            "description": "The number of outputs when ``fit`` is performed."
          },
          "tree_": {
            "type": "Tree instance",
            "description": "The underlying Tree object. Please refer to\n    ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n    :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n    for basic usage of these attributes."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "ExtraTreeRegressor : An extremely randomized tree regressor.\nsklearn.ensemble.ExtraTreesClassifier : An extra-trees classifier.\nsklearn.ensemble.ExtraTreesRegressor : An extra-trees regressor.\nsklearn.ensemble.RandomForestClassifier : A random forest classifier.\nsklearn.ensemble.RandomForestRegressor : A random forest regressor.\nsklearn.ensemble.RandomTreesEmbedding : An ensemble of\n    totally random trees.",
        "notes": "The default values for the parameters controlling the size of the trees\n(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\nunpruned trees which can potentially be very large on some data sets. To\nreduce memory consumption, the complexity and size of the trees should be\ncontrolled by setting those parameter values.\n\nReferences\n----------\n\n.. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\",\n       Machine Learning, 63(1), 3-42, 2006.",
        "examples": ">>> from sklearn.datasets import load_iris\n>>> from sklearn.model_selection import train_test_split\n>>> from sklearn.ensemble import BaggingClassifier\n>>> from sklearn.tree import ExtraTreeClassifier\n>>> X, y = load_iris(return_X_y=True)\n>>> X_train, X_test, y_train, y_test = train_test_split(\n...    X, y, random_state=0)\n>>> extra_tree = ExtraTreeClassifier(random_state=0)\n>>> cls = BaggingClassifier(extra_tree, random_state=0).fit(\n...    X_train, y_train)\n>>> cls.score(X_test, y_test)\n0.8947..."
      }
    },
    {
      "name": "ExtraTreeRegressor",
      "signature": "ExtraTreeRegressor(*, criterion='squared_error', splitter='random', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=1.0, random_state=None, min_impurity_decrease=0.0, max_leaf_nodes=None, ccp_alpha=0.0, monotonic_cst=None)",
      "docstring": {
        "description": "An extremely randomized tree regressor.\n\nExtra-trees differ from classic decision trees in the way they are built.\nWhen looking for the best split to separate the samples of a node into two\ngroups, random splits are drawn for each of the `max_features` randomly\nselected features and the best split among those is chosen. When\n`max_features` is set 1, this amounts to building a totally random\ndecision tree.\n\nWarning: Extra-trees should only be used within ensemble methods.\n\nRead more in the :ref:`User Guide <tree>`.",
        "parameters": {
          "criterion": {
            "type": "{\"squared_error\", \"friedman_mse\", \"absolute_error\", \"poisson\"},             default=\"squared_error\"",
            "description": "The function to measure the quality of a split. Supported criteria\n    are \"squared_error\" for the mean squared error, which is equal to\n    variance reduction as feature selection criterion and minimizes the L2\n    loss using the mean of each terminal node, \"friedman_mse\", which uses\n    mean squared error with Friedman's improvement score for potential\n    splits, \"absolute_error\" for the mean absolute error, which minimizes\n    the L1 loss using the median of each terminal node, and \"poisson\" which\n    uses reduction in Poisson deviance to find splits.\n\n    .. versionadded:: 0.18\n       Mean Absolute Error (MAE) criterion.\n\n    .. versionadded:: 0.24\n        Poisson deviance criterion."
          },
          "splitter": {
            "type": "{\"random\", \"best\"}, default=\"random\"",
            "description": "The strategy used to choose the split at each node. Supported\n    strategies are \"best\" to choose the best split and \"random\" to choose\n    the best random split."
          },
          "max_depth": {
            "type": "int, default=None",
            "description": "The maximum depth of the tree. If None, then nodes are expanded until\n    all leaves are pure or until all leaves contain less than\n    min_samples_split samples."
          },
          "min_samples_split": {
            "type": "int or float, default=2",
            "description": "The minimum number of samples required to split an internal node:\n\n    - If int, then consider `min_samples_split` as the minimum number.\n    - If float, then `min_samples_split` is a fraction and\n      `ceil(min_samples_split * n_samples)` are the minimum\n      number of samples for each split.\n\n    .. versionchanged:: 0.18\n       Added float values for fractions."
          },
          "min_samples_leaf": {
            "type": "int or float, default=1",
            "description": "The minimum number of samples required to be at a leaf node.\n    A split point at any depth will only be considered if it leaves at\n    least ``min_samples_leaf`` training samples in each of the left and\n    right branches.  This may have the effect of smoothing the model,\n    especially in regression.\n\n    - If int, then consider `min_samples_leaf` as the minimum number.\n    - If float, then `min_samples_leaf` is a fraction and\n      `ceil(min_samples_leaf * n_samples)` are the minimum\n      number of samples for each node.\n\n    .. versionchanged:: 0.18\n       Added float values for fractions."
          },
          "min_weight_fraction_leaf": {
            "type": "float, default=0.0",
            "description": "The minimum weighted fraction of the sum total of weights (of all\n    the input samples) required to be at a leaf node. Samples have\n    equal weight when sample_weight is not provided."
          },
          "max_features": {
            "type": "int, float, {\"sqrt\", \"log2\"} or None, default=1.0",
            "description": "The number of features to consider when looking for the best split:\n\n    - If int, then consider `max_features` features at each split.\n    - If float, then `max_features` is a fraction and\n      `max(1, int(max_features * n_features_in_))` features are considered at each\n      split.\n    - If \"sqrt\", then `max_features=sqrt(n_features)`.\n    - If \"log2\", then `max_features=log2(n_features)`.\n    - If None, then `max_features=n_features`.\n\n    .. versionchanged:: 1.1\n        The default of `max_features` changed from `\"auto\"` to `1.0`.\n\n    Note: the search for a split does not stop until at least one\n    valid partition of the node samples is found, even if it requires to\n    effectively inspect more than ``max_features`` features."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Used to pick randomly the `max_features` used at each split.\n    See :term:`Glossary <random_state>` for details."
          },
          "min_impurity_decrease": {
            "type": "float, default=0.0",
            "description": "A node will be split if this split induces a decrease of the impurity\n    greater than or equal to this value.\n\n    The weighted impurity decrease equation is the following::\n\n        N_t / N * (impurity - N_t_R / N_t * right_impurity\n                            - N_t_L / N_t * left_impurity)\n\n    where ``N`` is the total number of samples, ``N_t`` is the number of\n    samples at the current node, ``N_t_L`` is the number of samples in the\n    left child, and ``N_t_R`` is the number of samples in the right child.\n\n    ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n    if ``sample_weight`` is passed.\n\n    .. versionadded:: 0.19"
          },
          "max_leaf_nodes": {
            "type": "int, default=None",
            "description": "Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n    Best nodes are defined as relative reduction in impurity.\n    If None then unlimited number of leaf nodes."
          },
          "ccp_alpha": {
            "type": "non-negative float, default=0.0",
            "description": "Complexity parameter used for Minimal Cost-Complexity Pruning. The\n    subtree with the largest cost complexity that is smaller than\n    ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n    :ref:`minimal_cost_complexity_pruning` for details. See\n    :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n    for an example of such pruning.\n\n    .. versionadded:: 0.22"
          },
          "monotonic_cst": {
            "type": "array-like of int of shape (n_features), default=None",
            "description": "Indicates the monotonicity constraint to enforce on each feature.\n      - 1: monotonic increase\n      - 0: no constraint\n      - -1: monotonic decrease\n\n    If monotonic_cst is None, no constraints are applied.\n\n    Monotonicity constraints are not supported for:\n      - multioutput regressions (i.e. when `n_outputs_ > 1`),\n      - regressions trained on data with missing values.\n\n    Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n    .. versionadded:: 1.4\n\nAttributes\n----------"
          },
          "max_features_": {
            "type": "int",
            "description": "The inferred value of max_features."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": "Return impurity-based feature importances (the higher, the more\n    important the feature).\n\n    Warning: impurity-based feature importances can be misleading for\n    high cardinality features (many unique values). See\n    :func:`sklearn.inspection.permutation_importance` as an alternative."
          },
          "n_outputs_": {
            "type": "int",
            "description": "The number of outputs when ``fit`` is performed."
          },
          "tree_": {
            "type": "Tree instance",
            "description": "The underlying Tree object. Please refer to\n    ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n    :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n    for basic usage of these attributes."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "ExtraTreeClassifier : An extremely randomized tree classifier.\nsklearn.ensemble.ExtraTreesClassifier : An extra-trees classifier.\nsklearn.ensemble.ExtraTreesRegressor : An extra-trees regressor.",
        "notes": "The default values for the parameters controlling the size of the trees\n(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\nunpruned trees which can potentially be very large on some data sets. To\nreduce memory consumption, the complexity and size of the trees should be\ncontrolled by setting those parameter values.\n\nReferences\n----------\n\n.. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\",\n       Machine Learning, 63(1), 3-42, 2006.",
        "examples": ">>> from sklearn.datasets import load_diabetes\n>>> from sklearn.model_selection import train_test_split\n>>> from sklearn.ensemble import BaggingRegressor\n>>> from sklearn.tree import ExtraTreeRegressor\n>>> X, y = load_diabetes(return_X_y=True)\n>>> X_train, X_test, y_train, y_test = train_test_split(\n...     X, y, random_state=0)\n>>> extra_tree = ExtraTreeRegressor(random_state=0)\n>>> reg = BaggingRegressor(extra_tree, random_state=0).fit(\n...     X_train, y_train)\n>>> reg.score(X_test, y_test)\n0.33..."
      }
    },
    {
      "name": "export_graphviz",
      "signature": "export_graphviz(decision_tree, out_file=None, *, max_depth=None, feature_names=None, class_names=None, label='all', filled=False, leaves_parallel=False, impurity=True, node_ids=False, proportion=False, rotate=False, rounded=False, special_characters=False, precision=3, fontname='helvetica')",
      "docstring": {
        "description": "Export a decision tree in DOT format.\n\nThis function generates a GraphViz representation of the decision tree,\nwhich is then written into `out_file`. Once exported, graphical renderings\ncan be generated using, for example::\n\n    $ dot -Tps tree.dot -o tree.ps      (PostScript format)\n    $ dot -Tpng tree.dot -o tree.png    (PNG format)\n\nThe sample counts that are shown are weighted with any sample_weights that\nmight be present.\n\nRead more in the :ref:`User Guide <tree>`.",
        "parameters": {
          "decision_tree": {
            "type": "object",
            "description": "The decision tree estimator to be exported to GraphViz."
          },
          "out_file": {
            "type": "object or str, default=None",
            "description": "Handle or name of the output file. If ``None``, the result is\n    returned as a string.\n\n    .. versionchanged:: 0.20\n        Default of out_file changed from \"tree.dot\" to None."
          },
          "max_depth": {
            "type": "int, default=None",
            "description": "The maximum depth of the representation. If None, the tree is fully\n    generated."
          },
          "feature_names": {
            "type": "array-like of shape (n_features,), default=None",
            "description": "An array containing the feature names.\n    If None, generic names will be used (\"x[0]\", \"x[1]\", ...)."
          },
          "class_names": {
            "type": "array-like of shape (n_classes,) or bool, default=None",
            "description": "Names of each of the target classes in ascending numerical order.\n    Only relevant for classification and not supported for multi-output.\n    If ``True``, shows a symbolic representation of the class name."
          },
          "label": {
            "type": "{'all', 'root', 'none'}, default='all'",
            "description": "Whether to show informative labels for impurity, etc.\n    Options include 'all' to show at every node, 'root' to show only at\n    the top root node, or 'none' to not show at any node."
          },
          "filled": {
            "type": "bool, default=False",
            "description": "When set to ``True``, paint nodes to indicate majority class for\n    classification, extremity of values for regression, or purity of node\n    for multi-output."
          },
          "leaves_parallel": {
            "type": "bool, default=False",
            "description": "When set to ``True``, draw all leaf nodes at the bottom of the tree."
          },
          "impurity": {
            "type": "bool, default=True",
            "description": "When set to ``True``, show the impurity at each node."
          },
          "node_ids": {
            "type": "bool, default=False",
            "description": "When set to ``True``, show the ID number on each node."
          },
          "proportion": {
            "type": "bool, default=False",
            "description": "When set to ``True``, change the display of 'values' and/or 'samples'\n    to be proportions and percentages respectively."
          },
          "rotate": {
            "type": "bool, default=False",
            "description": "When set to ``True``, orient tree left to right rather than top-down."
          },
          "rounded": {
            "type": "bool, default=False",
            "description": "When set to ``True``, draw node boxes with rounded corners."
          },
          "special_characters": {
            "type": "bool, default=False",
            "description": "When set to ``False``, ignore special characters for PostScript\n    compatibility."
          },
          "precision": {
            "type": "int, default=3",
            "description": "Number of digits of precision for floating point in the values of\n    impurity, threshold and value attributes of each node."
          },
          "fontname": {
            "type": "str, default='helvetica'",
            "description": "Name of font used to render text."
          }
        },
        "returns": "dot_data : str\n    String representation of the input tree in GraphViz dot format.\n    Only returned if ``out_file`` is None.\n\n    .. versionadded:: 0.18",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ">>> from sklearn.datasets import load_iris\n>>> from sklearn import tree\n\n>>> clf = tree.DecisionTreeClassifier()\n>>> iris = load_iris()\n\n>>> clf = clf.fit(iris.data, iris.target)\n>>> tree.export_graphviz(clf)\n'digraph Tree {..."
      }
    },
    {
      "name": "export_text",
      "signature": "export_text(decision_tree, *, feature_names=None, class_names=None, max_depth=10, spacing=3, decimals=2, show_weights=False)",
      "docstring": {
        "description": "Build a text report showing the rules of a decision tree.\n\nNote that backwards compatibility may not be supported.",
        "parameters": {
          "decision_tree": {
            "type": "object",
            "description": "The decision tree estimator to be exported.\n    It can be an instance of\n    DecisionTreeClassifier or DecisionTreeRegressor."
          },
          "feature_names": {
            "type": "array-like of shape (n_features,), default=None",
            "description": "An array containing the feature names.\n    If None generic names will be used (\"feature_0\", \"feature_1\", ...)."
          },
          "class_names": {
            "type": "array-like of shape (n_classes,), default=None",
            "description": "Names of each of the target classes in ascending numerical order.\n    Only relevant for classification and not supported for multi-output.\n\n    - if `None`, the class names are delegated to `decision_tree.classes_`;\n    - otherwise, `class_names` will be used as class names instead of\n      `decision_tree.classes_`. The length of `class_names` must match\n      the length of `decision_tree.classes_`.\n\n    .. versionadded:: 1.3"
          },
          "max_depth": {
            "type": "int, default=10",
            "description": "Only the first max_depth levels of the tree are exported.\n    Truncated branches will be marked with \"...\"."
          },
          "spacing": {
            "type": "int, default=3",
            "description": "Number of spaces between edges. The higher it is, the wider the result."
          },
          "decimals": {
            "type": "int, default=2",
            "description": "Number of decimal digits to display."
          },
          "show_weights": {
            "type": "bool, default=False",
            "description": "If true the classification weights will be exported on each leaf.\n    The classification weights are the number of samples each class."
          }
        },
        "returns": "report : str\n    Text summary of all the rules in the decision tree.",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ">>> from sklearn.datasets import load_iris\n>>> from sklearn.tree import DecisionTreeClassifier\n>>> from sklearn.tree import export_text\n>>> iris = load_iris()\n>>> X = iris['data']\n>>> y = iris['target']\n>>> decision_tree = DecisionTreeClassifier(random_state=0, max_depth=2)\n>>> decision_tree = decision_tree.fit(X, y)\n>>> r = export_text(decision_tree, feature_names=iris['feature_names'])\n>>> print(r)\n|--- petal width (cm) <= 0.80\n|   |--- class: 0\n|--- petal width (cm) >  0.80\n|   |--- petal width (cm) <= 1.75\n|   |   |--- class: 1\n|   |--- petal width (cm) >  1.75\n|   |   |--- class: 2"
      }
    },
    {
      "name": "plot_tree",
      "signature": "plot_tree(decision_tree, *, max_depth=None, feature_names=None, class_names=None, label='all', filled=False, impurity=True, node_ids=False, proportion=False, rounded=False, precision=3, ax=None, fontsize=None)",
      "docstring": {
        "description": "Plot a decision tree.\n\nThe sample counts that are shown are weighted with any sample_weights that\nmight be present.\n\nThe visualization is fit automatically to the size of the axis.\nUse the ``figsize`` or ``dpi`` arguments of ``plt.figure``  to control\nthe size of the rendering.\n\nRead more in the :ref:`User Guide <tree>`.\n\n.. versionadded:: 0.21",
        "parameters": {
          "decision_tree": {
            "type": "decision tree regressor or classifier",
            "description": "The decision tree to be plotted."
          },
          "max_depth": {
            "type": "int, default=None",
            "description": "The maximum depth of the representation. If None, the tree is fully\n    generated."
          },
          "feature_names": {
            "type": "array-like of str, default=None",
            "description": "Names of each of the features.\n    If None, generic names will be used (\"x[0]\", \"x[1]\", ...)."
          },
          "class_names": {
            "type": "array-like of str or True, default=None",
            "description": "Names of each of the target classes in ascending numerical order.\n    Only relevant for classification and not supported for multi-output.\n    If ``True``, shows a symbolic representation of the class name."
          },
          "label": {
            "type": "{'all', 'root', 'none'}, default='all'",
            "description": "Whether to show informative labels for impurity, etc.\n    Options include 'all' to show at every node, 'root' to show only at\n    the top root node, or 'none' to not show at any node."
          },
          "filled": {
            "type": "bool, default=False",
            "description": "When set to ``True``, paint nodes to indicate majority class for\n    classification, extremity of values for regression, or purity of node\n    for multi-output."
          },
          "impurity": {
            "type": "bool, default=True",
            "description": "When set to ``True``, show the impurity at each node."
          },
          "node_ids": {
            "type": "bool, default=False",
            "description": "When set to ``True``, show the ID number on each node."
          },
          "proportion": {
            "type": "bool, default=False",
            "description": "When set to ``True``, change the display of 'values' and/or 'samples'\n    to be proportions and percentages respectively."
          },
          "rounded": {
            "type": "bool, default=False",
            "description": "When set to ``True``, draw node boxes with rounded corners and use\n    Helvetica fonts instead of Times-Roman."
          },
          "precision": {
            "type": "int, default=3",
            "description": "Number of digits of precision for floating point in the values of\n    impurity, threshold and value attributes of each node."
          },
          "ax": {
            "type": "matplotlib axis, default=None",
            "description": "Axes to plot to. If None, use current axis. Any previous content\n    is cleared."
          },
          "fontsize": {
            "type": "int, default=None",
            "description": "Size of text font. If None, determined automatically to fit figure."
          }
        },
        "returns": "annotations : list of artists\n    List containing the artists for the annotation boxes making up the\n    tree.",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ">>> from sklearn.datasets import load_iris\n>>> from sklearn import tree\n\n>>> clf = tree.DecisionTreeClassifier(random_state=0)\n>>> iris = load_iris()\n\n>>> clf = clf.fit(iris.data, iris.target)\n>>> tree.plot_tree(clf)\n[...]"
      }
    }
  ],
  "classes": [
    {
      "name": "BaseDecisionTree",
      "docstring": {
        "description": "Base class for decision trees.\n\nWarning: This class should not be used directly.\nUse derived classes instead.",
        "parameters": {},
        "returns": "",
        "raises": "",
        "see_also": "",
        "notes": "",
        "examples": ""
      },
      "methods": [
        {
          "name": "apply",
          "signature": "apply(self, X, check_input=True)",
          "docstring": {
            "description": "Return the index of the leaf that each sample is predicted as.\n\n.. versionadded:: 0.17",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csr_matrix``."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "X_leaves : array-like of shape (n_samples,)\n    For each datapoint x in X, return the index of the leaf x\n    ends up in. Leaves are numbered within\n    ``[0; self.tree_.node_count)``, possibly with gaps in the\n    numbering.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cost_complexity_pruning_path",
          "signature": "cost_complexity_pruning_path(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Compute the pruning path during Minimal Cost-Complexity Pruning.\n\nSee :ref:`minimal_cost_complexity_pruning` for details on the pruning\nprocess.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The training input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csc_matrix``."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "The target values (class labels) as integers or strings."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights. If None, then samples are equally weighted. Splits\n    that would create child nodes with net zero or negative weight are\n    ignored while searching for a split in each node. Splits are also\n    ignored if they would result in any single class carrying a\n    negative weight in either child node."
              }
            },
            "returns": "ccp_path : :class:`~sklearn.utils.Bunch`\n    Dictionary-like object, with the following attributes.\n\n    ccp_alphas : ndarray\n        Effective alphas of subtree during pruning.\n\n    impurities : ndarray\n        Sum of the impurities of the subtree leaves for the\n        corresponding alpha value in ``ccp_alphas``.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "decision_path",
          "signature": "decision_path(self, X, check_input=True)",
          "docstring": {
            "description": "Return the decision path in the tree.\n\n.. versionadded:: 0.18",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csr_matrix``."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "indicator : sparse matrix of shape (n_samples, n_nodes)\n    Return a node indicator CSR matrix where non zero elements\n    indicates that the samples goes through the nodes.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_depth",
          "signature": "get_depth(self)",
          "docstring": {
            "description": "Return the depth of the decision tree.\n\nThe depth of a tree is the maximum distance between the root\nand any leaf.",
            "parameters": {},
            "returns": "self.tree_.max_depth : int\n    The maximum depth of the tree.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_n_leaves",
          "signature": "get_n_leaves(self)",
          "docstring": {
            "description": "Return the number of leaves of the decision tree.",
            "parameters": {},
            "returns": "self.tree_.n_leaves : int\n    Number of leaves.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X, check_input=True)",
          "docstring": {
            "description": "Predict class or regression value for X.\n\nFor a classification model, the predicted class for each sample in X is\nreturned. For a regression model, the predicted value based on X is\nreturned.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csr_matrix``."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n    The predicted classes, or the predict values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "DecisionTreeClassifier",
      "docstring": {
        "description": "A decision tree classifier.\n\nRead more in the :ref:`User Guide <tree>`.",
        "parameters": {
          "criterion": {
            "type": "{\"gini\", \"entropy\", \"log_loss\"}, default=\"gini\"",
            "description": "The function to measure the quality of a split. Supported criteria are\n    \"gini\" for the Gini impurity and \"log_loss\" and \"entropy\" both for the\n    Shannon information gain, see :ref:`tree_mathematical_formulation`."
          },
          "splitter": {
            "type": "{\"best\", \"random\"}, default=\"best\"",
            "description": "The strategy used to choose the split at each node. Supported\n    strategies are \"best\" to choose the best split and \"random\" to choose\n    the best random split."
          },
          "max_depth": {
            "type": "int, default=None",
            "description": "The maximum depth of the tree. If None, then nodes are expanded until\n    all leaves are pure or until all leaves contain less than\n    min_samples_split samples."
          },
          "min_samples_split": {
            "type": "int or float, default=2",
            "description": "The minimum number of samples required to split an internal node:\n\n    - If int, then consider `min_samples_split` as the minimum number.\n    - If float, then `min_samples_split` is a fraction and\n      `ceil(min_samples_split * n_samples)` are the minimum\n      number of samples for each split.\n\n    .. versionchanged:: 0.18\n       Added float values for fractions."
          },
          "min_samples_leaf": {
            "type": "int or float, default=1",
            "description": "The minimum number of samples required to be at a leaf node.\n    A split point at any depth will only be considered if it leaves at\n    least ``min_samples_leaf`` training samples in each of the left and\n    right branches.  This may have the effect of smoothing the model,\n    especially in regression.\n\n    - If int, then consider `min_samples_leaf` as the minimum number.\n    - If float, then `min_samples_leaf` is a fraction and\n      `ceil(min_samples_leaf * n_samples)` are the minimum\n      number of samples for each node.\n\n    .. versionchanged:: 0.18\n       Added float values for fractions."
          },
          "min_weight_fraction_leaf": {
            "type": "float, default=0.0",
            "description": "The minimum weighted fraction of the sum total of weights (of all\n    the input samples) required to be at a leaf node. Samples have\n    equal weight when sample_weight is not provided."
          },
          "max_features": {
            "type": "int, float or {\"sqrt\", \"log2\"}, default=None",
            "description": "The number of features to consider when looking for the best split:\n\n    - If int, then consider `max_features` features at each split.\n    - If float, then `max_features` is a fraction and\n      `max(1, int(max_features * n_features_in_))` features are considered at\n      each split.\n    - If \"sqrt\", then `max_features=sqrt(n_features)`.\n    - If \"log2\", then `max_features=log2(n_features)`.\n    - If None, then `max_features=n_features`.\n\n    .. note::\n\n        The search for a split does not stop until at least one\n        valid partition of the node samples is found, even if it requires to\n        effectively inspect more than ``max_features`` features."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Controls the randomness of the estimator. The features are always\n    randomly permuted at each split, even if ``splitter`` is set to\n    ``\"best\"``. When ``max_features < n_features``, the algorithm will\n    select ``max_features`` at random at each split before finding the best\n    split among them. But the best found split may vary across different\n    runs, even if ``max_features=n_features``. That is the case, if the\n    improvement of the criterion is identical for several splits and one\n    split has to be selected at random. To obtain a deterministic behaviour\n    during fitting, ``random_state`` has to be fixed to an integer.\n    See :term:`Glossary <random_state>` for details."
          },
          "max_leaf_nodes": {
            "type": "int, default=None",
            "description": "Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n    Best nodes are defined as relative reduction in impurity.\n    If None then unlimited number of leaf nodes."
          },
          "min_impurity_decrease": {
            "type": "float, default=0.0",
            "description": "A node will be split if this split induces a decrease of the impurity\n    greater than or equal to this value.\n\n    The weighted impurity decrease equation is the following::\n\n        N_t / N * (impurity - N_t_R / N_t * right_impurity\n                            - N_t_L / N_t * left_impurity)\n\n    where ``N`` is the total number of samples, ``N_t`` is the number of\n    samples at the current node, ``N_t_L`` is the number of samples in the\n    left child, and ``N_t_R`` is the number of samples in the right child.\n\n    ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n    if ``sample_weight`` is passed.\n\n    .. versionadded:: 0.19"
          },
          "class_weight": {
            "type": "dict, list of dict or \"balanced\", default=None",
            "description": "Weights associated with classes in the form ``{class_label: weight}``.\n    If None, all classes are supposed to have weight one. For\n    multi-output problems, a list of dicts can be provided in the same\n    order as the columns of y.\n\n    Note that for multioutput (including multilabel) weights should be\n    defined for each class of every column in its own dict. For example,\n    for four-class multilabel classification weights should be\n    [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of\n    [{1:1}, {2:5}, {3:1}, {4:1}].\n\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``\n\n    For multi-output, the weights of each column of y will be multiplied.\n\n    Note that these weights will be multiplied with sample_weight (passed\n    through the fit method) if sample_weight is specified."
          },
          "ccp_alpha": {
            "type": "non-negative float, default=0.0",
            "description": "Complexity parameter used for Minimal Cost-Complexity Pruning. The\n    subtree with the largest cost complexity that is smaller than\n    ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n    :ref:`minimal_cost_complexity_pruning` for details. See\n    :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n    for an example of such pruning.\n\n    .. versionadded:: 0.22"
          },
          "monotonic_cst": {
            "type": "array-like of int of shape (n_features), default=None",
            "description": "Indicates the monotonicity constraint to enforce on each feature.\n      - 1: monotonic increase\n      - 0: no constraint\n      - -1: monotonic decrease\n\n    If monotonic_cst is None, no constraints are applied.\n\n    Monotonicity constraints are not supported for:\n      - multiclass classifications (i.e. when `n_classes > 2`),\n      - multioutput classifications (i.e. when `n_outputs_ > 1`),\n      - classifications trained on data with missing values.\n\n    The constraints hold over the probability of the positive class.\n\n    Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n    .. versionadded:: 1.4\n\nAttributes\n----------"
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,) or list of ndarray",
            "description": "The classes labels (single output problem),\n    or a list of arrays of class labels (multi-output problem)."
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": "The impurity-based feature importances.\n    The higher, the more important the feature.\n    The importance of a feature is computed as the (normalized)\n    total reduction of the criterion brought by that feature.  It is also\n    known as the Gini importance [4]_.\n\n    Warning: impurity-based feature importances can be misleading for\n    high cardinality features (many unique values). See\n    :func:`sklearn.inspection.permutation_importance` as an alternative."
          },
          "max_features_": {
            "type": "int",
            "description": "The inferred value of max_features."
          },
          "n_classes_": {
            "type": "int or list of int",
            "description": "The number of classes (for single output problems),\n    or a list containing the number of classes for each\n    output (for multi-output problems)."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_outputs_": {
            "type": "int",
            "description": "The number of outputs when ``fit`` is performed."
          },
          "tree_": {
            "type": "Tree instance",
            "description": "The underlying Tree object. Please refer to\n    ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n    :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n    for basic usage of these attributes."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "DecisionTreeRegressor : A decision tree regressor.",
        "notes": "The default values for the parameters controlling the size of the trees\n(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\nunpruned trees which can potentially be very large on some data sets. To\nreduce memory consumption, the complexity and size of the trees should be\ncontrolled by setting those parameter values.\n\nThe :meth:`predict` method operates using the :func:`numpy.argmax`\nfunction on the outputs of :meth:`predict_proba`. This means that in\ncase the highest predicted probabilities are tied, the classifier will\npredict the tied class with the lowest index in :term:`classes_`.\n\nReferences\n----------\n\n.. [1] https://en.wikipedia.org/wiki/Decision_tree_learning\n\n.. [2] L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification\n       and Regression Trees\", Wadsworth, Belmont, CA, 1984.\n\n.. [3] T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical\n       Learning\", Springer, 2009.\n\n.. [4] L. Breiman, and A. Cutler, \"Random Forests\",\n       https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm",
        "examples": ">>> from sklearn.datasets import load_iris\n>>> from sklearn.model_selection import cross_val_score\n>>> from sklearn.tree import DecisionTreeClassifier\n>>> clf = DecisionTreeClassifier(random_state=0)\n>>> iris = load_iris()\n>>> cross_val_score(clf, iris.data, iris.target, cv=10)\n...                             # doctest: +SKIP\n...\narray([ 1.     ,  0.93...,  0.86...,  0.93...,  0.93...,\n        0.93...,  0.93...,  1.     ,  0.93...,  1.      ])"
      },
      "methods": [
        {
          "name": "apply",
          "signature": "apply(self, X, check_input=True)",
          "docstring": {
            "description": "Return the index of the leaf that each sample is predicted as.\n\n.. versionadded:: 0.17",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csr_matrix``."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "X_leaves : array-like of shape (n_samples,)\n    For each datapoint x in X, return the index of the leaf x\n    ends up in. Leaves are numbered within\n    ``[0; self.tree_.node_count)``, possibly with gaps in the\n    numbering.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cost_complexity_pruning_path",
          "signature": "cost_complexity_pruning_path(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Compute the pruning path during Minimal Cost-Complexity Pruning.\n\nSee :ref:`minimal_cost_complexity_pruning` for details on the pruning\nprocess.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The training input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csc_matrix``."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "The target values (class labels) as integers or strings."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights. If None, then samples are equally weighted. Splits\n    that would create child nodes with net zero or negative weight are\n    ignored while searching for a split in each node. Splits are also\n    ignored if they would result in any single class carrying a\n    negative weight in either child node."
              }
            },
            "returns": "ccp_path : :class:`~sklearn.utils.Bunch`\n    Dictionary-like object, with the following attributes.\n\n    ccp_alphas : ndarray\n        Effective alphas of subtree during pruning.\n\n    impurities : ndarray\n        Sum of the impurities of the subtree leaves for the\n        corresponding alpha value in ``ccp_alphas``.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "decision_path",
          "signature": "decision_path(self, X, check_input=True)",
          "docstring": {
            "description": "Return the decision path in the tree.\n\n.. versionadded:: 0.18",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csr_matrix``."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "indicator : sparse matrix of shape (n_samples, n_nodes)\n    Return a node indicator CSR matrix where non zero elements\n    indicates that the samples goes through the nodes.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None, check_input=True)",
          "docstring": {
            "description": "Build a decision tree classifier from the training set (X, y).",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The training input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csc_matrix``."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "The target values (class labels) as integers or strings."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights. If None, then samples are equally weighted. Splits\n    that would create child nodes with net zero or negative weight are\n    ignored while searching for a split in each node. Splits are also\n    ignored if they would result in any single class carrying a\n    negative weight in either child node."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "self : DecisionTreeClassifier\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_depth",
          "signature": "get_depth(self)",
          "docstring": {
            "description": "Return the depth of the decision tree.\n\nThe depth of a tree is the maximum distance between the root\nand any leaf.",
            "parameters": {},
            "returns": "self.tree_.max_depth : int\n    The maximum depth of the tree.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_n_leaves",
          "signature": "get_n_leaves(self)",
          "docstring": {
            "description": "Return the number of leaves of the decision tree.",
            "parameters": {},
            "returns": "self.tree_.n_leaves : int\n    Number of leaves.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X, check_input=True)",
          "docstring": {
            "description": "Predict class or regression value for X.\n\nFor a classification model, the predicted class for each sample in X is\nreturned. For a regression model, the predicted value based on X is\nreturned.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csr_matrix``."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n    The predicted classes, or the predict values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_log_proba",
          "signature": "predict_log_proba(self, X)",
          "docstring": {
            "description": "Predict class log-probabilities of the input samples X.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csr_matrix``."
              }
            },
            "returns": "proba : ndarray of shape (n_samples, n_classes) or list of n_outputs             such arrays if n_outputs > 1\n    The class log-probabilities of the input samples. The order of the\n    classes corresponds to that in the attribute :term:`classes_`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_proba",
          "signature": "predict_proba(self, X, check_input=True)",
          "docstring": {
            "description": "Predict class probabilities of the input samples X.\n\nThe predicted class probability is the fraction of samples of the same\nclass in a leaf.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csr_matrix``."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "proba : ndarray of shape (n_samples, n_classes) or list of n_outputs             such arrays if n_outputs > 1\n    The class probabilities of the input samples. The order of the\n    classes corresponds to that in the attribute :term:`classes_`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the mean accuracy on the given test data and labels.\n\nIn multi-label classification, this is the subset accuracy\nwhich is a harsh metric since you require for each sample that\neach label set be correctly predicted.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True labels for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.tree._classes.DecisionTreeClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.tree._classes.DecisionTreeClassifier",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.tree._classes.DecisionTreeClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.tree._classes.DecisionTreeClassifier",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "DecisionTreeRegressor",
      "docstring": {
        "description": "A decision tree regressor.\n\nRead more in the :ref:`User Guide <tree>`.",
        "parameters": {
          "criterion": {
            "type": "{\"squared_error\", \"friedman_mse\", \"absolute_error\",             \"poisson\"}, default=\"squared_error\"",
            "description": "The function to measure the quality of a split. Supported criteria\n    are \"squared_error\" for the mean squared error, which is equal to\n    variance reduction as feature selection criterion and minimizes the L2\n    loss using the mean of each terminal node, \"friedman_mse\", which uses\n    mean squared error with Friedman's improvement score for potential\n    splits, \"absolute_error\" for the mean absolute error, which minimizes\n    the L1 loss using the median of each terminal node, and \"poisson\" which\n    uses reduction in the half mean Poisson deviance to find splits.\n\n    .. versionadded:: 0.18\n       Mean Absolute Error (MAE) criterion.\n\n    .. versionadded:: 0.24\n        Poisson deviance criterion."
          },
          "splitter": {
            "type": "{\"best\", \"random\"}, default=\"best\"",
            "description": "The strategy used to choose the split at each node. Supported\n    strategies are \"best\" to choose the best split and \"random\" to choose\n    the best random split."
          },
          "max_depth": {
            "type": "int, default=None",
            "description": "The maximum depth of the tree. If None, then nodes are expanded until\n    all leaves are pure or until all leaves contain less than\n    min_samples_split samples.\n\n    For an example of how ``max_depth`` influences the model, see\n    :ref:`sphx_glr_auto_examples_tree_plot_tree_regression.py`."
          },
          "min_samples_split": {
            "type": "int or float, default=2",
            "description": "The minimum number of samples required to split an internal node:\n\n    - If int, then consider `min_samples_split` as the minimum number.\n    - If float, then `min_samples_split` is a fraction and\n      `ceil(min_samples_split * n_samples)` are the minimum\n      number of samples for each split.\n\n    .. versionchanged:: 0.18\n       Added float values for fractions."
          },
          "min_samples_leaf": {
            "type": "int or float, default=1",
            "description": "The minimum number of samples required to be at a leaf node.\n    A split point at any depth will only be considered if it leaves at\n    least ``min_samples_leaf`` training samples in each of the left and\n    right branches.  This may have the effect of smoothing the model,\n    especially in regression.\n\n    - If int, then consider `min_samples_leaf` as the minimum number.\n    - If float, then `min_samples_leaf` is a fraction and\n      `ceil(min_samples_leaf * n_samples)` are the minimum\n      number of samples for each node.\n\n    .. versionchanged:: 0.18\n       Added float values for fractions."
          },
          "min_weight_fraction_leaf": {
            "type": "float, default=0.0",
            "description": "The minimum weighted fraction of the sum total of weights (of all\n    the input samples) required to be at a leaf node. Samples have\n    equal weight when sample_weight is not provided."
          },
          "max_features": {
            "type": "int, float or {\"sqrt\", \"log2\"}, default=None",
            "description": "The number of features to consider when looking for the best split:\n\n    - If int, then consider `max_features` features at each split.\n    - If float, then `max_features` is a fraction and\n      `max(1, int(max_features * n_features_in_))` features are considered at each\n      split.\n    - If \"sqrt\", then `max_features=sqrt(n_features)`.\n    - If \"log2\", then `max_features=log2(n_features)`.\n    - If None, then `max_features=n_features`.\n\n    Note: the search for a split does not stop until at least one\n    valid partition of the node samples is found, even if it requires to\n    effectively inspect more than ``max_features`` features."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Controls the randomness of the estimator. The features are always\n    randomly permuted at each split, even if ``splitter`` is set to\n    ``\"best\"``. When ``max_features < n_features``, the algorithm will\n    select ``max_features`` at random at each split before finding the best\n    split among them. But the best found split may vary across different\n    runs, even if ``max_features=n_features``. That is the case, if the\n    improvement of the criterion is identical for several splits and one\n    split has to be selected at random. To obtain a deterministic behaviour\n    during fitting, ``random_state`` has to be fixed to an integer.\n    See :term:`Glossary <random_state>` for details."
          },
          "max_leaf_nodes": {
            "type": "int, default=None",
            "description": "Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n    Best nodes are defined as relative reduction in impurity.\n    If None then unlimited number of leaf nodes."
          },
          "min_impurity_decrease": {
            "type": "float, default=0.0",
            "description": "A node will be split if this split induces a decrease of the impurity\n    greater than or equal to this value.\n\n    The weighted impurity decrease equation is the following::\n\n        N_t / N * (impurity - N_t_R / N_t * right_impurity\n                            - N_t_L / N_t * left_impurity)\n\n    where ``N`` is the total number of samples, ``N_t`` is the number of\n    samples at the current node, ``N_t_L`` is the number of samples in the\n    left child, and ``N_t_R`` is the number of samples in the right child.\n\n    ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n    if ``sample_weight`` is passed.\n\n    .. versionadded:: 0.19"
          },
          "ccp_alpha": {
            "type": "non-negative float, default=0.0",
            "description": "Complexity parameter used for Minimal Cost-Complexity Pruning. The\n    subtree with the largest cost complexity that is smaller than\n    ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n    :ref:`minimal_cost_complexity_pruning` for details. See\n    :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n    for an example of such pruning.\n\n    .. versionadded:: 0.22"
          },
          "monotonic_cst": {
            "type": "array-like of int of shape (n_features), default=None",
            "description": "Indicates the monotonicity constraint to enforce on each feature.\n      - 1: monotonic increase\n      - 0: no constraint\n      - -1: monotonic decrease\n\n    If monotonic_cst is None, no constraints are applied.\n\n    Monotonicity constraints are not supported for:\n      - multioutput regressions (i.e. when `n_outputs_ > 1`),\n      - regressions trained on data with missing values.\n\n    Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n    .. versionadded:: 1.4\n\nAttributes\n----------"
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": "The feature importances.\n    The higher, the more important the feature.\n    The importance of a feature is computed as the\n    (normalized) total reduction of the criterion brought\n    by that feature. It is also known as the Gini importance [4]_.\n\n    Warning: impurity-based feature importances can be misleading for\n    high cardinality features (many unique values). See\n    :func:`sklearn.inspection.permutation_importance` as an alternative."
          },
          "max_features_": {
            "type": "int",
            "description": "The inferred value of max_features."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_outputs_": {
            "type": "int",
            "description": "The number of outputs when ``fit`` is performed."
          },
          "tree_": {
            "type": "Tree instance",
            "description": "The underlying Tree object. Please refer to\n    ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n    :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n    for basic usage of these attributes."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "DecisionTreeClassifier : A decision tree classifier.",
        "notes": "The default values for the parameters controlling the size of the trees\n(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\nunpruned trees which can potentially be very large on some data sets. To\nreduce memory consumption, the complexity and size of the trees should be\ncontrolled by setting those parameter values.\n\nReferences\n----------\n\n.. [1] https://en.wikipedia.org/wiki/Decision_tree_learning\n\n.. [2] L. Breiman, J. Friedman, R. Olshen, and C. Stone, \"Classification\n       and Regression Trees\", Wadsworth, Belmont, CA, 1984.\n\n.. [3] T. Hastie, R. Tibshirani and J. Friedman. \"Elements of Statistical\n       Learning\", Springer, 2009.\n\n.. [4] L. Breiman, and A. Cutler, \"Random Forests\",\n       https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm",
        "examples": ">>> from sklearn.datasets import load_diabetes\n>>> from sklearn.model_selection import cross_val_score\n>>> from sklearn.tree import DecisionTreeRegressor\n>>> X, y = load_diabetes(return_X_y=True)\n>>> regressor = DecisionTreeRegressor(random_state=0)\n>>> cross_val_score(regressor, X, y, cv=10)\n...                    # doctest: +SKIP\n...\narray([-0.39..., -0.46...,  0.02...,  0.06..., -0.50...,\n       0.16...,  0.11..., -0.73..., -0.30..., -0.00...])"
      },
      "methods": [
        {
          "name": "apply",
          "signature": "apply(self, X, check_input=True)",
          "docstring": {
            "description": "Return the index of the leaf that each sample is predicted as.\n\n.. versionadded:: 0.17",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csr_matrix``."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "X_leaves : array-like of shape (n_samples,)\n    For each datapoint x in X, return the index of the leaf x\n    ends up in. Leaves are numbered within\n    ``[0; self.tree_.node_count)``, possibly with gaps in the\n    numbering.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cost_complexity_pruning_path",
          "signature": "cost_complexity_pruning_path(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Compute the pruning path during Minimal Cost-Complexity Pruning.\n\nSee :ref:`minimal_cost_complexity_pruning` for details on the pruning\nprocess.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The training input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csc_matrix``."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "The target values (class labels) as integers or strings."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights. If None, then samples are equally weighted. Splits\n    that would create child nodes with net zero or negative weight are\n    ignored while searching for a split in each node. Splits are also\n    ignored if they would result in any single class carrying a\n    negative weight in either child node."
              }
            },
            "returns": "ccp_path : :class:`~sklearn.utils.Bunch`\n    Dictionary-like object, with the following attributes.\n\n    ccp_alphas : ndarray\n        Effective alphas of subtree during pruning.\n\n    impurities : ndarray\n        Sum of the impurities of the subtree leaves for the\n        corresponding alpha value in ``ccp_alphas``.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "decision_path",
          "signature": "decision_path(self, X, check_input=True)",
          "docstring": {
            "description": "Return the decision path in the tree.\n\n.. versionadded:: 0.18",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csr_matrix``."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "indicator : sparse matrix of shape (n_samples, n_nodes)\n    Return a node indicator CSR matrix where non zero elements\n    indicates that the samples goes through the nodes.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None, check_input=True)",
          "docstring": {
            "description": "Build a decision tree regressor from the training set (X, y).",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The training input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csc_matrix``."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "The target values (real numbers). Use ``dtype=np.float64`` and\n    ``order='C'`` for maximum efficiency."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights. If None, then samples are equally weighted. Splits\n    that would create child nodes with net zero or negative weight are\n    ignored while searching for a split in each node."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "self : DecisionTreeRegressor\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_depth",
          "signature": "get_depth(self)",
          "docstring": {
            "description": "Return the depth of the decision tree.\n\nThe depth of a tree is the maximum distance between the root\nand any leaf.",
            "parameters": {},
            "returns": "self.tree_.max_depth : int\n    The maximum depth of the tree.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_n_leaves",
          "signature": "get_n_leaves(self)",
          "docstring": {
            "description": "Return the number of leaves of the decision tree.",
            "parameters": {},
            "returns": "self.tree_.n_leaves : int\n    Number of leaves.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X, check_input=True)",
          "docstring": {
            "description": "Predict class or regression value for X.\n\nFor a classification model, the predicted class for each sample in X is\nreturned. For a regression model, the predicted value based on X is\nreturned.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csr_matrix``."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n    The predicted classes, or the predict values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.tree._classes.DecisionTreeRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.tree._classes.DecisionTreeRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.tree._classes.DecisionTreeRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.tree._classes.DecisionTreeRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "ExtraTreeClassifier",
      "docstring": {
        "description": "An extremely randomized tree classifier.\n\nExtra-trees differ from classic decision trees in the way they are built.\nWhen looking for the best split to separate the samples of a node into two\ngroups, random splits are drawn for each of the `max_features` randomly\nselected features and the best split among those is chosen. When\n`max_features` is set 1, this amounts to building a totally random\ndecision tree.\n\nWarning: Extra-trees should only be used within ensemble methods.\n\nRead more in the :ref:`User Guide <tree>`.",
        "parameters": {
          "criterion": {
            "type": "{\"gini\", \"entropy\", \"log_loss\"}, default=\"gini\"",
            "description": "The function to measure the quality of a split. Supported criteria are\n    \"gini\" for the Gini impurity and \"log_loss\" and \"entropy\" both for the\n    Shannon information gain, see :ref:`tree_mathematical_formulation`."
          },
          "splitter": {
            "type": "{\"random\", \"best\"}, default=\"random\"",
            "description": "The strategy used to choose the split at each node. Supported\n    strategies are \"best\" to choose the best split and \"random\" to choose\n    the best random split."
          },
          "max_depth": {
            "type": "int, default=None",
            "description": "The maximum depth of the tree. If None, then nodes are expanded until\n    all leaves are pure or until all leaves contain less than\n    min_samples_split samples."
          },
          "min_samples_split": {
            "type": "int or float, default=2",
            "description": "The minimum number of samples required to split an internal node:\n\n    - If int, then consider `min_samples_split` as the minimum number.\n    - If float, then `min_samples_split` is a fraction and\n      `ceil(min_samples_split * n_samples)` are the minimum\n      number of samples for each split.\n\n    .. versionchanged:: 0.18\n       Added float values for fractions."
          },
          "min_samples_leaf": {
            "type": "int or float, default=1",
            "description": "The minimum number of samples required to be at a leaf node.\n    A split point at any depth will only be considered if it leaves at\n    least ``min_samples_leaf`` training samples in each of the left and\n    right branches.  This may have the effect of smoothing the model,\n    especially in regression.\n\n    - If int, then consider `min_samples_leaf` as the minimum number.\n    - If float, then `min_samples_leaf` is a fraction and\n      `ceil(min_samples_leaf * n_samples)` are the minimum\n      number of samples for each node.\n\n    .. versionchanged:: 0.18\n       Added float values for fractions."
          },
          "min_weight_fraction_leaf": {
            "type": "float, default=0.0",
            "description": "The minimum weighted fraction of the sum total of weights (of all\n    the input samples) required to be at a leaf node. Samples have\n    equal weight when sample_weight is not provided."
          },
          "max_features": {
            "type": "int, float, {\"sqrt\", \"log2\"} or None, default=\"sqrt\"",
            "description": "The number of features to consider when looking for the best split:\n\n    - If int, then consider `max_features` features at each split.\n    - If float, then `max_features` is a fraction and\n      `max(1, int(max_features * n_features_in_))` features are considered at\n      each split.\n    - If \"sqrt\", then `max_features=sqrt(n_features)`.\n    - If \"log2\", then `max_features=log2(n_features)`.\n    - If None, then `max_features=n_features`.\n\n    .. versionchanged:: 1.1\n        The default of `max_features` changed from `\"auto\"` to `\"sqrt\"`.\n\n    Note: the search for a split does not stop until at least one\n    valid partition of the node samples is found, even if it requires to\n    effectively inspect more than ``max_features`` features."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Used to pick randomly the `max_features` used at each split.\n    See :term:`Glossary <random_state>` for details."
          },
          "max_leaf_nodes": {
            "type": "int, default=None",
            "description": "Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n    Best nodes are defined as relative reduction in impurity.\n    If None then unlimited number of leaf nodes."
          },
          "min_impurity_decrease": {
            "type": "float, default=0.0",
            "description": "A node will be split if this split induces a decrease of the impurity\n    greater than or equal to this value.\n\n    The weighted impurity decrease equation is the following::\n\n        N_t / N * (impurity - N_t_R / N_t * right_impurity\n                            - N_t_L / N_t * left_impurity)\n\n    where ``N`` is the total number of samples, ``N_t`` is the number of\n    samples at the current node, ``N_t_L`` is the number of samples in the\n    left child, and ``N_t_R`` is the number of samples in the right child.\n\n    ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n    if ``sample_weight`` is passed.\n\n    .. versionadded:: 0.19"
          },
          "class_weight": {
            "type": "dict, list of dict or \"balanced\", default=None",
            "description": "Weights associated with classes in the form ``{class_label: weight}``.\n    If None, all classes are supposed to have weight one. For\n    multi-output problems, a list of dicts can be provided in the same\n    order as the columns of y.\n\n    Note that for multioutput (including multilabel) weights should be\n    defined for each class of every column in its own dict. For example,\n    for four-class multilabel classification weights should be\n    [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of\n    [{1:1}, {2:5}, {3:1}, {4:1}].\n\n    The \"balanced\" mode uses the values of y to automatically adjust\n    weights inversely proportional to class frequencies in the input data\n    as ``n_samples / (n_classes * np.bincount(y))``\n\n    For multi-output, the weights of each column of y will be multiplied.\n\n    Note that these weights will be multiplied with sample_weight (passed\n    through the fit method) if sample_weight is specified."
          },
          "ccp_alpha": {
            "type": "non-negative float, default=0.0",
            "description": "Complexity parameter used for Minimal Cost-Complexity Pruning. The\n    subtree with the largest cost complexity that is smaller than\n    ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n    :ref:`minimal_cost_complexity_pruning` for details. See\n    :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n    for an example of such pruning.\n\n    .. versionadded:: 0.22"
          },
          "monotonic_cst": {
            "type": "array-like of int of shape (n_features), default=None",
            "description": "Indicates the monotonicity constraint to enforce on each feature.\n      - 1: monotonic increase\n      - 0: no constraint\n      - -1: monotonic decrease\n\n    If monotonic_cst is None, no constraints are applied.\n\n    Monotonicity constraints are not supported for:\n      - multiclass classifications (i.e. when `n_classes > 2`),\n      - multioutput classifications (i.e. when `n_outputs_ > 1`),\n      - classifications trained on data with missing values.\n\n    The constraints hold over the probability of the positive class.\n\n    Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n    .. versionadded:: 1.4\n\nAttributes\n----------"
          },
          "classes_": {
            "type": "ndarray of shape (n_classes,) or list of ndarray",
            "description": "The classes labels (single output problem),\n    or a list of arrays of class labels (multi-output problem)."
          },
          "max_features_": {
            "type": "int",
            "description": "The inferred value of max_features."
          },
          "n_classes_": {
            "type": "int or list of int",
            "description": "The number of classes (for single output problems),\n    or a list containing the number of classes for each\n    output (for multi-output problems)."
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": "The impurity-based feature importances.\n    The higher, the more important the feature.\n    The importance of a feature is computed as the (normalized)\n    total reduction of the criterion brought by that feature.  It is also\n    known as the Gini importance.\n\n    Warning: impurity-based feature importances can be misleading for\n    high cardinality features (many unique values). See\n    :func:`sklearn.inspection.permutation_importance` as an alternative."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "n_outputs_": {
            "type": "int",
            "description": "The number of outputs when ``fit`` is performed."
          },
          "tree_": {
            "type": "Tree instance",
            "description": "The underlying Tree object. Please refer to\n    ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n    :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n    for basic usage of these attributes."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "ExtraTreeRegressor : An extremely randomized tree regressor.\nsklearn.ensemble.ExtraTreesClassifier : An extra-trees classifier.\nsklearn.ensemble.ExtraTreesRegressor : An extra-trees regressor.\nsklearn.ensemble.RandomForestClassifier : A random forest classifier.\nsklearn.ensemble.RandomForestRegressor : A random forest regressor.\nsklearn.ensemble.RandomTreesEmbedding : An ensemble of\n    totally random trees.",
        "notes": "The default values for the parameters controlling the size of the trees\n(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\nunpruned trees which can potentially be very large on some data sets. To\nreduce memory consumption, the complexity and size of the trees should be\ncontrolled by setting those parameter values.\n\nReferences\n----------\n\n.. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\",\n       Machine Learning, 63(1), 3-42, 2006.",
        "examples": ">>> from sklearn.datasets import load_iris\n>>> from sklearn.model_selection import train_test_split\n>>> from sklearn.ensemble import BaggingClassifier\n>>> from sklearn.tree import ExtraTreeClassifier\n>>> X, y = load_iris(return_X_y=True)\n>>> X_train, X_test, y_train, y_test = train_test_split(\n...    X, y, random_state=0)\n>>> extra_tree = ExtraTreeClassifier(random_state=0)\n>>> cls = BaggingClassifier(extra_tree, random_state=0).fit(\n...    X_train, y_train)\n>>> cls.score(X_test, y_test)\n0.8947..."
      },
      "methods": [
        {
          "name": "apply",
          "signature": "apply(self, X, check_input=True)",
          "docstring": {
            "description": "Return the index of the leaf that each sample is predicted as.\n\n.. versionadded:: 0.17",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csr_matrix``."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "X_leaves : array-like of shape (n_samples,)\n    For each datapoint x in X, return the index of the leaf x\n    ends up in. Leaves are numbered within\n    ``[0; self.tree_.node_count)``, possibly with gaps in the\n    numbering.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cost_complexity_pruning_path",
          "signature": "cost_complexity_pruning_path(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Compute the pruning path during Minimal Cost-Complexity Pruning.\n\nSee :ref:`minimal_cost_complexity_pruning` for details on the pruning\nprocess.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The training input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csc_matrix``."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "The target values (class labels) as integers or strings."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights. If None, then samples are equally weighted. Splits\n    that would create child nodes with net zero or negative weight are\n    ignored while searching for a split in each node. Splits are also\n    ignored if they would result in any single class carrying a\n    negative weight in either child node."
              }
            },
            "returns": "ccp_path : :class:`~sklearn.utils.Bunch`\n    Dictionary-like object, with the following attributes.\n\n    ccp_alphas : ndarray\n        Effective alphas of subtree during pruning.\n\n    impurities : ndarray\n        Sum of the impurities of the subtree leaves for the\n        corresponding alpha value in ``ccp_alphas``.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "decision_path",
          "signature": "decision_path(self, X, check_input=True)",
          "docstring": {
            "description": "Return the decision path in the tree.\n\n.. versionadded:: 0.18",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csr_matrix``."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "indicator : sparse matrix of shape (n_samples, n_nodes)\n    Return a node indicator CSR matrix where non zero elements\n    indicates that the samples goes through the nodes.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None, check_input=True)",
          "docstring": {
            "description": "Build a decision tree classifier from the training set (X, y).",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The training input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csc_matrix``."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "The target values (class labels) as integers or strings."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights. If None, then samples are equally weighted. Splits\n    that would create child nodes with net zero or negative weight are\n    ignored while searching for a split in each node. Splits are also\n    ignored if they would result in any single class carrying a\n    negative weight in either child node."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "self : DecisionTreeClassifier\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_depth",
          "signature": "get_depth(self)",
          "docstring": {
            "description": "Return the depth of the decision tree.\n\nThe depth of a tree is the maximum distance between the root\nand any leaf.",
            "parameters": {},
            "returns": "self.tree_.max_depth : int\n    The maximum depth of the tree.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_n_leaves",
          "signature": "get_n_leaves(self)",
          "docstring": {
            "description": "Return the number of leaves of the decision tree.",
            "parameters": {},
            "returns": "self.tree_.n_leaves : int\n    Number of leaves.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X, check_input=True)",
          "docstring": {
            "description": "Predict class or regression value for X.\n\nFor a classification model, the predicted class for each sample in X is\nreturned. For a regression model, the predicted value based on X is\nreturned.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csr_matrix``."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n    The predicted classes, or the predict values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_log_proba",
          "signature": "predict_log_proba(self, X)",
          "docstring": {
            "description": "Predict class log-probabilities of the input samples X.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csr_matrix``."
              }
            },
            "returns": "proba : ndarray of shape (n_samples, n_classes) or list of n_outputs             such arrays if n_outputs > 1\n    The class log-probabilities of the input samples. The order of the\n    classes corresponds to that in the attribute :term:`classes_`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict_proba",
          "signature": "predict_proba(self, X, check_input=True)",
          "docstring": {
            "description": "Predict class probabilities of the input samples X.\n\nThe predicted class probability is the fraction of samples of the same\nclass in a leaf.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csr_matrix``."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "proba : ndarray of shape (n_samples, n_classes) or list of n_outputs             such arrays if n_outputs > 1\n    The class probabilities of the input samples. The order of the\n    classes corresponds to that in the attribute :term:`classes_`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the mean accuracy on the given test data and labels.\n\nIn multi-label classification, this is the subset accuracy\nwhich is a harsh metric since you require for each sample that\neach label set be correctly predicted.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True labels for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    Mean accuracy of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.tree._classes.ExtraTreeClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.tree._classes.ExtraTreeClassifier",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.tree._classes.ExtraTreeClassifier, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.tree._classes.ExtraTreeClassifier",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    },
    {
      "name": "ExtraTreeRegressor",
      "docstring": {
        "description": "An extremely randomized tree regressor.\n\nExtra-trees differ from classic decision trees in the way they are built.\nWhen looking for the best split to separate the samples of a node into two\ngroups, random splits are drawn for each of the `max_features` randomly\nselected features and the best split among those is chosen. When\n`max_features` is set 1, this amounts to building a totally random\ndecision tree.\n\nWarning: Extra-trees should only be used within ensemble methods.\n\nRead more in the :ref:`User Guide <tree>`.",
        "parameters": {
          "criterion": {
            "type": "{\"squared_error\", \"friedman_mse\", \"absolute_error\", \"poisson\"},             default=\"squared_error\"",
            "description": "The function to measure the quality of a split. Supported criteria\n    are \"squared_error\" for the mean squared error, which is equal to\n    variance reduction as feature selection criterion and minimizes the L2\n    loss using the mean of each terminal node, \"friedman_mse\", which uses\n    mean squared error with Friedman's improvement score for potential\n    splits, \"absolute_error\" for the mean absolute error, which minimizes\n    the L1 loss using the median of each terminal node, and \"poisson\" which\n    uses reduction in Poisson deviance to find splits.\n\n    .. versionadded:: 0.18\n       Mean Absolute Error (MAE) criterion.\n\n    .. versionadded:: 0.24\n        Poisson deviance criterion."
          },
          "splitter": {
            "type": "{\"random\", \"best\"}, default=\"random\"",
            "description": "The strategy used to choose the split at each node. Supported\n    strategies are \"best\" to choose the best split and \"random\" to choose\n    the best random split."
          },
          "max_depth": {
            "type": "int, default=None",
            "description": "The maximum depth of the tree. If None, then nodes are expanded until\n    all leaves are pure or until all leaves contain less than\n    min_samples_split samples."
          },
          "min_samples_split": {
            "type": "int or float, default=2",
            "description": "The minimum number of samples required to split an internal node:\n\n    - If int, then consider `min_samples_split` as the minimum number.\n    - If float, then `min_samples_split` is a fraction and\n      `ceil(min_samples_split * n_samples)` are the minimum\n      number of samples for each split.\n\n    .. versionchanged:: 0.18\n       Added float values for fractions."
          },
          "min_samples_leaf": {
            "type": "int or float, default=1",
            "description": "The minimum number of samples required to be at a leaf node.\n    A split point at any depth will only be considered if it leaves at\n    least ``min_samples_leaf`` training samples in each of the left and\n    right branches.  This may have the effect of smoothing the model,\n    especially in regression.\n\n    - If int, then consider `min_samples_leaf` as the minimum number.\n    - If float, then `min_samples_leaf` is a fraction and\n      `ceil(min_samples_leaf * n_samples)` are the minimum\n      number of samples for each node.\n\n    .. versionchanged:: 0.18\n       Added float values for fractions."
          },
          "min_weight_fraction_leaf": {
            "type": "float, default=0.0",
            "description": "The minimum weighted fraction of the sum total of weights (of all\n    the input samples) required to be at a leaf node. Samples have\n    equal weight when sample_weight is not provided."
          },
          "max_features": {
            "type": "int, float, {\"sqrt\", \"log2\"} or None, default=1.0",
            "description": "The number of features to consider when looking for the best split:\n\n    - If int, then consider `max_features` features at each split.\n    - If float, then `max_features` is a fraction and\n      `max(1, int(max_features * n_features_in_))` features are considered at each\n      split.\n    - If \"sqrt\", then `max_features=sqrt(n_features)`.\n    - If \"log2\", then `max_features=log2(n_features)`.\n    - If None, then `max_features=n_features`.\n\n    .. versionchanged:: 1.1\n        The default of `max_features` changed from `\"auto\"` to `1.0`.\n\n    Note: the search for a split does not stop until at least one\n    valid partition of the node samples is found, even if it requires to\n    effectively inspect more than ``max_features`` features."
          },
          "random_state": {
            "type": "int, RandomState instance or None, default=None",
            "description": "Used to pick randomly the `max_features` used at each split.\n    See :term:`Glossary <random_state>` for details."
          },
          "min_impurity_decrease": {
            "type": "float, default=0.0",
            "description": "A node will be split if this split induces a decrease of the impurity\n    greater than or equal to this value.\n\n    The weighted impurity decrease equation is the following::\n\n        N_t / N * (impurity - N_t_R / N_t * right_impurity\n                            - N_t_L / N_t * left_impurity)\n\n    where ``N`` is the total number of samples, ``N_t`` is the number of\n    samples at the current node, ``N_t_L`` is the number of samples in the\n    left child, and ``N_t_R`` is the number of samples in the right child.\n\n    ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,\n    if ``sample_weight`` is passed.\n\n    .. versionadded:: 0.19"
          },
          "max_leaf_nodes": {
            "type": "int, default=None",
            "description": "Grow a tree with ``max_leaf_nodes`` in best-first fashion.\n    Best nodes are defined as relative reduction in impurity.\n    If None then unlimited number of leaf nodes."
          },
          "ccp_alpha": {
            "type": "non-negative float, default=0.0",
            "description": "Complexity parameter used for Minimal Cost-Complexity Pruning. The\n    subtree with the largest cost complexity that is smaller than\n    ``ccp_alpha`` will be chosen. By default, no pruning is performed. See\n    :ref:`minimal_cost_complexity_pruning` for details. See\n    :ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`\n    for an example of such pruning.\n\n    .. versionadded:: 0.22"
          },
          "monotonic_cst": {
            "type": "array-like of int of shape (n_features), default=None",
            "description": "Indicates the monotonicity constraint to enforce on each feature.\n      - 1: monotonic increase\n      - 0: no constraint\n      - -1: monotonic decrease\n\n    If monotonic_cst is None, no constraints are applied.\n\n    Monotonicity constraints are not supported for:\n      - multioutput regressions (i.e. when `n_outputs_ > 1`),\n      - regressions trained on data with missing values.\n\n    Read more in the :ref:`User Guide <monotonic_cst_gbdt>`.\n\n    .. versionadded:: 1.4\n\nAttributes\n----------"
          },
          "max_features_": {
            "type": "int",
            "description": "The inferred value of max_features."
          },
          "n_features_in_": {
            "type": "int",
            "description": "Number of features seen during :term:`fit`.\n\n    .. versionadded:: 0.24"
          },
          "feature_names_in_": {
            "type": "ndarray of shape (`n_features_in_`,)",
            "description": "Names of features seen during :term:`fit`. Defined only when `X`\n    has feature names that are all strings.\n\n    .. versionadded:: 1.0"
          },
          "feature_importances_": {
            "type": "ndarray of shape (n_features,)",
            "description": "Return impurity-based feature importances (the higher, the more\n    important the feature).\n\n    Warning: impurity-based feature importances can be misleading for\n    high cardinality features (many unique values). See\n    :func:`sklearn.inspection.permutation_importance` as an alternative."
          },
          "n_outputs_": {
            "type": "int",
            "description": "The number of outputs when ``fit`` is performed."
          },
          "tree_": {
            "type": "Tree instance",
            "description": "The underlying Tree object. Please refer to\n    ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and\n    :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`\n    for basic usage of these attributes."
          }
        },
        "returns": "",
        "raises": "",
        "see_also": "ExtraTreeClassifier : An extremely randomized tree classifier.\nsklearn.ensemble.ExtraTreesClassifier : An extra-trees classifier.\nsklearn.ensemble.ExtraTreesRegressor : An extra-trees regressor.",
        "notes": "The default values for the parameters controlling the size of the trees\n(e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and\nunpruned trees which can potentially be very large on some data sets. To\nreduce memory consumption, the complexity and size of the trees should be\ncontrolled by setting those parameter values.\n\nReferences\n----------\n\n.. [1] P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\",\n       Machine Learning, 63(1), 3-42, 2006.",
        "examples": ">>> from sklearn.datasets import load_diabetes\n>>> from sklearn.model_selection import train_test_split\n>>> from sklearn.ensemble import BaggingRegressor\n>>> from sklearn.tree import ExtraTreeRegressor\n>>> X, y = load_diabetes(return_X_y=True)\n>>> X_train, X_test, y_train, y_test = train_test_split(\n...     X, y, random_state=0)\n>>> extra_tree = ExtraTreeRegressor(random_state=0)\n>>> reg = BaggingRegressor(extra_tree, random_state=0).fit(\n...     X_train, y_train)\n>>> reg.score(X_test, y_test)\n0.33..."
      },
      "methods": [
        {
          "name": "apply",
          "signature": "apply(self, X, check_input=True)",
          "docstring": {
            "description": "Return the index of the leaf that each sample is predicted as.\n\n.. versionadded:: 0.17",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csr_matrix``."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "X_leaves : array-like of shape (n_samples,)\n    For each datapoint x in X, return the index of the leaf x\n    ends up in. Leaves are numbered within\n    ``[0; self.tree_.node_count)``, possibly with gaps in the\n    numbering.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "cost_complexity_pruning_path",
          "signature": "cost_complexity_pruning_path(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Compute the pruning path during Minimal Cost-Complexity Pruning.\n\nSee :ref:`minimal_cost_complexity_pruning` for details on the pruning\nprocess.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The training input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csc_matrix``."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "The target values (class labels) as integers or strings."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights. If None, then samples are equally weighted. Splits\n    that would create child nodes with net zero or negative weight are\n    ignored while searching for a split in each node. Splits are also\n    ignored if they would result in any single class carrying a\n    negative weight in either child node."
              }
            },
            "returns": "ccp_path : :class:`~sklearn.utils.Bunch`\n    Dictionary-like object, with the following attributes.\n\n    ccp_alphas : ndarray\n        Effective alphas of subtree during pruning.\n\n    impurities : ndarray\n        Sum of the impurities of the subtree leaves for the\n        corresponding alpha value in ``ccp_alphas``.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "decision_path",
          "signature": "decision_path(self, X, check_input=True)",
          "docstring": {
            "description": "Return the decision path in the tree.\n\n.. versionadded:: 0.18",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csr_matrix``."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "indicator : sparse matrix of shape (n_samples, n_nodes)\n    Return a node indicator CSR matrix where non zero elements\n    indicates that the samples goes through the nodes.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "fit",
          "signature": "fit(self, X, y, sample_weight=None, check_input=True)",
          "docstring": {
            "description": "Build a decision tree regressor from the training set (X, y).",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The training input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csc_matrix``."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "The target values (real numbers). Use ``dtype=np.float64`` and\n    ``order='C'`` for maximum efficiency."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights. If None, then samples are equally weighted. Splits\n    that would create child nodes with net zero or negative weight are\n    ignored while searching for a split in each node."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "self : DecisionTreeRegressor\n    Fitted estimator.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_depth",
          "signature": "get_depth(self)",
          "docstring": {
            "description": "Return the depth of the decision tree.\n\nThe depth of a tree is the maximum distance between the root\nand any leaf.",
            "parameters": {},
            "returns": "self.tree_.max_depth : int\n    The maximum depth of the tree.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_metadata_routing",
          "signature": "get_metadata_routing(self)",
          "docstring": {
            "description": "Get metadata routing of this object.\n\nPlease check :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.",
            "parameters": {},
            "returns": "routing : MetadataRequest\n    A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n    routing information.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_n_leaves",
          "signature": "get_n_leaves(self)",
          "docstring": {
            "description": "Return the number of leaves of the decision tree.",
            "parameters": {},
            "returns": "self.tree_.n_leaves : int\n    Number of leaves.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "get_params",
          "signature": "get_params(self, deep=True)",
          "docstring": {
            "description": "Get parameters for this estimator.",
            "parameters": {
              "deep": {
                "type": "bool, default=True",
                "description": "If True, will return the parameters for this estimator and\n    contained subobjects that are estimators."
              }
            },
            "returns": "params : dict\n    Parameter names mapped to their values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "predict",
          "signature": "predict(self, X, check_input=True)",
          "docstring": {
            "description": "Predict class or regression value for X.\n\nFor a classification model, the predicted class for each sample in X is\nreturned. For a regression model, the predicted value based on X is\nreturned.",
            "parameters": {
              "X": {
                "type": "{array-like, sparse matrix} of shape (n_samples, n_features)",
                "description": "The input samples. Internally, it will be converted to\n    ``dtype=np.float32`` and if a sparse matrix is provided\n    to a sparse ``csr_matrix``."
              },
              "check_input": {
                "type": "bool, default=True",
                "description": "Allow to bypass several input checking.\n    Don't use this parameter unless you know what you're doing."
              }
            },
            "returns": "y : array-like of shape (n_samples,) or (n_samples, n_outputs)\n    The predicted classes, or the predict values.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "score",
          "signature": "score(self, X, y, sample_weight=None)",
          "docstring": {
            "description": "Return the coefficient of determination of the prediction.\n\nThe coefficient of determination :math:`R^2` is defined as\n:math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual\nsum of squares ``((y_true - y_pred)** 2).sum()`` and :math:`v`\nis the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``.\nThe best possible score is 1.0 and it can be negative (because the\nmodel can be arbitrarily worse). A constant model that always predicts\nthe expected value of `y`, disregarding the input features, would get\na :math:`R^2` score of 0.0.",
            "parameters": {
              "X": {
                "type": "array-like of shape (n_samples, n_features)",
                "description": "Test samples. For some estimators this may be a precomputed\n    kernel matrix or a list of generic objects instead with shape\n    ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted``\n    is the number of samples used in the fitting for the estimator."
              },
              "y": {
                "type": "array-like of shape (n_samples,) or (n_samples, n_outputs)",
                "description": "True values for `X`."
              },
              "sample_weight": {
                "type": "array-like of shape (n_samples,), default=None",
                "description": "Sample weights."
              }
            },
            "returns": "score : float\n    :math:`R^2` of ``self.predict(X)`` w.r.t. `y`.",
            "raises": "",
            "see_also": "",
            "notes": "The :math:`R^2` score used when calling ``score`` on a regressor uses\n``multioutput='uniform_average'`` from version 0.23 to keep consistent\nwith default value of :func:`~sklearn.metrics.r2_score`.\nThis influences the ``score`` method of all the multioutput\nregressors (except for\n:class:`~sklearn.multioutput.MultiOutputRegressor`).",
            "examples": ""
          }
        },
        {
          "name": "set_fit_request",
          "signature": "set_fit_request(self: sklearn.tree._classes.ExtraTreeRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.tree._classes.ExtraTreeRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``fit`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``fit`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``fit``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``fit``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_params",
          "signature": "set_params(self, **params)",
          "docstring": {
            "description": "Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as :class:`~sklearn.pipeline.Pipeline`). The latter have\nparameters of the form ``<component>__<parameter>`` so that it's\npossible to update each component of a nested object.",
            "parameters": {
              "**params": {
                "type": "dict",
                "description": "Estimator parameters."
              }
            },
            "returns": "self : estimator instance\n    Estimator instance.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        },
        {
          "name": "set_score_request",
          "signature": "set_score_request(self: sklearn.tree._classes.ExtraTreeRegressor, *, sample_weight: Union[bool, NoneType, str] = '$UNCHANGED$') -> sklearn.tree._classes.ExtraTreeRegressor",
          "docstring": {
            "description": "Request metadata passed to the ``score`` method.\n\nNote that this method is only relevant if\n``enable_metadata_routing=True`` (see :func:`sklearn.set_config`).\nPlease see :ref:`User Guide <metadata_routing>` on how the routing\nmechanism works.\n\nThe options for each parameter are:\n\n- ``True``: metadata is requested, and passed to ``score`` if provided. The request is ignored if metadata is not provided.\n\n- ``False``: metadata is not requested and the meta-estimator will not pass it to ``score``.\n\n- ``None``: metadata is not requested, and the meta-estimator will raise an error if the user provides it.\n\n- ``str``: metadata should be passed to the meta-estimator with this given alias instead of the original name.\n\nThe default (``sklearn.utils.metadata_routing.UNCHANGED``) retains the\nexisting request. This allows you to change the request for some\nparameters and not others.\n\n.. versionadded:: 1.3\n\n.. note::\n    This method is only relevant if this estimator is used as a\n    sub-estimator of a meta-estimator, e.g. used inside a\n    :class:`~sklearn.pipeline.Pipeline`. Otherwise it has no effect.",
            "parameters": {
              "sample_weight": {
                "type": "str, True, False, or None,                     default=sklearn.utils.metadata_routing.UNCHANGED",
                "description": "Metadata routing for ``sample_weight`` parameter in ``score``."
              }
            },
            "returns": "self : object\n    The updated object.",
            "raises": "",
            "see_also": "",
            "notes": "",
            "examples": ""
          }
        }
      ]
    }
  ],
  "constants": []
}